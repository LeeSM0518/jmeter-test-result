/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6787.0, "series": [{"data": [[0.0, 1.0], [0.1, 22.0], [0.2, 33.0], [0.3, 37.0], [0.4, 41.0], [0.5, 43.0], [0.6, 46.0], [0.7, 48.0], [0.8, 49.0], [0.9, 51.0], [1.0, 52.0], [1.1, 53.0], [1.2, 54.0], [1.3, 56.0], [1.4, 57.0], [1.5, 58.0], [1.6, 58.0], [1.7, 59.0], [1.8, 61.0], [1.9, 63.0], [2.0, 64.0], [2.1, 64.0], [2.2, 67.0], [2.3, 68.0], [2.4, 71.0], [2.5, 72.0], [2.6, 72.0], [2.7, 74.0], [2.8, 75.0], [2.9, 76.0], [3.0, 78.0], [3.1, 79.0], [3.2, 80.0], [3.3, 82.0], [3.4, 84.0], [3.5, 86.0], [3.6, 88.0], [3.7, 89.0], [3.8, 90.0], [3.9, 92.0], [4.0, 93.0], [4.1, 94.0], [4.2, 96.0], [4.3, 97.0], [4.4, 100.0], [4.5, 102.0], [4.6, 103.0], [4.7, 104.0], [4.8, 105.0], [4.9, 106.0], [5.0, 107.0], [5.1, 108.0], [5.2, 110.0], [5.3, 110.0], [5.4, 110.0], [5.5, 111.0], [5.6, 111.0], [5.7, 112.0], [5.8, 112.0], [5.9, 112.0], [6.0, 113.0], [6.1, 113.0], [6.2, 113.0], [6.3, 114.0], [6.4, 115.0], [6.5, 116.0], [6.6, 116.0], [6.7, 117.0], [6.8, 118.0], [6.9, 118.0], [7.0, 119.0], [7.1, 120.0], [7.2, 120.0], [7.3, 120.0], [7.4, 121.0], [7.5, 122.0], [7.6, 122.0], [7.7, 123.0], [7.8, 123.0], [7.9, 124.0], [8.0, 125.0], [8.1, 126.0], [8.2, 127.0], [8.3, 128.0], [8.4, 128.0], [8.5, 129.0], [8.6, 129.0], [8.7, 130.0], [8.8, 131.0], [8.9, 131.0], [9.0, 132.0], [9.1, 133.0], [9.2, 134.0], [9.3, 136.0], [9.4, 137.0], [9.5, 138.0], [9.6, 140.0], [9.7, 141.0], [9.8, 142.0], [9.9, 144.0], [10.0, 147.0], [10.1, 149.0], [10.2, 151.0], [10.3, 154.0], [10.4, 156.0], [10.5, 157.0], [10.6, 159.0], [10.7, 161.0], [10.8, 162.0], [10.9, 163.0], [11.0, 164.0], [11.1, 165.0], [11.2, 166.0], [11.3, 167.0], [11.4, 168.0], [11.5, 169.0], [11.6, 170.0], [11.7, 171.0], [11.8, 171.0], [11.9, 172.0], [12.0, 173.0], [12.1, 173.0], [12.2, 174.0], [12.3, 175.0], [12.4, 175.0], [12.5, 176.0], [12.6, 176.0], [12.7, 177.0], [12.8, 178.0], [12.9, 178.0], [13.0, 179.0], [13.1, 180.0], [13.2, 180.0], [13.3, 180.0], [13.4, 181.0], [13.5, 181.0], [13.6, 181.0], [13.7, 182.0], [13.8, 182.0], [13.9, 182.0], [14.0, 183.0], [14.1, 183.0], [14.2, 183.0], [14.3, 184.0], [14.4, 184.0], [14.5, 184.0], [14.6, 184.0], [14.7, 184.0], [14.8, 185.0], [14.9, 185.0], [15.0, 186.0], [15.1, 186.0], [15.2, 186.0], [15.3, 187.0], [15.4, 187.0], [15.5, 188.0], [15.6, 188.0], [15.7, 188.0], [15.8, 188.0], [15.9, 188.0], [16.0, 189.0], [16.1, 189.0], [16.2, 189.0], [16.3, 190.0], [16.4, 190.0], [16.5, 190.0], [16.6, 190.0], [16.7, 190.0], [16.8, 191.0], [16.9, 191.0], [17.0, 191.0], [17.1, 191.0], [17.2, 192.0], [17.3, 192.0], [17.4, 192.0], [17.5, 192.0], [17.6, 193.0], [17.7, 193.0], [17.8, 194.0], [17.9, 194.0], [18.0, 194.0], [18.1, 195.0], [18.2, 195.0], [18.3, 195.0], [18.4, 195.0], [18.5, 195.0], [18.6, 196.0], [18.7, 196.0], [18.8, 196.0], [18.9, 196.0], [19.0, 197.0], [19.1, 197.0], [19.2, 197.0], [19.3, 197.0], [19.4, 198.0], [19.5, 198.0], [19.6, 198.0], [19.7, 199.0], [19.8, 199.0], [19.9, 199.0], [20.0, 199.0], [20.1, 199.0], [20.2, 200.0], [20.3, 200.0], [20.4, 200.0], [20.5, 200.0], [20.6, 200.0], [20.7, 201.0], [20.8, 201.0], [20.9, 201.0], [21.0, 201.0], [21.1, 202.0], [21.2, 202.0], [21.3, 202.0], [21.4, 203.0], [21.5, 203.0], [21.6, 203.0], [21.7, 203.0], [21.8, 204.0], [21.9, 204.0], [22.0, 204.0], [22.1, 204.0], [22.2, 204.0], [22.3, 205.0], [22.4, 205.0], [22.5, 205.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 207.0], [23.1, 207.0], [23.2, 207.0], [23.3, 207.0], [23.4, 208.0], [23.5, 208.0], [23.6, 208.0], [23.7, 208.0], [23.8, 208.0], [23.9, 208.0], [24.0, 209.0], [24.1, 209.0], [24.2, 209.0], [24.3, 209.0], [24.4, 209.0], [24.5, 210.0], [24.6, 210.0], [24.7, 210.0], [24.8, 210.0], [24.9, 211.0], [25.0, 211.0], [25.1, 211.0], [25.2, 212.0], [25.3, 212.0], [25.4, 212.0], [25.5, 212.0], [25.6, 212.0], [25.7, 213.0], [25.8, 213.0], [25.9, 213.0], [26.0, 213.0], [26.1, 214.0], [26.2, 214.0], [26.3, 214.0], [26.4, 215.0], [26.5, 215.0], [26.6, 215.0], [26.7, 215.0], [26.8, 216.0], [26.9, 216.0], [27.0, 216.0], [27.1, 216.0], [27.2, 216.0], [27.3, 217.0], [27.4, 217.0], [27.5, 217.0], [27.6, 217.0], [27.7, 218.0], [27.8, 218.0], [27.9, 218.0], [28.0, 218.0], [28.1, 219.0], [28.2, 219.0], [28.3, 219.0], [28.4, 219.0], [28.5, 220.0], [28.6, 220.0], [28.7, 220.0], [28.8, 220.0], [28.9, 221.0], [29.0, 221.0], [29.1, 221.0], [29.2, 221.0], [29.3, 221.0], [29.4, 222.0], [29.5, 222.0], [29.6, 222.0], [29.7, 223.0], [29.8, 223.0], [29.9, 223.0], [30.0, 224.0], [30.1, 224.0], [30.2, 224.0], [30.3, 224.0], [30.4, 224.0], [30.5, 224.0], [30.6, 225.0], [30.7, 225.0], [30.8, 225.0], [30.9, 226.0], [31.0, 226.0], [31.1, 226.0], [31.2, 226.0], [31.3, 226.0], [31.4, 227.0], [31.5, 227.0], [31.6, 227.0], [31.7, 227.0], [31.8, 227.0], [31.9, 227.0], [32.0, 228.0], [32.1, 228.0], [32.2, 228.0], [32.3, 228.0], [32.4, 228.0], [32.5, 228.0], [32.6, 229.0], [32.7, 229.0], [32.8, 229.0], [32.9, 229.0], [33.0, 230.0], [33.1, 230.0], [33.2, 230.0], [33.3, 230.0], [33.4, 231.0], [33.5, 231.0], [33.6, 231.0], [33.7, 231.0], [33.8, 231.0], [33.9, 232.0], [34.0, 232.0], [34.1, 232.0], [34.2, 232.0], [34.3, 232.0], [34.4, 232.0], [34.5, 232.0], [34.6, 233.0], [34.7, 233.0], [34.8, 233.0], [34.9, 233.0], [35.0, 233.0], [35.1, 233.0], [35.2, 234.0], [35.3, 234.0], [35.4, 234.0], [35.5, 234.0], [35.6, 235.0], [35.7, 235.0], [35.8, 235.0], [35.9, 235.0], [36.0, 236.0], [36.1, 236.0], [36.2, 236.0], [36.3, 236.0], [36.4, 237.0], [36.5, 237.0], [36.6, 237.0], [36.7, 237.0], [36.8, 238.0], [36.9, 238.0], [37.0, 238.0], [37.1, 239.0], [37.2, 239.0], [37.3, 239.0], [37.4, 239.0], [37.5, 240.0], [37.6, 240.0], [37.7, 240.0], [37.8, 240.0], [37.9, 240.0], [38.0, 240.0], [38.1, 241.0], [38.2, 241.0], [38.3, 241.0], [38.4, 241.0], [38.5, 241.0], [38.6, 242.0], [38.7, 242.0], [38.8, 242.0], [38.9, 242.0], [39.0, 243.0], [39.1, 243.0], [39.2, 243.0], [39.3, 243.0], [39.4, 244.0], [39.5, 244.0], [39.6, 244.0], [39.7, 244.0], [39.8, 244.0], [39.9, 245.0], [40.0, 245.0], [40.1, 245.0], [40.2, 246.0], [40.3, 246.0], [40.4, 247.0], [40.5, 247.0], [40.6, 247.0], [40.7, 247.0], [40.8, 248.0], [40.9, 248.0], [41.0, 248.0], [41.1, 248.0], [41.2, 249.0], [41.3, 249.0], [41.4, 249.0], [41.5, 250.0], [41.6, 250.0], [41.7, 250.0], [41.8, 251.0], [41.9, 251.0], [42.0, 251.0], [42.1, 252.0], [42.2, 252.0], [42.3, 252.0], [42.4, 253.0], [42.5, 253.0], [42.6, 254.0], [42.7, 255.0], [42.8, 255.0], [42.9, 255.0], [43.0, 256.0], [43.1, 256.0], [43.2, 256.0], [43.3, 257.0], [43.4, 257.0], [43.5, 258.0], [43.6, 258.0], [43.7, 258.0], [43.8, 259.0], [43.9, 259.0], [44.0, 259.0], [44.1, 260.0], [44.2, 260.0], [44.3, 261.0], [44.4, 262.0], [44.5, 263.0], [44.6, 263.0], [44.7, 264.0], [44.8, 264.0], [44.9, 264.0], [45.0, 265.0], [45.1, 266.0], [45.2, 267.0], [45.3, 267.0], [45.4, 268.0], [45.5, 269.0], [45.6, 270.0], [45.7, 271.0], [45.8, 272.0], [45.9, 272.0], [46.0, 273.0], [46.1, 274.0], [46.2, 275.0], [46.3, 275.0], [46.4, 276.0], [46.5, 276.0], [46.6, 276.0], [46.7, 277.0], [46.8, 278.0], [46.9, 279.0], [47.0, 280.0], [47.1, 282.0], [47.2, 283.0], [47.3, 284.0], [47.4, 285.0], [47.5, 286.0], [47.6, 287.0], [47.7, 288.0], [47.8, 290.0], [47.9, 291.0], [48.0, 292.0], [48.1, 293.0], [48.2, 295.0], [48.3, 296.0], [48.4, 297.0], [48.5, 299.0], [48.6, 300.0], [48.7, 301.0], [48.8, 302.0], [48.9, 304.0], [49.0, 305.0], [49.1, 306.0], [49.2, 307.0], [49.3, 309.0], [49.4, 310.0], [49.5, 311.0], [49.6, 312.0], [49.7, 313.0], [49.8, 314.0], [49.9, 316.0], [50.0, 316.0], [50.1, 317.0], [50.2, 318.0], [50.3, 319.0], [50.4, 320.0], [50.5, 321.0], [50.6, 321.0], [50.7, 322.0], [50.8, 323.0], [50.9, 324.0], [51.0, 326.0], [51.1, 327.0], [51.2, 328.0], [51.3, 329.0], [51.4, 330.0], [51.5, 331.0], [51.6, 332.0], [51.7, 332.0], [51.8, 333.0], [51.9, 334.0], [52.0, 335.0], [52.1, 335.0], [52.2, 336.0], [52.3, 337.0], [52.4, 337.0], [52.5, 338.0], [52.6, 339.0], [52.7, 340.0], [52.8, 340.0], [52.9, 341.0], [53.0, 342.0], [53.1, 343.0], [53.2, 343.0], [53.3, 344.0], [53.4, 344.0], [53.5, 345.0], [53.6, 346.0], [53.7, 346.0], [53.8, 347.0], [53.9, 347.0], [54.0, 348.0], [54.1, 348.0], [54.2, 348.0], [54.3, 349.0], [54.4, 349.0], [54.5, 350.0], [54.6, 351.0], [54.7, 351.0], [54.8, 352.0], [54.9, 352.0], [55.0, 353.0], [55.1, 353.0], [55.2, 354.0], [55.3, 354.0], [55.4, 355.0], [55.5, 355.0], [55.6, 355.0], [55.7, 356.0], [55.8, 356.0], [55.9, 356.0], [56.0, 357.0], [56.1, 357.0], [56.2, 357.0], [56.3, 358.0], [56.4, 358.0], [56.5, 359.0], [56.6, 359.0], [56.7, 359.0], [56.8, 359.0], [56.9, 360.0], [57.0, 360.0], [57.1, 360.0], [57.2, 360.0], [57.3, 361.0], [57.4, 361.0], [57.5, 361.0], [57.6, 362.0], [57.7, 362.0], [57.8, 363.0], [57.9, 363.0], [58.0, 363.0], [58.1, 364.0], [58.2, 364.0], [58.3, 364.0], [58.4, 364.0], [58.5, 364.0], [58.6, 365.0], [58.7, 365.0], [58.8, 366.0], [58.9, 366.0], [59.0, 367.0], [59.1, 367.0], [59.2, 367.0], [59.3, 367.0], [59.4, 368.0], [59.5, 368.0], [59.6, 368.0], [59.7, 368.0], [59.8, 369.0], [59.9, 369.0], [60.0, 369.0], [60.1, 370.0], [60.2, 370.0], [60.3, 370.0], [60.4, 371.0], [60.5, 371.0], [60.6, 371.0], [60.7, 371.0], [60.8, 372.0], [60.9, 372.0], [61.0, 372.0], [61.1, 373.0], [61.2, 373.0], [61.3, 373.0], [61.4, 374.0], [61.5, 374.0], [61.6, 374.0], [61.7, 375.0], [61.8, 375.0], [61.9, 375.0], [62.0, 375.0], [62.1, 375.0], [62.2, 376.0], [62.3, 376.0], [62.4, 376.0], [62.5, 376.0], [62.6, 377.0], [62.7, 377.0], [62.8, 377.0], [62.9, 377.0], [63.0, 378.0], [63.1, 378.0], [63.2, 378.0], [63.3, 379.0], [63.4, 379.0], [63.5, 379.0], [63.6, 380.0], [63.7, 380.0], [63.8, 380.0], [63.9, 381.0], [64.0, 381.0], [64.1, 382.0], [64.2, 382.0], [64.3, 383.0], [64.4, 383.0], [64.5, 383.0], [64.6, 383.0], [64.7, 383.0], [64.8, 384.0], [64.9, 384.0], [65.0, 384.0], [65.1, 384.0], [65.2, 384.0], [65.3, 385.0], [65.4, 385.0], [65.5, 385.0], [65.6, 386.0], [65.7, 386.0], [65.8, 386.0], [65.9, 387.0], [66.0, 387.0], [66.1, 388.0], [66.2, 388.0], [66.3, 388.0], [66.4, 389.0], [66.5, 389.0], [66.6, 390.0], [66.7, 390.0], [66.8, 391.0], [66.9, 391.0], [67.0, 391.0], [67.1, 392.0], [67.2, 392.0], [67.3, 392.0], [67.4, 393.0], [67.5, 393.0], [67.6, 393.0], [67.7, 393.0], [67.8, 394.0], [67.9, 395.0], [68.0, 395.0], [68.1, 396.0], [68.2, 396.0], [68.3, 396.0], [68.4, 397.0], [68.5, 398.0], [68.6, 398.0], [68.7, 398.0], [68.8, 399.0], [68.9, 399.0], [69.0, 399.0], [69.1, 399.0], [69.2, 400.0], [69.3, 400.0], [69.4, 400.0], [69.5, 400.0], [69.6, 401.0], [69.7, 401.0], [69.8, 401.0], [69.9, 402.0], [70.0, 403.0], [70.1, 403.0], [70.2, 403.0], [70.3, 404.0], [70.4, 404.0], [70.5, 405.0], [70.6, 405.0], [70.7, 406.0], [70.8, 406.0], [70.9, 407.0], [71.0, 407.0], [71.1, 407.0], [71.2, 408.0], [71.3, 408.0], [71.4, 409.0], [71.5, 409.0], [71.6, 410.0], [71.7, 410.0], [71.8, 411.0], [71.9, 411.0], [72.0, 412.0], [72.1, 412.0], [72.2, 412.0], [72.3, 413.0], [72.4, 413.0], [72.5, 414.0], [72.6, 415.0], [72.7, 415.0], [72.8, 415.0], [72.9, 416.0], [73.0, 416.0], [73.1, 416.0], [73.2, 416.0], [73.3, 417.0], [73.4, 418.0], [73.5, 418.0], [73.6, 419.0], [73.7, 420.0], [73.8, 420.0], [73.9, 421.0], [74.0, 422.0], [74.1, 422.0], [74.2, 423.0], [74.3, 423.0], [74.4, 424.0], [74.5, 424.0], [74.6, 425.0], [74.7, 425.0], [74.8, 425.0], [74.9, 426.0], [75.0, 427.0], [75.1, 427.0], [75.2, 428.0], [75.3, 428.0], [75.4, 428.0], [75.5, 429.0], [75.6, 429.0], [75.7, 430.0], [75.8, 430.0], [75.9, 430.0], [76.0, 431.0], [76.1, 431.0], [76.2, 432.0], [76.3, 432.0], [76.4, 432.0], [76.5, 433.0], [76.6, 433.0], [76.7, 434.0], [76.8, 435.0], [76.9, 435.0], [77.0, 435.0], [77.1, 436.0], [77.2, 436.0], [77.3, 437.0], [77.4, 438.0], [77.5, 439.0], [77.6, 440.0], [77.7, 440.0], [77.8, 441.0], [77.9, 442.0], [78.0, 442.0], [78.1, 443.0], [78.2, 444.0], [78.3, 444.0], [78.4, 444.0], [78.5, 445.0], [78.6, 445.0], [78.7, 446.0], [78.8, 447.0], [78.9, 448.0], [79.0, 449.0], [79.1, 450.0], [79.2, 451.0], [79.3, 451.0], [79.4, 452.0], [79.5, 452.0], [79.6, 453.0], [79.7, 454.0], [79.8, 456.0], [79.9, 456.0], [80.0, 457.0], [80.1, 458.0], [80.2, 459.0], [80.3, 460.0], [80.4, 461.0], [80.5, 462.0], [80.6, 463.0], [80.7, 464.0], [80.8, 465.0], [80.9, 467.0], [81.0, 468.0], [81.1, 468.0], [81.2, 469.0], [81.3, 470.0], [81.4, 471.0], [81.5, 471.0], [81.6, 473.0], [81.7, 474.0], [81.8, 475.0], [81.9, 475.0], [82.0, 476.0], [82.1, 476.0], [82.2, 477.0], [82.3, 478.0], [82.4, 479.0], [82.5, 480.0], [82.6, 482.0], [82.7, 483.0], [82.8, 483.0], [82.9, 484.0], [83.0, 485.0], [83.1, 486.0], [83.2, 487.0], [83.3, 488.0], [83.4, 488.0], [83.5, 490.0], [83.6, 491.0], [83.7, 491.0], [83.8, 492.0], [83.9, 494.0], [84.0, 496.0], [84.1, 498.0], [84.2, 499.0], [84.3, 500.0], [84.4, 501.0], [84.5, 502.0], [84.6, 504.0], [84.7, 507.0], [84.8, 508.0], [84.9, 509.0], [85.0, 510.0], [85.1, 512.0], [85.2, 513.0], [85.3, 514.0], [85.4, 515.0], [85.5, 516.0], [85.6, 517.0], [85.7, 518.0], [85.8, 519.0], [85.9, 519.0], [86.0, 520.0], [86.1, 521.0], [86.2, 523.0], [86.3, 524.0], [86.4, 524.0], [86.5, 525.0], [86.6, 526.0], [86.7, 527.0], [86.8, 528.0], [86.9, 529.0], [87.0, 531.0], [87.1, 533.0], [87.2, 535.0], [87.3, 536.0], [87.4, 537.0], [87.5, 539.0], [87.6, 540.0], [87.7, 541.0], [87.8, 543.0], [87.9, 543.0], [88.0, 544.0], [88.1, 545.0], [88.2, 547.0], [88.3, 548.0], [88.4, 549.0], [88.5, 552.0], [88.6, 552.0], [88.7, 553.0], [88.8, 555.0], [88.9, 556.0], [89.0, 559.0], [89.1, 561.0], [89.2, 563.0], [89.3, 563.0], [89.4, 564.0], [89.5, 565.0], [89.6, 568.0], [89.7, 570.0], [89.8, 571.0], [89.9, 572.0], [90.0, 575.0], [90.1, 576.0], [90.2, 578.0], [90.3, 579.0], [90.4, 581.0], [90.5, 583.0], [90.6, 584.0], [90.7, 584.0], [90.8, 586.0], [90.9, 588.0], [91.0, 591.0], [91.1, 592.0], [91.2, 593.0], [91.3, 593.0], [91.4, 595.0], [91.5, 595.0], [91.6, 596.0], [91.7, 598.0], [91.8, 600.0], [91.9, 600.0], [92.0, 601.0], [92.1, 603.0], [92.2, 604.0], [92.3, 605.0], [92.4, 607.0], [92.5, 608.0], [92.6, 610.0], [92.7, 611.0], [92.8, 612.0], [92.9, 613.0], [93.0, 615.0], [93.1, 616.0], [93.2, 617.0], [93.3, 619.0], [93.4, 621.0], [93.5, 625.0], [93.6, 628.0], [93.7, 631.0], [93.8, 643.0], [93.9, 678.0], [94.0, 859.0], [94.1, 891.0], [94.2, 1020.0], [94.3, 1073.0], [94.4, 1130.0], [94.5, 1227.0], [94.6, 1280.0], [94.7, 1292.0], [94.8, 1331.0], [94.9, 1370.0], [95.0, 1503.0], [95.1, 1638.0], [95.2, 1705.0], [95.3, 1858.0], [95.4, 2103.0], [95.5, 2315.0], [95.6, 2439.0], [95.7, 2714.0], [95.8, 2890.0], [95.9, 3015.0], [96.0, 3108.0], [96.1, 3301.0], [96.2, 3527.0], [96.3, 3669.0], [96.4, 3787.0], [96.5, 3929.0], [96.6, 4038.0], [96.7, 4259.0], [96.8, 4330.0], [96.9, 4409.0], [97.0, 4556.0], [97.1, 4671.0], [97.2, 4787.0], [97.3, 4910.0], [97.4, 4946.0], [97.5, 4997.0], [97.6, 5085.0], [97.7, 5188.0], [97.8, 5320.0], [97.9, 5431.0], [98.0, 5535.0], [98.1, 5582.0], [98.2, 5609.0], [98.3, 5652.0], [98.4, 5713.0], [98.5, 5738.0], [98.6, 5852.0], [98.7, 5954.0], [98.8, 6069.0], [98.9, 6188.0], [99.0, 6301.0], [99.1, 6390.0], [99.2, 6438.0], [99.3, 6475.0], [99.4, 6511.0], [99.5, 6542.0], [99.6, 6583.0], [99.7, 6630.0], [99.8, 6644.0], [99.9, 6726.0], [100.0, 6787.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2838.0, "series": [{"data": [[0.0, 438.0], [600.0, 212.0], [800.0, 20.0], [900.0, 6.0], [1000.0, 16.0], [1100.0, 11.0], [1200.0, 26.0], [1300.0, 20.0], [1400.0, 7.0], [1500.0, 8.0], [1600.0, 13.0], [1700.0, 5.0], [1800.0, 9.0], [1900.0, 3.0], [2000.0, 3.0], [2100.0, 7.0], [2200.0, 2.0], [2300.0, 8.0], [2400.0, 6.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 8.0], [2800.0, 6.0], [2900.0, 3.0], [3000.0, 13.0], [3100.0, 6.0], [3200.0, 5.0], [3300.0, 5.0], [3400.0, 4.0], [3500.0, 8.0], [3600.0, 6.0], [3700.0, 11.0], [3800.0, 5.0], [3900.0, 6.0], [4000.0, 7.0], [4100.0, 5.0], [4200.0, 10.0], [4300.0, 11.0], [4400.0, 11.0], [4500.0, 4.0], [4600.0, 12.0], [4700.0, 6.0], [4800.0, 8.0], [4900.0, 23.0], [5000.0, 9.0], [5100.0, 10.0], [5200.0, 8.0], [5300.0, 9.0], [5400.0, 7.0], [5500.0, 24.0], [5600.0, 17.0], [5700.0, 20.0], [5800.0, 11.0], [5900.0, 8.0], [6000.0, 10.0], [6100.0, 6.0], [6200.0, 9.0], [6300.0, 11.0], [6400.0, 26.0], [6500.0, 28.0], [6600.0, 24.0], [6700.0, 12.0], [100.0, 1578.0], [200.0, 2838.0], [300.0, 2063.0], [400.0, 1505.0], [500.0, 758.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 501.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8432.0, "series": [{"data": [[0.0, 8432.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1067.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 501.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 556.7854, "minX": 1.66956906E12, "maxY": 556.7854, "series": [{"data": [[1.66956906E12, 556.7854]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 5578.0, "series": [{"data": [[2.0, 12.0], [3.0, 58.0], [5.0, 52.0], [6.0, 52.0], [7.0, 52.0], [8.0, 52.666666666666664], [9.0, 60.0], [10.0, 68.0], [11.0, 78.0], [12.0, 80.0], [13.0, 29.5], [14.0, 22.0], [16.0, 1.0], [18.0, 32.25], [19.0, 59.25], [20.0, 62.5], [22.0, 70.33333333333333], [24.0, 73.33333333333333], [26.0, 62.75], [27.0, 14.0], [29.0, 47.0], [30.0, 65.66666666666667], [33.0, 61.0], [32.0, 32.0], [35.0, 60.6], [39.0, 57.4], [40.0, 95.0], [47.0, 61.74999999999999], [49.0, 79.0], [50.0, 66.0], [52.0, 72.0], [55.0, 83.5], [54.0, 65.2], [59.0, 74.4], [58.0, 57.0], [61.0, 68.0], [60.0, 60.5], [66.0, 70.66666666666667], [65.0, 71.5], [64.0, 60.0], [70.0, 75.1111111111111], [74.0, 64.33333333333333], [75.0, 78.0], [73.0, 63.0], [72.0, 66.6], [76.0, 68.0], [77.0, 85.57142857142857], [78.0, 80.83333333333333], [79.0, 79.16666666666667], [80.0, 90.66666666666667], [81.0, 98.5], [82.0, 91.99999999999999], [83.0, 48.611111111111114], [84.0, 69.8], [86.0, 66.75], [87.0, 103.2], [85.0, 81.0], [88.0, 90.33333333333333], [91.0, 88.66666666666667], [90.0, 131.0], [89.0, 87.0], [92.0, 81.75], [94.0, 109.75], [93.0, 108.5], [96.0, 96.9], [97.0, 70.66666666666667], [98.0, 84.9], [101.0, 65.55555555555556], [102.0, 101.1], [105.0, 93.93333333333334], [107.0, 113.42857142857143], [106.0, 117.2], [104.0, 116.88888888888889], [109.0, 89.0344827586207], [111.0, 69.85714285714286], [110.0, 99.0], [108.0, 119.0], [112.0, 56.0], [115.0, 77.93333333333332], [114.0, 90.5], [113.0, 98.26666666666668], [116.0, 100.33333333333333], [117.0, 69.60000000000001], [119.0, 113.2], [120.0, 89.3], [121.0, 77.375], [123.0, 107.13636363636365], [122.0, 108.375], [125.0, 110.47058823529413], [127.0, 113.75], [126.0, 116.33333333333333], [124.0, 130.0], [128.0, 117.55555555555556], [134.0, 171.0], [133.0, 131.8], [132.0, 116.0], [130.0, 177.0], [129.0, 124.33333333333334], [143.0, 135.2], [142.0, 133.7777777777778], [141.0, 138.88888888888889], [140.0, 138.24999999999997], [139.0, 156.0], [138.0, 134.2], [137.0, 135.66666666666669], [145.0, 132.73684210526318], [146.0, 121.33333333333333], [149.0, 134.0], [150.0, 139.5], [151.0, 136.68749999999997], [148.0, 159.0], [147.0, 143.25], [144.0, 134.0666666666667], [155.0, 126.0], [156.0, 145.4666666666667], [159.0, 152.71428571428572], [157.0, 180.0], [154.0, 151.83333333333334], [153.0, 162.66666666666666], [164.0, 164.16666666666669], [166.0, 176.4], [167.0, 169.5], [165.0, 160.5], [163.0, 169.0], [162.0, 150.5], [161.0, 148.5], [160.0, 175.0], [171.0, 174.85714285714286], [174.0, 183.1818181818182], [175.0, 198.44444444444449], [173.0, 176.4], [172.0, 178.53571428571428], [170.0, 165.88888888888889], [169.0, 153.76923076923077], [177.0, 184.14285714285717], [180.0, 176.4], [183.0, 180.53846153846155], [182.0, 192.5], [181.0, 192.33333333333334], [179.0, 189.66666666666666], [178.0, 190.5], [176.0, 192.76470588235293], [186.0, 179.3870967741936], [191.0, 194.66666666666666], [190.0, 206.5], [189.0, 189.39999999999998], [187.0, 209.0], [185.0, 195.33333333333334], [184.0, 184.5], [197.0, 149.92857142857142], [198.0, 173.25], [199.0, 192.875], [196.0, 199.14285714285714], [195.0, 206.83333333333334], [194.0, 204.0], [193.0, 197.0], [192.0, 195.85714285714286], [201.0, 182.0], [202.0, 174.44444444444446], [207.0, 191.74999999999997], [206.0, 186.93333333333334], [204.0, 191.0], [203.0, 183.125], [200.0, 188.7], [208.0, 157.9411764705882], [210.0, 184.0], [211.0, 190.81818181818184], [212.0, 183.75], [213.0, 186.81818181818184], [214.0, 136.0], [215.0, 212.125], [209.0, 180.52499999999998], [219.0, 212.44444444444446], [220.0, 189.44444444444446], [223.0, 186.0], [222.0, 199.0], [221.0, 200.0], [218.0, 221.0], [217.0, 216.5], [216.0, 203.5], [227.0, 181.99999999999997], [228.0, 199.64999999999998], [230.0, 205.5416666666667], [231.0, 1038.6249999999998], [229.0, 229.25], [226.0, 188.2820512820513], [225.0, 198.1111111111111], [224.0, 194.1923076923077], [232.0, 188.33333333333334], [233.0, 168.44444444444446], [234.0, 601.4705882352941], [235.0, 853.6], [236.0, 837.2258064516129], [239.0, 226.0], [238.0, 216.0], [237.0, 219.0], [241.0, 200.79591836734696], [245.0, 792.5], [246.0, 2377.6666666666665], [247.0, 243.0], [244.0, 244.71428571428572], [243.0, 830.4545454545455], [242.0, 509.73913043478257], [240.0, 209.25], [248.0, 192.57692307692307], [250.0, 601.1764705882352], [254.0, 1152.4285714285716], [255.0, 252.0], [253.0, 230.2], [252.0, 2052.4285714285716], [251.0, 231.0], [249.0, 1221.9230769230767], [258.0, 226.125], [257.0, 206.0], [256.0, 228.75], [259.0, 196.85000000000002], [269.0, 468.5], [271.0, 2517.181818181818], [270.0, 250.125], [260.0, 224.5], [261.0, 231.8181818181818], [262.0, 780.3714285714287], [263.0, 762.8333333333333], [264.0, 956.8888888888889], [265.0, 233.0], [267.0, 213.46666666666667], [266.0, 2400.666666666667], [286.0, 2527.375], [272.0, 1293.1176470588234], [277.0, 525.9473684210526], [276.0, 2844.641025641026], [279.0, 984.2500000000002], [278.0, 240.0], [281.0, 1295.6666666666665], [283.0, 146.0], [287.0, 1770.9166666666665], [280.0, 1788.05], [285.0, 2368.103448275862], [284.0, 195.0], [275.0, 236.33333333333334], [274.0, 2330.8888888888887], [273.0, 1813.75], [282.0, 202.0], [302.0, 195.11111111111111], [290.0, 217.0], [289.0, 425.92857142857144], [288.0, 192.66666666666666], [295.0, 218.0], [294.0, 208.6], [293.0, 200.16666666666669], [292.0, 205.75], [303.0, 1260.111111111111], [301.0, 225.28571428571428], [300.0, 221.0], [299.0, 214.5], [298.0, 220.08], [297.0, 1264.0], [296.0, 1185.15625], [316.0, 219.8235294117647], [305.0, 651.3214285714287], [304.0, 415.3333333333333], [306.0, 188.31578947368425], [307.0, 334.0], [308.0, 231.5], [310.0, 3310.5], [311.0, 243.25], [312.0, 1140.3846153846155], [313.0, 616.25], [315.0, 237.14285714285714], [314.0, 198.0], [318.0, 681.7037037037036], [317.0, 224.55555555555557], [319.0, 264.14285714285717], [334.0, 856.7777777777779], [326.0, 911.6764705882355], [322.0, 178.9], [323.0, 2229.6666666666665], [327.0, 209.25], [321.0, 2633.4], [320.0, 238.66666666666666], [324.0, 244.50000000000003], [325.0, 209.75], [335.0, 1048.7142857142858], [328.0, 220.0], [333.0, 1523.1111111111113], [332.0, 192.0], [331.0, 192.0], [330.0, 434.5370370370371], [350.0, 443.3877551020408], [343.0, 1122.2307692307693], [337.0, 185.5], [336.0, 197.50000000000003], [339.0, 1676.7500000000005], [338.0, 201.0769230769231], [340.0, 208.53846153846155], [342.0, 3138.0], [341.0, 1663.25], [347.0, 232.35294117647058], [351.0, 1850.0], [345.0, 930.9062499999999], [344.0, 195.00000000000003], [349.0, 203.71428571428572], [348.0, 198.2], [346.0, 199.75], [355.0, 228.17241379310346], [359.0, 244.66666666666666], [352.0, 197.5], [354.0, 214.33333333333334], [353.0, 1857.142857142857], [361.0, 253.58823529411765], [362.0, 213.0], [367.0, 226.5], [364.0, 241.71428571428572], [363.0, 652.2222222222221], [360.0, 1016.7241379310345], [358.0, 232.0], [357.0, 224.57142857142856], [356.0, 236.5], [368.0, 943.0416666666666], [372.0, 467.0], [373.0, 837.0], [374.0, 596.936170212766], [375.0, 529.0500000000001], [378.0, 2167.764705882353], [377.0, 1612.375], [376.0, 525.6249999999999], [379.0, 2349.1538461538466], [383.0, 1004.8571428571428], [382.0, 213.0], [381.0, 225.16666666666666], [380.0, 1142.0], [371.0, 237.50000000000006], [370.0, 228.6], [369.0, 606.1999999999999], [397.0, 1019.0], [388.0, 487.21052631578954], [390.0, 1246.875], [389.0, 227.0], [391.0, 174.88235294117646], [396.0, 1554.7500000000002], [387.0, 894.2500000000001], [385.0, 222.44444444444446], [384.0, 267.0], [399.0, 370.3823529411764], [398.0, 1621.3333333333333], [395.0, 2014.0], [394.0, 236.5], [393.0, 987.2857142857142], [392.0, 5578.0], [412.0, 228.57142857142858], [400.0, 553.3124999999999], [406.0, 208.7142857142857], [404.0, 1294.0], [411.0, 269.0], [414.0, 221.33333333333334], [413.0, 239.0], [403.0, 857.8235294117648], [402.0, 1057.9473684210525], [401.0, 217.42857142857142], [410.0, 224.14285714285714], [409.0, 222.89999999999998], [407.0, 985.5714285714284], [428.0, 716.375], [417.0, 991.2647058823527], [419.0, 207.0], [418.0, 590.6428571428571], [423.0, 214.60000000000002], [421.0, 199.66666666666666], [420.0, 221.66666666666666], [422.0, 241.1818181818182], [429.0, 219.33333333333337], [431.0, 772.4], [425.0, 225.14285714285714], [430.0, 224.0], [427.0, 238.57142857142858], [426.0, 827.1764705882354], [447.0, 250.0], [434.0, 757.3157894736842], [438.0, 238.6], [437.0, 226.66666666666666], [436.0, 228.73913043478262], [439.0, 227.6], [433.0, 476.8], [432.0, 1507.5], [443.0, 240.4], [446.0, 241.0], [445.0, 248.0], [444.0, 240.0], [435.0, 1246.2], [442.0, 637.7567567567567], [441.0, 1898.3333333333335], [440.0, 228.4], [463.0, 543.6250000000001], [453.0, 228.375], [452.0, 241.5], [454.0, 253.0], [459.0, 235.07692307692307], [462.0, 605.6153846153846], [461.0, 243.0], [460.0, 1461.0], [451.0, 470.04545454545456], [449.0, 695.2727272727273], [455.0, 236.0], [458.0, 822.6199999999998], [457.0, 1325.3333333333333], [456.0, 239.0], [464.0, 625.9230769230769], [471.0, 527.8421052631579], [472.0, 810.5], [473.0, 661.75], [479.0, 771.7777777777778], [476.0, 2187.2352941176473], [467.0, 250.0], [466.0, 253.14705882352945], [465.0, 242.14285714285714], [475.0, 1204.6999999999998], [470.0, 244.0], [469.0, 947.2857142857143], [468.0, 244.0], [495.0, 251.07142857142853], [480.0, 887.625], [485.0, 332.3333333333333], [484.0, 285.0], [487.0, 991.3076923076924], [486.0, 341.0], [488.0, 298.99999999999994], [492.0, 281.15999999999997], [483.0, 1440.5937500000002], [482.0, 253.8421052631579], [481.0, 254.4], [493.0, 284.0], [491.0, 284.0], [490.0, 293.79999999999995], [489.0, 264.0], [511.0, 1229.2], [496.0, 237.26470588235296], [498.0, 301.7142857142857], [497.0, 276.0], [503.0, 327.25], [502.0, 313.25], [501.0, 318.0], [500.0, 1429.9375], [499.0, 234.66666666666666], [506.0, 280.93333333333334], [509.0, 338.2857142857143], [508.0, 322.5], [507.0, 326.75], [505.0, 318.75000000000006], [504.0, 1114.735294117647], [538.0, 304.6], [513.0, 814.7777777777778], [516.0, 677.0], [515.0, 338.22222222222223], [514.0, 384.0], [518.0, 383.0], [517.0, 342.0], [537.0, 309.0], [536.0, 317.0], [527.0, 516.0], [512.0, 350.5], [526.0, 1190.2], [524.0, 951.1428571428572], [521.0, 312.0], [520.0, 882.25], [528.0, 308.75], [533.0, 459.28000000000003], [532.0, 763.2500000000001], [531.0, 1396.375], [530.0, 786.7368421052632], [534.0, 338.1666666666667], [535.0, 1741.1666666666665], [539.0, 518.2941176470587], [540.0, 269.125], [541.0, 1348.5], [542.0, 486.0], [543.0, 280.0], [568.0, 297.3333333333333], [545.0, 265.0833333333333], [548.0, 293.0], [546.0, 318.6666666666667], [550.0, 298.14285714285717], [552.0, 291.54166666666674], [554.0, 323.8], [553.0, 306.5], [555.0, 552.71875], [556.0, 1078.2], [557.0, 285.0], [559.0, 291.5], [558.0, 2379.5], [575.0, 289.0], [561.0, 288.4], [560.0, 808.7872340425533], [563.0, 788.875], [562.0, 1160.642857142857], [565.0, 293.5], [564.0, 279.2666666666667], [567.0, 282.2307692307692], [566.0, 267.0], [574.0, 290.0], [572.0, 1629.3333333333335], [571.0, 318.5], [570.0, 266.0], [569.0, 399.0], [600.0, 423.0], [576.0, 662.6923076923076], [578.0, 300.25000000000006], [577.0, 272.0], [581.0, 284.0], [580.0, 312.6666666666667], [583.0, 1642.333333333333], [582.0, 358.0], [586.0, 307.47058823529414], [585.0, 287.33333333333337], [584.0, 791.7475728155338], [587.0, 356.57142857142856], [588.0, 304.33333333333337], [590.0, 391.5], [589.0, 264.0], [593.0, 562.3333333333334], [594.0, 455.33333333333337], [597.0, 276.5], [595.0, 619.5384615384615], [599.0, 342.75], [598.0, 356.0], [601.0, 387.0769230769231], [602.0, 330.2], [605.0, 338.0], [604.0, 312.375], [607.0, 366.5], [592.0, 250.33333333333334], [606.0, 376.0], [633.0, 610.5], [614.0, 610.5], [623.0, 453.0638297872341], [608.0, 333.0], [611.0, 331.75], [609.0, 313.57142857142856], [613.0, 320.0], [612.0, 333.75], [621.0, 346.3333333333333], [620.0, 354.5], [619.0, 528.6428571428571], [618.0, 393.0], [617.0, 349.0], [616.0, 1080.8], [632.0, 875.0], [615.0, 695.3], [639.0, 487.9230769230769], [625.0, 1592.3333333333335], [624.0, 365.2941176470589], [630.0, 1304.5], [626.0, 362.8], [638.0, 886.2857142857142], [637.0, 413.0], [635.0, 982.1666666666667], [634.0, 375.0], [666.0, 461.6666666666667], [670.0, 465.2857142857143], [641.0, 508.99999999999994], [651.0, 814.4444444444445], [649.0, 401.0], [653.0, 373.25], [652.0, 1105.2], [655.0, 1601.3333333333335], [640.0, 377.3333333333333], [654.0, 374.5], [656.0, 457.0833333333333], [657.0, 409.625], [659.0, 388.0], [661.0, 371.5], [660.0, 367.0], [665.0, 388.0], [664.0, 400.0], [647.0, 887.2857142857142], [646.0, 388.6666666666667], [644.0, 369.0], [643.0, 405.0], [667.0, 404.6666666666667], [671.0, 357.6666666666667], [669.0, 384.0], [668.0, 406.0], [699.0, 364.0], [672.0, 450.0], [673.0, 498.85714285714283], [678.0, 881.0], [677.0, 380.0], [676.0, 890.8571428571429], [675.0, 385.5], [679.0, 376.3333333333333], [697.0, 364.8571428571429], [696.0, 376.0], [684.0, 439.85714285714283], [681.0, 406.0], [680.0, 353.0], [686.0, 383.3333333333333], [685.0, 373.6666666666667], [687.0, 350.75], [690.0, 431.16666666666663], [689.0, 358.8], [688.0, 374.8], [691.0, 407.0], [694.0, 379.5], [692.0, 374.4285714285714], [703.0, 469.5714285714286], [702.0, 938.6666666666667], [700.0, 370.0], [729.0, 369.5], [710.0, 365.625], [716.0, 463.79999999999995], [715.0, 344.0], [714.0, 359.3333333333333], [713.0, 363.8], [712.0, 1522.0], [717.0, 364.42857142857144], [719.0, 370.25], [707.0, 361.75], [704.0, 799.2499999999999], [709.0, 1522.0], [708.0, 363.75], [718.0, 344.0], [732.0, 364.6666666666667], [720.0, 372.25], [728.0, 343.0], [725.0, 1514.0], [724.0, 376.0], [723.0, 361.8333333333333], [721.0, 351.0], [761.0, 368.0], [737.0, 1027.6666666666667], [742.0, 377.6666666666667], [739.0, 362.3333333333333], [760.0, 353.5], [750.0, 453.4], [749.0, 352.6666666666667], [748.0, 367.5], [747.0, 365.6666666666667], [746.0, 850.9999999999999], [745.0, 365.0], [744.0, 703.8], [751.0, 365.1666666666667], [736.0, 361.0], [752.0, 403.0], [753.0, 625.2307692307693], [755.0, 1496.0], [754.0, 364.3333333333333], [757.0, 370.75], [756.0, 363.0], [759.0, 362.5], [758.0, 365.8], [767.0, 371.3333333333333], [766.0, 377.00000000000006], [764.0, 381.37499999999994], [762.0, 597.4827586206895], [775.0, 757.235294117647], [769.0, 379.0], [768.0, 373.3333333333333], [771.0, 372.75], [773.0, 372.0], [774.0, 403.00000000000006], [776.0, 376.5], [778.0, 372.2], [777.0, 562.3181818181819], [780.0, 375.2], [779.0, 1191.25], [782.0, 382.3333333333333], [781.0, 512.3333333333334], [783.0, 826.2857142857142], [785.0, 379.7777777777778], [787.0, 375.4761904761904], [786.0, 824.0], [789.0, 397.33333333333337], [788.0, 383.2857142857143], [791.0, 387.6363636363636], [790.0, 605.6896551724137], [793.0, 395.1818181818182], [792.0, 424.5], [794.0, 388.7307692307692], [797.0, 381.34328358208967], [796.0, 553.7222222222222], [795.0, 397.0], [798.0, 408.5], [799.0, 413.5], [784.0, 1240.2727272727275], [826.0, 475.1111111111111], [815.0, 455.6666666666667], [809.0, 428.1], [808.0, 562.9473684210526], [811.0, 654.6666666666666], [810.0, 421.75], [812.0, 439.0], [814.0, 438.7], [813.0, 1121.25], [816.0, 445.6], [817.0, 491.0], [830.0, 473.83333333333337], [829.0, 491.0], [831.0, 1157.1875], [827.0, 473.3], [824.0, 473.85714285714283], [807.0, 508.85714285714266], [806.0, 531.6037735849059], [805.0, 773.75], [804.0, 693.3809523809523], [803.0, 422.0], [802.0, 375.75], [801.0, 594.6999999999999], [800.0, 367.4], [828.0, 447.037037037037], [819.0, 440.3636363636364], [818.0, 430.2], [821.0, 448.18181818181813], [823.0, 465.4347826086956], [822.0, 472.0], [820.0, 720.35], [837.0, 503.41176470588226], [833.0, 492.8888888888889], [832.0, 574.0], [834.0, 937.0], [835.0, 450.8], [836.0, 432.0], [838.0, 492.2], [839.0, 781.7777777777778], [857.0, 589.625], [856.0, 572.0], [859.0, 620.0], [858.0, 592.0], [842.0, 471.3529411764706], [841.0, 552.3333333333334], [840.0, 531.0], [844.0, 526.5], [843.0, 937.6666666666666], [846.0, 508.0], [845.0, 834.9999999999999], [847.0, 565.25], [855.0, 554.5625], [854.0, 864.6400000000001], [852.0, 1160.6666666666665], [851.0, 894.5714285714286], [850.0, 549.8], [849.0, 551.0], [848.0, 937.3333333333333], [862.0, 597.5], [861.0, 587.3], [860.0, 573.25], [871.0, 592.4], [877.0, 763.4000000000001], [873.0, 658.5932203389831], [872.0, 580.5], [874.0, 711.7575757575756], [875.0, 575.5833333333334], [876.0, 786.0], [878.0, 492.09523809523813], [888.0, 527.6666666666665], [869.0, 588.7142857142858], [868.0, 579.0909090909091], [867.0, 575.2307692307693], [866.0, 916.8571428571429], [865.0, 586.5000000000001], [864.0, 596.125], [879.0, 578.8888888888889], [890.0, 537.1666666666667], [889.0, 530.3333333333334], [893.0, 663.3181818181818], [894.0, 658.9629629629629], [880.0, 585.3333333333334], [882.0, 833.7500000000002], [881.0, 809.8888888888889], [886.0, 1003.8125], [884.0, 681.698113207547], [892.0, 530.4000000000001], [891.0, 527.6666666666666], [921.0, 491.3776824034335], [900.0, 578.2235294117644], [901.0, 554.4411764705883], [902.0, 816.3846153846154], [909.0, 403.68749999999994], [908.0, 392.0], [907.0, 404.125], [906.0, 403.0], [905.0, 415.25], [904.0, 433.6666666666667], [910.0, 422.125], [911.0, 394.42857142857144], [897.0, 722.0000000000001], [896.0, 521.375], [899.0, 606.4324324324325], [898.0, 522.764705882353], [913.0, 412.5], [912.0, 444.0], [915.0, 395.9310344827585], [914.0, 400.0], [917.0, 503.58730158730185], [916.0, 397.29411764705884], [919.0, 419.77777777777777], [918.0, 409.45454545454544], [922.0, 498.59090909090907], [924.0, 542.0416666666666], [923.0, 535.2413793103448], [926.0, 596.8181818181818], [925.0, 635.5], [920.0, 545.3396226415095], [903.0, 422.2], [927.0, 476.08333333333337], [934.0, 495.12500000000006], [928.0, 469.7122641509434], [929.0, 449.3131313131314], [931.0, 512.3571428571429], [930.0, 513.9473684210526], [932.0, 413.42857142857144], [933.0, 523.7777777777778], [935.0, 547.9083969465652], [953.0, 423.2368421052632], [952.0, 554.4736842105264], [955.0, 560.375], [954.0, 411.2617449664429], [956.0, 403.29166666666663], [959.0, 545.6000000000001], [945.0, 608.6], [958.0, 515.8], [957.0, 545.5], [936.0, 379.3333333333333], [938.0, 335.0], [937.0, 733.8], [940.0, 683.6666666666666], [939.0, 551.8], [942.0, 488.28571428571433], [941.0, 479.25000000000006], [943.0, 517.0], [946.0, 466.55882352941177], [947.0, 547.4444444444445], [948.0, 474.3333333333335], [951.0, 373.8], [950.0, 498.7499999999999], [949.0, 357.44444444444446], [960.0, 404.0833333333333], [969.0, 437.92307692307696], [968.0, 426.6666666666667], [970.0, 427.0], [973.0, 509.0], [971.0, 426.0], [976.0, 496.0], [967.0, 419.75], [966.0, 411.375], [964.0, 537.0], [962.0, 495.13043478260875], [961.0, 404.7142857142857], [963.0, 416.0], [980.0, 469.45], [979.0, 480.75], [978.0, 495.6666666666667], [977.0, 697.25], [975.0, 430.0], [974.0, 451.76190476190476], [1.0, 12.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[556.7859999999987, 539.2641999999994]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 980.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956906E12, "maxY": 83166.66666666667, "series": [{"data": [[1.66956906E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956906E12, 83166.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 539.2641999999994, "minX": 1.66956906E12, "maxY": 539.2641999999994, "series": [{"data": [[1.66956906E12, 539.2641999999994]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 539.0218000000009, "minX": 1.66956906E12, "maxY": 539.0218000000009, "series": [{"data": [[1.66956906E12, 539.0218000000009]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0586999999999995, "minX": 1.66956906E12, "maxY": 1.0586999999999995, "series": [{"data": [[1.66956906E12, 1.0586999999999995]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.66956906E12, "maxY": 6787.0, "series": [{"data": [[1.66956906E12, 6787.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956906E12, 575.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956906E12, 6349.509999999989]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956906E12, 1504.8999999999978]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956906E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956906E12, 316.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.5, "minX": 14.0, "maxY": 550.5, "series": [{"data": [[1078.0, 232.0], [1102.0, 398.0], [1129.0, 374.0], [1136.0, 224.0], [1172.0, 161.0], [14.0, 52.5], [951.0, 288.0], [489.0, 108.0], [986.0, 262.5], [969.0, 442.0], [974.0, 550.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1172.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 52.5, "minX": 14.0, "maxY": 550.5, "series": [{"data": [[1078.0, 232.0], [1102.0, 396.5], [1129.0, 374.0], [1136.0, 224.0], [1172.0, 161.0], [14.0, 52.5], [951.0, 288.0], [489.0, 107.0], [986.0, 261.0], [969.0, 441.0], [974.0, 550.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1172.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

