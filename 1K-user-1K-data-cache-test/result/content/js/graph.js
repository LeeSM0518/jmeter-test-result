/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 6757.0, "series": [{"data": [[0.0, 7.0], [0.1, 26.0], [0.2, 29.0], [0.3, 32.0], [0.4, 34.0], [0.5, 39.0], [0.6, 42.0], [0.7, 44.0], [0.8, 45.0], [0.9, 49.0], [1.0, 50.0], [1.1, 52.0], [1.2, 54.0], [1.3, 55.0], [1.4, 56.0], [1.5, 57.0], [1.6, 59.0], [1.7, 60.0], [1.8, 61.0], [1.9, 63.0], [2.0, 63.0], [2.1, 64.0], [2.2, 65.0], [2.3, 65.0], [2.4, 67.0], [2.5, 68.0], [2.6, 69.0], [2.7, 70.0], [2.8, 71.0], [2.9, 71.0], [3.0, 72.0], [3.1, 73.0], [3.2, 74.0], [3.3, 76.0], [3.4, 78.0], [3.5, 79.0], [3.6, 81.0], [3.7, 82.0], [3.8, 83.0], [3.9, 84.0], [4.0, 86.0], [4.1, 88.0], [4.2, 89.0], [4.3, 90.0], [4.4, 92.0], [4.5, 92.0], [4.6, 93.0], [4.7, 94.0], [4.8, 95.0], [4.9, 97.0], [5.0, 97.0], [5.1, 98.0], [5.2, 98.0], [5.3, 99.0], [5.4, 100.0], [5.5, 101.0], [5.6, 102.0], [5.7, 103.0], [5.8, 103.0], [5.9, 104.0], [6.0, 104.0], [6.1, 105.0], [6.2, 106.0], [6.3, 106.0], [6.4, 107.0], [6.5, 107.0], [6.6, 108.0], [6.7, 108.0], [6.8, 109.0], [6.9, 109.0], [7.0, 110.0], [7.1, 111.0], [7.2, 112.0], [7.3, 112.0], [7.4, 113.0], [7.5, 113.0], [7.6, 115.0], [7.7, 115.0], [7.8, 115.0], [7.9, 116.0], [8.0, 117.0], [8.1, 118.0], [8.2, 119.0], [8.3, 120.0], [8.4, 121.0], [8.5, 122.0], [8.6, 123.0], [8.7, 124.0], [8.8, 125.0], [8.9, 126.0], [9.0, 127.0], [9.1, 127.0], [9.2, 127.0], [9.3, 128.0], [9.4, 130.0], [9.5, 131.0], [9.6, 132.0], [9.7, 133.0], [9.8, 135.0], [9.9, 136.0], [10.0, 136.0], [10.1, 137.0], [10.2, 139.0], [10.3, 140.0], [10.4, 141.0], [10.5, 142.0], [10.6, 143.0], [10.7, 145.0], [10.8, 146.0], [10.9, 148.0], [11.0, 148.0], [11.1, 149.0], [11.2, 151.0], [11.3, 152.0], [11.4, 153.0], [11.5, 154.0], [11.6, 155.0], [11.7, 156.0], [11.8, 156.0], [11.9, 157.0], [12.0, 158.0], [12.1, 158.0], [12.2, 159.0], [12.3, 160.0], [12.4, 160.0], [12.5, 160.0], [12.6, 161.0], [12.7, 161.0], [12.8, 162.0], [12.9, 162.0], [13.0, 163.0], [13.1, 163.0], [13.2, 164.0], [13.3, 164.0], [13.4, 165.0], [13.5, 165.0], [13.6, 166.0], [13.7, 166.0], [13.8, 167.0], [13.9, 167.0], [14.0, 168.0], [14.1, 168.0], [14.2, 168.0], [14.3, 169.0], [14.4, 169.0], [14.5, 170.0], [14.6, 170.0], [14.7, 171.0], [14.8, 171.0], [14.9, 171.0], [15.0, 172.0], [15.1, 172.0], [15.2, 172.0], [15.3, 172.0], [15.4, 173.0], [15.5, 173.0], [15.6, 173.0], [15.7, 174.0], [15.8, 174.0], [15.9, 175.0], [16.0, 175.0], [16.1, 175.0], [16.2, 175.0], [16.3, 176.0], [16.4, 176.0], [16.5, 177.0], [16.6, 177.0], [16.7, 177.0], [16.8, 178.0], [16.9, 179.0], [17.0, 179.0], [17.1, 179.0], [17.2, 180.0], [17.3, 180.0], [17.4, 180.0], [17.5, 181.0], [17.6, 181.0], [17.7, 181.0], [17.8, 181.0], [17.9, 181.0], [18.0, 182.0], [18.1, 182.0], [18.2, 182.0], [18.3, 183.0], [18.4, 183.0], [18.5, 184.0], [18.6, 184.0], [18.7, 185.0], [18.8, 185.0], [18.9, 185.0], [19.0, 186.0], [19.1, 186.0], [19.2, 187.0], [19.3, 187.0], [19.4, 187.0], [19.5, 187.0], [19.6, 188.0], [19.7, 188.0], [19.8, 188.0], [19.9, 189.0], [20.0, 189.0], [20.1, 189.0], [20.2, 190.0], [20.3, 190.0], [20.4, 190.0], [20.5, 191.0], [20.6, 191.0], [20.7, 191.0], [20.8, 192.0], [20.9, 192.0], [21.0, 192.0], [21.1, 193.0], [21.2, 193.0], [21.3, 193.0], [21.4, 194.0], [21.5, 194.0], [21.6, 194.0], [21.7, 195.0], [21.8, 195.0], [21.9, 196.0], [22.0, 196.0], [22.1, 196.0], [22.2, 196.0], [22.3, 197.0], [22.4, 197.0], [22.5, 197.0], [22.6, 198.0], [22.7, 198.0], [22.8, 198.0], [22.9, 199.0], [23.0, 199.0], [23.1, 200.0], [23.2, 200.0], [23.3, 200.0], [23.4, 200.0], [23.5, 200.0], [23.6, 201.0], [23.7, 201.0], [23.8, 201.0], [23.9, 202.0], [24.0, 202.0], [24.1, 202.0], [24.2, 203.0], [24.3, 203.0], [24.4, 203.0], [24.5, 203.0], [24.6, 204.0], [24.7, 204.0], [24.8, 204.0], [24.9, 204.0], [25.0, 205.0], [25.1, 205.0], [25.2, 205.0], [25.3, 206.0], [25.4, 206.0], [25.5, 206.0], [25.6, 207.0], [25.7, 207.0], [25.8, 207.0], [25.9, 208.0], [26.0, 208.0], [26.1, 208.0], [26.2, 208.0], [26.3, 208.0], [26.4, 209.0], [26.5, 209.0], [26.6, 209.0], [26.7, 210.0], [26.8, 210.0], [26.9, 210.0], [27.0, 211.0], [27.1, 211.0], [27.2, 211.0], [27.3, 211.0], [27.4, 212.0], [27.5, 212.0], [27.6, 212.0], [27.7, 212.0], [27.8, 212.0], [27.9, 213.0], [28.0, 213.0], [28.1, 213.0], [28.2, 213.0], [28.3, 214.0], [28.4, 214.0], [28.5, 214.0], [28.6, 214.0], [28.7, 215.0], [28.8, 215.0], [28.9, 215.0], [29.0, 215.0], [29.1, 216.0], [29.2, 216.0], [29.3, 216.0], [29.4, 216.0], [29.5, 217.0], [29.6, 217.0], [29.7, 217.0], [29.8, 218.0], [29.9, 218.0], [30.0, 218.0], [30.1, 218.0], [30.2, 219.0], [30.3, 219.0], [30.4, 219.0], [30.5, 219.0], [30.6, 219.0], [30.7, 220.0], [30.8, 220.0], [30.9, 220.0], [31.0, 220.0], [31.1, 220.0], [31.2, 220.0], [31.3, 220.0], [31.4, 221.0], [31.5, 221.0], [31.6, 221.0], [31.7, 221.0], [31.8, 221.0], [31.9, 222.0], [32.0, 222.0], [32.1, 222.0], [32.2, 222.0], [32.3, 222.0], [32.4, 223.0], [32.5, 223.0], [32.6, 223.0], [32.7, 223.0], [32.8, 224.0], [32.9, 224.0], [33.0, 224.0], [33.1, 224.0], [33.2, 225.0], [33.3, 225.0], [33.4, 225.0], [33.5, 225.0], [33.6, 225.0], [33.7, 226.0], [33.8, 226.0], [33.9, 226.0], [34.0, 227.0], [34.1, 227.0], [34.2, 228.0], [34.3, 228.0], [34.4, 228.0], [34.5, 228.0], [34.6, 228.0], [34.7, 228.0], [34.8, 229.0], [34.9, 229.0], [35.0, 229.0], [35.1, 230.0], [35.2, 230.0], [35.3, 230.0], [35.4, 230.0], [35.5, 231.0], [35.6, 231.0], [35.7, 231.0], [35.8, 232.0], [35.9, 232.0], [36.0, 232.0], [36.1, 233.0], [36.2, 233.0], [36.3, 233.0], [36.4, 234.0], [36.5, 234.0], [36.6, 235.0], [36.7, 235.0], [36.8, 235.0], [36.9, 235.0], [37.0, 236.0], [37.1, 236.0], [37.2, 236.0], [37.3, 236.0], [37.4, 237.0], [37.5, 237.0], [37.6, 237.0], [37.7, 238.0], [37.8, 238.0], [37.9, 238.0], [38.0, 239.0], [38.1, 239.0], [38.2, 239.0], [38.3, 239.0], [38.4, 240.0], [38.5, 240.0], [38.6, 240.0], [38.7, 241.0], [38.8, 241.0], [38.9, 241.0], [39.0, 242.0], [39.1, 242.0], [39.2, 242.0], [39.3, 242.0], [39.4, 243.0], [39.5, 243.0], [39.6, 243.0], [39.7, 243.0], [39.8, 243.0], [39.9, 243.0], [40.0, 244.0], [40.1, 244.0], [40.2, 244.0], [40.3, 244.0], [40.4, 244.0], [40.5, 245.0], [40.6, 245.0], [40.7, 245.0], [40.8, 246.0], [40.9, 246.0], [41.0, 247.0], [41.1, 247.0], [41.2, 247.0], [41.3, 247.0], [41.4, 248.0], [41.5, 248.0], [41.6, 248.0], [41.7, 249.0], [41.8, 249.0], [41.9, 249.0], [42.0, 249.0], [42.1, 250.0], [42.2, 250.0], [42.3, 251.0], [42.4, 251.0], [42.5, 251.0], [42.6, 251.0], [42.7, 252.0], [42.8, 252.0], [42.9, 252.0], [43.0, 252.0], [43.1, 253.0], [43.2, 253.0], [43.3, 254.0], [43.4, 254.0], [43.5, 255.0], [43.6, 255.0], [43.7, 255.0], [43.8, 255.0], [43.9, 256.0], [44.0, 256.0], [44.1, 256.0], [44.2, 256.0], [44.3, 257.0], [44.4, 257.0], [44.5, 257.0], [44.6, 258.0], [44.7, 258.0], [44.8, 258.0], [44.9, 259.0], [45.0, 259.0], [45.1, 260.0], [45.2, 260.0], [45.3, 260.0], [45.4, 260.0], [45.5, 261.0], [45.6, 261.0], [45.7, 261.0], [45.8, 262.0], [45.9, 262.0], [46.0, 263.0], [46.1, 263.0], [46.2, 263.0], [46.3, 263.0], [46.4, 264.0], [46.5, 264.0], [46.6, 264.0], [46.7, 264.0], [46.8, 265.0], [46.9, 265.0], [47.0, 266.0], [47.1, 266.0], [47.2, 267.0], [47.3, 267.0], [47.4, 267.0], [47.5, 268.0], [47.6, 268.0], [47.7, 268.0], [47.8, 268.0], [47.9, 269.0], [48.0, 270.0], [48.1, 270.0], [48.2, 270.0], [48.3, 270.0], [48.4, 271.0], [48.5, 271.0], [48.6, 271.0], [48.7, 272.0], [48.8, 272.0], [48.9, 272.0], [49.0, 272.0], [49.1, 272.0], [49.2, 273.0], [49.3, 273.0], [49.4, 273.0], [49.5, 274.0], [49.6, 274.0], [49.7, 274.0], [49.8, 275.0], [49.9, 275.0], [50.0, 276.0], [50.1, 276.0], [50.2, 276.0], [50.3, 277.0], [50.4, 277.0], [50.5, 278.0], [50.6, 278.0], [50.7, 278.0], [50.8, 278.0], [50.9, 279.0], [51.0, 279.0], [51.1, 279.0], [51.2, 279.0], [51.3, 279.0], [51.4, 279.0], [51.5, 280.0], [51.6, 280.0], [51.7, 280.0], [51.8, 280.0], [51.9, 280.0], [52.0, 280.0], [52.1, 281.0], [52.2, 281.0], [52.3, 281.0], [52.4, 282.0], [52.5, 282.0], [52.6, 282.0], [52.7, 283.0], [52.8, 284.0], [52.9, 284.0], [53.0, 284.0], [53.1, 285.0], [53.2, 285.0], [53.3, 286.0], [53.4, 286.0], [53.5, 287.0], [53.6, 287.0], [53.7, 287.0], [53.8, 287.0], [53.9, 287.0], [54.0, 288.0], [54.1, 288.0], [54.2, 288.0], [54.3, 288.0], [54.4, 289.0], [54.5, 289.0], [54.6, 290.0], [54.7, 290.0], [54.8, 291.0], [54.9, 291.0], [55.0, 292.0], [55.1, 292.0], [55.2, 292.0], [55.3, 293.0], [55.4, 293.0], [55.5, 294.0], [55.6, 294.0], [55.7, 294.0], [55.8, 295.0], [55.9, 295.0], [56.0, 295.0], [56.1, 296.0], [56.2, 296.0], [56.3, 296.0], [56.4, 296.0], [56.5, 297.0], [56.6, 297.0], [56.7, 297.0], [56.8, 298.0], [56.9, 299.0], [57.0, 299.0], [57.1, 300.0], [57.2, 300.0], [57.3, 301.0], [57.4, 301.0], [57.5, 301.0], [57.6, 302.0], [57.7, 302.0], [57.8, 303.0], [57.9, 303.0], [58.0, 304.0], [58.1, 304.0], [58.2, 304.0], [58.3, 304.0], [58.4, 305.0], [58.5, 305.0], [58.6, 306.0], [58.7, 306.0], [58.8, 307.0], [58.9, 307.0], [59.0, 307.0], [59.1, 308.0], [59.2, 308.0], [59.3, 308.0], [59.4, 309.0], [59.5, 309.0], [59.6, 310.0], [59.7, 310.0], [59.8, 310.0], [59.9, 311.0], [60.0, 311.0], [60.1, 312.0], [60.2, 312.0], [60.3, 312.0], [60.4, 312.0], [60.5, 313.0], [60.6, 313.0], [60.7, 313.0], [60.8, 314.0], [60.9, 314.0], [61.0, 314.0], [61.1, 315.0], [61.2, 315.0], [61.3, 316.0], [61.4, 316.0], [61.5, 316.0], [61.6, 316.0], [61.7, 316.0], [61.8, 317.0], [61.9, 317.0], [62.0, 318.0], [62.1, 318.0], [62.2, 318.0], [62.3, 318.0], [62.4, 319.0], [62.5, 319.0], [62.6, 319.0], [62.7, 319.0], [62.8, 320.0], [62.9, 320.0], [63.0, 320.0], [63.1, 320.0], [63.2, 321.0], [63.3, 321.0], [63.4, 321.0], [63.5, 322.0], [63.6, 322.0], [63.7, 322.0], [63.8, 323.0], [63.9, 323.0], [64.0, 323.0], [64.1, 324.0], [64.2, 324.0], [64.3, 324.0], [64.4, 324.0], [64.5, 324.0], [64.6, 324.0], [64.7, 325.0], [64.8, 325.0], [64.9, 325.0], [65.0, 325.0], [65.1, 325.0], [65.2, 326.0], [65.3, 326.0], [65.4, 326.0], [65.5, 327.0], [65.6, 327.0], [65.7, 327.0], [65.8, 328.0], [65.9, 328.0], [66.0, 328.0], [66.1, 328.0], [66.2, 328.0], [66.3, 329.0], [66.4, 329.0], [66.5, 329.0], [66.6, 329.0], [66.7, 330.0], [66.8, 330.0], [66.9, 330.0], [67.0, 330.0], [67.1, 330.0], [67.2, 331.0], [67.3, 331.0], [67.4, 331.0], [67.5, 331.0], [67.6, 331.0], [67.7, 332.0], [67.8, 332.0], [67.9, 332.0], [68.0, 332.0], [68.1, 332.0], [68.2, 332.0], [68.3, 333.0], [68.4, 333.0], [68.5, 333.0], [68.6, 333.0], [68.7, 333.0], [68.8, 334.0], [68.9, 334.0], [69.0, 334.0], [69.1, 334.0], [69.2, 335.0], [69.3, 335.0], [69.4, 335.0], [69.5, 335.0], [69.6, 335.0], [69.7, 336.0], [69.8, 336.0], [69.9, 336.0], [70.0, 336.0], [70.1, 336.0], [70.2, 337.0], [70.3, 337.0], [70.4, 337.0], [70.5, 337.0], [70.6, 338.0], [70.7, 338.0], [70.8, 338.0], [70.9, 339.0], [71.0, 339.0], [71.1, 339.0], [71.2, 339.0], [71.3, 339.0], [71.4, 339.0], [71.5, 339.0], [71.6, 340.0], [71.7, 340.0], [71.8, 340.0], [71.9, 340.0], [72.0, 340.0], [72.1, 340.0], [72.2, 341.0], [72.3, 341.0], [72.4, 341.0], [72.5, 341.0], [72.6, 341.0], [72.7, 341.0], [72.8, 342.0], [72.9, 342.0], [73.0, 342.0], [73.1, 342.0], [73.2, 342.0], [73.3, 343.0], [73.4, 343.0], [73.5, 343.0], [73.6, 343.0], [73.7, 344.0], [73.8, 344.0], [73.9, 344.0], [74.0, 344.0], [74.1, 345.0], [74.2, 345.0], [74.3, 345.0], [74.4, 346.0], [74.5, 346.0], [74.6, 346.0], [74.7, 347.0], [74.8, 347.0], [74.9, 347.0], [75.0, 347.0], [75.1, 348.0], [75.2, 348.0], [75.3, 348.0], [75.4, 348.0], [75.5, 348.0], [75.6, 348.0], [75.7, 349.0], [75.8, 349.0], [75.9, 349.0], [76.0, 349.0], [76.1, 349.0], [76.2, 350.0], [76.3, 350.0], [76.4, 350.0], [76.5, 350.0], [76.6, 350.0], [76.7, 351.0], [76.8, 351.0], [76.9, 351.0], [77.0, 352.0], [77.1, 352.0], [77.2, 352.0], [77.3, 352.0], [77.4, 352.0], [77.5, 353.0], [77.6, 353.0], [77.7, 353.0], [77.8, 353.0], [77.9, 354.0], [78.0, 354.0], [78.1, 355.0], [78.2, 355.0], [78.3, 355.0], [78.4, 355.0], [78.5, 356.0], [78.6, 356.0], [78.7, 356.0], [78.8, 356.0], [78.9, 356.0], [79.0, 356.0], [79.1, 357.0], [79.2, 357.0], [79.3, 357.0], [79.4, 358.0], [79.5, 358.0], [79.6, 358.0], [79.7, 358.0], [79.8, 359.0], [79.9, 359.0], [80.0, 359.0], [80.1, 360.0], [80.2, 360.0], [80.3, 360.0], [80.4, 360.0], [80.5, 361.0], [80.6, 361.0], [80.7, 361.0], [80.8, 362.0], [80.9, 362.0], [81.0, 362.0], [81.1, 362.0], [81.2, 363.0], [81.3, 363.0], [81.4, 363.0], [81.5, 363.0], [81.6, 364.0], [81.7, 364.0], [81.8, 364.0], [81.9, 364.0], [82.0, 364.0], [82.1, 365.0], [82.2, 365.0], [82.3, 365.0], [82.4, 365.0], [82.5, 366.0], [82.6, 366.0], [82.7, 366.0], [82.8, 367.0], [82.9, 367.0], [83.0, 367.0], [83.1, 368.0], [83.2, 368.0], [83.3, 368.0], [83.4, 369.0], [83.5, 369.0], [83.6, 369.0], [83.7, 370.0], [83.8, 371.0], [83.9, 371.0], [84.0, 372.0], [84.1, 372.0], [84.2, 372.0], [84.3, 373.0], [84.4, 374.0], [84.5, 374.0], [84.6, 375.0], [84.7, 375.0], [84.8, 375.0], [84.9, 376.0], [85.0, 376.0], [85.1, 376.0], [85.2, 377.0], [85.3, 377.0], [85.4, 378.0], [85.5, 378.0], [85.6, 378.0], [85.7, 379.0], [85.8, 379.0], [85.9, 380.0], [86.0, 380.0], [86.1, 381.0], [86.2, 381.0], [86.3, 381.0], [86.4, 382.0], [86.5, 384.0], [86.6, 385.0], [86.7, 385.0], [86.8, 387.0], [86.9, 387.0], [87.0, 388.0], [87.1, 388.0], [87.2, 388.0], [87.3, 390.0], [87.4, 390.0], [87.5, 391.0], [87.6, 392.0], [87.7, 393.0], [87.8, 394.0], [87.9, 395.0], [88.0, 396.0], [88.1, 396.0], [88.2, 398.0], [88.3, 399.0], [88.4, 402.0], [88.5, 404.0], [88.6, 405.0], [88.7, 408.0], [88.8, 410.0], [88.9, 414.0], [89.0, 420.0], [89.1, 429.0], [89.2, 435.0], [89.3, 440.0], [89.4, 445.0], [89.5, 448.0], [89.6, 454.0], [89.7, 460.0], [89.8, 463.0], [89.9, 466.0], [90.0, 472.0], [90.1, 478.0], [90.2, 481.0], [90.3, 487.0], [90.4, 491.0], [90.5, 494.0], [90.6, 499.0], [90.7, 500.0], [90.8, 501.0], [90.9, 505.0], [91.0, 506.0], [91.1, 509.0], [91.2, 511.0], [91.3, 515.0], [91.4, 516.0], [91.5, 519.0], [91.6, 521.0], [91.7, 527.0], [91.8, 538.0], [91.9, 544.0], [92.0, 550.0], [92.1, 569.0], [92.2, 595.0], [92.3, 604.0], [92.4, 620.0], [92.5, 633.0], [92.6, 644.0], [92.7, 657.0], [92.8, 678.0], [92.9, 697.0], [93.0, 707.0], [93.1, 716.0], [93.2, 723.0], [93.3, 732.0], [93.4, 744.0], [93.5, 1006.0], [93.6, 1058.0], [93.7, 1118.0], [93.8, 1164.0], [93.9, 1182.0], [94.0, 1325.0], [94.1, 1369.0], [94.2, 1418.0], [94.3, 1592.0], [94.4, 1705.0], [94.5, 1847.0], [94.6, 1974.0], [94.7, 2012.0], [94.8, 2162.0], [94.9, 2258.0], [95.0, 2427.0], [95.1, 2544.0], [95.2, 2698.0], [95.3, 2790.0], [95.4, 2903.0], [95.5, 2995.0], [95.6, 3111.0], [95.7, 3229.0], [95.8, 3298.0], [95.9, 3449.0], [96.0, 3510.0], [96.1, 3606.0], [96.2, 3634.0], [96.3, 3681.0], [96.4, 3751.0], [96.5, 3825.0], [96.6, 3946.0], [96.7, 4053.0], [96.8, 4090.0], [96.9, 4183.0], [97.0, 4289.0], [97.1, 4468.0], [97.2, 4630.0], [97.3, 4698.0], [97.4, 4815.0], [97.5, 4839.0], [97.6, 4845.0], [97.7, 4866.0], [97.8, 4899.0], [97.9, 4943.0], [98.0, 5018.0], [98.1, 5170.0], [98.2, 5354.0], [98.3, 5367.0], [98.4, 5492.0], [98.5, 5528.0], [98.6, 5667.0], [98.7, 5793.0], [98.8, 5839.0], [98.9, 5989.0], [99.0, 6011.0], [99.1, 6069.0], [99.2, 6217.0], [99.3, 6294.0], [99.4, 6469.0], [99.5, 6596.0], [99.6, 6610.0], [99.7, 6678.0], [99.8, 6688.0], [99.9, 6712.0], [100.0, 6757.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3393.0, "series": [{"data": [[0.0, 534.0], [600.0, 68.0], [700.0, 47.0], [900.0, 5.0], [1000.0, 23.0], [1100.0, 24.0], [1200.0, 2.0], [1300.0, 22.0], [1400.0, 10.0], [1500.0, 7.0], [1600.0, 5.0], [1700.0, 9.0], [1800.0, 9.0], [1900.0, 11.0], [2000.0, 7.0], [2100.0, 11.0], [2200.0, 5.0], [2300.0, 6.0], [2400.0, 8.0], [2500.0, 10.0], [2600.0, 6.0], [2700.0, 10.0], [2800.0, 7.0], [2900.0, 13.0], [3000.0, 6.0], [3100.0, 10.0], [3200.0, 15.0], [3300.0, 1.0], [3400.0, 16.0], [3500.0, 11.0], [3600.0, 23.0], [3700.0, 14.0], [3800.0, 6.0], [3900.0, 10.0], [4000.0, 20.0], [4100.0, 10.0], [4200.0, 8.0], [4300.0, 5.0], [4400.0, 5.0], [4500.0, 8.0], [4600.0, 13.0], [4700.0, 1.0], [4800.0, 48.0], [4900.0, 18.0], [5000.0, 8.0], [5100.0, 6.0], [5200.0, 6.0], [5300.0, 16.0], [5400.0, 8.0], [5500.0, 10.0], [5600.0, 14.0], [5700.0, 5.0], [5800.0, 13.0], [5900.0, 8.0], [6000.0, 24.0], [6200.0, 15.0], [6300.0, 5.0], [6400.0, 8.0], [6500.0, 9.0], [6600.0, 32.0], [6700.0, 15.0], [100.0, 1774.0], [200.0, 3393.0], [300.0, 3133.0], [400.0, 229.0], [500.0, 162.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 348.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9078.0, "series": [{"data": [[0.0, 9078.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 348.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 574.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 552.0064000000002, "minX": 1.66956864E12, "maxY": 552.0064000000002, "series": [{"data": [[1.66956864E12, 552.0064000000002]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956864E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 4087.0, "series": [{"data": [[2.0, 7.0], [3.0, 7.0], [4.0, 50.0], [5.0, 57.0], [6.0, 57.0], [7.0, 61.0], [8.0, 79.0], [9.0, 92.0], [10.0, 50.5], [11.0, 48.0], [12.0, 51.5], [13.0, 55.0], [15.0, 49.0], [16.0, 45.0], [18.0, 57.0], [19.0, 136.0], [22.0, 51.0], [23.0, 135.0], [24.0, 44.0], [27.0, 70.75], [28.0, 61.0], [31.0, 68.0], [34.0, 70.0], [37.0, 101.0], [36.0, 96.75], [39.0, 102.2], [41.0, 115.25], [43.0, 116.25], [42.0, 113.0], [45.0, 99.75], [44.0, 113.69999999999999], [47.0, 98.66666666666667], [46.0, 117.33333333333333], [49.0, 139.0], [48.0, 157.0], [51.0, 104.0], [50.0, 109.0], [55.0, 122.0], [54.0, 116.0], [57.0, 57.0], [56.0, 29.0], [59.0, 75.33333333333333], [58.0, 98.33333333333333], [61.0, 67.0], [60.0, 74.0], [63.0, 96.33333333333333], [62.0, 82.0], [65.0, 86.33333333333334], [67.0, 59.60714285714285], [66.0, 50.50000000000001], [64.0, 80.5], [68.0, 79.16666666666666], [71.0, 80.53333333333335], [69.0, 48.0], [72.0, 68.30769230769232], [73.0, 52.857142857142854], [74.0, 78.1], [75.0, 66.0], [76.0, 90.44444444444444], [77.0, 55.333333333333336], [79.0, 69.0], [78.0, 72.0], [81.0, 65.27777777777777], [82.0, 59.5], [83.0, 96.0], [85.0, 63.54545454545455], [87.0, 82.0], [86.0, 106.0], [84.0, 87.75], [90.0, 62.25], [91.0, 57.25], [88.0, 154.0], [93.0, 74.36363636363636], [95.0, 61.66666666666667], [94.0, 160.0], [92.0, 94.5], [98.0, 96.70588235294119], [99.0, 113.25], [97.0, 81.0], [96.0, 72.0], [101.0, 111.45454545454545], [102.0, 65.94736842105262], [103.0, 97.71428571428571], [100.0, 121.87499999999999], [107.0, 73.77777777777779], [106.0, 132.4], [105.0, 135.08333333333331], [104.0, 136.0], [111.0, 138.75], [110.0, 133.57142857142856], [108.0, 133.66666666666666], [114.0, 108.63636363636361], [115.0, 128.5], [112.0, 134.75], [117.0, 84.45], [118.0, 93.5], [119.0, 93.5], [116.0, 134.0], [122.0, 85.64285714285715], [123.0, 104.16666666666666], [121.0, 117.75], [120.0, 116.75], [124.0, 79.76923076923077], [126.0, 92.17499999999998], [127.0, 100.25], [125.0, 100.35294117647061], [128.0, 95.0], [133.0, 113.61111111111111], [134.0, 102.94117647058823], [135.0, 109.37500000000001], [132.0, 102.16666666666667], [131.0, 106.33333333333333], [130.0, 94.33333333333333], [129.0, 84.75], [139.0, 120.76470588235296], [143.0, 101.80645161290325], [142.0, 113.41666666666666], [141.0, 109.125], [140.0, 112.33333333333333], [138.0, 109.0], [137.0, 102.8], [136.0, 82.0], [144.0, 111.93749999999999], [146.0, 101.5], [147.0, 114.26315789473684], [151.0, 105.0], [150.0, 115.0], [149.0, 115.0], [148.0, 110.5], [145.0, 127.47826086956522], [152.0, 106.08333333333334], [159.0, 129.8918918918919], [158.0, 127.0], [157.0, 124.25000000000001], [156.0, 121.25], [154.0, 120.5], [153.0, 121.25], [160.0, 114.05882352941177], [161.0, 99.16666666666666], [162.0, 112.5], [163.0, 137.75], [164.0, 148.66666666666666], [167.0, 170.26315789473685], [166.0, 182.66666666666666], [165.0, 184.85714285714286], [168.0, 163.6153846153846], [173.0, 190.16666666666669], [174.0, 181.07142857142856], [175.0, 206.0], [172.0, 171.33333333333334], [171.0, 184.39999999999998], [170.0, 171.5], [169.0, 170.57142857142856], [183.0, 146.76923076923077], [182.0, 166.90909090909093], [181.0, 172.71428571428572], [179.0, 185.38888888888889], [178.0, 199.0526315789473], [177.0, 200.75000000000003], [176.0, 193.71428571428575], [184.0, 163.70833333333331], [185.0, 144.8666666666667], [190.0, 176.08], [191.0, 180.89743589743588], [189.0, 177.64285714285717], [188.0, 179.3846153846154], [186.0, 173.42857142857144], [192.0, 143.14285714285714], [196.0, 124.9090909090909], [197.0, 160.57142857142858], [199.0, 186.94444444444446], [198.0, 191.08695652173915], [195.0, 183.8], [194.0, 199.5], [193.0, 167.5], [201.0, 195.77777777777774], [202.0, 157.84210526315792], [207.0, 218.74999999999997], [205.0, 263.0], [204.0, 217.0], [203.0, 194.66666666666666], [200.0, 183.77419354838713], [210.0, 182.2], [214.0, 198.5], [215.0, 229.6], [213.0, 246.33333333333334], [211.0, 222.07142857142858], [216.0, 169.29999999999998], [218.0, 240.8], [222.0, 141.0], [223.0, 235.625], [221.0, 250.50000000000003], [220.0, 245.33333333333334], [217.0, 224.33333333333334], [224.0, 207.0], [231.0, 272.33333333333337], [230.0, 262.40000000000003], [229.0, 260.6666666666667], [228.0, 250.30769230769232], [227.0, 251.66666666666666], [225.0, 272.0], [226.0, 208.0], [234.0, 990.0], [235.0, 1418.7272727272725], [239.0, 2356.333333333333], [238.0, 2428.6666666666665], [237.0, 291.0], [236.0, 1698.9374999999998], [233.0, 271.625], [241.0, 3822.222222222222], [243.0, 3007.0], [245.0, 2298.052631578947], [247.0, 1316.8333333333335], [246.0, 286.75], [244.0, 2606.272727272727], [242.0, 3767.090909090909], [240.0, 288.0], [249.0, 214.62500000000003], [250.0, 2324.0], [251.0, 690.2307692307693], [253.0, 174.46153846153848], [254.0, 2636.0], [255.0, 187.5], [252.0, 275.0], [248.0, 286.0], [270.0, 271.06249999999994], [260.0, 203.0], [262.0, 279.0], [261.0, 1855.4999999999998], [263.0, 218.0], [266.0, 271.2307692307693], [267.0, 270.62499999999994], [268.0, 198.22222222222223], [259.0, 2387.333333333333], [258.0, 275.0], [256.0, 1869.7499999999998], [271.0, 276.0], [269.0, 276.5], [265.0, 1427.6363636363635], [264.0, 2085.2142857142853], [287.0, 203.33333333333334], [272.0, 262.0], [279.0, 219.66666666666666], [278.0, 1790.2499999999998], [277.0, 223.0], [276.0, 609.2352941176471], [285.0, 198.4], [286.0, 211.6], [284.0, 216.20000000000002], [275.0, 247.0], [274.0, 255.42857142857144], [273.0, 790.0], [283.0, 216.5], [282.0, 699.8461538461538], [281.0, 1255.9166666666667], [280.0, 1143.185185185185], [301.0, 591.8421052631579], [288.0, 234.0], [290.0, 686.8947368421053], [289.0, 981.1250000000002], [294.0, 203.95652173913047], [293.0, 183.4], [292.0, 211.0], [295.0, 207.0], [297.0, 495.09090909090895], [296.0, 204.6153846153846], [303.0, 875.3], [302.0, 1584.695652173913], [300.0, 255.25], [291.0, 222.0], [299.0, 1059.8666666666668], [298.0, 661.2], [319.0, 261.94594594594594], [304.0, 220.0909090909091], [311.0, 2646.0], [310.0, 818.5454545454546], [309.0, 2266.6666666666665], [308.0, 266.0], [314.0, 231.5], [318.0, 280.44444444444446], [317.0, 279.00000000000006], [316.0, 278.375], [307.0, 271.0], [306.0, 277.2], [315.0, 263.5], [313.0, 281.5], [312.0, 275.25], [334.0, 1073.7777777777778], [323.0, 230.85714285714286], [324.0, 1455.344827586207], [325.0, 1695.0], [327.0, 200.0], [320.0, 275.0], [322.0, 280.5], [321.0, 262.0], [326.0, 234.85714285714286], [335.0, 420.78571428571433], [333.0, 1183.1666666666665], [332.0, 229.66666666666666], [331.0, 2153.3333333333335], [330.0, 212.0], [329.0, 2397.2500000000005], [328.0, 2634.6666666666665], [350.0, 824.4571428571429], [338.0, 226.55555555555554], [337.0, 216.99999999999997], [336.0, 218.1764705882353], [343.0, 772.0], [342.0, 210.625], [341.0, 211.375], [340.0, 214.05882352941174], [339.0, 209.0], [349.0, 301.0], [351.0, 1298.2], [348.0, 1076.315789473684], [347.0, 893.125], [346.0, 750.5121951219512], [345.0, 191.0], [344.0, 839.1111111111111], [367.0, 2213.4736842105267], [364.0, 190.35000000000005], [354.0, 167.5], [353.0, 174.33333333333334], [352.0, 181.66666666666666], [365.0, 408.55769230769243], [366.0, 655.3333333333333], [363.0, 145.0], [362.0, 174.23076923076923], [361.0, 165.33333333333334], [360.0, 180.8], [359.0, 178.0], [358.0, 152.0], [357.0, 193.25], [356.0, 170.12499999999997], [370.0, 796.2222222222222], [368.0, 512.9411764705883], [369.0, 192.4], [371.0, 526.65625], [372.0, 658.7391304347826], [373.0, 183.69230769230768], [375.0, 183.7], [374.0, 164.0], [376.0, 179.1111111111111], [377.0, 200.57142857142858], [379.0, 193.8181818181818], [378.0, 196.25], [383.0, 367.33333333333337], [382.0, 215.0], [380.0, 192.42857142857142], [398.0, 202.00000000000003], [387.0, 189.5], [391.0, 1509.25], [384.0, 725.4], [386.0, 1078.5], [385.0, 193.0], [388.0, 553.5333333333332], [389.0, 672.1818181818181], [390.0, 1661.1111111111106], [394.0, 225.0], [399.0, 427.0], [397.0, 666.6086956521738], [395.0, 179.0], [393.0, 204.0], [415.0, 616.1428571428571], [405.0, 252.85714285714283], [407.0, 252.46666666666664], [411.0, 705.1818181818182], [413.0, 264.2], [403.0, 253.09090909090907], [402.0, 250.3076923076923], [401.0, 260.0], [400.0, 664.3333333333334], [410.0, 273.0], [409.0, 624.8571428571429], [408.0, 908.8124999999999], [404.0, 260.413043478261], [430.0, 242.66666666666669], [422.0, 254.55555555555554], [421.0, 248.16666666666663], [420.0, 256.25], [423.0, 240.12500000000003], [417.0, 252.5], [416.0, 1610.6122448979595], [419.0, 248.57142857142856], [418.0, 255.0], [425.0, 568.0625], [431.0, 239.0], [424.0, 244.0], [429.0, 225.0], [428.0, 230.55555555555557], [427.0, 236.8888888888889], [426.0, 238.4], [446.0, 198.6], [434.0, 276.1], [437.0, 319.25], [436.0, 218.0], [438.0, 220.42857142857142], [433.0, 622.7200000000003], [432.0, 852.3437499999999], [447.0, 203.33333333333334], [444.0, 216.0], [435.0, 1457.1250000000002], [443.0, 203.8], [442.0, 210.7142857142857], [441.0, 212.5], [440.0, 426.44680851063833], [461.0, 229.0], [448.0, 261.37500000000006], [455.0, 258.05882352941177], [453.0, 199.57142857142856], [452.0, 710.8421052631579], [459.0, 731.4], [463.0, 246.6], [462.0, 1398.5], [460.0, 222.66666666666666], [451.0, 208.28571428571428], [450.0, 200.26923076923075], [449.0, 607.4999999999999], [457.0, 886.9999999999999], [456.0, 805.2250000000003], [478.0, 1465.375], [465.0, 245.72727272727272], [464.0, 177.0], [467.0, 2124.2], [466.0, 244.28571428571428], [471.0, 252.71428571428572], [470.0, 221.0], [469.0, 267.5], [468.0, 233.33333333333334], [473.0, 286.1111111111111], [475.0, 588.0624999999999], [476.0, 613.9666666666667], [479.0, 1461.5], [477.0, 1244.8], [474.0, 303.0], [472.0, 283.5384615384615], [494.0, 264.0], [486.0, 2104.622222222222], [485.0, 2699.052631578947], [487.0, 880.4193548387096], [481.0, 1376.1538461538462], [480.0, 1852.3333333333335], [483.0, 1577.2749999999999], [482.0, 1159.9090909090908], [492.0, 308.4285714285714], [495.0, 1174.8], [493.0, 688.6363636363636], [491.0, 1764.0], [490.0, 280.0], [489.0, 1761.3333333333335], [488.0, 579.3666666666667], [510.0, 1380.0], [497.0, 685.1363636363635], [502.0, 788.576923076923], [501.0, 502.79999999999984], [500.0, 268.6666666666667], [503.0, 300.125], [496.0, 917.0714285714286], [505.0, 291.50000000000006], [508.0, 298.75], [498.0, 279.0], [509.0, 304.25], [507.0, 298.75], [506.0, 326.0], [504.0, 873.3], [538.0, 237.75], [512.0, 271.0], [514.0, 317.0], [513.0, 921.3809523809526], [516.0, 313.5], [515.0, 319.45454545454544], [518.0, 302.2631578947368], [519.0, 297.25], [537.0, 217.25], [536.0, 713.1250000000001], [526.0, 502.16666666666674], [525.0, 641.4545454545454], [524.0, 272.6], [523.0, 785.125], [522.0, 1092.2], [521.0, 276.0], [520.0, 638.3061224489796], [527.0, 284.6666666666667], [534.0, 278.5], [533.0, 440.9473684210526], [532.0, 689.3454545454545], [531.0, 568.6428571428571], [530.0, 733.8888888888888], [529.0, 287.3333333333333], [528.0, 277.2], [535.0, 528.1538461538461], [539.0, 280.6666666666667], [540.0, 237.8], [542.0, 306.2727272727272], [541.0, 227.0], [543.0, 234.0], [569.0, 497.4117647058824], [546.0, 284.54545454545456], [559.0, 229.5], [545.0, 1209.25], [544.0, 2209.3333333333335], [558.0, 246.0], [568.0, 245.0], [551.0, 2171.5], [550.0, 566.25], [549.0, 735.9166666666665], [548.0, 328.46938775510205], [547.0, 238.5], [552.0, 1124.888888888889], [554.0, 4087.0], [553.0, 1517.0], [556.0, 2547.6], [555.0, 799.1428571428571], [557.0, 782.6818181818181], [560.0, 296.8333333333333], [566.0, 878.1612903225807], [565.0, 254.0], [564.0, 258.2857142857143], [563.0, 246.58823529411762], [562.0, 237.25], [561.0, 714.125], [567.0, 494.3043478260868], [575.0, 656.6363636363636], [574.0, 1159.375], [573.0, 584.2187499999999], [572.0, 977.2], [571.0, 245.66666666666666], [570.0, 243.5], [606.0, 212.0], [583.0, 366.6], [588.0, 558.0909090909091], [587.0, 652.875], [586.0, 547.8181818181819], [585.0, 631.4444444444445], [584.0, 234.1], [591.0, 801.0], [577.0, 225.0], [576.0, 243.33333333333334], [582.0, 243.07692307692307], [580.0, 234.66666666666666], [589.0, 807.5], [593.0, 264.5], [599.0, 421.0], [598.0, 535.0909090909091], [597.0, 636.1212121212122], [596.0, 1972.0], [595.0, 229.0], [594.0, 214.0], [605.0, 306.9], [607.0, 223.0], [592.0, 199.4], [604.0, 216.0], [603.0, 227.6], [602.0, 231.0], [600.0, 202.4], [615.0, 287.3103448275862], [621.0, 258.75], [612.0, 921.6], [611.0, 404.5263157894736], [610.0, 197.25], [609.0, 225.0], [608.0, 210.8], [622.0, 1398.6666666666665], [623.0, 380.5], [613.0, 638.6999999999999], [614.0, 868.5625000000001], [624.0, 321.0], [634.0, 373.6666666666667], [632.0, 218.75], [635.0, 712.4285714285714], [638.0, 905.2], [637.0, 216.4], [639.0, 745.5384615384615], [625.0, 698.5], [628.0, 372.8888888888889], [627.0, 1598.2], [626.0, 220.6], [629.0, 229.38888888888889], [631.0, 914.8], [630.0, 231.83333333333331], [618.0, 484.0], [616.0, 568.1290322580645], [617.0, 382.6], [619.0, 925.4], [620.0, 222.66666666666666], [666.0, 3443.0], [670.0, 312.8571428571429], [641.0, 312.0], [640.0, 728.5238095238096], [642.0, 266.4], [645.0, 722.142857142857], [643.0, 252.5], [655.0, 478.72222222222206], [654.0, 759.7142857142857], [653.0, 1476.2500000000002], [652.0, 274.05], [651.0, 270.375], [650.0, 685.75], [649.0, 983.142857142857], [648.0, 261.0], [646.0, 337.1428571428571], [647.0, 410.0], [665.0, 292.0], [664.0, 838.8333333333333], [667.0, 1076.0], [657.0, 871.0], [658.0, 408.6666666666667], [659.0, 303.0], [662.0, 293.25], [660.0, 317.8], [671.0, 623.1818181818181], [656.0, 327.6666666666667], [669.0, 315.0], [668.0, 938.9333333333334], [696.0, 314.0], [700.0, 641.7142857142857], [672.0, 499.62499999999994], [686.0, 446.2], [685.0, 317.625], [681.0, 310.4], [680.0, 321.3333333333333], [687.0, 320.0], [691.0, 487.8571428571429], [693.0, 319.0], [692.0, 328.5], [694.0, 438.0], [695.0, 579.8], [699.0, 617.6666666666667], [701.0, 468.00000000000006], [689.0, 326.1666666666667], [698.0, 327.0], [697.0, 352.0], [679.0, 322.6], [678.0, 314.3333333333333], [677.0, 619.3333333333333], [676.0, 315.4], [674.0, 309.0], [673.0, 325.0], [735.0, 641.6666666666666], [710.0, 506.14285714285717], [719.0, 343.0], [706.0, 336.8], [705.0, 328.8], [708.0, 318.5], [707.0, 328.5], [717.0, 341.0], [716.0, 326.25], [715.0, 331.0], [714.0, 342.0], [712.0, 327.25], [721.0, 662.3333333333333], [732.0, 456.2857142857143], [733.0, 1179.0], [729.0, 328.7142857142857], [711.0, 317.0], [726.0, 317.5], [725.0, 325.5], [723.0, 339.0], [722.0, 327.0], [743.0, 861.8333333333334], [739.0, 813.4285714285714], [738.0, 323.5], [737.0, 317.0], [736.0, 310.0], [740.0, 1316.6666666666667], [751.0, 833.0], [750.0, 334.0], [749.0, 348.0], [741.0, 515.0], [742.0, 702.3333333333334], [754.0, 925.0000000000001], [753.0, 697.8750000000001], [757.0, 924.8], [755.0, 1324.6666666666665], [759.0, 333.8], [758.0, 1805.5], [763.0, 417.0], [762.0, 329.0], [761.0, 339.4166666666667], [764.0, 463.8333333333333], [766.0, 617.6666666666666], [765.0, 332.75], [767.0, 653.8000000000001], [794.0, 609.5], [768.0, 935.2608695652176], [770.0, 335.6666666666667], [769.0, 339.0], [772.0, 325.0], [771.0, 326.0], [782.0, 310.0], [781.0, 680.5], [780.0, 311.0], [778.0, 318.5], [777.0, 1771.0], [776.0, 333.5], [773.0, 485.5714285714286], [787.0, 493.0], [788.0, 463.0], [791.0, 332.3333333333333], [790.0, 375.0], [789.0, 342.6666666666667], [793.0, 341.1], [792.0, 309.3333333333333], [775.0, 326.8], [774.0, 330.6666666666667], [799.0, 325.3333333333333], [785.0, 326.25], [784.0, 334.0], [798.0, 335.0], [796.0, 327.3333333333333], [795.0, 336.5], [825.0, 347.6666666666667], [829.0, 544.5], [803.0, 383.5], [804.0, 425.6153846153845], [806.0, 871.59375], [805.0, 511.4166666666666], [824.0, 567.9166666666666], [807.0, 666.5555555555555], [826.0, 2931.0], [828.0, 985.3749999999998], [827.0, 616.1], [814.0, 482.85714285714295], [813.0, 837.0000000000001], [812.0, 342.3333333333333], [811.0, 356.0], [810.0, 351.0], [808.0, 699.4166666666666], [815.0, 339.0], [800.0, 339.0], [802.0, 748.4285714285714], [801.0, 335.2857142857143], [817.0, 488.66666666666674], [822.0, 753.4230769230769], [821.0, 515.1999999999999], [820.0, 411.80281690140833], [819.0, 353.28000000000003], [818.0, 349.5], [823.0, 484.0], [831.0, 356.0], [830.0, 338.0], [839.0, 590.0465116279069], [862.0, 381.0], [838.0, 367.625], [837.0, 346.57142857142856], [836.0, 334.0], [835.0, 349.75], [834.0, 323.0], [833.0, 345.2857142857143], [832.0, 771.5], [847.0, 553.0], [845.0, 610.5294117647057], [844.0, 583.897435897436], [842.0, 334.3333333333333], [841.0, 584.7749999999999], [840.0, 348.0], [851.0, 383.75], [854.0, 429.73333333333335], [853.0, 355.4166666666667], [852.0, 350.6875], [855.0, 315.0], [863.0, 436.7307692307692], [848.0, 318.08333333333337], [850.0, 336.0526315789474], [849.0, 334.88235294117646], [861.0, 373.0], [860.0, 357.0], [858.0, 349.0625], [857.0, 348.05555555555554], [856.0, 766.8095238095237], [892.0, 385.79999999999995], [870.0, 393.125], [871.0, 411.8], [889.0, 400.9375], [888.0, 355.3], [891.0, 335.11111111111114], [890.0, 431.79999999999995], [869.0, 629.9166666666666], [868.0, 666.8571428571429], [867.0, 351.99999999999994], [866.0, 538.8749999999998], [865.0, 843.4444444444446], [864.0, 904.5833333333333], [872.0, 505.5], [873.0, 483.8888888888888], [876.0, 403.17647058823525], [874.0, 892.7500000000001], [878.0, 384.5], [877.0, 369.909090909091], [879.0, 369.8947368421053], [895.0, 334.4166666666667], [887.0, 359.3333333333333], [886.0, 358.0], [885.0, 354.74999999999994], [884.0, 359.49999999999994], [883.0, 505.7073170731707], [882.0, 360.375], [881.0, 669.5365853658537], [880.0, 512.8541666666669], [894.0, 338.0], [923.0, 482.12500000000006], [897.0, 467.4736842105263], [909.0, 362.6666666666665], [908.0, 525.5555555555555], [907.0, 618.1666666666666], [906.0, 943.0], [905.0, 317.6], [904.0, 936.0], [911.0, 391.8888888888889], [896.0, 352.75], [910.0, 340.7878787878788], [922.0, 405.75], [925.0, 361.84615384615387], [927.0, 400.9531249999999], [919.0, 351.3333333333333], [918.0, 528.6666666666666], [917.0, 612.8000000000001], [916.0, 584.5714285714287], [915.0, 730.1538461538461], [914.0, 598.2962962962962], [913.0, 775.5], [912.0, 370.0], [926.0, 493.0744680851062], [924.0, 351.4000000000001], [921.0, 340.24999999999994], [920.0, 342.1666666666667], [903.0, 829.8181818181818], [902.0, 597.8499999999999], [901.0, 320.0], [900.0, 539.4444444444445], [898.0, 640.6666666666667], [954.0, 531.625], [944.0, 352.31578947368416], [928.0, 426.09090909090924], [929.0, 380.41764705882366], [931.0, 313.5], [930.0, 518.595238095238], [933.0, 333.69230769230774], [932.0, 478.10714285714283], [935.0, 570.2307692307693], [934.0, 339.0], [953.0, 541.1428571428571], [952.0, 553.3076923076922], [943.0, 366.08695652173907], [942.0, 423.25], [940.0, 297.6], [939.0, 502.45000000000005], [938.0, 317.6666666666667], [937.0, 591.7352941176471], [936.0, 336.0], [946.0, 319.63157894736844], [945.0, 355.52941176470586], [947.0, 335.7777777777778], [948.0, 312.75], [949.0, 285.955223880597], [959.0, 458.6666666666667], [958.0, 323.0], [956.0, 306.0], [955.0, 554.4], [950.0, 431.8076923076923], [951.0, 465.55], [967.0, 327.0], [960.0, 366.5], [961.0, 376.75], [962.0, 314.5], [964.0, 400.9166666666667], [963.0, 417.0], [966.0, 376.0], [965.0, 343.0], [984.0, 463.85714285714283], [968.0, 458.6666666666667], [969.0, 349.70000000000005], [971.0, 412.1818181818182], [972.0, 373.8333333333333], [973.0, 371.0], [974.0, 436.2], [975.0, 355.2], [981.0, 456.46666666666664], [983.0, 513.1904761904758], [982.0, 556.3749999999999], [980.0, 402.75], [985.0, 460.5], [986.0, 479.5833333333333], [977.0, 372.3333333333333], [979.0, 375.0], [978.0, 369.2], [1.0, 8.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[552.0061000000013, 511.60809999999896]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 986.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956864E12, "maxY": 83166.66666666667, "series": [{"data": [[1.66956864E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956864E12, 83166.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956864E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 511.60809999999896, "minX": 1.66956864E12, "maxY": 511.60809999999896, "series": [{"data": [[1.66956864E12, 511.60809999999896]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956864E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 511.33529999999746, "minX": 1.66956864E12, "maxY": 511.33529999999746, "series": [{"data": [[1.66956864E12, 511.33529999999746]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956864E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9383999999999925, "minX": 1.66956864E12, "maxY": 0.9383999999999925, "series": [{"data": [[1.66956864E12, 0.9383999999999925]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956864E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.66956864E12, "maxY": 6757.0, "series": [{"data": [[1.66956864E12, 6757.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956864E12, 472.89999999999964]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956864E12, 6012.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956864E12, 2440.2999999999847]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956864E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956864E12, 276.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956864E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 91.0, "minX": 612.0, "maxY": 421.5, "series": [{"data": [[1078.0, 237.0], [1033.0, 272.0], [1087.0, 238.0], [1143.0, 355.0], [1141.0, 219.0], [1181.0, 348.0], [1215.0, 338.0], [612.0, 91.0], [682.0, 421.5], [828.0, 120.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1215.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 91.0, "minX": 612.0, "maxY": 421.5, "series": [{"data": [[1078.0, 237.0], [1033.0, 272.0], [1087.0, 237.0], [1143.0, 355.0], [1141.0, 219.0], [1181.0, 348.0], [1215.0, 338.0], [612.0, 91.0], [682.0, 421.5], [828.0, 120.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1215.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956864E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956864E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956864E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956864E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956864E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956864E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956864E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956864E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956864E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956864E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956864E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956864E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

