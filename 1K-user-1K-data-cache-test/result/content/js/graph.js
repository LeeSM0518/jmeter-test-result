/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 4298.0, "series": [{"data": [[0.0, 33.0], [0.1, 44.0], [0.2, 48.0], [0.3, 52.0], [0.4, 59.0], [0.5, 61.0], [0.6, 66.0], [0.7, 67.0], [0.8, 68.0], [0.9, 72.0], [1.0, 74.0], [1.1, 76.0], [1.2, 84.0], [1.3, 88.0], [1.4, 94.0], [1.5, 97.0], [1.6, 103.0], [1.7, 110.0], [1.8, 116.0], [1.9, 119.0], [2.0, 122.0], [2.1, 125.0], [2.2, 133.0], [2.3, 135.0], [2.4, 137.0], [2.5, 139.0], [2.6, 142.0], [2.7, 145.0], [2.8, 148.0], [2.9, 151.0], [3.0, 153.0], [3.1, 155.0], [3.2, 159.0], [3.3, 160.0], [3.4, 163.0], [3.5, 164.0], [3.6, 166.0], [3.7, 168.0], [3.8, 170.0], [3.9, 173.0], [4.0, 174.0], [4.1, 176.0], [4.2, 177.0], [4.3, 180.0], [4.4, 182.0], [4.5, 183.0], [4.6, 184.0], [4.7, 186.0], [4.8, 187.0], [4.9, 191.0], [5.0, 193.0], [5.1, 195.0], [5.2, 197.0], [5.3, 199.0], [5.4, 199.0], [5.5, 201.0], [5.6, 202.0], [5.7, 205.0], [5.8, 205.0], [5.9, 207.0], [6.0, 208.0], [6.1, 211.0], [6.2, 213.0], [6.3, 215.0], [6.4, 216.0], [6.5, 218.0], [6.6, 219.0], [6.7, 220.0], [6.8, 221.0], [6.9, 223.0], [7.0, 224.0], [7.1, 226.0], [7.2, 227.0], [7.3, 228.0], [7.4, 230.0], [7.5, 231.0], [7.6, 232.0], [7.7, 234.0], [7.8, 236.0], [7.9, 238.0], [8.0, 239.0], [8.1, 240.0], [8.2, 241.0], [8.3, 242.0], [8.4, 244.0], [8.5, 246.0], [8.6, 247.0], [8.7, 248.0], [8.8, 249.0], [8.9, 250.0], [9.0, 251.0], [9.1, 253.0], [9.2, 253.0], [9.3, 255.0], [9.4, 256.0], [9.5, 257.0], [9.6, 258.0], [9.7, 258.0], [9.8, 260.0], [9.9, 262.0], [10.0, 262.0], [10.1, 264.0], [10.2, 265.0], [10.3, 266.0], [10.4, 267.0], [10.5, 269.0], [10.6, 272.0], [10.7, 273.0], [10.8, 274.0], [10.9, 275.0], [11.0, 277.0], [11.1, 277.0], [11.2, 279.0], [11.3, 280.0], [11.4, 280.0], [11.5, 281.0], [11.6, 283.0], [11.7, 285.0], [11.8, 289.0], [11.9, 291.0], [12.0, 292.0], [12.1, 294.0], [12.2, 296.0], [12.3, 298.0], [12.4, 300.0], [12.5, 301.0], [12.6, 301.0], [12.7, 302.0], [12.8, 303.0], [12.9, 304.0], [13.0, 306.0], [13.1, 307.0], [13.2, 309.0], [13.3, 311.0], [13.4, 312.0], [13.5, 315.0], [13.6, 316.0], [13.7, 317.0], [13.8, 320.0], [13.9, 323.0], [14.0, 325.0], [14.1, 328.0], [14.2, 330.0], [14.3, 334.0], [14.4, 336.0], [14.5, 338.0], [14.6, 340.0], [14.7, 341.0], [14.8, 343.0], [14.9, 345.0], [15.0, 346.0], [15.1, 347.0], [15.2, 347.0], [15.3, 348.0], [15.4, 350.0], [15.5, 351.0], [15.6, 352.0], [15.7, 353.0], [15.8, 355.0], [15.9, 356.0], [16.0, 358.0], [16.1, 359.0], [16.2, 360.0], [16.3, 362.0], [16.4, 363.0], [16.5, 365.0], [16.6, 366.0], [16.7, 367.0], [16.8, 370.0], [16.9, 371.0], [17.0, 372.0], [17.1, 374.0], [17.2, 376.0], [17.3, 378.0], [17.4, 379.0], [17.5, 380.0], [17.6, 380.0], [17.7, 382.0], [17.8, 383.0], [17.9, 384.0], [18.0, 384.0], [18.1, 385.0], [18.2, 386.0], [18.3, 387.0], [18.4, 387.0], [18.5, 388.0], [18.6, 389.0], [18.7, 390.0], [18.8, 391.0], [18.9, 392.0], [19.0, 392.0], [19.1, 393.0], [19.2, 393.0], [19.3, 395.0], [19.4, 395.0], [19.5, 396.0], [19.6, 396.0], [19.7, 396.0], [19.8, 397.0], [19.9, 398.0], [20.0, 399.0], [20.1, 400.0], [20.2, 401.0], [20.3, 401.0], [20.4, 402.0], [20.5, 403.0], [20.6, 404.0], [20.7, 405.0], [20.8, 407.0], [20.9, 408.0], [21.0, 409.0], [21.1, 410.0], [21.2, 411.0], [21.3, 411.0], [21.4, 413.0], [21.5, 414.0], [21.6, 415.0], [21.7, 415.0], [21.8, 416.0], [21.9, 416.0], [22.0, 417.0], [22.1, 418.0], [22.2, 419.0], [22.3, 420.0], [22.4, 420.0], [22.5, 421.0], [22.6, 422.0], [22.7, 423.0], [22.8, 424.0], [22.9, 424.0], [23.0, 425.0], [23.1, 425.0], [23.2, 426.0], [23.3, 426.0], [23.4, 427.0], [23.5, 427.0], [23.6, 428.0], [23.7, 429.0], [23.8, 430.0], [23.9, 430.0], [24.0, 431.0], [24.1, 431.0], [24.2, 432.0], [24.3, 433.0], [24.4, 433.0], [24.5, 434.0], [24.6, 435.0], [24.7, 436.0], [24.8, 436.0], [24.9, 437.0], [25.0, 438.0], [25.1, 439.0], [25.2, 440.0], [25.3, 440.0], [25.4, 440.0], [25.5, 440.0], [25.6, 441.0], [25.7, 441.0], [25.8, 442.0], [25.9, 443.0], [26.0, 443.0], [26.1, 444.0], [26.2, 444.0], [26.3, 445.0], [26.4, 446.0], [26.5, 446.0], [26.6, 446.0], [26.7, 447.0], [26.8, 448.0], [26.9, 448.0], [27.0, 449.0], [27.1, 449.0], [27.2, 449.0], [27.3, 450.0], [27.4, 450.0], [27.5, 451.0], [27.6, 451.0], [27.7, 452.0], [27.8, 452.0], [27.9, 452.0], [28.0, 452.0], [28.1, 452.0], [28.2, 452.0], [28.3, 453.0], [28.4, 453.0], [28.5, 453.0], [28.6, 454.0], [28.7, 454.0], [28.8, 455.0], [28.9, 455.0], [29.0, 455.0], [29.1, 456.0], [29.2, 456.0], [29.3, 456.0], [29.4, 457.0], [29.5, 458.0], [29.6, 458.0], [29.7, 458.0], [29.8, 459.0], [29.9, 459.0], [30.0, 459.0], [30.1, 460.0], [30.2, 460.0], [30.3, 461.0], [30.4, 461.0], [30.5, 462.0], [30.6, 462.0], [30.7, 463.0], [30.8, 463.0], [30.9, 464.0], [31.0, 464.0], [31.1, 464.0], [31.2, 465.0], [31.3, 466.0], [31.4, 466.0], [31.5, 467.0], [31.6, 467.0], [31.7, 467.0], [31.8, 468.0], [31.9, 469.0], [32.0, 469.0], [32.1, 469.0], [32.2, 470.0], [32.3, 471.0], [32.4, 471.0], [32.5, 472.0], [32.6, 472.0], [32.7, 472.0], [32.8, 473.0], [32.9, 474.0], [33.0, 474.0], [33.1, 474.0], [33.2, 475.0], [33.3, 475.0], [33.4, 475.0], [33.5, 476.0], [33.6, 476.0], [33.7, 477.0], [33.8, 478.0], [33.9, 478.0], [34.0, 479.0], [34.1, 479.0], [34.2, 480.0], [34.3, 480.0], [34.4, 480.0], [34.5, 481.0], [34.6, 481.0], [34.7, 482.0], [34.8, 482.0], [34.9, 483.0], [35.0, 484.0], [35.1, 484.0], [35.2, 484.0], [35.3, 485.0], [35.4, 485.0], [35.5, 486.0], [35.6, 486.0], [35.7, 487.0], [35.8, 487.0], [35.9, 488.0], [36.0, 488.0], [36.1, 489.0], [36.2, 489.0], [36.3, 490.0], [36.4, 491.0], [36.5, 491.0], [36.6, 492.0], [36.7, 492.0], [36.8, 493.0], [36.9, 493.0], [37.0, 494.0], [37.1, 494.0], [37.2, 495.0], [37.3, 495.0], [37.4, 495.0], [37.5, 496.0], [37.6, 496.0], [37.7, 496.0], [37.8, 497.0], [37.9, 497.0], [38.0, 498.0], [38.1, 499.0], [38.2, 499.0], [38.3, 500.0], [38.4, 500.0], [38.5, 501.0], [38.6, 501.0], [38.7, 501.0], [38.8, 502.0], [38.9, 502.0], [39.0, 503.0], [39.1, 503.0], [39.2, 503.0], [39.3, 504.0], [39.4, 504.0], [39.5, 505.0], [39.6, 505.0], [39.7, 506.0], [39.8, 506.0], [39.9, 507.0], [40.0, 507.0], [40.1, 508.0], [40.2, 508.0], [40.3, 509.0], [40.4, 509.0], [40.5, 510.0], [40.6, 510.0], [40.7, 511.0], [40.8, 511.0], [40.9, 511.0], [41.0, 512.0], [41.1, 512.0], [41.2, 512.0], [41.3, 513.0], [41.4, 514.0], [41.5, 515.0], [41.6, 516.0], [41.7, 516.0], [41.8, 517.0], [41.9, 518.0], [42.0, 518.0], [42.1, 519.0], [42.2, 520.0], [42.3, 520.0], [42.4, 521.0], [42.5, 522.0], [42.6, 522.0], [42.7, 523.0], [42.8, 524.0], [42.9, 524.0], [43.0, 524.0], [43.1, 524.0], [43.2, 525.0], [43.3, 525.0], [43.4, 526.0], [43.5, 526.0], [43.6, 527.0], [43.7, 527.0], [43.8, 528.0], [43.9, 528.0], [44.0, 529.0], [44.1, 529.0], [44.2, 530.0], [44.3, 531.0], [44.4, 531.0], [44.5, 531.0], [44.6, 532.0], [44.7, 532.0], [44.8, 533.0], [44.9, 533.0], [45.0, 534.0], [45.1, 534.0], [45.2, 534.0], [45.3, 535.0], [45.4, 535.0], [45.5, 536.0], [45.6, 536.0], [45.7, 536.0], [45.8, 537.0], [45.9, 537.0], [46.0, 538.0], [46.1, 538.0], [46.2, 539.0], [46.3, 539.0], [46.4, 540.0], [46.5, 540.0], [46.6, 540.0], [46.7, 541.0], [46.8, 541.0], [46.9, 542.0], [47.0, 542.0], [47.1, 543.0], [47.2, 543.0], [47.3, 543.0], [47.4, 544.0], [47.5, 544.0], [47.6, 545.0], [47.7, 545.0], [47.8, 546.0], [47.9, 546.0], [48.0, 547.0], [48.1, 548.0], [48.2, 548.0], [48.3, 548.0], [48.4, 549.0], [48.5, 549.0], [48.6, 550.0], [48.7, 551.0], [48.8, 551.0], [48.9, 552.0], [49.0, 552.0], [49.1, 552.0], [49.2, 553.0], [49.3, 553.0], [49.4, 555.0], [49.5, 555.0], [49.6, 555.0], [49.7, 556.0], [49.8, 556.0], [49.9, 557.0], [50.0, 558.0], [50.1, 559.0], [50.2, 559.0], [50.3, 560.0], [50.4, 560.0], [50.5, 560.0], [50.6, 561.0], [50.7, 561.0], [50.8, 562.0], [50.9, 563.0], [51.0, 563.0], [51.1, 564.0], [51.2, 565.0], [51.3, 566.0], [51.4, 566.0], [51.5, 567.0], [51.6, 568.0], [51.7, 568.0], [51.8, 568.0], [51.9, 569.0], [52.0, 570.0], [52.1, 571.0], [52.2, 572.0], [52.3, 572.0], [52.4, 573.0], [52.5, 574.0], [52.6, 575.0], [52.7, 576.0], [52.8, 576.0], [52.9, 577.0], [53.0, 578.0], [53.1, 578.0], [53.2, 579.0], [53.3, 580.0], [53.4, 580.0], [53.5, 581.0], [53.6, 581.0], [53.7, 581.0], [53.8, 582.0], [53.9, 582.0], [54.0, 583.0], [54.1, 583.0], [54.2, 584.0], [54.3, 584.0], [54.4, 584.0], [54.5, 585.0], [54.6, 585.0], [54.7, 585.0], [54.8, 586.0], [54.9, 586.0], [55.0, 587.0], [55.1, 587.0], [55.2, 588.0], [55.3, 589.0], [55.4, 590.0], [55.5, 590.0], [55.6, 591.0], [55.7, 592.0], [55.8, 592.0], [55.9, 593.0], [56.0, 594.0], [56.1, 594.0], [56.2, 595.0], [56.3, 595.0], [56.4, 595.0], [56.5, 596.0], [56.6, 596.0], [56.7, 597.0], [56.8, 597.0], [56.9, 598.0], [57.0, 598.0], [57.1, 599.0], [57.2, 599.0], [57.3, 600.0], [57.4, 600.0], [57.5, 601.0], [57.6, 601.0], [57.7, 602.0], [57.8, 602.0], [57.9, 603.0], [58.0, 603.0], [58.1, 604.0], [58.2, 604.0], [58.3, 605.0], [58.4, 605.0], [58.5, 606.0], [58.6, 607.0], [58.7, 607.0], [58.8, 608.0], [58.9, 608.0], [59.0, 609.0], [59.1, 610.0], [59.2, 611.0], [59.3, 611.0], [59.4, 612.0], [59.5, 612.0], [59.6, 613.0], [59.7, 614.0], [59.8, 615.0], [59.9, 616.0], [60.0, 616.0], [60.1, 617.0], [60.2, 617.0], [60.3, 618.0], [60.4, 618.0], [60.5, 619.0], [60.6, 619.0], [60.7, 620.0], [60.8, 620.0], [60.9, 620.0], [61.0, 620.0], [61.1, 621.0], [61.2, 621.0], [61.3, 622.0], [61.4, 623.0], [61.5, 623.0], [61.6, 624.0], [61.7, 624.0], [61.8, 624.0], [61.9, 624.0], [62.0, 625.0], [62.1, 626.0], [62.2, 626.0], [62.3, 627.0], [62.4, 628.0], [62.5, 628.0], [62.6, 629.0], [62.7, 629.0], [62.8, 630.0], [62.9, 631.0], [63.0, 631.0], [63.1, 631.0], [63.2, 632.0], [63.3, 632.0], [63.4, 633.0], [63.5, 633.0], [63.6, 633.0], [63.7, 634.0], [63.8, 635.0], [63.9, 635.0], [64.0, 636.0], [64.1, 636.0], [64.2, 637.0], [64.3, 637.0], [64.4, 638.0], [64.5, 639.0], [64.6, 639.0], [64.7, 639.0], [64.8, 640.0], [64.9, 640.0], [65.0, 640.0], [65.1, 641.0], [65.2, 641.0], [65.3, 641.0], [65.4, 642.0], [65.5, 643.0], [65.6, 643.0], [65.7, 643.0], [65.8, 644.0], [65.9, 644.0], [66.0, 644.0], [66.1, 645.0], [66.2, 646.0], [66.3, 646.0], [66.4, 647.0], [66.5, 647.0], [66.6, 648.0], [66.7, 648.0], [66.8, 649.0], [66.9, 649.0], [67.0, 650.0], [67.1, 651.0], [67.2, 651.0], [67.3, 652.0], [67.4, 652.0], [67.5, 653.0], [67.6, 653.0], [67.7, 654.0], [67.8, 655.0], [67.9, 655.0], [68.0, 656.0], [68.1, 656.0], [68.2, 656.0], [68.3, 657.0], [68.4, 657.0], [68.5, 658.0], [68.6, 658.0], [68.7, 659.0], [68.8, 660.0], [68.9, 660.0], [69.0, 661.0], [69.1, 661.0], [69.2, 662.0], [69.3, 663.0], [69.4, 663.0], [69.5, 664.0], [69.6, 664.0], [69.7, 665.0], [69.8, 665.0], [69.9, 665.0], [70.0, 666.0], [70.1, 666.0], [70.2, 667.0], [70.3, 667.0], [70.4, 668.0], [70.5, 668.0], [70.6, 669.0], [70.7, 669.0], [70.8, 670.0], [70.9, 671.0], [71.0, 671.0], [71.1, 672.0], [71.2, 673.0], [71.3, 674.0], [71.4, 675.0], [71.5, 675.0], [71.6, 675.0], [71.7, 676.0], [71.8, 676.0], [71.9, 677.0], [72.0, 678.0], [72.1, 679.0], [72.2, 680.0], [72.3, 680.0], [72.4, 681.0], [72.5, 682.0], [72.6, 683.0], [72.7, 683.0], [72.8, 684.0], [72.9, 684.0], [73.0, 685.0], [73.1, 685.0], [73.2, 687.0], [73.3, 687.0], [73.4, 688.0], [73.5, 688.0], [73.6, 689.0], [73.7, 690.0], [73.8, 691.0], [73.9, 691.0], [74.0, 692.0], [74.1, 693.0], [74.2, 694.0], [74.3, 695.0], [74.4, 696.0], [74.5, 696.0], [74.6, 697.0], [74.7, 698.0], [74.8, 698.0], [74.9, 699.0], [75.0, 700.0], [75.1, 700.0], [75.2, 701.0], [75.3, 701.0], [75.4, 702.0], [75.5, 703.0], [75.6, 704.0], [75.7, 704.0], [75.8, 705.0], [75.9, 705.0], [76.0, 706.0], [76.1, 707.0], [76.2, 707.0], [76.3, 708.0], [76.4, 708.0], [76.5, 709.0], [76.6, 709.0], [76.7, 710.0], [76.8, 711.0], [76.9, 711.0], [77.0, 711.0], [77.1, 712.0], [77.2, 712.0], [77.3, 713.0], [77.4, 714.0], [77.5, 714.0], [77.6, 714.0], [77.7, 715.0], [77.8, 716.0], [77.9, 716.0], [78.0, 717.0], [78.1, 717.0], [78.2, 718.0], [78.3, 718.0], [78.4, 720.0], [78.5, 720.0], [78.6, 721.0], [78.7, 721.0], [78.8, 722.0], [78.9, 723.0], [79.0, 723.0], [79.1, 724.0], [79.2, 724.0], [79.3, 725.0], [79.4, 726.0], [79.5, 727.0], [79.6, 727.0], [79.7, 728.0], [79.8, 728.0], [79.9, 729.0], [80.0, 730.0], [80.1, 731.0], [80.2, 732.0], [80.3, 733.0], [80.4, 733.0], [80.5, 734.0], [80.6, 735.0], [80.7, 736.0], [80.8, 737.0], [80.9, 738.0], [81.0, 739.0], [81.1, 740.0], [81.2, 741.0], [81.3, 742.0], [81.4, 743.0], [81.5, 744.0], [81.6, 744.0], [81.7, 745.0], [81.8, 746.0], [81.9, 746.0], [82.0, 747.0], [82.1, 748.0], [82.2, 748.0], [82.3, 749.0], [82.4, 749.0], [82.5, 750.0], [82.6, 752.0], [82.7, 752.0], [82.8, 753.0], [82.9, 754.0], [83.0, 755.0], [83.1, 756.0], [83.2, 757.0], [83.3, 757.0], [83.4, 759.0], [83.5, 760.0], [83.6, 761.0], [83.7, 763.0], [83.8, 765.0], [83.9, 767.0], [84.0, 768.0], [84.1, 769.0], [84.2, 771.0], [84.3, 773.0], [84.4, 774.0], [84.5, 775.0], [84.6, 776.0], [84.7, 778.0], [84.8, 780.0], [84.9, 781.0], [85.0, 784.0], [85.1, 786.0], [85.2, 788.0], [85.3, 788.0], [85.4, 790.0], [85.5, 792.0], [85.6, 793.0], [85.7, 795.0], [85.8, 797.0], [85.9, 799.0], [86.0, 800.0], [86.1, 802.0], [86.2, 803.0], [86.3, 804.0], [86.4, 805.0], [86.5, 807.0], [86.6, 808.0], [86.7, 810.0], [86.8, 811.0], [86.9, 812.0], [87.0, 814.0], [87.1, 815.0], [87.2, 818.0], [87.3, 821.0], [87.4, 823.0], [87.5, 825.0], [87.6, 826.0], [87.7, 827.0], [87.8, 828.0], [87.9, 829.0], [88.0, 830.0], [88.1, 833.0], [88.2, 834.0], [88.3, 835.0], [88.4, 836.0], [88.5, 838.0], [88.6, 839.0], [88.7, 840.0], [88.8, 841.0], [88.9, 842.0], [89.0, 844.0], [89.1, 845.0], [89.2, 846.0], [89.3, 847.0], [89.4, 848.0], [89.5, 849.0], [89.6, 850.0], [89.7, 851.0], [89.8, 853.0], [89.9, 854.0], [90.0, 854.0], [90.1, 855.0], [90.2, 856.0], [90.3, 856.0], [90.4, 858.0], [90.5, 859.0], [90.6, 862.0], [90.7, 863.0], [90.8, 864.0], [90.9, 865.0], [91.0, 867.0], [91.1, 868.0], [91.2, 870.0], [91.3, 872.0], [91.4, 875.0], [91.5, 876.0], [91.6, 878.0], [91.7, 880.0], [91.8, 883.0], [91.9, 886.0], [92.0, 889.0], [92.1, 892.0], [92.2, 895.0], [92.3, 898.0], [92.4, 903.0], [92.5, 907.0], [92.6, 911.0], [92.7, 915.0], [92.8, 918.0], [92.9, 922.0], [93.0, 927.0], [93.1, 929.0], [93.2, 935.0], [93.3, 941.0], [93.4, 945.0], [93.5, 949.0], [93.6, 952.0], [93.7, 958.0], [93.8, 963.0], [93.9, 968.0], [94.0, 974.0], [94.1, 976.0], [94.2, 981.0], [94.3, 988.0], [94.4, 995.0], [94.5, 1004.0], [94.6, 1013.0], [94.7, 1021.0], [94.8, 1032.0], [94.9, 1040.0], [95.0, 1052.0], [95.1, 1056.0], [95.2, 1071.0], [95.3, 1084.0], [95.4, 1095.0], [95.5, 1103.0], [95.6, 1109.0], [95.7, 1115.0], [95.8, 1120.0], [95.9, 1129.0], [96.0, 1136.0], [96.1, 1141.0], [96.2, 1155.0], [96.3, 1174.0], [96.4, 1192.0], [96.5, 1212.0], [96.6, 1226.0], [96.7, 1240.0], [96.8, 1265.0], [96.9, 1291.0], [97.0, 1308.0], [97.1, 1347.0], [97.2, 1409.0], [97.3, 1533.0], [97.4, 1737.0], [97.5, 1919.0], [97.6, 1973.0], [97.7, 2078.0], [97.8, 2373.0], [97.9, 2566.0], [98.0, 2793.0], [98.1, 2932.0], [98.2, 3443.0], [98.3, 3765.0], [98.4, 3787.0], [98.5, 3799.0], [98.6, 3810.0], [98.7, 3825.0], [98.8, 3842.0], [98.9, 3861.0], [99.0, 3884.0], [99.1, 3902.0], [99.2, 4002.0], [99.3, 4037.0], [99.4, 4096.0], [99.5, 4113.0], [99.6, 4139.0], [99.7, 4148.0], [99.8, 4179.0], [99.9, 4245.0], [100.0, 4298.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1901.0, "series": [{"data": [[0.0, 152.0], [600.0, 1771.0], [700.0, 1099.0], [800.0, 640.0], [900.0, 215.0], [1000.0, 101.0], [1100.0, 97.0], [1200.0, 51.0], [1300.0, 22.0], [1400.0, 11.0], [1500.0, 3.0], [100.0, 389.0], [1600.0, 5.0], [1700.0, 6.0], [1800.0, 6.0], [1900.0, 14.0], [2000.0, 9.0], [2100.0, 3.0], [2200.0, 4.0], [2300.0, 4.0], [2400.0, 4.0], [2500.0, 7.0], [2700.0, 6.0], [2800.0, 5.0], [2900.0, 10.0], [3000.0, 2.0], [200.0, 695.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 2.0], [3700.0, 21.0], [3800.0, 59.0], [3900.0, 8.0], [4000.0, 26.0], [4100.0, 39.0], [4200.0, 18.0], [300.0, 769.0], [400.0, 1816.0], [500.0, 1901.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 271.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5884.0, "series": [{"data": [[0.0, 3845.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5884.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 271.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 776.3444999999995, "minX": 1.66956336E12, "maxY": 776.3444999999995, "series": [{"data": [[1.66956336E12, 776.3444999999995]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956336E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.0, "maxY": 4246.0, "series": [{"data": [[2.0, 75.0], [3.0, 76.0], [4.0, 76.0], [5.0, 76.0], [6.0, 77.0], [7.0, 78.0], [9.0, 73.5], [10.0, 75.0], [11.0, 75.0], [12.0, 75.0], [13.0, 46.0], [14.0, 33.0], [15.0, 46.0], [16.0, 33.0], [17.0, 46.0], [18.0, 42.0], [19.0, 46.0], [20.0, 42.0], [21.0, 45.0], [22.0, 42.0], [23.0, 45.0], [24.0, 42.0], [25.0, 45.0], [26.0, 42.0], [27.0, 54.0], [29.0, 43.0], [30.0, 55.0], [31.0, 52.0], [33.0, 44.0], [32.0, 55.0], [35.0, 52.5], [34.0, 50.0], [37.0, 50.5], [36.0, 51.5], [39.0, 55.0], [38.0, 49.0], [41.0, 54.0], [40.0, 54.5], [43.0, 60.0], [42.0, 60.0], [45.0, 63.0], [44.0, 60.5], [47.0, 69.5], [46.0, 62.5], [49.0, 100.0], [48.0, 76.8421052631579], [51.0, 110.57142857142857], [50.0, 72.0], [53.0, 118.4], [52.0, 97.66666666666667], [55.0, 108.0], [54.0, 112.0], [57.0, 107.33333333333333], [56.0, 107.66666666666667], [59.0, 125.33333333333333], [58.0, 122.33333333333333], [60.0, 128.0], [63.0, 122.0], [62.0, 138.0], [67.0, 135.33333333333334], [66.0, 121.0], [65.0, 120.5], [64.0, 118.5], [71.0, 134.0], [70.0, 133.66666666666666], [68.0, 127.66666666666667], [73.0, 135.66666666666666], [79.0, 140.33333333333334], [78.0, 135.2], [76.0, 134.5], [83.0, 139.0], [82.0, 155.2], [81.0, 130.75], [87.0, 145.5], [86.0, 127.33333333333333], [85.0, 177.5], [84.0, 147.33333333333334], [91.0, 206.0], [90.0, 158.4], [88.0, 80.33333333333333], [95.0, 192.0], [94.0, 117.25], [93.0, 61.0], [92.0, 84.0], [99.0, 88.2], [98.0, 44.0], [96.0, 85.66666666666667], [103.0, 67.0], [102.0, 120.0], [100.0, 153.0], [107.0, 76.0], [111.0, 92.8], [109.0, 89.0], [108.0, 140.66666666666666], [115.0, 132.0], [114.0, 165.0], [113.0, 95.0], [127.0, 67.0], [125.0, 91.5], [134.0, 158.0], [133.0, 116.0], [132.0, 132.5], [130.0, 128.88888888888889], [128.0, 104.92307692307693], [142.0, 136.5], [140.0, 165.33333333333334], [136.0, 118.5], [150.0, 143.5], [148.0, 100.0], [147.0, 162.0], [146.0, 138.0], [145.0, 167.0], [144.0, 137.2], [159.0, 94.0], [158.0, 166.0], [156.0, 222.5], [154.0, 137.0], [153.0, 107.0], [152.0, 162.5], [166.0, 225.6], [165.0, 100.0], [164.0, 183.5], [162.0, 228.0], [161.0, 151.0], [160.0, 104.0], [175.0, 171.57142857142858], [174.0, 170.44444444444443], [173.0, 138.5], [172.0, 135.0], [171.0, 137.25], [170.0, 135.0], [169.0, 176.5], [168.0, 148.66666666666666], [181.0, 184.75], [180.0, 180.5], [179.0, 190.7777777777778], [178.0, 178.5], [177.0, 189.5625], [176.0, 191.66666666666666], [190.0, 204.0], [188.0, 167.85714285714286], [187.0, 162.0], [186.0, 184.16666666666669], [185.0, 183.66666666666666], [184.0, 187.2], [198.0, 223.11764705882356], [196.0, 216.22222222222223], [195.0, 252.33333333333334], [207.0, 228.2], [206.0, 268.6], [205.0, 184.0], [203.0, 225.28571428571428], [202.0, 308.83333333333337], [201.0, 248.33333333333334], [200.0, 163.0], [215.0, 251.625], [214.0, 256.85714285714283], [213.0, 248.12500000000006], [212.0, 247.12499999999997], [211.0, 249.85714285714283], [210.0, 252.37499999999997], [209.0, 201.0], [222.0, 351.0], [221.0, 285.42857142857144], [220.0, 291.0], [219.0, 276.1785714285714], [218.0, 250.0], [217.0, 253.9047619047619], [216.0, 266.9090909090909], [230.0, 294.42857142857144], [229.0, 250.42857142857144], [228.0, 335.6666666666667], [227.0, 315.3333333333333], [226.0, 250.33333333333334], [225.0, 287.8], [239.0, 275.6666666666667], [237.0, 222.0], [236.0, 271.0], [235.0, 388.0], [234.0, 265.4285714285714], [233.0, 241.66666666666666], [247.0, 256.57142857142856], [246.0, 176.0], [245.0, 429.5], [243.0, 223.8], [242.0, 407.6666666666667], [241.0, 283.5], [240.0, 291.125], [255.0, 306.8], [254.0, 210.0], [253.0, 279.6428571428571], [252.0, 340.6363636363637], [250.0, 280.25], [249.0, 289.75], [248.0, 302.42857142857144], [270.0, 282.71428571428567], [271.0, 329.0476190476191], [269.0, 318.3333333333333], [268.0, 241.0], [267.0, 324.29411764705884], [266.0, 537.0], [265.0, 262.0], [264.0, 306.1538461538462], [262.0, 304.2857142857143], [257.0, 242.5], [256.0, 224.2], [259.0, 315.22222222222223], [258.0, 317.70000000000005], [261.0, 224.0], [260.0, 284.00000000000006], [285.0, 334.0], [286.0, 341.29999999999995], [284.0, 342.125], [275.0, 317.25], [274.0, 321.1666666666667], [273.0, 527.0], [272.0, 217.0], [283.0, 337.38888888888886], [282.0, 341.6153846153846], [281.0, 327.25], [280.0, 382.5], [279.0, 313.9166666666667], [278.0, 355.0555555555555], [277.0, 320.0], [302.0, 418.3333333333333], [303.0, 273.83333333333337], [301.0, 365.3333333333333], [300.0, 218.5], [299.0, 418.6666666666667], [298.0, 374.3333333333333], [297.0, 376.5], [296.0, 276.5], [295.0, 422.2], [288.0, 346.44444444444446], [291.0, 346.1], [290.0, 359.8888888888889], [294.0, 327.0], [293.0, 503.3333333333333], [292.0, 355.0], [318.0, 320.8], [319.0, 389.5], [317.0, 383.5], [315.0, 333.0], [314.0, 420.3333333333333], [311.0, 329.25], [310.0, 251.0], [309.0, 416.3333333333333], [307.0, 304.2], [306.0, 440.5], [335.0, 449.4], [333.0, 311.33333333333337], [322.0, 436.0], [321.0, 481.0], [320.0, 342.5], [331.0, 410.6666666666667], [330.0, 442.6666666666667], [329.0, 372.0], [328.0, 319.0], [327.0, 408.75], [325.0, 358.5], [324.0, 437.0], [350.0, 444.5714285714286], [351.0, 401.45454545454544], [349.0, 420.9090909090909], [339.0, 497.0], [338.0, 352.2857142857143], [337.0, 201.0], [347.0, 361.3333333333333], [346.0, 433.5], [345.0, 376.0], [344.0, 431.5], [342.0, 322.25], [341.0, 504.0], [340.0, 280.5], [366.0, 424.62500000000006], [367.0, 479.3333333333333], [365.0, 400.25], [364.0, 316.0], [363.0, 378.0], [362.0, 392.20000000000005], [361.0, 361.85714285714283], [360.0, 404.09090909090907], [359.0, 368.25], [352.0, 399.38888888888886], [354.0, 422.75], [353.0, 420.375], [358.0, 523.0], [357.0, 456.8], [356.0, 408.5], [382.0, 427.125], [383.0, 490.0], [381.0, 433.72727272727275], [380.0, 477.0], [379.0, 337.0], [377.0, 525.75], [376.0, 396.75], [375.0, 416.0], [369.0, 418.6666666666667], [368.0, 393.79999999999995], [371.0, 383.75], [370.0, 451.5], [373.0, 400.25], [372.0, 513.5], [399.0, 468.0], [384.0, 543.625], [391.0, 532.0], [390.0, 421.0], [389.0, 352.0], [388.0, 503.0], [393.0, 569.0], [398.0, 435.0], [397.0, 416.3], [396.0, 469.0], [387.0, 374.25], [386.0, 417.0], [385.0, 451.5714285714286], [395.0, 389.0], [394.0, 404.0], [392.0, 421.0], [413.0, 626.0], [411.0, 446.2857142857143], [410.0, 575.75], [409.0, 508.42857142857144], [412.0, 516.6666666666666], [403.0, 445.4], [402.0, 439.1428571428571], [401.0, 439.6666666666667], [408.0, 449.0], [407.0, 415.0], [406.0, 422.0], [405.0, 478.0], [404.0, 505.5], [430.0, 471.6], [427.0, 613.8648648648648], [417.0, 625.3333333333334], [420.0, 486.46153846153845], [422.0, 474.44444444444446], [419.0, 527.3333333333333], [418.0, 449.0], [416.0, 482.81250000000006], [423.0, 476.0], [431.0, 476.2], [425.0, 459.33333333333337], [424.0, 396.5], [426.0, 455.5], [429.0, 458.16666666666663], [428.0, 487.6666666666667], [444.0, 479.0], [434.0, 500.25], [435.0, 474.57142857142856], [432.0, 478.2], [437.0, 473.0], [436.0, 488.0], [438.0, 485.71428571428567], [439.0, 444.0], [446.0, 560.25], [443.0, 458.5], [442.0, 401.25], [441.0, 437.0], [440.0, 488.0], [450.0, 626.25], [453.0, 437.77777777777777], [452.0, 475.0], [451.0, 593.7272727272727], [456.0, 581.0], [459.0, 339.0], [458.0, 442.0], [457.0, 474.5], [455.0, 380.0], [449.0, 472.3333333333333], [448.0, 430.5], [454.0, 372.5], [476.0, 576.8571428571428], [475.0, 564.8333333333333], [474.0, 438.2], [473.0, 452.0], [472.0, 420.0], [470.0, 610.6956521739128], [464.0, 443.2], [465.0, 655.0], [467.0, 479.2307692307692], [466.0, 582.0], [468.0, 471.2857142857143], [469.0, 469.0], [479.0, 486.5], [478.0, 462.5], [492.0, 472.05], [494.0, 460.0], [493.0, 443.5], [485.0, 459.0], [483.0, 394.0], [482.0, 484.0], [481.0, 466.75], [480.0, 469.0], [510.0, 476.2], [511.0, 541.5], [509.0, 478.3333333333333], [498.0, 450.0], [497.0, 484.0], [496.0, 479.1666666666667], [506.0, 529.0], [505.0, 493.5], [504.0, 473.8333333333333], [503.0, 401.0], [502.0, 512.5], [501.0, 529.0], [500.0, 459.0], [536.0, 500.25], [523.0, 511.5], [515.0, 621.9000000000001], [514.0, 552.5], [517.0, 537.8571428571429], [519.0, 544.125], [537.0, 585.6666666666667], [538.0, 602.0], [539.0, 542.25], [540.0, 567.7777777777778], [541.0, 529.0], [543.0, 577.0], [542.0, 480.2], [520.0, 496.0], [521.0, 531.5], [522.0, 500.0], [525.0, 477.0], [526.0, 483.8333333333333], [527.0, 539.0], [528.0, 494.3333333333333], [529.0, 490.4], [530.0, 466.83333333333337], [531.0, 412.0], [532.0, 527.0], [533.0, 409.00000000000006], [535.0, 508.0952380952381], [534.0, 526.0], [569.0, 618.5217391304348], [558.0, 455.5555555555556], [547.0, 574.28125], [549.0, 545.3888888888888], [548.0, 568.7272727272729], [550.0, 543.9999999999999], [551.0, 561.2142857142858], [568.0, 571.0], [570.0, 713.8888888888889], [571.0, 663.9], [573.0, 721.0], [572.0, 683.4666666666666], [575.0, 701.8333333333334], [554.0, 511.3636363636364], [553.0, 567.875], [552.0, 528.1666666666666], [555.0, 568.8399999999999], [557.0, 448.6666666666667], [556.0, 491.6], [559.0, 599.7777777777777], [545.0, 565.0000000000001], [544.0, 431.0], [560.0, 666.5384615384615], [561.0, 678.4000000000001], [562.0, 571.0000000000001], [564.0, 709.25], [563.0, 625.5185185185185], [565.0, 673.0], [566.0, 636.3636363636364], [567.0, 645.75], [583.0, 680.5], [579.0, 677.90625], [576.0, 637.9705882352943], [591.0, 719.6875000000001], [586.0, 553.1904761904761], [588.0, 773.5], [587.0, 790.25], [589.0, 287.0], [577.0, 620.4827586206895], [578.0, 675.3548387096773], [580.0, 715.0], [581.0, 650.2916666666665], [582.0, 664.8709677419355], [592.0, 570.1935483870968], [600.0, 672.8333333333333], [604.0, 681.8181818181818], [602.0, 717.25], [606.0, 733.0], [605.0, 542.0], [607.0, 910.0], [593.0, 470.53333333333325], [594.0, 640.4444444444445], [595.0, 551.7142857142857], [596.0, 400.3333333333333], [598.0, 649.4], [597.0, 797.0], [584.0, 641.3684210526314], [585.0, 624.0526315789474], [634.0, 391.0], [638.0, 700.6666666666666], [618.0, 529.5], [617.0, 646.0], [619.0, 700.0], [621.0, 454.7142857142857], [624.0, 271.0], [625.0, 579.4285714285713], [631.0, 673.3333333333334], [630.0, 704.0769230769231], [633.0, 753.7777777777778], [614.0, 744.1666666666667], [613.0, 732.0], [611.0, 796.0], [609.0, 599.0], [608.0, 734.25], [612.0, 488.0], [623.0, 698.3571428571427], [622.0, 777.0], [635.0, 765.625], [639.0, 283.5], [637.0, 757.0], [636.0, 833.75], [667.0, 732.0], [644.0, 757.0], [645.0, 400.0], [646.0, 857.0], [664.0, 716.6], [647.0, 724.5], [650.0, 431.0], [648.0, 857.3333333333334], [651.0, 637.8571428571429], [655.0, 861.0], [641.0, 820.6666666666666], [640.0, 779.5], [643.0, 762.0], [642.0, 860.6666666666666], [654.0, 720.0], [652.0, 853.0], [671.0, 712.75], [656.0, 717.0], [659.0, 700.2], [658.0, 851.5], [661.0, 797.0], [660.0, 853.0], [663.0, 707.0], [662.0, 729.6363636363637], [669.0, 822.0], [668.0, 746.25], [666.0, 709.2857142857143], [665.0, 836.5], [676.0, 653.4], [674.0, 620.0], [673.0, 563.75], [672.0, 749.6666666666666], [687.0, 659.5], [686.0, 751.4444444444445], [685.0, 706.0], [684.0, 854.0], [683.0, 741.0], [675.0, 633.75], [677.0, 671.5], [678.0, 737.3000000000001], [679.0, 614.25], [696.0, 662.5714285714287], [700.0, 439.57142857142856], [698.0, 747.6666666666666], [703.0, 724.0], [689.0, 793.5], [690.0, 759.3333333333334], [701.0, 769.4444444444445], [691.0, 644.5], [692.0, 531.75], [693.0, 548.7272727272727], [695.0, 473.590909090909], [694.0, 759.8333333333334], [680.0, 699.1428571428571], [681.0, 690.6], [708.0, 576.5], [707.0, 397.85185185185185], [709.0, 484.2000000000001], [710.0, 773.8], [729.0, 745.8], [711.0, 751.1111111111111], [713.0, 739.1818181818181], [712.0, 776.8333333333334], [714.0, 744.5], [717.0, 732.5], [716.0, 675.0], [718.0, 469.5384615384615], [719.0, 348.6666666666667], [705.0, 710.3333333333334], [704.0, 782.4285714285714], [706.0, 776.3333333333333], [734.0, 740.25], [720.0, 729.2], [722.0, 693.0], [721.0, 857.0], [725.0, 786.6666666666666], [723.0, 749.1666666666666], [727.0, 766.75], [726.0, 707.0], [733.0, 676.0], [732.0, 793.8], [730.0, 719.0], [763.0, 675.0], [737.0, 513.6666666666666], [736.0, 704.0], [751.0, 652.0], [750.0, 684.5], [749.0, 714.875], [747.0, 692.0], [746.0, 717.75], [744.0, 770.5], [738.0, 546.0], [764.0, 506.0], [765.0, 681.3], [766.0, 362.8235294117647], [767.0, 563.6666666666666], [759.0, 713.5], [757.0, 709.0], [756.0, 721.0], [755.0, 668.0], [752.0, 726.6666666666666], [762.0, 665.0], [760.0, 726.0], [742.0, 655.25], [741.0, 704.6666666666666], [740.0, 721.0], [739.0, 727.5], [774.0, 624.0], [769.0, 371.8], [768.0, 588.8000000000001], [782.0, 667.5], [780.0, 688.0], [783.0, 478.8888888888889], [778.0, 733.0], [779.0, 582.3846153846155], [770.0, 586.3333333333334], [771.0, 726.6], [772.0, 624.0], [773.0, 545.1250000000001], [775.0, 675.375], [787.0, 453.94736842105266], [786.0, 702.5], [785.0, 705.1111111111111], [784.0, 664.0], [789.0, 677.0], [788.0, 719.5], [791.0, 696.3333333333334], [790.0, 706.4], [799.0, 669.5], [798.0, 764.1428571428571], [797.0, 598.0], [794.0, 589.2], [795.0, 646.75], [792.0, 448.3125], [776.0, 353.8749999999999], [777.0, 383.3333333333333], [812.0, 447.49999999999994], [804.0, 500.11764705882354], [803.0, 730.6666666666666], [801.0, 760.3333333333334], [800.0, 733.0], [805.0, 617.6666666666666], [806.0, 549.5], [807.0, 506.00000000000006], [819.0, 630.25], [817.0, 713.75], [816.0, 817.0], [831.0, 822.0], [830.0, 694.0], [829.0, 763.75], [826.0, 701.5], [825.0, 829.0], [824.0, 707.4545454545455], [820.0, 571.4], [821.0, 620.125], [822.0, 778.5], [808.0, 623.7857142857142], [809.0, 488.625], [811.0, 416.0], [810.0, 767.0], [813.0, 632.7857142857142], [815.0, 393.5], [847.0, 694.75], [838.0, 538.3529411764706], [836.0, 722.6], [835.0, 688.0], [833.0, 723.0], [832.0, 778.4], [839.0, 713.5], [844.0, 533.4285714285714], [843.0, 773.2857142857143], [842.0, 677.0], [845.0, 414.5], [846.0, 536.3333333333334], [849.0, 762.8], [850.0, 453.0], [851.0, 704.0], [854.0, 442.0], [855.0, 805.0], [856.0, 471.0], [863.0, 773.1999999999999], [859.0, 800.0], [858.0, 733.6923076923077], [893.0, 879.0], [894.0, 836.0], [881.0, 789.0], [880.0, 856.2], [892.0, 772.5], [890.0, 804.4], [889.0, 697.6666666666666], [888.0, 755.0], [874.0, 954.6666666666666], [871.0, 749.0], [870.0, 822.0], [869.0, 879.2857142857143], [868.0, 801.0], [867.0, 704.5], [865.0, 922.625], [872.0, 779.75], [886.0, 749.1428571428572], [885.0, 616.0], [884.0, 987.5], [883.0, 616.0], [882.0, 828.0], [901.0, 1005.0], [925.0, 1119.8181818181818], [903.0, 652.8000000000001], [910.0, 553.5], [909.0, 828.3], [907.0, 1096.5], [906.0, 1029.0], [904.0, 1016.5], [911.0, 835.0], [896.0, 887.0], [897.0, 788.8], [898.0, 823.0], [900.0, 825.75], [899.0, 879.5], [902.0, 939.0], [918.0, 966.2222222222222], [917.0, 1709.25], [916.0, 861.5], [914.0, 828.25], [913.0, 1084.0], [912.0, 785.8], [921.0, 704.1428571428571], [927.0, 701.3333333333334], [926.0, 687.0], [924.0, 749.0], [919.0, 1859.6666666666667], [956.0, 480.3], [950.0, 494.75], [948.0, 873.5], [947.0, 870.5], [945.0, 629.0], [944.0, 867.0], [951.0, 1060.0714285714287], [955.0, 1015.3846153846155], [959.0, 1056.5333333333333], [958.0, 1434.1666666666665], [957.0, 1103.3333333333335], [954.0, 2031.0500000000002], [953.0, 736.5], [952.0, 898.5], [943.0, 713.0], [929.0, 771.0], [928.0, 784.0], [932.0, 777.1428571428571], [930.0, 2022.0], [934.0, 2016.3333333333335], [933.0, 2512.5], [942.0, 4246.0], [941.0, 750.5], [939.0, 805.5555555555555], [967.0, 858.0], [987.0, 1221.716049382716], [966.0, 1237.5757575757575], [964.0, 714.0], [963.0, 1783.6666666666672], [962.0, 1431.9], [961.0, 4105.0], [960.0, 836.8571428571429], [984.0, 1042.7391304347823], [986.0, 1818.5751295336781], [985.0, 1397.6666666666663], [971.0, 740.8947368421052], [970.0, 2053.125], [969.0, 2015.1818181818182], [968.0, 1431.5625], [972.0, 1777.6923076923076], [974.0, 783.8571428571428], [973.0, 1248.375], [975.0, 1359.0909090909092], [983.0, 1699.941176470588], [982.0, 806.5454545454546], [981.0, 1086.45], [980.0, 1000.4375], [979.0, 856.875], [978.0, 751.5], [976.0, 1683.727272727273], [989.0, 448.0], [991.0, 685.875], [990.0, 665.5], [988.0, 630.3191489361702], [1000.0, 622.291657194817], [999.0, 714.1818181818179], [998.0, 620.5555555555555], [997.0, 848.0555555555555], [996.0, 640.1538461538458], [995.0, 640.5555555555555], [994.0, 784.8043478260871], [993.0, 713.4], [1.0, 75.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[776.3443000000002, 633.4785999999979]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956336E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956336E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956336E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956336E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 633.4785999999979, "minX": 1.66956336E12, "maxY": 633.4785999999979, "series": [{"data": [[1.66956336E12, 633.4785999999979]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956336E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 633.2414000000001, "minX": 1.66956336E12, "maxY": 633.2414000000001, "series": [{"data": [[1.66956336E12, 633.2414000000001]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956336E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6923999999999998, "minX": 1.66956336E12, "maxY": 0.6923999999999998, "series": [{"data": [[1.66956336E12, 0.6923999999999998]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956336E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.66956336E12, "maxY": 4298.0, "series": [{"data": [[1.66956336E12, 4298.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956336E12, 854.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956336E12, 3885.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956336E12, 1051.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956336E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956336E12, 558.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956336E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 72.0, "minX": 123.0, "maxY": 748.0, "series": [{"data": [[1113.0, 227.0], [1166.0, 625.0], [1209.0, 483.0], [1238.0, 704.0], [1254.0, 748.0], [1388.0, 500.0], [1519.0, 561.0], [864.0, 449.0], [123.0, 72.0], [126.0, 640.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1519.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 72.0, "minX": 123.0, "maxY": 748.0, "series": [{"data": [[1113.0, 227.0], [1166.0, 625.0], [1209.0, 483.0], [1238.0, 704.0], [1254.0, 748.0], [1388.0, 500.0], [1519.0, 560.0], [864.0, 448.0], [123.0, 72.0], [126.0, 637.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1519.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956336E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956336E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956336E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956336E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956336E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956336E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956336E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956336E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956336E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956336E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956336E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956336E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

