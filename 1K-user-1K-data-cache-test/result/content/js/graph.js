/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 2514.0, "series": [{"data": [[0.0, 29.0], [0.1, 34.0], [0.2, 52.0], [0.3, 58.0], [0.4, 65.0], [0.5, 74.0], [0.6, 77.0], [0.7, 79.0], [0.8, 84.0], [0.9, 88.0], [1.0, 90.0], [1.1, 94.0], [1.2, 96.0], [1.3, 99.0], [1.4, 102.0], [1.5, 104.0], [1.6, 105.0], [1.7, 107.0], [1.8, 109.0], [1.9, 112.0], [2.0, 115.0], [2.1, 120.0], [2.2, 123.0], [2.3, 127.0], [2.4, 128.0], [2.5, 132.0], [2.6, 135.0], [2.7, 138.0], [2.8, 141.0], [2.9, 143.0], [3.0, 145.0], [3.1, 148.0], [3.2, 151.0], [3.3, 153.0], [3.4, 156.0], [3.5, 163.0], [3.6, 171.0], [3.7, 177.0], [3.8, 184.0], [3.9, 192.0], [4.0, 198.0], [4.1, 204.0], [4.2, 207.0], [4.3, 216.0], [4.4, 219.0], [4.5, 222.0], [4.6, 225.0], [4.7, 229.0], [4.8, 232.0], [4.9, 234.0], [5.0, 237.0], [5.1, 240.0], [5.2, 245.0], [5.3, 249.0], [5.4, 254.0], [5.5, 260.0], [5.6, 263.0], [5.7, 266.0], [5.8, 269.0], [5.9, 271.0], [6.0, 272.0], [6.1, 276.0], [6.2, 277.0], [6.3, 279.0], [6.4, 281.0], [6.5, 285.0], [6.6, 286.0], [6.7, 287.0], [6.8, 288.0], [6.9, 290.0], [7.0, 291.0], [7.1, 294.0], [7.2, 296.0], [7.3, 299.0], [7.4, 301.0], [7.5, 303.0], [7.6, 304.0], [7.7, 304.0], [7.8, 305.0], [7.9, 306.0], [8.0, 307.0], [8.1, 308.0], [8.2, 309.0], [8.3, 310.0], [8.4, 311.0], [8.5, 311.0], [8.6, 312.0], [8.7, 313.0], [8.8, 314.0], [8.9, 316.0], [9.0, 317.0], [9.1, 318.0], [9.2, 319.0], [9.3, 320.0], [9.4, 321.0], [9.5, 322.0], [9.6, 324.0], [9.7, 326.0], [9.8, 327.0], [9.9, 328.0], [10.0, 329.0], [10.1, 330.0], [10.2, 331.0], [10.3, 333.0], [10.4, 335.0], [10.5, 336.0], [10.6, 338.0], [10.7, 341.0], [10.8, 344.0], [10.9, 348.0], [11.0, 351.0], [11.1, 352.0], [11.2, 354.0], [11.3, 356.0], [11.4, 358.0], [11.5, 360.0], [11.6, 361.0], [11.7, 362.0], [11.8, 363.0], [11.9, 364.0], [12.0, 366.0], [12.1, 367.0], [12.2, 368.0], [12.3, 369.0], [12.4, 370.0], [12.5, 371.0], [12.6, 371.0], [12.7, 373.0], [12.8, 373.0], [12.9, 375.0], [13.0, 376.0], [13.1, 377.0], [13.2, 379.0], [13.3, 380.0], [13.4, 381.0], [13.5, 382.0], [13.6, 383.0], [13.7, 384.0], [13.8, 385.0], [13.9, 386.0], [14.0, 388.0], [14.1, 388.0], [14.2, 389.0], [14.3, 391.0], [14.4, 392.0], [14.5, 393.0], [14.6, 395.0], [14.7, 396.0], [14.8, 397.0], [14.9, 397.0], [15.0, 399.0], [15.1, 400.0], [15.2, 401.0], [15.3, 403.0], [15.4, 404.0], [15.5, 404.0], [15.6, 406.0], [15.7, 407.0], [15.8, 408.0], [15.9, 409.0], [16.0, 409.0], [16.1, 410.0], [16.2, 411.0], [16.3, 412.0], [16.4, 413.0], [16.5, 414.0], [16.6, 415.0], [16.7, 416.0], [16.8, 418.0], [16.9, 419.0], [17.0, 421.0], [17.1, 422.0], [17.2, 423.0], [17.3, 424.0], [17.4, 425.0], [17.5, 426.0], [17.6, 427.0], [17.7, 428.0], [17.8, 430.0], [17.9, 430.0], [18.0, 431.0], [18.1, 432.0], [18.2, 432.0], [18.3, 433.0], [18.4, 435.0], [18.5, 435.0], [18.6, 436.0], [18.7, 437.0], [18.8, 437.0], [18.9, 438.0], [19.0, 439.0], [19.1, 440.0], [19.2, 442.0], [19.3, 443.0], [19.4, 444.0], [19.5, 444.0], [19.6, 445.0], [19.7, 447.0], [19.8, 449.0], [19.9, 450.0], [20.0, 451.0], [20.1, 453.0], [20.2, 455.0], [20.3, 456.0], [20.4, 457.0], [20.5, 457.0], [20.6, 458.0], [20.7, 459.0], [20.8, 459.0], [20.9, 460.0], [21.0, 460.0], [21.1, 461.0], [21.2, 462.0], [21.3, 462.0], [21.4, 463.0], [21.5, 464.0], [21.6, 465.0], [21.7, 465.0], [21.8, 466.0], [21.9, 467.0], [22.0, 468.0], [22.1, 469.0], [22.2, 470.0], [22.3, 470.0], [22.4, 471.0], [22.5, 472.0], [22.6, 472.0], [22.7, 473.0], [22.8, 474.0], [22.9, 475.0], [23.0, 475.0], [23.1, 476.0], [23.2, 477.0], [23.3, 477.0], [23.4, 478.0], [23.5, 479.0], [23.6, 480.0], [23.7, 481.0], [23.8, 482.0], [23.9, 482.0], [24.0, 483.0], [24.1, 484.0], [24.2, 485.0], [24.3, 486.0], [24.4, 486.0], [24.5, 487.0], [24.6, 488.0], [24.7, 488.0], [24.8, 489.0], [24.9, 490.0], [25.0, 491.0], [25.1, 492.0], [25.2, 492.0], [25.3, 493.0], [25.4, 494.0], [25.5, 495.0], [25.6, 495.0], [25.7, 496.0], [25.8, 496.0], [25.9, 497.0], [26.0, 498.0], [26.1, 498.0], [26.2, 499.0], [26.3, 500.0], [26.4, 500.0], [26.5, 501.0], [26.6, 502.0], [26.7, 502.0], [26.8, 503.0], [26.9, 504.0], [27.0, 504.0], [27.1, 504.0], [27.2, 505.0], [27.3, 505.0], [27.4, 506.0], [27.5, 506.0], [27.6, 507.0], [27.7, 508.0], [27.8, 508.0], [27.9, 509.0], [28.0, 509.0], [28.1, 510.0], [28.2, 511.0], [28.3, 511.0], [28.4, 512.0], [28.5, 513.0], [28.6, 513.0], [28.7, 514.0], [28.8, 515.0], [28.9, 516.0], [29.0, 516.0], [29.1, 517.0], [29.2, 518.0], [29.3, 518.0], [29.4, 519.0], [29.5, 520.0], [29.6, 520.0], [29.7, 521.0], [29.8, 522.0], [29.9, 523.0], [30.0, 523.0], [30.1, 524.0], [30.2, 524.0], [30.3, 525.0], [30.4, 526.0], [30.5, 527.0], [30.6, 527.0], [30.7, 527.0], [30.8, 528.0], [30.9, 528.0], [31.0, 528.0], [31.1, 529.0], [31.2, 530.0], [31.3, 530.0], [31.4, 531.0], [31.5, 531.0], [31.6, 532.0], [31.7, 532.0], [31.8, 533.0], [31.9, 533.0], [32.0, 534.0], [32.1, 535.0], [32.2, 536.0], [32.3, 536.0], [32.4, 536.0], [32.5, 537.0], [32.6, 537.0], [32.7, 538.0], [32.8, 539.0], [32.9, 539.0], [33.0, 540.0], [33.1, 540.0], [33.2, 541.0], [33.3, 541.0], [33.4, 542.0], [33.5, 543.0], [33.6, 543.0], [33.7, 544.0], [33.8, 544.0], [33.9, 545.0], [34.0, 546.0], [34.1, 547.0], [34.2, 547.0], [34.3, 548.0], [34.4, 549.0], [34.5, 549.0], [34.6, 550.0], [34.7, 550.0], [34.8, 551.0], [34.9, 552.0], [35.0, 553.0], [35.1, 553.0], [35.2, 553.0], [35.3, 554.0], [35.4, 555.0], [35.5, 555.0], [35.6, 556.0], [35.7, 557.0], [35.8, 557.0], [35.9, 558.0], [36.0, 558.0], [36.1, 559.0], [36.2, 559.0], [36.3, 559.0], [36.4, 560.0], [36.5, 560.0], [36.6, 562.0], [36.7, 563.0], [36.8, 563.0], [36.9, 564.0], [37.0, 565.0], [37.1, 566.0], [37.2, 567.0], [37.3, 568.0], [37.4, 568.0], [37.5, 569.0], [37.6, 569.0], [37.7, 570.0], [37.8, 570.0], [37.9, 571.0], [38.0, 572.0], [38.1, 572.0], [38.2, 573.0], [38.3, 574.0], [38.4, 574.0], [38.5, 575.0], [38.6, 575.0], [38.7, 575.0], [38.8, 576.0], [38.9, 577.0], [39.0, 577.0], [39.1, 578.0], [39.2, 578.0], [39.3, 579.0], [39.4, 580.0], [39.5, 580.0], [39.6, 581.0], [39.7, 582.0], [39.8, 582.0], [39.9, 583.0], [40.0, 584.0], [40.1, 585.0], [40.2, 585.0], [40.3, 586.0], [40.4, 587.0], [40.5, 588.0], [40.6, 588.0], [40.7, 589.0], [40.8, 590.0], [40.9, 590.0], [41.0, 591.0], [41.1, 592.0], [41.2, 592.0], [41.3, 593.0], [41.4, 593.0], [41.5, 594.0], [41.6, 595.0], [41.7, 595.0], [41.8, 595.0], [41.9, 596.0], [42.0, 596.0], [42.1, 596.0], [42.2, 597.0], [42.3, 598.0], [42.4, 598.0], [42.5, 599.0], [42.6, 599.0], [42.7, 600.0], [42.8, 601.0], [42.9, 601.0], [43.0, 602.0], [43.1, 603.0], [43.2, 603.0], [43.3, 604.0], [43.4, 604.0], [43.5, 604.0], [43.6, 605.0], [43.7, 605.0], [43.8, 606.0], [43.9, 607.0], [44.0, 607.0], [44.1, 608.0], [44.2, 608.0], [44.3, 609.0], [44.4, 610.0], [44.5, 610.0], [44.6, 611.0], [44.7, 611.0], [44.8, 612.0], [44.9, 612.0], [45.0, 612.0], [45.1, 613.0], [45.2, 613.0], [45.3, 614.0], [45.4, 614.0], [45.5, 615.0], [45.6, 615.0], [45.7, 616.0], [45.8, 616.0], [45.9, 617.0], [46.0, 617.0], [46.1, 618.0], [46.2, 619.0], [46.3, 619.0], [46.4, 620.0], [46.5, 620.0], [46.6, 621.0], [46.7, 621.0], [46.8, 622.0], [46.9, 622.0], [47.0, 622.0], [47.1, 623.0], [47.2, 623.0], [47.3, 624.0], [47.4, 625.0], [47.5, 626.0], [47.6, 626.0], [47.7, 627.0], [47.8, 627.0], [47.9, 628.0], [48.0, 628.0], [48.1, 629.0], [48.2, 629.0], [48.3, 630.0], [48.4, 630.0], [48.5, 631.0], [48.6, 631.0], [48.7, 631.0], [48.8, 632.0], [48.9, 632.0], [49.0, 633.0], [49.1, 634.0], [49.2, 635.0], [49.3, 636.0], [49.4, 637.0], [49.5, 638.0], [49.6, 638.0], [49.7, 638.0], [49.8, 639.0], [49.9, 639.0], [50.0, 640.0], [50.1, 641.0], [50.2, 641.0], [50.3, 641.0], [50.4, 643.0], [50.5, 643.0], [50.6, 644.0], [50.7, 645.0], [50.8, 645.0], [50.9, 645.0], [51.0, 646.0], [51.1, 646.0], [51.2, 647.0], [51.3, 647.0], [51.4, 648.0], [51.5, 649.0], [51.6, 649.0], [51.7, 651.0], [51.8, 651.0], [51.9, 652.0], [52.0, 653.0], [52.1, 654.0], [52.2, 654.0], [52.3, 655.0], [52.4, 656.0], [52.5, 656.0], [52.6, 657.0], [52.7, 657.0], [52.8, 658.0], [52.9, 659.0], [53.0, 659.0], [53.1, 660.0], [53.2, 661.0], [53.3, 661.0], [53.4, 663.0], [53.5, 663.0], [53.6, 664.0], [53.7, 664.0], [53.8, 665.0], [53.9, 665.0], [54.0, 666.0], [54.1, 667.0], [54.2, 668.0], [54.3, 668.0], [54.4, 669.0], [54.5, 670.0], [54.6, 670.0], [54.7, 671.0], [54.8, 671.0], [54.9, 672.0], [55.0, 672.0], [55.1, 672.0], [55.2, 673.0], [55.3, 673.0], [55.4, 674.0], [55.5, 674.0], [55.6, 675.0], [55.7, 676.0], [55.8, 676.0], [55.9, 677.0], [56.0, 677.0], [56.1, 677.0], [56.2, 678.0], [56.3, 678.0], [56.4, 679.0], [56.5, 679.0], [56.6, 679.0], [56.7, 679.0], [56.8, 680.0], [56.9, 680.0], [57.0, 681.0], [57.1, 681.0], [57.2, 682.0], [57.3, 683.0], [57.4, 684.0], [57.5, 684.0], [57.6, 684.0], [57.7, 685.0], [57.8, 685.0], [57.9, 686.0], [58.0, 686.0], [58.1, 686.0], [58.2, 687.0], [58.3, 688.0], [58.4, 688.0], [58.5, 689.0], [58.6, 689.0], [58.7, 689.0], [58.8, 690.0], [58.9, 691.0], [59.0, 691.0], [59.1, 691.0], [59.2, 692.0], [59.3, 692.0], [59.4, 692.0], [59.5, 693.0], [59.6, 693.0], [59.7, 694.0], [59.8, 694.0], [59.9, 695.0], [60.0, 695.0], [60.1, 696.0], [60.2, 696.0], [60.3, 697.0], [60.4, 697.0], [60.5, 698.0], [60.6, 698.0], [60.7, 699.0], [60.8, 699.0], [60.9, 700.0], [61.0, 700.0], [61.1, 700.0], [61.2, 701.0], [61.3, 701.0], [61.4, 701.0], [61.5, 702.0], [61.6, 702.0], [61.7, 703.0], [61.8, 703.0], [61.9, 704.0], [62.0, 704.0], [62.1, 705.0], [62.2, 705.0], [62.3, 706.0], [62.4, 706.0], [62.5, 707.0], [62.6, 707.0], [62.7, 707.0], [62.8, 708.0], [62.9, 708.0], [63.0, 709.0], [63.1, 709.0], [63.2, 709.0], [63.3, 710.0], [63.4, 710.0], [63.5, 711.0], [63.6, 711.0], [63.7, 712.0], [63.8, 712.0], [63.9, 712.0], [64.0, 713.0], [64.1, 713.0], [64.2, 714.0], [64.3, 714.0], [64.4, 715.0], [64.5, 715.0], [64.6, 716.0], [64.7, 716.0], [64.8, 717.0], [64.9, 717.0], [65.0, 718.0], [65.1, 719.0], [65.2, 719.0], [65.3, 719.0], [65.4, 720.0], [65.5, 720.0], [65.6, 721.0], [65.7, 721.0], [65.8, 722.0], [65.9, 722.0], [66.0, 722.0], [66.1, 723.0], [66.2, 723.0], [66.3, 724.0], [66.4, 724.0], [66.5, 725.0], [66.6, 725.0], [66.7, 725.0], [66.8, 725.0], [66.9, 727.0], [67.0, 728.0], [67.1, 729.0], [67.2, 729.0], [67.3, 730.0], [67.4, 730.0], [67.5, 730.0], [67.6, 731.0], [67.7, 732.0], [67.8, 732.0], [67.9, 732.0], [68.0, 733.0], [68.1, 733.0], [68.2, 734.0], [68.3, 735.0], [68.4, 736.0], [68.5, 736.0], [68.6, 736.0], [68.7, 737.0], [68.8, 737.0], [68.9, 737.0], [69.0, 738.0], [69.1, 738.0], [69.2, 739.0], [69.3, 740.0], [69.4, 740.0], [69.5, 740.0], [69.6, 741.0], [69.7, 741.0], [69.8, 742.0], [69.9, 743.0], [70.0, 743.0], [70.1, 744.0], [70.2, 744.0], [70.3, 745.0], [70.4, 745.0], [70.5, 746.0], [70.6, 747.0], [70.7, 747.0], [70.8, 748.0], [70.9, 748.0], [71.0, 749.0], [71.1, 750.0], [71.2, 750.0], [71.3, 751.0], [71.4, 752.0], [71.5, 752.0], [71.6, 753.0], [71.7, 754.0], [71.8, 755.0], [71.9, 755.0], [72.0, 756.0], [72.1, 756.0], [72.2, 757.0], [72.3, 757.0], [72.4, 758.0], [72.5, 759.0], [72.6, 759.0], [72.7, 760.0], [72.8, 760.0], [72.9, 760.0], [73.0, 761.0], [73.1, 761.0], [73.2, 762.0], [73.3, 762.0], [73.4, 763.0], [73.5, 763.0], [73.6, 763.0], [73.7, 763.0], [73.8, 764.0], [73.9, 765.0], [74.0, 765.0], [74.1, 765.0], [74.2, 766.0], [74.3, 767.0], [74.4, 767.0], [74.5, 768.0], [74.6, 768.0], [74.7, 769.0], [74.8, 769.0], [74.9, 769.0], [75.0, 770.0], [75.1, 771.0], [75.2, 771.0], [75.3, 771.0], [75.4, 772.0], [75.5, 772.0], [75.6, 773.0], [75.7, 774.0], [75.8, 774.0], [75.9, 775.0], [76.0, 776.0], [76.1, 777.0], [76.2, 777.0], [76.3, 778.0], [76.4, 779.0], [76.5, 780.0], [76.6, 780.0], [76.7, 780.0], [76.8, 781.0], [76.9, 781.0], [77.0, 782.0], [77.1, 783.0], [77.2, 783.0], [77.3, 784.0], [77.4, 784.0], [77.5, 785.0], [77.6, 786.0], [77.7, 787.0], [77.8, 787.0], [77.9, 788.0], [78.0, 788.0], [78.1, 789.0], [78.2, 789.0], [78.3, 791.0], [78.4, 791.0], [78.5, 791.0], [78.6, 792.0], [78.7, 793.0], [78.8, 794.0], [78.9, 795.0], [79.0, 795.0], [79.1, 796.0], [79.2, 796.0], [79.3, 797.0], [79.4, 797.0], [79.5, 798.0], [79.6, 799.0], [79.7, 799.0], [79.8, 800.0], [79.9, 801.0], [80.0, 802.0], [80.1, 803.0], [80.2, 804.0], [80.3, 804.0], [80.4, 805.0], [80.5, 806.0], [80.6, 807.0], [80.7, 808.0], [80.8, 808.0], [80.9, 809.0], [81.0, 810.0], [81.1, 810.0], [81.2, 812.0], [81.3, 812.0], [81.4, 813.0], [81.5, 814.0], [81.6, 815.0], [81.7, 816.0], [81.8, 816.0], [81.9, 817.0], [82.0, 819.0], [82.1, 820.0], [82.2, 820.0], [82.3, 821.0], [82.4, 823.0], [82.5, 823.0], [82.6, 824.0], [82.7, 824.0], [82.8, 825.0], [82.9, 826.0], [83.0, 826.0], [83.1, 827.0], [83.2, 828.0], [83.3, 828.0], [83.4, 829.0], [83.5, 830.0], [83.6, 830.0], [83.7, 831.0], [83.8, 831.0], [83.9, 832.0], [84.0, 832.0], [84.1, 833.0], [84.2, 833.0], [84.3, 834.0], [84.4, 835.0], [84.5, 836.0], [84.6, 837.0], [84.7, 838.0], [84.8, 838.0], [84.9, 839.0], [85.0, 839.0], [85.1, 840.0], [85.2, 841.0], [85.3, 841.0], [85.4, 842.0], [85.5, 843.0], [85.6, 844.0], [85.7, 844.0], [85.8, 845.0], [85.9, 846.0], [86.0, 848.0], [86.1, 849.0], [86.2, 850.0], [86.3, 852.0], [86.4, 852.0], [86.5, 853.0], [86.6, 854.0], [86.7, 855.0], [86.8, 857.0], [86.9, 858.0], [87.0, 859.0], [87.1, 860.0], [87.2, 860.0], [87.3, 861.0], [87.4, 862.0], [87.5, 863.0], [87.6, 865.0], [87.7, 867.0], [87.8, 869.0], [87.9, 870.0], [88.0, 871.0], [88.1, 872.0], [88.2, 873.0], [88.3, 874.0], [88.4, 875.0], [88.5, 877.0], [88.6, 878.0], [88.7, 879.0], [88.8, 880.0], [88.9, 881.0], [89.0, 882.0], [89.1, 884.0], [89.2, 885.0], [89.3, 887.0], [89.4, 887.0], [89.5, 889.0], [89.6, 890.0], [89.7, 891.0], [89.8, 892.0], [89.9, 893.0], [90.0, 893.0], [90.1, 895.0], [90.2, 896.0], [90.3, 897.0], [90.4, 898.0], [90.5, 900.0], [90.6, 901.0], [90.7, 902.0], [90.8, 904.0], [90.9, 906.0], [91.0, 908.0], [91.1, 909.0], [91.2, 909.0], [91.3, 911.0], [91.4, 912.0], [91.5, 914.0], [91.6, 915.0], [91.7, 916.0], [91.8, 919.0], [91.9, 919.0], [92.0, 921.0], [92.1, 923.0], [92.2, 924.0], [92.3, 926.0], [92.4, 927.0], [92.5, 928.0], [92.6, 931.0], [92.7, 933.0], [92.8, 934.0], [92.9, 936.0], [93.0, 939.0], [93.1, 941.0], [93.2, 942.0], [93.3, 943.0], [93.4, 945.0], [93.5, 946.0], [93.6, 948.0], [93.7, 949.0], [93.8, 952.0], [93.9, 954.0], [94.0, 956.0], [94.1, 958.0], [94.2, 960.0], [94.3, 964.0], [94.4, 967.0], [94.5, 970.0], [94.6, 973.0], [94.7, 979.0], [94.8, 980.0], [94.9, 983.0], [95.0, 984.0], [95.1, 987.0], [95.2, 990.0], [95.3, 993.0], [95.4, 997.0], [95.5, 1002.0], [95.6, 1009.0], [95.7, 1017.0], [95.8, 1025.0], [95.9, 1027.0], [96.0, 1032.0], [96.1, 1034.0], [96.2, 1039.0], [96.3, 1043.0], [96.4, 1048.0], [96.5, 1055.0], [96.6, 1062.0], [96.7, 1067.0], [96.8, 1072.0], [96.9, 1084.0], [97.0, 1090.0], [97.1, 1094.0], [97.2, 1100.0], [97.3, 1105.0], [97.4, 1118.0], [97.5, 1131.0], [97.6, 1142.0], [97.7, 1171.0], [97.8, 1192.0], [97.9, 1214.0], [98.0, 1458.0], [98.1, 1516.0], [98.2, 1551.0], [98.3, 1593.0], [98.4, 1632.0], [98.5, 1673.0], [98.6, 1687.0], [98.7, 1703.0], [98.8, 1720.0], [98.9, 1751.0], [99.0, 1789.0], [99.1, 1828.0], [99.2, 1852.0], [99.3, 1872.0], [99.4, 1902.0], [99.5, 2012.0], [99.6, 2211.0], [99.7, 2284.0], [99.8, 2383.0], [99.9, 2410.0], [100.0, 2514.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1887.0, "series": [{"data": [[0.0, 130.0], [600.0, 1825.0], [700.0, 1887.0], [800.0, 1074.0], [900.0, 495.0], [1000.0, 175.0], [1100.0, 64.0], [1200.0, 14.0], [1300.0, 2.0], [1400.0, 7.0], [1500.0, 24.0], [100.0, 273.0], [1600.0, 37.0], [1700.0, 37.0], [1800.0, 35.0], [1900.0, 10.0], [2000.0, 6.0], [2100.0, 3.0], [2300.0, 15.0], [2200.0, 13.0], [2400.0, 13.0], [2500.0, 1.0], [200.0, 333.0], [300.0, 772.0], [400.0, 1122.0], [500.0, 1633.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 194.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7163.0, "series": [{"data": [[0.0, 2643.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7163.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 194.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 815.0937999999989, "minX": 1.66956618E12, "maxY": 815.0937999999989, "series": [{"data": [[1.66956618E12, 815.0937999999989]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956618E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 2.0, "maxY": 978.0, "series": [{"data": [[2.0, 30.5], [3.0, 30.0], [4.0, 30.0], [5.0, 30.0], [6.0, 30.0], [7.0, 30.0], [8.0, 30.0], [9.0, 29.0], [10.0, 35.0], [11.0, 35.0], [12.0, 34.0], [13.0, 34.0], [14.0, 33.0], [15.0, 77.0], [16.0, 79.0], [17.0, 79.0], [18.0, 79.0], [19.0, 93.0], [20.0, 92.0], [21.0, 93.0], [22.0, 98.0], [23.0, 103.0], [24.0, 103.0], [25.0, 103.0], [26.0, 96.0], [27.0, 128.69230769230768], [29.0, 137.0], [33.0, 99.0], [32.0, 59.333333333333336], [35.0, 104.5], [34.0, 74.0], [36.0, 73.0], [39.0, 76.66666666666667], [40.0, 107.0], [43.0, 78.5], [42.0, 78.0], [45.0, 105.0], [47.0, 82.0], [46.0, 88.0], [49.0, 114.66666666666667], [48.0, 82.0], [51.0, 86.0], [52.0, 117.0], [55.0, 96.66666666666667], [57.0, 122.0], [56.0, 84.0], [60.0, 97.33333333333333], [62.0, 163.66666666666666], [66.0, 183.4], [71.0, 123.0], [70.0, 234.5], [69.0, 253.0], [68.0, 162.33333333333334], [75.0, 167.75], [72.0, 236.0], [79.0, 89.0], [77.0, 61.0], [82.0, 92.0], [80.0, 428.0], [86.0, 46.0], [85.0, 58.0], [84.0, 189.66666666666666], [90.0, 200.33333333333331], [89.0, 63.666666666666664], [95.0, 70.0], [92.0, 64.5], [99.0, 80.66666666666667], [97.0, 91.5], [96.0, 70.0], [103.0, 79.0], [102.0, 90.66666666666667], [100.0, 80.0], [106.0, 79.0], [105.0, 76.0], [111.0, 107.0], [109.0, 103.5], [108.0, 81.0], [114.0, 77.66666666666667], [119.0, 173.3], [118.0, 192.25], [117.0, 107.0], [116.0, 83.5], [123.0, 176.2], [122.0, 107.0], [121.0, 104.0], [120.0, 213.16666666666669], [127.0, 112.5], [126.0, 208.0], [125.0, 170.0], [124.0, 153.0], [134.0, 126.75], [132.0, 198.29629629629628], [131.0, 116.0], [130.0, 112.77777777777777], [129.0, 290.0], [128.0, 149.5], [142.0, 111.5], [140.0, 109.0], [139.0, 112.0], [138.0, 165.8], [137.0, 135.5], [136.0, 204.66666666666666], [151.0, 328.6], [150.0, 96.0], [149.0, 272.3333333333333], [147.0, 281.2], [146.0, 302.6666666666667], [145.0, 232.0], [144.0, 104.5], [171.0, 351.0833333333333], [170.0, 412.0], [169.0, 193.25], [183.0, 281.37500000000006], [182.0, 444.0], [181.0, 394.0], [180.0, 269.1428571428571], [179.0, 194.2857142857143], [177.0, 378.0], [191.0, 289.0], [190.0, 259.5], [189.0, 256.0], [188.0, 420.0], [187.0, 208.0], [186.0, 218.5], [185.0, 253.75], [184.0, 122.0], [199.0, 116.5], [198.0, 329.0], [196.0, 203.0], [195.0, 359.75], [194.0, 276.3333333333333], [193.0, 213.0], [192.0, 249.6], [207.0, 288.6], [205.0, 229.75], [203.0, 397.5], [202.0, 132.0], [201.0, 277.7142857142857], [211.0, 388.0], [209.0, 269.8], [231.0, 370.7142857142857], [229.0, 443.6666666666667], [236.0, 391.5], [235.0, 303.0], [234.0, 364.7142857142857], [233.0, 357.92857142857144], [246.0, 538.3333333333334], [245.0, 511.6666666666667], [244.0, 409.75], [243.0, 450.0], [241.0, 370.25000000000006], [270.0, 447.0], [271.0, 198.0], [269.0, 533.5], [268.0, 350.5], [266.0, 318.5], [265.0, 526.0], [264.0, 483.0], [263.0, 443.0], [262.0, 442.0], [261.0, 210.5], [260.0, 463.8421052631579], [275.0, 514.0], [283.0, 411.3333333333333], [282.0, 528.8], [280.0, 475.0], [279.0, 405.3333333333333], [277.0, 308.2], [274.0, 485.0], [273.0, 302.0], [272.0, 570.0], [300.0, 468.0], [302.0, 420.3333333333333], [303.0, 475.0], [301.0, 393.2], [297.0, 516.0], [296.0, 470.75], [295.0, 221.0], [288.0, 428.0], [291.0, 180.0], [289.0, 516.0], [294.0, 508.0], [293.0, 506.0], [318.0, 534.5], [319.0, 427.0], [316.0, 520.0], [307.0, 535.0], [306.0, 502.0], [304.0, 201.0], [315.0, 163.0], [314.0, 426.75], [312.0, 363.5], [311.0, 506.0], [310.0, 530.0], [309.0, 502.3333333333333], [308.0, 535.0], [333.0, 437.0], [332.0, 416.125], [326.0, 445.0], [325.0, 384.3333333333333], [322.0, 506.0], [320.0, 511.0], [349.0, 463.5], [350.0, 492.0], [348.0, 385.0], [347.0, 435.0], [345.0, 525.0], [344.0, 476.25], [341.0, 448.0], [340.0, 370.5], [338.0, 470.0], [337.0, 432.74999999999994], [355.0, 410.6], [363.0, 521.0714285714286], [366.0, 433.79999999999995], [364.0, 382.58333333333326], [361.0, 404.7142857142857], [359.0, 451.1666666666667], [357.0, 422.7142857142857], [354.0, 165.0], [352.0, 417.875], [381.0, 477.8333333333333], [380.0, 617.0], [371.0, 375.0], [370.0, 143.0], [369.0, 420.24999999999994], [368.0, 367.1111111111111], [383.0, 352.6], [382.0, 394.0], [379.0, 285.0], [378.0, 169.0], [376.0, 192.0], [375.0, 451.6666666666667], [374.0, 479.6666666666667], [373.0, 400.0], [372.0, 396.77777777777777], [387.0, 367.55555555555554], [389.0, 438.44444444444446], [388.0, 431.0], [385.0, 625.0], [386.0, 625.375], [390.0, 509.87499999999994], [392.0, 473.33333333333337], [395.0, 559.0714285714288], [394.0, 432.0], [396.0, 528.8571428571429], [384.0, 623.3333333333334], [398.0, 360.0], [397.0, 274.0], [412.0, 382.83333333333337], [401.0, 581.9374999999999], [400.0, 500.83333333333337], [403.0, 540.6], [402.0, 398.8333333333333], [405.0, 527.3333333333334], [406.0, 287.83333333333337], [407.0, 438.7], [410.0, 468.0], [409.0, 370.0], [408.0, 362.0], [411.0, 368.8], [415.0, 384.2857142857143], [414.0, 379.14285714285717], [428.0, 416.11111111111114], [423.0, 527.0], [417.0, 394.8], [416.0, 390.25], [422.0, 447.0], [420.0, 406.6], [424.0, 467.5], [425.0, 399.0], [426.0, 576.0], [427.0, 455.8], [429.0, 485.0], [430.0, 379.3333333333333], [431.0, 437.6666666666667], [446.0, 257.0], [443.0, 442.66666666666663], [445.0, 472.0], [442.0, 377.8], [441.0, 460.0], [440.0, 443.0], [437.0, 141.0], [436.0, 435.0], [435.0, 437.0], [434.0, 426.0], [433.0, 418.0], [432.0, 351.25], [463.0, 154.0], [462.0, 427.0], [458.0, 358.25], [456.0, 446.3333333333333], [455.0, 458.0], [453.0, 427.0], [454.0, 372.0], [452.0, 387.75], [449.0, 458.25], [477.0, 428.0], [466.0, 541.5], [465.0, 652.0], [464.0, 367.75], [467.0, 412.85714285714283], [469.0, 512.8], [468.0, 381.25], [471.0, 370.5], [479.0, 381.0], [473.0, 156.0], [472.0, 453.0], [476.0, 478.25], [475.0, 398.8333333333333], [474.0, 460.0], [493.0, 392.3333333333333], [485.0, 436.44444444444446], [484.0, 363.75], [486.0, 205.0], [487.0, 350.0], [481.0, 431.75], [480.0, 405.7142857142857], [483.0, 306.0], [482.0, 403.0], [488.0, 433.14285714285717], [491.0, 412.22222222222223], [494.0, 490.25], [495.0, 516.0], [490.0, 330.2], [510.0, 373.0], [499.0, 497.3], [500.0, 501.0], [501.0, 269.0], [503.0, 527.5], [496.0, 403.0], [498.0, 356.0], [497.0, 405.5], [502.0, 466.75], [507.0, 431.6363636363636], [509.0, 414.75], [508.0, 489.91666666666663], [506.0, 445.3333333333333], [505.0, 332.0], [504.0, 442.0], [527.0, 364.1111111111111], [523.0, 444.74074074074076], [519.0, 502.0], [518.0, 441.3333333333333], [517.0, 442.4285714285714], [515.0, 431.0], [512.0, 475.99999999999994], [536.0, 559.0], [538.0, 580.4], [537.0, 518.6666666666667], [540.0, 533.3636363636364], [539.0, 570.3333333333334], [541.0, 575.3333333333333], [542.0, 631.8399999999999], [529.0, 517.5833333333333], [531.0, 481.5], [530.0, 483.0], [532.0, 510.8571428571429], [533.0, 405.6428571428571], [534.0, 511.2], [535.0, 468.5671641791045], [520.0, 532.4], [521.0, 504.70000000000005], [522.0, 409.6363636363637], [524.0, 516.0909090909091], [525.0, 447.46666666666664], [526.0, 565.5], [568.0, 462.0869565217391], [552.0, 639.375], [553.0, 631.0], [554.0, 509.7894736842106], [555.0, 731.5217391304348], [557.0, 660.7368421052631], [556.0, 639.3333333333334], [559.0, 669.6666666666666], [545.0, 660.6666666666666], [544.0, 593.5], [547.0, 613.4583333333334], [546.0, 693.0], [549.0, 561.7142857142857], [548.0, 557.3333333333334], [551.0, 616.9285714285713], [550.0, 619.9], [558.0, 679.375], [560.0, 588.8], [566.0, 618.8285714285713], [565.0, 636.4444444444445], [564.0, 666.0], [563.0, 628.625], [562.0, 645.1999999999999], [561.0, 501.0], [567.0, 522.3000000000002], [569.0, 477.33333333333337], [570.0, 558.0555555555555], [574.0, 441.6666666666667], [573.0, 521.3333333333334], [572.0, 637.5], [575.0, 487.0], [604.0, 639.9], [607.0, 618.7777777777778], [593.0, 653.4], [595.0, 645.5999999999999], [594.0, 553.0], [597.0, 636.2], [596.0, 609.8333333333333], [606.0, 620.0], [605.0, 595.8387096774194], [603.0, 657.4285714285714], [602.0, 602.1111111111111], [601.0, 609.0000000000001], [600.0, 588.9090909090909], [590.0, 591.5], [576.0, 489.0], [578.0, 505.0], [577.0, 670.0], [581.0, 567.3333333333334], [580.0, 627.6250000000001], [583.0, 621.8], [582.0, 591.7777777777777], [589.0, 720.0], [588.0, 617.25], [587.0, 621.75], [586.0, 518.0], [585.0, 615.25], [599.0, 610.5], [598.0, 632.25], [634.0, 608.4], [638.0, 506.5], [636.0, 554.0], [635.0, 667.5], [639.0, 621.8], [626.0, 629.125], [624.0, 647.2], [628.0, 608.875], [627.0, 585.0], [637.0, 686.0], [632.0, 640.0], [615.0, 584.3636363636365], [614.0, 588.0], [612.0, 555.7272727272727], [611.0, 616.7777777777778], [610.0, 607.7142857142858], [609.0, 572.8], [608.0, 593.1000000000001], [623.0, 599.2727272727273], [622.0, 606.6666666666666], [621.0, 591.1666666666666], [620.0, 596.7777777777777], [619.0, 653.4], [618.0, 602.8333333333333], [617.0, 621.5714285714286], [616.0, 610.3333333333334], [631.0, 593.5], [630.0, 689.5], [643.0, 393.75], [653.0, 413.0], [641.0, 399.59999999999997], [640.0, 565.8181818181819], [654.0, 636.75], [655.0, 624.6666666666667], [642.0, 585.3333333333334], [644.0, 357.0], [645.0, 630.0], [647.0, 665.6666666666666], [646.0, 455.0], [664.0, 591.4], [665.0, 558.1111111111111], [666.0, 510.25], [667.0, 557.2857142857143], [668.0, 649.0], [669.0, 387.8], [670.0, 409.5], [671.0, 342.0], [656.0, 365.4], [659.0, 584.4], [657.0, 606.875], [660.0, 503.0], [661.0, 557.8571428571428], [662.0, 421.0], [663.0, 396.8333333333333], [650.0, 414.5625], [649.0, 576.8333333333333], [651.0, 471.0], [652.0, 554.0], [696.0, 539.9230769230769], [672.0, 549.75], [678.0, 574.2727272727273], [677.0, 653.5], [675.0, 630.75], [674.0, 694.0], [673.0, 631.1666666666667], [682.0, 356.0], [681.0, 665.5], [683.0, 665.5], [685.0, 553.3333333333334], [684.0, 650.0], [687.0, 640.0], [686.0, 645.3333333333334], [689.0, 522.1], [690.0, 426.0], [691.0, 311.6666666666667], [693.0, 512.25], [695.0, 682.8888888888889], [694.0, 694.0], [703.0, 493.61538461538464], [688.0, 627.1333333333333], [702.0, 711.6666666666667], [701.0, 733.0], [699.0, 649.0], [698.0, 712.625], [729.0, 782.25], [718.0, 716.5], [704.0, 614.1], [712.0, 605.0], [713.0, 721.0], [715.0, 758.0], [714.0, 731.0], [716.0, 489.8333333333333], [717.0, 720.0], [719.0, 468.22222222222223], [721.0, 630.6666666666666], [720.0, 752.5714285714286], [723.0, 713.6666666666666], [734.0, 601.1333333333333], [735.0, 393.22222222222223], [728.0, 698.0], [711.0, 738.0], [710.0, 761.75], [709.0, 717.75], [708.0, 620.0], [707.0, 713.7222222222222], [706.0, 724.5], [705.0, 754.3333333333334], [730.0, 813.125], [732.0, 788.1428571428571], [731.0, 750.3750000000001], [733.0, 367.1666666666667], [724.0, 696.375], [726.0, 487.84000000000003], [725.0, 811.4545454545454], [727.0, 802.2], [760.0, 892.0], [750.0, 367.84999999999997], [738.0, 339.65217391304355], [739.0, 739.8571428571429], [740.0, 354.1764705882353], [742.0, 800.6666666666666], [761.0, 761.5], [763.0, 887.0], [762.0, 774.75], [767.0, 805.375], [765.0, 783.6666666666666], [744.0, 350.57142857142856], [745.0, 822.625], [747.0, 715.3333333333334], [746.0, 839.5], [748.0, 560.5], [749.0, 307.47058823529414], [751.0, 307.4285714285714], [736.0, 780.5], [737.0, 795.3333333333334], [752.0, 508.1875], [759.0, 634.3750000000001], [758.0, 847.6666666666666], [757.0, 787.5], [756.0, 814.5], [755.0, 733.0], [754.0, 777.6], [753.0, 862.0], [794.0, 876.25], [798.0, 758.8], [770.0, 312.6666666666667], [778.0, 639.5], [776.0, 848.5], [780.0, 737.0], [779.0, 791.8571428571428], [782.0, 836.4], [769.0, 815.875], [781.0, 793.0], [785.0, 381.3571428571429], [788.0, 484.18181818181813], [787.0, 781.5], [786.0, 892.0], [789.0, 789.4], [791.0, 838.6666666666667], [790.0, 941.0], [799.0, 803.25], [784.0, 771.2], [797.0, 824.3], [796.0, 741.25], [795.0, 790.5], [793.0, 806.9090909090909], [775.0, 830.25], [774.0, 763.0], [773.0, 798.5], [772.0, 792.0], [771.0, 866.4], [829.0, 701.3333333333333], [818.0, 709.4545454545455], [817.0, 578.0], [816.0, 794.5], [819.0, 622.25], [820.0, 382.3333333333333], [822.0, 278.0], [823.0, 309.0], [826.0, 421.0], [815.0, 787.0], [801.0, 816.125], [803.0, 785.5], [802.0, 856.5], [805.0, 804.0], [804.0, 791.5], [807.0, 890.0], [806.0, 869.5], [814.0, 832.0], [813.0, 819.9999999999999], [812.0, 770.0], [811.0, 859.0], [810.0, 978.0], [809.0, 816.0], [808.0, 810.4285714285714], [828.0, 784.0909090909091], [830.0, 489.3333333333333], [831.0, 830.0], [858.0, 284.3333333333333], [838.0, 347.25000000000006], [839.0, 288.75], [857.0, 770.0], [856.0, 824.5], [845.0, 718.0], [844.0, 776.3333333333334], [843.0, 807.0], [842.0, 853.5], [841.0, 814.6666666666666], [840.0, 803.0], [847.0, 837.4285714285713], [833.0, 785.0], [832.0, 810.0], [835.0, 840.0], [834.0, 803.1666666666667], [837.0, 819.0], [836.0, 707.0], [846.0, 759.6666666666666], [848.0, 632.3333333333334], [855.0, 509.0], [854.0, 837.9090909090909], [852.0, 812.5], [851.0, 847.8], [850.0, 805.0], [849.0, 832.0], [859.0, 342.0], [861.0, 806.1111111111111], [863.0, 482.5], [862.0, 768.0], [888.0, 621.0], [864.0, 634.8000000000001], [865.0, 650.0], [867.0, 820.5], [866.0, 827.5], [869.0, 811.1666666666666], [868.0, 796.0], [871.0, 780.6666666666666], [870.0, 790.0], [873.0, 674.3], [874.0, 751.3333333333334], [877.0, 433.8709677419355], [876.0, 815.6666666666666], [879.0, 864.5], [878.0, 768.0], [885.0, 552.75], [886.0, 693.75], [887.0, 284.0], [889.0, 275.2], [890.0, 821.25], [891.0, 627.8571428571428], [895.0, 743.2], [882.0, 795.0], [880.0, 764.25], [884.0, 803.0], [883.0, 820.3333333333334], [894.0, 794.0], [893.0, 819.7272727272727], [892.0, 842.0], [923.0, 868.5], [896.0, 594.1818181818181], [897.0, 753.0], [899.0, 836.5714285714286], [898.0, 802.5714285714286], [911.0, 839.1666666666666], [910.0, 765.6666666666666], [909.0, 796.7142857142857], [908.0, 852.3333333333334], [905.0, 880.0], [904.0, 789.0], [900.0, 508.5833333333333], [917.0, 614.0], [927.0, 887.0], [912.0, 784.0], [914.0, 773.5], [913.0, 816.4444444444445], [915.0, 782.0], [918.0, 656.25], [919.0, 821.9999999999999], [920.0, 708.3333333333334], [903.0, 824.6666666666666], [902.0, 818.0], [901.0, 826.0], [922.0, 778.4444444444446], [921.0, 810.3333333333334], [925.0, 612.608695652174], [924.0, 772.5], [926.0, 583.6666666666666], [956.0, 644.0], [943.0, 560.75], [935.0, 471.0645161290321], [934.0, 879.5], [933.0, 846.875], [932.0, 838.5], [930.0, 776.25], [929.0, 829.2857142857143], [928.0, 797.5714285714286], [953.0, 669.0], [955.0, 686.3636363636364], [954.0, 674.1999999999999], [940.0, 752.4444444444445], [939.0, 820.0952380952381], [938.0, 841.7142857142858], [937.0, 832.1428571428572], [941.0, 347.9166666666667], [942.0, 758.2833333333332], [959.0, 638.1666666666666], [945.0, 728.9999999999999], [944.0, 789.8], [947.0, 729.4385964912282], [946.0, 685.2222222222222], [949.0, 717.4615384615385], [948.0, 785.0], [951.0, 712.7894736842106], [950.0, 821.0], [958.0, 707.7142857142858], [957.0, 723.0714285714286], [964.0, 590.0], [961.0, 723.8461538461538], [962.0, 598.5], [963.0, 748.095238095238], [960.0, 659.1666666666666], [975.0, 798.7199999999999], [974.0, 833.6976744186047], [972.0, 484.72727272727275], [971.0, 692.6666666666667], [970.0, 707.0], [969.0, 740.7777777777778], [968.0, 641.0], [973.0, 629.25], [978.0, 393.4], [977.0, 761.3333333333334], [976.0, 719.5], [991.0, 525.5333333333334], [990.0, 741.0], [989.0, 691.6666666666666], [987.0, 643.3333333333333], [986.0, 812.7142857142858], [985.0, 640.6666666666666], [984.0, 685.0], [967.0, 704.0384615384614], [966.0, 711.625], [965.0, 721.8], [988.0, 657.6521739130434], [979.0, 411.7142857142857], [982.0, 477.37499999999994], [981.0, 788.8333333333334], [983.0, 707.3846153846154], [995.0, 809.2777777777779], [992.0, 504.33333333333337], [996.0, 749.1363636363637], [998.0, 677.4444444444445], [999.0, 738.8227848101279], [1000.0, 734.1328125000003], [997.0, 760.9473684210526], [994.0, 798.4375000000001], [993.0, 607.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[815.0934000000008, 643.0984999999987]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956618E12, "maxY": 57666.666666666664, "series": [{"data": [[1.66956618E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956618E12, 57666.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956618E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 643.0984999999987, "minX": 1.66956618E12, "maxY": 643.0984999999987, "series": [{"data": [[1.66956618E12, 643.0984999999987]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956618E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 642.9351999999999, "minX": 1.66956618E12, "maxY": 642.9351999999999, "series": [{"data": [[1.66956618E12, 642.9351999999999]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956618E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6738999999999946, "minX": 1.66956618E12, "maxY": 0.6738999999999946, "series": [{"data": [[1.66956618E12, 0.6738999999999946]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956618E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.66956618E12, "maxY": 2514.0, "series": [{"data": [[1.66956618E12, 2514.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956618E12, 893.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956618E12, 1789.9899999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956618E12, 984.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956618E12, 29.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956618E12, 640.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956618E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 353.0, "minX": 139.0, "maxY": 783.0, "series": [{"data": [[1070.0, 353.0], [139.0, 608.0], [1131.0, 678.0], [1197.0, 548.0], [1253.0, 783.0], [1393.0, 740.0], [1396.0, 723.0], [1443.0, 594.0], [978.0, 368.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1443.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 353.0, "minX": 139.0, "maxY": 783.0, "series": [{"data": [[1070.0, 353.0], [139.0, 608.0], [1131.0, 678.0], [1197.0, 548.0], [1253.0, 783.0], [1393.0, 740.0], [1396.0, 723.0], [1443.0, 594.0], [978.0, 368.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1443.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956618E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956618E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956618E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956618E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956618E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956618E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956618E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956618E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956618E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956618E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956618E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956618E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

