/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 8901.0, "series": [{"data": [[0.0, 2.0], [0.1, 13.0], [0.2, 15.0], [0.3, 18.0], [0.4, 19.0], [0.5, 21.0], [0.6, 23.0], [0.7, 25.0], [0.8, 26.0], [0.9, 28.0], [1.0, 30.0], [1.1, 32.0], [1.2, 34.0], [1.3, 35.0], [1.4, 36.0], [1.5, 38.0], [1.6, 41.0], [1.7, 43.0], [1.8, 46.0], [1.9, 50.0], [2.0, 52.0], [2.1, 54.0], [2.2, 57.0], [2.3, 59.0], [2.4, 62.0], [2.5, 64.0], [2.6, 65.0], [2.7, 68.0], [2.8, 69.0], [2.9, 70.0], [3.0, 72.0], [3.1, 73.0], [3.2, 75.0], [3.3, 77.0], [3.4, 78.0], [3.5, 80.0], [3.6, 81.0], [3.7, 84.0], [3.8, 84.0], [3.9, 87.0], [4.0, 88.0], [4.1, 90.0], [4.2, 93.0], [4.3, 95.0], [4.4, 96.0], [4.5, 98.0], [4.6, 99.0], [4.7, 103.0], [4.8, 104.0], [4.9, 105.0], [5.0, 107.0], [5.1, 111.0], [5.2, 112.0], [5.3, 114.0], [5.4, 116.0], [5.5, 118.0], [5.6, 119.0], [5.7, 120.0], [5.8, 121.0], [5.9, 124.0], [6.0, 125.0], [6.1, 126.0], [6.2, 127.0], [6.3, 128.0], [6.4, 129.0], [6.5, 131.0], [6.6, 132.0], [6.7, 133.0], [6.8, 135.0], [6.9, 136.0], [7.0, 136.0], [7.1, 137.0], [7.2, 137.0], [7.3, 139.0], [7.4, 141.0], [7.5, 142.0], [7.6, 144.0], [7.7, 144.0], [7.8, 144.0], [7.9, 145.0], [8.0, 147.0], [8.1, 149.0], [8.2, 150.0], [8.3, 151.0], [8.4, 152.0], [8.5, 153.0], [8.6, 154.0], [8.7, 157.0], [8.8, 158.0], [8.9, 159.0], [9.0, 160.0], [9.1, 161.0], [9.2, 162.0], [9.3, 163.0], [9.4, 165.0], [9.5, 166.0], [9.6, 167.0], [9.7, 168.0], [9.8, 168.0], [9.9, 168.0], [10.0, 169.0], [10.1, 170.0], [10.2, 171.0], [10.3, 173.0], [10.4, 174.0], [10.5, 175.0], [10.6, 175.0], [10.7, 176.0], [10.8, 176.0], [10.9, 176.0], [11.0, 176.0], [11.1, 177.0], [11.2, 177.0], [11.3, 178.0], [11.4, 179.0], [11.5, 180.0], [11.6, 181.0], [11.7, 181.0], [11.8, 182.0], [11.9, 183.0], [12.0, 184.0], [12.1, 184.0], [12.2, 184.0], [12.3, 184.0], [12.4, 185.0], [12.5, 185.0], [12.6, 186.0], [12.7, 187.0], [12.8, 188.0], [12.9, 189.0], [13.0, 189.0], [13.1, 190.0], [13.2, 190.0], [13.3, 191.0], [13.4, 191.0], [13.5, 192.0], [13.6, 192.0], [13.7, 192.0], [13.8, 193.0], [13.9, 193.0], [14.0, 193.0], [14.1, 194.0], [14.2, 195.0], [14.3, 195.0], [14.4, 196.0], [14.5, 196.0], [14.6, 197.0], [14.7, 198.0], [14.8, 198.0], [14.9, 199.0], [15.0, 199.0], [15.1, 199.0], [15.2, 200.0], [15.3, 200.0], [15.4, 200.0], [15.5, 201.0], [15.6, 202.0], [15.7, 202.0], [15.8, 203.0], [15.9, 204.0], [16.0, 204.0], [16.1, 205.0], [16.2, 205.0], [16.3, 206.0], [16.4, 207.0], [16.5, 207.0], [16.6, 208.0], [16.7, 208.0], [16.8, 208.0], [16.9, 208.0], [17.0, 209.0], [17.1, 209.0], [17.2, 209.0], [17.3, 210.0], [17.4, 211.0], [17.5, 211.0], [17.6, 212.0], [17.7, 212.0], [17.8, 212.0], [17.9, 213.0], [18.0, 214.0], [18.1, 214.0], [18.2, 215.0], [18.3, 215.0], [18.4, 215.0], [18.5, 216.0], [18.6, 216.0], [18.7, 216.0], [18.8, 216.0], [18.9, 217.0], [19.0, 217.0], [19.1, 218.0], [19.2, 218.0], [19.3, 218.0], [19.4, 219.0], [19.5, 219.0], [19.6, 220.0], [19.7, 220.0], [19.8, 221.0], [19.9, 222.0], [20.0, 223.0], [20.1, 223.0], [20.2, 223.0], [20.3, 224.0], [20.4, 224.0], [20.5, 224.0], [20.6, 224.0], [20.7, 224.0], [20.8, 224.0], [20.9, 225.0], [21.0, 225.0], [21.1, 226.0], [21.2, 226.0], [21.3, 227.0], [21.4, 227.0], [21.5, 228.0], [21.6, 229.0], [21.7, 230.0], [21.8, 230.0], [21.9, 231.0], [22.0, 231.0], [22.1, 232.0], [22.2, 232.0], [22.3, 232.0], [22.4, 232.0], [22.5, 232.0], [22.6, 232.0], [22.7, 233.0], [22.8, 233.0], [22.9, 233.0], [23.0, 234.0], [23.1, 234.0], [23.2, 234.0], [23.3, 235.0], [23.4, 236.0], [23.5, 236.0], [23.6, 237.0], [23.7, 237.0], [23.8, 238.0], [23.9, 239.0], [24.0, 239.0], [24.1, 239.0], [24.2, 240.0], [24.3, 240.0], [24.4, 240.0], [24.5, 240.0], [24.6, 240.0], [24.7, 241.0], [24.8, 241.0], [24.9, 242.0], [25.0, 243.0], [25.1, 243.0], [25.2, 244.0], [25.3, 244.0], [25.4, 244.0], [25.5, 245.0], [25.6, 245.0], [25.7, 246.0], [25.8, 247.0], [25.9, 247.0], [26.0, 247.0], [26.1, 248.0], [26.2, 248.0], [26.3, 248.0], [26.4, 248.0], [26.5, 249.0], [26.6, 249.0], [26.7, 249.0], [26.8, 250.0], [26.9, 251.0], [27.0, 251.0], [27.1, 252.0], [27.2, 252.0], [27.3, 252.0], [27.4, 253.0], [27.5, 253.0], [27.6, 254.0], [27.7, 255.0], [27.8, 255.0], [27.9, 255.0], [28.0, 256.0], [28.1, 256.0], [28.2, 256.0], [28.3, 257.0], [28.4, 257.0], [28.5, 257.0], [28.6, 257.0], [28.7, 258.0], [28.8, 258.0], [28.9, 259.0], [29.0, 259.0], [29.1, 260.0], [29.2, 260.0], [29.3, 261.0], [29.4, 261.0], [29.5, 262.0], [29.6, 262.0], [29.7, 263.0], [29.8, 263.0], [29.9, 264.0], [30.0, 264.0], [30.1, 264.0], [30.2, 264.0], [30.3, 264.0], [30.4, 265.0], [30.5, 265.0], [30.6, 266.0], [30.7, 266.0], [30.8, 267.0], [30.9, 267.0], [31.0, 267.0], [31.1, 268.0], [31.2, 268.0], [31.3, 269.0], [31.4, 269.0], [31.5, 270.0], [31.6, 271.0], [31.7, 271.0], [31.8, 271.0], [31.9, 272.0], [32.0, 272.0], [32.1, 272.0], [32.2, 272.0], [32.3, 273.0], [32.4, 273.0], [32.5, 273.0], [32.6, 274.0], [32.7, 274.0], [32.8, 274.0], [32.9, 275.0], [33.0, 275.0], [33.1, 275.0], [33.2, 276.0], [33.3, 276.0], [33.4, 277.0], [33.5, 278.0], [33.6, 278.0], [33.7, 279.0], [33.8, 279.0], [33.9, 280.0], [34.0, 280.0], [34.1, 280.0], [34.2, 281.0], [34.3, 281.0], [34.4, 282.0], [34.5, 282.0], [34.6, 283.0], [34.7, 283.0], [34.8, 284.0], [34.9, 284.0], [35.0, 285.0], [35.1, 285.0], [35.2, 286.0], [35.3, 286.0], [35.4, 287.0], [35.5, 287.0], [35.6, 288.0], [35.7, 288.0], [35.8, 288.0], [35.9, 289.0], [36.0, 290.0], [36.1, 290.0], [36.2, 291.0], [36.3, 292.0], [36.4, 293.0], [36.5, 293.0], [36.6, 294.0], [36.7, 295.0], [36.8, 295.0], [36.9, 296.0], [37.0, 296.0], [37.1, 296.0], [37.2, 297.0], [37.3, 297.0], [37.4, 298.0], [37.5, 298.0], [37.6, 299.0], [37.7, 299.0], [37.8, 300.0], [37.9, 300.0], [38.0, 301.0], [38.1, 302.0], [38.2, 303.0], [38.3, 303.0], [38.4, 304.0], [38.5, 304.0], [38.6, 304.0], [38.7, 305.0], [38.8, 305.0], [38.9, 306.0], [39.0, 307.0], [39.1, 307.0], [39.2, 308.0], [39.3, 309.0], [39.4, 310.0], [39.5, 311.0], [39.6, 311.0], [39.7, 312.0], [39.8, 312.0], [39.9, 312.0], [40.0, 313.0], [40.1, 313.0], [40.2, 313.0], [40.3, 314.0], [40.4, 315.0], [40.5, 316.0], [40.6, 316.0], [40.7, 318.0], [40.8, 319.0], [40.9, 319.0], [41.0, 319.0], [41.1, 320.0], [41.2, 320.0], [41.3, 320.0], [41.4, 321.0], [41.5, 322.0], [41.6, 322.0], [41.7, 323.0], [41.8, 324.0], [41.9, 325.0], [42.0, 327.0], [42.1, 327.0], [42.2, 328.0], [42.3, 328.0], [42.4, 329.0], [42.5, 330.0], [42.6, 331.0], [42.7, 332.0], [42.8, 334.0], [42.9, 335.0], [43.0, 336.0], [43.1, 337.0], [43.2, 338.0], [43.3, 339.0], [43.4, 340.0], [43.5, 341.0], [43.6, 342.0], [43.7, 344.0], [43.8, 344.0], [43.9, 345.0], [44.0, 347.0], [44.1, 349.0], [44.2, 350.0], [44.3, 351.0], [44.4, 353.0], [44.5, 355.0], [44.6, 357.0], [44.7, 358.0], [44.8, 359.0], [44.9, 363.0], [45.0, 365.0], [45.1, 368.0], [45.2, 372.0], [45.3, 374.0], [45.4, 378.0], [45.5, 381.0], [45.6, 386.0], [45.7, 391.0], [45.8, 394.0], [45.9, 397.0], [46.0, 403.0], [46.1, 405.0], [46.2, 410.0], [46.3, 413.0], [46.4, 417.0], [46.5, 419.0], [46.6, 423.0], [46.7, 425.0], [46.8, 427.0], [46.9, 429.0], [47.0, 431.0], [47.1, 433.0], [47.2, 435.0], [47.3, 437.0], [47.4, 439.0], [47.5, 440.0], [47.6, 441.0], [47.7, 444.0], [47.8, 447.0], [47.9, 448.0], [48.0, 450.0], [48.1, 451.0], [48.2, 452.0], [48.3, 455.0], [48.4, 456.0], [48.5, 457.0], [48.6, 457.0], [48.7, 459.0], [48.8, 460.0], [48.9, 462.0], [49.0, 463.0], [49.1, 464.0], [49.2, 466.0], [49.3, 467.0], [49.4, 468.0], [49.5, 470.0], [49.6, 471.0], [49.7, 472.0], [49.8, 472.0], [49.9, 473.0], [50.0, 474.0], [50.1, 476.0], [50.2, 477.0], [50.3, 479.0], [50.4, 479.0], [50.5, 480.0], [50.6, 480.0], [50.7, 480.0], [50.8, 481.0], [50.9, 482.0], [51.0, 483.0], [51.1, 484.0], [51.2, 485.0], [51.3, 486.0], [51.4, 487.0], [51.5, 488.0], [51.6, 488.0], [51.7, 489.0], [51.8, 489.0], [51.9, 490.0], [52.0, 491.0], [52.1, 492.0], [52.2, 492.0], [52.3, 493.0], [52.4, 494.0], [52.5, 494.0], [52.6, 495.0], [52.7, 496.0], [52.8, 496.0], [52.9, 496.0], [53.0, 497.0], [53.1, 498.0], [53.2, 499.0], [53.3, 499.0], [53.4, 500.0], [53.5, 500.0], [53.6, 501.0], [53.7, 502.0], [53.8, 502.0], [53.9, 503.0], [54.0, 503.0], [54.1, 503.0], [54.2, 504.0], [54.3, 504.0], [54.4, 505.0], [54.5, 506.0], [54.6, 506.0], [54.7, 507.0], [54.8, 507.0], [54.9, 508.0], [55.0, 508.0], [55.1, 508.0], [55.2, 509.0], [55.3, 509.0], [55.4, 509.0], [55.5, 510.0], [55.6, 511.0], [55.7, 511.0], [55.8, 511.0], [55.9, 511.0], [56.0, 512.0], [56.1, 512.0], [56.2, 513.0], [56.3, 513.0], [56.4, 514.0], [56.5, 514.0], [56.6, 515.0], [56.7, 515.0], [56.8, 515.0], [56.9, 516.0], [57.0, 516.0], [57.1, 516.0], [57.2, 516.0], [57.3, 517.0], [57.4, 518.0], [57.5, 518.0], [57.6, 519.0], [57.7, 519.0], [57.8, 520.0], [57.9, 520.0], [58.0, 520.0], [58.1, 520.0], [58.2, 521.0], [58.3, 521.0], [58.4, 522.0], [58.5, 522.0], [58.6, 523.0], [58.7, 523.0], [58.8, 523.0], [58.9, 524.0], [59.0, 524.0], [59.1, 524.0], [59.2, 524.0], [59.3, 525.0], [59.4, 525.0], [59.5, 525.0], [59.6, 526.0], [59.7, 526.0], [59.8, 527.0], [59.9, 527.0], [60.0, 528.0], [60.1, 528.0], [60.2, 528.0], [60.3, 529.0], [60.4, 529.0], [60.5, 530.0], [60.6, 530.0], [60.7, 531.0], [60.8, 531.0], [60.9, 531.0], [61.0, 532.0], [61.1, 532.0], [61.2, 532.0], [61.3, 532.0], [61.4, 532.0], [61.5, 532.0], [61.6, 533.0], [61.7, 533.0], [61.8, 533.0], [61.9, 533.0], [62.0, 534.0], [62.1, 535.0], [62.2, 535.0], [62.3, 535.0], [62.4, 536.0], [62.5, 536.0], [62.6, 536.0], [62.7, 536.0], [62.8, 537.0], [62.9, 537.0], [63.0, 538.0], [63.1, 539.0], [63.2, 539.0], [63.3, 539.0], [63.4, 539.0], [63.5, 540.0], [63.6, 540.0], [63.7, 540.0], [63.8, 540.0], [63.9, 540.0], [64.0, 540.0], [64.1, 540.0], [64.2, 541.0], [64.3, 541.0], [64.4, 541.0], [64.5, 541.0], [64.6, 542.0], [64.7, 543.0], [64.8, 543.0], [64.9, 543.0], [65.0, 543.0], [65.1, 544.0], [65.2, 544.0], [65.3, 544.0], [65.4, 545.0], [65.5, 545.0], [65.6, 546.0], [65.7, 546.0], [65.8, 546.0], [65.9, 547.0], [66.0, 547.0], [66.1, 547.0], [66.2, 547.0], [66.3, 548.0], [66.4, 548.0], [66.5, 548.0], [66.6, 548.0], [66.7, 548.0], [66.8, 548.0], [66.9, 548.0], [67.0, 549.0], [67.1, 549.0], [67.2, 549.0], [67.3, 549.0], [67.4, 550.0], [67.5, 550.0], [67.6, 551.0], [67.7, 551.0], [67.8, 551.0], [67.9, 552.0], [68.0, 552.0], [68.1, 552.0], [68.2, 553.0], [68.3, 553.0], [68.4, 553.0], [68.5, 555.0], [68.6, 555.0], [68.7, 555.0], [68.8, 556.0], [68.9, 556.0], [69.0, 556.0], [69.1, 556.0], [69.2, 556.0], [69.3, 557.0], [69.4, 557.0], [69.5, 557.0], [69.6, 558.0], [69.7, 558.0], [69.8, 558.0], [69.9, 559.0], [70.0, 559.0], [70.1, 559.0], [70.2, 560.0], [70.3, 560.0], [70.4, 560.0], [70.5, 560.0], [70.6, 561.0], [70.7, 561.0], [70.8, 562.0], [70.9, 562.0], [71.0, 563.0], [71.1, 563.0], [71.2, 563.0], [71.3, 563.0], [71.4, 564.0], [71.5, 564.0], [71.6, 564.0], [71.7, 564.0], [71.8, 564.0], [71.9, 565.0], [72.0, 565.0], [72.1, 565.0], [72.2, 565.0], [72.3, 566.0], [72.4, 566.0], [72.5, 567.0], [72.6, 567.0], [72.7, 567.0], [72.8, 568.0], [72.9, 568.0], [73.0, 568.0], [73.1, 568.0], [73.2, 569.0], [73.3, 569.0], [73.4, 570.0], [73.5, 570.0], [73.6, 571.0], [73.7, 571.0], [73.8, 571.0], [73.9, 571.0], [74.0, 572.0], [74.1, 572.0], [74.2, 572.0], [74.3, 572.0], [74.4, 572.0], [74.5, 573.0], [74.6, 573.0], [74.7, 573.0], [74.8, 573.0], [74.9, 574.0], [75.0, 574.0], [75.1, 575.0], [75.2, 575.0], [75.3, 575.0], [75.4, 575.0], [75.5, 576.0], [75.6, 576.0], [75.7, 576.0], [75.8, 577.0], [75.9, 577.0], [76.0, 578.0], [76.1, 578.0], [76.2, 579.0], [76.3, 579.0], [76.4, 579.0], [76.5, 580.0], [76.6, 580.0], [76.7, 580.0], [76.8, 580.0], [76.9, 580.0], [77.0, 581.0], [77.1, 581.0], [77.2, 581.0], [77.3, 582.0], [77.4, 583.0], [77.5, 583.0], [77.6, 583.0], [77.7, 584.0], [77.8, 584.0], [77.9, 584.0], [78.0, 584.0], [78.1, 585.0], [78.2, 586.0], [78.3, 586.0], [78.4, 587.0], [78.5, 587.0], [78.6, 587.0], [78.7, 588.0], [78.8, 588.0], [78.9, 588.0], [79.0, 589.0], [79.1, 589.0], [79.2, 589.0], [79.3, 590.0], [79.4, 590.0], [79.5, 590.0], [79.6, 591.0], [79.7, 591.0], [79.8, 591.0], [79.9, 592.0], [80.0, 592.0], [80.1, 592.0], [80.2, 593.0], [80.3, 593.0], [80.4, 594.0], [80.5, 595.0], [80.6, 595.0], [80.7, 596.0], [80.8, 596.0], [80.9, 596.0], [81.0, 597.0], [81.1, 598.0], [81.2, 599.0], [81.3, 599.0], [81.4, 599.0], [81.5, 600.0], [81.6, 600.0], [81.7, 601.0], [81.8, 602.0], [81.9, 603.0], [82.0, 604.0], [82.1, 604.0], [82.2, 604.0], [82.3, 605.0], [82.4, 605.0], [82.5, 605.0], [82.6, 606.0], [82.7, 607.0], [82.8, 608.0], [82.9, 609.0], [83.0, 611.0], [83.1, 611.0], [83.2, 612.0], [83.3, 612.0], [83.4, 613.0], [83.5, 614.0], [83.6, 615.0], [83.7, 616.0], [83.8, 616.0], [83.9, 617.0], [84.0, 617.0], [84.1, 619.0], [84.2, 619.0], [84.3, 620.0], [84.4, 620.0], [84.5, 621.0], [84.6, 622.0], [84.7, 623.0], [84.8, 624.0], [84.9, 625.0], [85.0, 626.0], [85.1, 627.0], [85.2, 628.0], [85.3, 628.0], [85.4, 628.0], [85.5, 629.0], [85.6, 630.0], [85.7, 631.0], [85.8, 632.0], [85.9, 633.0], [86.0, 634.0], [86.1, 635.0], [86.2, 636.0], [86.3, 636.0], [86.4, 637.0], [86.5, 638.0], [86.6, 639.0], [86.7, 640.0], [86.8, 641.0], [86.9, 643.0], [87.0, 644.0], [87.1, 645.0], [87.2, 647.0], [87.3, 649.0], [87.4, 650.0], [87.5, 651.0], [87.6, 652.0], [87.7, 653.0], [87.8, 655.0], [87.9, 657.0], [88.0, 659.0], [88.1, 660.0], [88.2, 661.0], [88.3, 663.0], [88.4, 665.0], [88.5, 667.0], [88.6, 668.0], [88.7, 669.0], [88.8, 671.0], [88.9, 674.0], [89.0, 676.0], [89.1, 677.0], [89.2, 680.0], [89.3, 683.0], [89.4, 684.0], [89.5, 687.0], [89.6, 689.0], [89.7, 692.0], [89.8, 693.0], [89.9, 695.0], [90.0, 697.0], [90.1, 699.0], [90.2, 700.0], [90.3, 701.0], [90.4, 703.0], [90.5, 706.0], [90.6, 709.0], [90.7, 710.0], [90.8, 714.0], [90.9, 716.0], [91.0, 718.0], [91.1, 721.0], [91.2, 724.0], [91.3, 726.0], [91.4, 729.0], [91.5, 732.0], [91.6, 734.0], [91.7, 739.0], [91.8, 745.0], [91.9, 751.0], [92.0, 757.0], [92.1, 767.0], [92.2, 779.0], [92.3, 793.0], [92.4, 808.0], [92.5, 827.0], [92.6, 853.0], [92.7, 868.0], [92.8, 874.0], [92.9, 877.0], [93.0, 881.0], [93.1, 884.0], [93.2, 888.0], [93.3, 894.0], [93.4, 899.0], [93.5, 903.0], [93.6, 908.0], [93.7, 911.0], [93.8, 915.0], [93.9, 920.0], [94.0, 929.0], [94.1, 940.0], [94.2, 946.0], [94.3, 951.0], [94.4, 957.0], [94.5, 967.0], [94.6, 980.0], [94.7, 989.0], [94.8, 997.0], [94.9, 1009.0], [95.0, 1031.0], [95.1, 1326.0], [95.2, 1488.0], [95.3, 1515.0], [95.4, 1716.0], [95.5, 1830.0], [95.6, 1856.0], [95.7, 2064.0], [95.8, 2339.0], [95.9, 2808.0], [96.0, 2943.0], [96.1, 3342.0], [96.2, 3771.0], [96.3, 3981.0], [96.4, 4414.0], [96.5, 4550.0], [96.6, 4928.0], [96.7, 5204.0], [96.8, 5333.0], [96.9, 5655.0], [97.0, 5856.0], [97.1, 6097.0], [97.2, 6153.0], [97.3, 6225.0], [97.4, 6280.0], [97.5, 6380.0], [97.6, 6420.0], [97.7, 6456.0], [97.8, 6476.0], [97.9, 6494.0], [98.0, 6518.0], [98.1, 6564.0], [98.2, 6586.0], [98.3, 6634.0], [98.4, 6729.0], [98.5, 6902.0], [98.6, 7088.0], [98.7, 7149.0], [98.8, 7277.0], [98.9, 7318.0], [99.0, 7416.0], [99.1, 7527.0], [99.2, 7759.0], [99.3, 7871.0], [99.4, 8074.0], [99.5, 8259.0], [99.6, 8359.0], [99.7, 8510.0], [99.8, 8677.0], [99.9, 8802.0], [100.0, 8901.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2812.0, "series": [{"data": [[0.0, 462.0], [600.0, 872.0], [700.0, 216.0], [800.0, 108.0], [900.0, 143.0], [1000.0, 20.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 15.0], [1500.0, 10.0], [1600.0, 1.0], [1700.0, 9.0], [1800.0, 21.0], [1900.0, 1.0], [2000.0, 3.0], [2100.0, 2.0], [2200.0, 3.0], [2300.0, 7.0], [2400.0, 2.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 1.0], [2800.0, 8.0], [2900.0, 4.0], [3000.0, 2.0], [3200.0, 4.0], [3300.0, 4.0], [3400.0, 6.0], [3500.0, 2.0], [3700.0, 4.0], [3800.0, 2.0], [3900.0, 8.0], [4000.0, 2.0], [4200.0, 4.0], [4400.0, 6.0], [4500.0, 6.0], [4600.0, 6.0], [4800.0, 2.0], [4900.0, 5.0], [5000.0, 3.0], [5100.0, 2.0], [5200.0, 7.0], [5300.0, 5.0], [5400.0, 4.0], [5500.0, 4.0], [5600.0, 2.0], [5700.0, 4.0], [5800.0, 10.0], [5900.0, 2.0], [6000.0, 5.0], [6100.0, 13.0], [6200.0, 16.0], [6300.0, 14.0], [6400.0, 38.0], [6500.0, 30.0], [6600.0, 10.0], [6700.0, 13.0], [6800.0, 4.0], [6900.0, 5.0], [7000.0, 6.0], [7100.0, 13.0], [7200.0, 9.0], [7300.0, 16.0], [7400.0, 10.0], [7500.0, 4.0], [7600.0, 5.0], [7700.0, 5.0], [7800.0, 8.0], [7900.0, 4.0], [8000.0, 10.0], [8100.0, 2.0], [8200.0, 8.0], [8300.0, 6.0], [8400.0, 8.0], [8500.0, 8.0], [8600.0, 6.0], [8700.0, 7.0], [8800.0, 10.0], [8900.0, 1.0], [100.0, 1049.0], [200.0, 2261.0], [300.0, 825.0], [400.0, 736.0], [500.0, 2812.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 474.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5357.0, "series": [{"data": [[0.0, 5357.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4169.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 474.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 590.8876999999995, "minX": 1.66956228E12, "maxY": 590.8876999999995, "series": [{"data": [[1.66956228E12, 590.8876999999995]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956228E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 5856.0, "series": [{"data": [[2.0, 4.0], [3.0, 51.0], [4.0, 53.333333333333336], [5.0, 72.0], [6.0, 13.0], [7.0, 29.0], [8.0, 22.5], [9.0, 27.0], [10.0, 26.0], [11.0, 20.0], [12.0, 12.5], [13.0, 35.0], [15.0, 13.333333333333332], [16.0, 27.666666666666668], [17.0, 22.0], [20.0, 29.833333333333336], [21.0, 43.5], [23.0, 39.75], [24.0, 25.5], [25.0, 38.666666666666664], [26.0, 52.0], [27.0, 50.666666666666664], [29.0, 33.0], [30.0, 46.75], [31.0, 50.3], [32.0, 53.2], [35.0, 51.0], [37.0, 50.0], [39.0, 61.0], [38.0, 59.75], [41.0, 57.833333333333336], [40.0, 73.0], [43.0, 16.0], [44.0, 71.2], [47.0, 64.16666666666667], [49.0, 70.5], [51.0, 95.0], [50.0, 75.6], [53.0, 91.75], [52.0, 82.45454545454547], [55.0, 81.8], [54.0, 120.0], [57.0, 96.0], [56.0, 120.0], [59.0, 101.85714285714286], [58.0, 90.8], [61.0, 121.0], [60.0, 94.4], [63.0, 115.0], [62.0, 103.81818181818181], [67.0, 118.0], [66.0, 117.0], [65.0, 131.66666666666666], [64.0, 107.0], [71.0, 105.5], [70.0, 22.0], [69.0, 109.72727272727273], [75.0, 103.0], [74.0, 107.25], [73.0, 111.5], [79.0, 132.5], [78.0, 104.0], [77.0, 86.57142857142857], [83.0, 144.0], [82.0, 87.5], [81.0, 85.4], [80.0, 54.5], [87.0, 99.45454545454545], [86.0, 59.0], [85.0, 112.0], [84.0, 93.25], [91.0, 103.3076923076923], [88.0, 114.7], [94.0, 94.96153846153845], [95.0, 96.0], [93.0, 196.0], [92.0, 125.85714285714286], [96.0, 69.4], [97.0, 111.75], [98.0, 63.93750000000001], [99.0, 30.150943396226417], [102.0, 88.8421052631579], [101.0, 78.71428571428572], [100.0, 97.5], [103.0, 180.58823529411768], [104.0, 40.5], [105.0, 114.66666666666667], [107.0, 114.875], [106.0, 208.0], [108.0, 135.6], [111.0, 189.0], [110.0, 202.5], [109.0, 203.85714285714286], [112.0, 181.79999999999998], [113.0, 187.72222222222223], [114.0, 196.0], [117.0, 103.55555555555556], [118.0, 197.0], [116.0, 185.4], [120.0, 155.33333333333334], [122.0, 65.625], [123.0, 206.625], [121.0, 208.0], [126.0, 186.90000000000003], [127.0, 166.75609756097563], [125.0, 213.25], [124.0, 196.0], [130.0, 99.73684210526316], [135.0, 151.73333333333332], [133.0, 245.75], [132.0, 210.73333333333332], [131.0, 203.2], [129.0, 214.0], [128.0, 199.75], [137.0, 179.35897435897436], [140.0, 152.33333333333334], [142.0, 148.54545454545456], [143.0, 187.2777777777778], [141.0, 163.0], [139.0, 182.5], [138.0, 238.5], [146.0, 110.0], [149.0, 114.5], [150.0, 150.0], [148.0, 199.42857142857142], [147.0, 229.75], [145.0, 163.5], [144.0, 183.2941176470588], [155.0, 95.0], [158.0, 132.79999999999998], [159.0, 214.2], [157.0, 180.0], [156.0, 212.45454545454544], [154.0, 225.5], [153.0, 189.5], [152.0, 220.75], [161.0, 166.0909090909091], [167.0, 165.9090909090909], [165.0, 207.375], [162.0, 220.75], [160.0, 219.07142857142858], [168.0, 188.66666666666669], [170.0, 137.0], [173.0, 684.235294117647], [175.0, 204.77777777777777], [174.0, 1433.857142857143], [172.0, 193.75], [171.0, 188.5], [169.0, 205.25000000000003], [178.0, 1191.1764705882351], [181.0, 138.0], [182.0, 156.66666666666666], [183.0, 187.33333333333334], [180.0, 3276.0714285714284], [177.0, 201.5], [176.0, 3086.0], [184.0, 149.76923076923075], [185.0, 169.57142857142858], [186.0, 165.0], [188.0, 151.71428571428572], [189.0, 175.0], [190.0, 148.0], [191.0, 179.0], [187.0, 209.33333333333334], [192.0, 157.0], [193.0, 175.0], [196.0, 793.7857142857142], [199.0, 206.0], [198.0, 223.0], [197.0, 1427.7857142857144], [195.0, 1269.0], [194.0, 217.66666666666666], [201.0, 182.17857142857142], [202.0, 203.0], [203.0, 184.45454545454544], [207.0, 1060.2580645161295], [206.0, 271.0], [205.0, 223.55555555555554], [204.0, 229.3636363636364], [200.0, 227.44444444444446], [212.0, 1153.7777777777778], [213.0, 165.0], [214.0, 210.83333333333334], [215.0, 4441.5], [211.0, 1632.6666666666667], [210.0, 1901.2], [209.0, 220.84615384615384], [208.0, 1448.0], [219.0, 189.8], [223.0, 234.72727272727272], [221.0, 195.75], [220.0, 236.83333333333334], [218.0, 1636.6666666666665], [217.0, 1397.2857142857144], [216.0, 263.0], [227.0, 210.12499999999997], [229.0, 201.3125], [231.0, 222.0], [230.0, 229.5], [226.0, 227.25000000000003], [233.0, 1052.4750000000001], [236.0, 1029.5], [239.0, 189.5], [238.0, 1897.2], [237.0, 4335.0], [235.0, 230.9], [234.0, 213.47826086956522], [232.0, 238.75], [240.0, 668.8888888888889], [247.0, 227.625], [246.0, 193.0], [244.0, 246.0], [243.0, 976.4651162790697], [242.0, 1127.2222222222222], [241.0, 807.8571428571428], [253.0, 211.375], [255.0, 178.0], [254.0, 241.0], [252.0, 235.63636363636363], [250.0, 239.5], [249.0, 219.0], [248.0, 222.85714285714286], [270.0, 256.75], [260.0, 243.33333333333334], [264.0, 264.29999999999995], [271.0, 1053.8], [269.0, 257.375], [259.0, 241.33333333333334], [258.0, 211.5], [257.0, 244.83333333333334], [256.0, 193.0], [267.0, 281.3333333333333], [265.0, 242.0], [263.0, 1267.5], [261.0, 2293.5], [287.0, 301.75], [272.0, 889.3846153846155], [277.0, 1178.185185185185], [276.0, 4308.5], [279.0, 995.2173913043478], [278.0, 317.875], [280.0, 271.1428571428571], [281.0, 319.0], [286.0, 286.57142857142856], [285.0, 301.4], [284.0, 313.0], [275.0, 467.44186046511624], [274.0, 1060.0322580645166], [273.0, 255.0], [283.0, 913.5384615384615], [282.0, 1878.4], [300.0, 277.0], [293.0, 561.5576923076924], [292.0, 484.2682926829268], [294.0, 939.1914893617023], [295.0, 245.63636363636363], [289.0, 308.375], [288.0, 315.0], [291.0, 1272.1388888888887], [290.0, 306.125], [303.0, 322.7142857142857], [302.0, 312.2941176470589], [301.0, 304.0], [299.0, 284.6666666666667], [297.0, 297.0], [317.0, 296.2307692307692], [305.0, 1116.1505376344087], [311.0, 308.5], [304.0, 752.25], [309.0, 878.0263157894736], [310.0, 212.5], [314.0, 772.8], [313.0, 1516.5], [312.0, 304.1333333333333], [319.0, 288.0], [318.0, 1071.6315789473686], [316.0, 311.5], [307.0, 1236.0], [306.0, 311.33333333333337], [315.0, 298.0], [334.0, 517.5454545454545], [321.0, 684.8235294117649], [324.0, 259.28571428571433], [325.0, 268.84615384615387], [327.0, 1153.375], [320.0, 1010.5750000000002], [326.0, 2056.5], [329.0, 259.1], [330.0, 1607.285714285714], [335.0, 189.15384615384616], [328.0, 274.75], [333.0, 1919.64], [332.0, 1035.6], [323.0, 278.25], [322.0, 1032.263157894737], [331.0, 234.57142857142856], [350.0, 653.7837837837836], [339.0, 1001.8888888888889], [340.0, 1083.5625000000002], [343.0, 220.5], [336.0, 175.0], [338.0, 187.0], [337.0, 1599.4], [341.0, 705.4285714285714], [345.0, 1185.7142857142858], [346.0, 237.6], [351.0, 748.8666666666664], [344.0, 911.1], [349.0, 1294.2075471698106], [348.0, 233.5], [347.0, 186.66666666666666], [366.0, 1555.1904761904764], [357.0, 291.0], [353.0, 293.14285714285717], [355.0, 298.5], [354.0, 1042.611111111111], [359.0, 295.6666666666667], [352.0, 271.6666666666667], [356.0, 251.66666666666666], [362.0, 858.0], [367.0, 837.086956521739], [361.0, 658.4444444444445], [365.0, 286.5], [364.0, 284.4], [363.0, 277.6470588235294], [382.0, 324.8], [371.0, 799.9166666666667], [370.0, 225.0], [369.0, 237.33333333333334], [368.0, 518.8478260869564], [375.0, 276.5], [374.0, 255.875], [373.0, 985.2222222222222], [372.0, 1558.0], [377.0, 278.8888888888889], [383.0, 240.75], [381.0, 1184.2857142857142], [380.0, 767.0769230769231], [379.0, 271.0], [378.0, 282.5], [376.0, 258.9473684210526], [396.0, 1273.6388888888891], [384.0, 973.1267605633801], [385.0, 934.5555555555555], [386.0, 1612.594594594595], [387.0, 2145.1], [390.0, 1276.6], [391.0, 2303.3333333333335], [399.0, 2286.5555555555557], [392.0, 2579.875], [398.0, 2464.879999999999], [397.0, 2571.375], [395.0, 204.5], [394.0, 2739.2], [412.0, 338.0], [400.0, 2394.1142857142854], [403.0, 745.375], [402.0, 717.5306122448981], [401.0, 1458.6], [404.0, 691.8571428571429], [405.0, 1127.857142857143], [407.0, 2703.1], [406.0, 891.6666666666666], [411.0, 907.9999999999999], [410.0, 1478.7058823529412], [409.0, 1758.125], [413.0, 866.7], [415.0, 2854.4285714285716], [414.0, 2275.3333333333335], [417.0, 337.6666666666667], [423.0, 1500.4], [416.0, 999.8684210526316], [424.0, 1440.2666666666667], [430.0, 729.4615384615385], [431.0, 1563.888888888889], [429.0, 221.66666666666666], [428.0, 217.25], [419.0, 187.33333333333334], [418.0, 613.6666666666667], [427.0, 1732.875], [422.0, 1736.7499999999998], [421.0, 810.7], [420.0, 214.33333333333334], [445.0, 282.3333333333333], [433.0, 282.0], [435.0, 1092.5], [434.0, 248.50000000000003], [437.0, 264.6], [436.0, 258.375], [439.0, 2633.4], [432.0, 833.1999999999999], [438.0, 244.25], [446.0, 1719.75], [444.0, 3215.0], [442.0, 1452.6000000000001], [441.0, 512.5833333333331], [440.0, 243.25], [463.0, 260.5], [449.0, 269.8888888888889], [450.0, 1305.8823529411761], [451.0, 3163.5], [454.0, 640.125], [452.0, 1741.125], [455.0, 271.2631578947368], [448.0, 266.1111111111111], [459.0, 286.6923076923077], [461.0, 372.5], [460.0, 270.25], [458.0, 346.8], [457.0, 1110.5714285714287], [456.0, 1067.75], [477.0, 415.0], [464.0, 338.0], [465.0, 373.75], [466.0, 243.0], [471.0, 258.875], [470.0, 392.6], [469.0, 282.0], [468.0, 365.5], [472.0, 367.66666666666674], [473.0, 781.0], [475.0, 364.5], [474.0, 777.6666666666669], [479.0, 279.125], [478.0, 373.125], [476.0, 378.94117647058823], [467.0, 295.75], [482.0, 2125.3333333333335], [480.0, 317.1333333333333], [481.0, 459.0], [487.0, 1363.1764705882354], [486.0, 1182.2857142857142], [485.0, 2458.5], [484.0, 5856.0], [483.0, 302.2], [490.0, 760.0909090909091], [494.0, 269.6666666666667], [495.0, 372.11111111111114], [493.0, 277.6], [492.0, 1854.0], [489.0, 459.75], [511.0, 535.0], [500.0, 277.42857142857144], [509.0, 354.875], [510.0, 270.8], [507.0, 298.75], [506.0, 431.6666666666667], [505.0, 274.0], [504.0, 210.0], [503.0, 544.0], [496.0, 1597.75], [499.0, 217.0], [498.0, 538.6666666666666], [501.0, 507.0], [536.0, 314.3333333333333], [513.0, 243.0], [516.0, 287.2], [515.0, 444.33333333333337], [527.0, 492.75], [525.0, 298.75], [524.0, 936.8888888888889], [523.0, 306.25], [522.0, 1755.7499999999998], [520.0, 287.6], [517.0, 250.4], [518.0, 270.3333333333333], [519.0, 536.6666666666666], [528.0, 290.16666666666663], [533.0, 417.0], [532.0, 516.3333333333334], [531.0, 293.3333333333333], [530.0, 356.5], [529.0, 527.0], [535.0, 450.6666666666667], [534.0, 374.0], [541.0, 448.3333333333333], [540.0, 506.0], [539.0, 348.5], [537.0, 508.5], [543.0, 1675.75], [542.0, 479.6666666666667], [568.0, 1567.7777777777778], [550.0, 262.25], [551.0, 381.75], [559.0, 401.6521739130435], [546.0, 1268.6666666666667], [545.0, 540.5], [549.0, 513.0], [548.0, 539.5], [558.0, 508.0], [557.0, 544.0], [556.0, 476.0], [555.0, 197.0], [554.0, 516.0], [553.0, 476.3333333333333], [569.0, 563.0], [571.0, 395.75], [573.0, 494.3333333333333], [562.0, 406.0], [560.0, 536.0], [564.0, 531.0], [563.0, 532.5], [570.0, 519.0], [567.0, 532.5], [565.0, 2159.166666666667], [605.0, 484.55555555555554], [581.0, 480.6], [579.0, 390.7142857142857], [578.0, 463.5], [577.0, 454.90909090909093], [580.0, 435.0], [583.0, 331.28571428571433], [582.0, 537.5], [586.0, 421.25], [585.0, 489.87499999999994], [590.0, 540.0], [588.0, 562.3333333333334], [591.0, 562.0], [598.0, 399.75], [596.0, 438.0], [594.0, 513.5], [592.0, 382.5], [599.0, 529.25], [606.0, 308.0], [607.0, 553.6666666666666], [603.0, 567.0], [638.0, 320.0], [623.0, 437.6666666666667], [609.0, 488.2], [608.0, 446.25], [612.0, 551.3333333333334], [610.0, 532.5], [622.0, 513.25], [621.0, 440.3333333333333], [620.0, 543.5], [619.0, 491.2857142857143], [617.0, 488.16666666666663], [616.0, 531.0], [624.0, 416.7142857142857], [629.0, 408.0], [628.0, 312.0], [627.0, 1770.5], [626.0, 455.25], [630.0, 553.0], [635.0, 451.66666666666663], [636.0, 431.16666666666663], [639.0, 567.0], [637.0, 491.0], [633.0, 5475.0], [632.0, 479.0], [666.0, 492.25], [646.0, 347.83333333333337], [655.0, 334.5], [640.0, 561.0], [643.0, 564.5], [642.0, 458.75], [653.0, 1480.6], [651.0, 511.125], [649.0, 563.0], [648.0, 562.0], [664.0, 430.90000000000003], [647.0, 526.5], [669.0, 339.75], [671.0, 489.5], [663.0, 480.0], [662.0, 525.0], [661.0, 467.5], [660.0, 542.3333333333334], [659.0, 506.4], [658.0, 5406.0], [657.0, 449.0], [656.0, 552.3333333333334], [670.0, 493.0], [668.0, 518.5], [665.0, 523.6666666666666], [697.0, 401.25], [673.0, 436.16666666666663], [672.0, 346.0], [687.0, 509.5], [674.0, 348.6666666666667], [677.0, 510.2], [675.0, 513.0], [679.0, 477.0], [678.0, 522.0], [685.0, 329.44444444444446], [684.0, 448.6666666666667], [683.0, 520.0], [682.0, 515.25], [686.0, 424.75], [694.0, 418.7142857142857], [693.0, 1866.0], [692.0, 1700.1250000000002], [691.0, 490.25], [690.0, 504.0], [695.0, 531.0], [698.0, 468.14285714285717], [700.0, 491.8], [702.0, 520.0], [701.0, 2126.0], [703.0, 555.3333333333334], [707.0, 466.0], [708.0, 419.4117647058824], [709.0, 453.0], [711.0, 536.5], [710.0, 556.5], [716.0, 497.5], [715.0, 498.0], [713.0, 547.3333333333334], [712.0, 477.5], [717.0, 541.0], [719.0, 548.75], [706.0, 2122.7777777777783], [704.0, 540.0], [718.0, 395.0], [720.0, 477.4], [721.0, 362.6666666666667], [735.0, 1888.5714285714287], [733.0, 515.5714285714286], [724.0, 556.6666666666666], [723.0, 549.25], [742.0, 354.0], [765.0, 517.75], [740.0, 444.0], [739.0, 1686.0], [738.0, 542.5], [737.0, 2283.125], [736.0, 492.0], [741.0, 537.2], [751.0, 559.0], [750.0, 520.5], [749.0, 550.5], [748.0, 548.25], [747.0, 533.0], [746.0, 517.6363636363635], [744.0, 552.3333333333333], [758.0, 344.7692307692308], [757.0, 533.8750000000001], [756.0, 500.0], [755.0, 534.5555555555555], [754.0, 468.0], [752.0, 519.4], [759.0, 521.7142857142858], [766.0, 361.3333333333333], [767.0, 524.3636363636364], [763.0, 525.2222222222222], [762.0, 531.1428571428571], [761.0, 528.875], [743.0, 444.0], [775.0, 1069.5], [795.0, 533.25], [779.0, 830.0833333333333], [778.0, 556.875], [777.0, 551.2142857142858], [776.0, 813.8235294117648], [781.0, 573.0], [780.0, 861.857142857143], [782.0, 527.2142857142857], [785.0, 467.235294117647], [784.0, 752.8000000000001], [786.0, 576.0], [788.0, 576.25], [787.0, 1104.75], [789.0, 547.4444444444445], [790.0, 526.4210526315793], [791.0, 538.3], [794.0, 877.4545454545455], [793.0, 808.0], [792.0, 530.4999999999999], [783.0, 586.6363636363636], [768.0, 531.7142857142858], [770.0, 514.5], [769.0, 519.5714285714286], [772.0, 524.5714285714286], [771.0, 519.125], [774.0, 487.0], [773.0, 495.0], [799.0, 564.625], [798.0, 865.8333333333335], [797.0, 509.66666666666663], [796.0, 1058.75], [807.0, 1305.8181818181818], [830.0, 846.6], [814.0, 506.3888888888889], [813.0, 536.2222222222222], [812.0, 535.3000000000001], [811.0, 554.375], [809.0, 939.9176470588235], [826.0, 386.0], [831.0, 533.7142857142857], [818.0, 527.7142857142857], [816.0, 546.5], [828.0, 553.8888888888889], [824.0, 545.1428571428571], [805.0, 575.6666666666667], [804.0, 722.3396226415095], [803.0, 523.0999999999998], [802.0, 567.6666666666666], [801.0, 577.0], [800.0, 541.6111111111113], [815.0, 538.0], [823.0, 493.0], [822.0, 472.0], [821.0, 541.7142857142858], [819.0, 551.0], [856.0, 568.0], [833.0, 506.08], [832.0, 639.1874999999999], [834.0, 559.6], [836.0, 563.5], [835.0, 522.6], [838.0, 535.1], [837.0, 513.0], [847.0, 490.0], [845.0, 534.5], [844.0, 573.75], [842.0, 555.7142857142858], [841.0, 488.0], [840.0, 542.8571428571429], [843.0, 485.28571428571433], [855.0, 538.0], [854.0, 552.0909090909091], [853.0, 547.2], [851.0, 545.1904761904763], [863.0, 433.6], [862.0, 527.3333333333334], [861.0, 553.5], [860.0, 535.9166666666667], [859.0, 545.5416666666667], [858.0, 557.4666666666668], [857.0, 540.2], [869.0, 784.6666666666666], [892.0, 703.4146341463415], [870.0, 701.3333333333333], [888.0, 558.8], [871.0, 743.5555555555555], [879.0, 563.9857142857144], [865.0, 1380.25], [864.0, 496.0], [867.0, 1913.2], [866.0, 837.4347826086959], [878.0, 539.0], [877.0, 719.9859154929579], [876.0, 529.4444444444445], [875.0, 539.7142857142858], [874.0, 604.2784810126582], [873.0, 515.0], [872.0, 520.625], [894.0, 561.6904761904764], [895.0, 1059.0857142857146], [881.0, 577.4545454545455], [880.0, 578.2941176470588], [884.0, 574.1538461538463], [883.0, 571.3571428571428], [887.0, 565.6666666666667], [885.0, 570.1], [893.0, 564.0000000000001], [891.0, 560.6222222222224], [890.0, 559.2222222222222], [924.0, 690.1506276150625], [899.0, 548.1772151898733], [898.0, 686.2749999999999], [897.0, 657.0265486725665], [896.0, 559.7368421052631], [910.0, 602.6666666666666], [909.0, 590.076923076923], [908.0, 582.875], [907.0, 582.1363636363637], [906.0, 798.3636363636365], [905.0, 587.8695652173913], [904.0, 716.1977401129943], [900.0, 611.7469879518071], [927.0, 635.7142857142857], [912.0, 602.5714285714287], [914.0, 614.8235294117648], [913.0, 606.4500000000002], [916.0, 618.4651162790697], [915.0, 623.75], [919.0, 898.2857142857143], [917.0, 854.0], [926.0, 647.375], [925.0, 662.111111111111], [923.0, 611.5], [922.0, 594.75], [921.0, 670.4153846153846], [920.0, 632.6538461538463], [903.0, 700.7199999999998], [901.0, 563.1428571428573], [954.0, 597.0], [958.0, 822.6875000000002], [928.0, 623.5999999999999], [942.0, 715.0], [941.0, 882.2], [939.0, 615.6666666666666], [938.0, 621.0], [937.0, 726.4], [936.0, 626.3333333333334], [943.0, 785.4285714285714], [947.0, 565.5], [948.0, 590.7], [949.0, 563.3333333333334], [951.0, 613.0], [950.0, 701.0000000000001], [959.0, 984.0526315789473], [944.0, 596.0], [946.0, 570.5714285714286], [945.0, 607.5], [957.0, 665.9999999999999], [956.0, 603.75], [955.0, 592.2857142857143], [953.0, 606.8888888888889], [952.0, 569.5], [935.0, 641.4], [934.0, 651.4999999999999], [933.0, 640.8888888888889], [932.0, 648.8571428571428], [931.0, 628.6666666666666], [930.0, 660.0], [929.0, 643.375], [985.0, 540.6500000000001], [974.0, 655.7272727272727], [960.0, 619.7777777777778], [962.0, 723.375], [964.0, 691.304347826087], [963.0, 603.2017167381973], [966.0, 699.9090909090909], [965.0, 559.4], [984.0, 539.1666666666667], [967.0, 634.0], [973.0, 682.0000000000001], [972.0, 612.6923076923077], [971.0, 640.0909090909091], [970.0, 462.3333333333333], [969.0, 670.0], [968.0, 843.25], [988.0, 552.7692307692308], [990.0, 674.7142857142857], [991.0, 594.2171052631578], [977.0, 650.0833333333334], [976.0, 746.8], [979.0, 587.3783783783786], [978.0, 568.1666666666666], [981.0, 442.0], [980.0, 568.6666666666666], [983.0, 618.0000000000001], [982.0, 414.6666666666667], [989.0, 504.0], [987.0, 503.25], [1000.0, 876.3214285714286], [999.0, 788.2500000000001], [998.0, 730.3399999999999], [996.0, 711.0392156862744], [995.0, 732.0], [994.0, 671.7142857142858], [993.0, 716.88], [992.0, 694.090909090909], [1.0, 5.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[590.8869999999972, 667.5218000000028]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956228E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956228E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956228E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956228E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 667.5218000000028, "minX": 1.66956228E12, "maxY": 667.5218000000028, "series": [{"data": [[1.66956228E12, 667.5218000000028]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956228E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 667.2241999999992, "minX": 1.66956228E12, "maxY": 667.2241999999992, "series": [{"data": [[1.66956228E12, 667.2241999999992]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956228E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9276000000000005, "minX": 1.66956228E12, "maxY": 0.9276000000000005, "series": [{"data": [[1.66956228E12, 0.9276000000000005]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956228E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.66956228E12, "maxY": 8901.0, "series": [{"data": [[1.66956228E12, 8901.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956228E12, 697.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956228E12, 7444.709999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956228E12, 1031.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956228E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956228E12, 474.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956228E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 64.0, "minX": 155.0, "maxY": 720.0, "series": [{"data": [[155.0, 72.0], [740.0, 214.5], [756.0, 720.0], [205.0, 64.0], [861.0, 200.0], [885.0, 549.0], [891.0, 524.0], [883.0, 269.0], [926.0, 558.5], [921.0, 599.0], [911.0, 241.0], [913.0, 288.0], [953.0, 552.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 953.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 155.0, "maxY": 719.5, "series": [{"data": [[155.0, 47.0], [740.0, 214.5], [756.0, 719.5], [205.0, 63.0], [861.0, 200.0], [885.0, 548.0], [891.0, 524.0], [883.0, 269.0], [926.0, 558.5], [921.0, 599.0], [911.0, 241.0], [913.0, 287.0], [953.0, 552.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 953.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956228E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956228E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956228E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956228E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956228E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956228E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956228E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956228E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956228E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956228E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956228E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956228E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

