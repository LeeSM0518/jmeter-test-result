/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 6054.0, "series": [{"data": [[0.0, 2.0], [0.1, 10.0], [0.2, 17.0], [0.3, 19.0], [0.4, 23.0], [0.5, 25.0], [0.6, 31.0], [0.7, 36.0], [0.8, 43.0], [0.9, 48.0], [1.0, 51.0], [1.1, 53.0], [1.2, 57.0], [1.3, 61.0], [1.4, 64.0], [1.5, 68.0], [1.6, 72.0], [1.7, 74.0], [1.8, 78.0], [1.9, 80.0], [2.0, 84.0], [2.1, 86.0], [2.2, 88.0], [2.3, 93.0], [2.4, 96.0], [2.5, 97.0], [2.6, 98.0], [2.7, 100.0], [2.8, 102.0], [2.9, 103.0], [3.0, 105.0], [3.1, 105.0], [3.2, 108.0], [3.3, 109.0], [3.4, 110.0], [3.5, 111.0], [3.6, 112.0], [3.7, 113.0], [3.8, 113.0], [3.9, 115.0], [4.0, 116.0], [4.1, 117.0], [4.2, 118.0], [4.3, 118.0], [4.4, 119.0], [4.5, 120.0], [4.6, 120.0], [4.7, 121.0], [4.8, 122.0], [4.9, 123.0], [5.0, 124.0], [5.1, 125.0], [5.2, 127.0], [5.3, 128.0], [5.4, 128.0], [5.5, 128.0], [5.6, 129.0], [5.7, 130.0], [5.8, 131.0], [5.9, 132.0], [6.0, 133.0], [6.1, 133.0], [6.2, 134.0], [6.3, 135.0], [6.4, 136.0], [6.5, 136.0], [6.6, 137.0], [6.7, 137.0], [6.8, 138.0], [6.9, 138.0], [7.0, 139.0], [7.1, 139.0], [7.2, 140.0], [7.3, 140.0], [7.4, 141.0], [7.5, 141.0], [7.6, 142.0], [7.7, 143.0], [7.8, 143.0], [7.9, 144.0], [8.0, 144.0], [8.1, 145.0], [8.2, 146.0], [8.3, 146.0], [8.4, 147.0], [8.5, 148.0], [8.6, 148.0], [8.7, 149.0], [8.8, 149.0], [8.9, 150.0], [9.0, 150.0], [9.1, 150.0], [9.2, 151.0], [9.3, 151.0], [9.4, 151.0], [9.5, 152.0], [9.6, 152.0], [9.7, 152.0], [9.8, 152.0], [9.9, 153.0], [10.0, 153.0], [10.1, 154.0], [10.2, 155.0], [10.3, 155.0], [10.4, 156.0], [10.5, 156.0], [10.6, 157.0], [10.7, 157.0], [10.8, 158.0], [10.9, 158.0], [11.0, 158.0], [11.1, 159.0], [11.2, 159.0], [11.3, 159.0], [11.4, 159.0], [11.5, 160.0], [11.6, 160.0], [11.7, 161.0], [11.8, 161.0], [11.9, 161.0], [12.0, 162.0], [12.1, 162.0], [12.2, 162.0], [12.3, 163.0], [12.4, 164.0], [12.5, 164.0], [12.6, 164.0], [12.7, 165.0], [12.8, 165.0], [12.9, 166.0], [13.0, 167.0], [13.1, 167.0], [13.2, 167.0], [13.3, 168.0], [13.4, 168.0], [13.5, 168.0], [13.6, 168.0], [13.7, 168.0], [13.8, 168.0], [13.9, 169.0], [14.0, 169.0], [14.1, 170.0], [14.2, 170.0], [14.3, 171.0], [14.4, 171.0], [14.5, 171.0], [14.6, 172.0], [14.7, 172.0], [14.8, 173.0], [14.9, 173.0], [15.0, 174.0], [15.1, 174.0], [15.2, 175.0], [15.3, 175.0], [15.4, 175.0], [15.5, 175.0], [15.6, 176.0], [15.7, 176.0], [15.8, 176.0], [15.9, 176.0], [16.0, 177.0], [16.1, 177.0], [16.2, 177.0], [16.3, 177.0], [16.4, 178.0], [16.5, 178.0], [16.6, 179.0], [16.7, 179.0], [16.8, 179.0], [16.9, 180.0], [17.0, 180.0], [17.1, 180.0], [17.2, 181.0], [17.3, 181.0], [17.4, 181.0], [17.5, 182.0], [17.6, 182.0], [17.7, 183.0], [17.8, 183.0], [17.9, 183.0], [18.0, 183.0], [18.1, 183.0], [18.2, 184.0], [18.3, 184.0], [18.4, 184.0], [18.5, 184.0], [18.6, 184.0], [18.7, 185.0], [18.8, 185.0], [18.9, 185.0], [19.0, 185.0], [19.1, 185.0], [19.2, 186.0], [19.3, 186.0], [19.4, 187.0], [19.5, 187.0], [19.6, 188.0], [19.7, 188.0], [19.8, 188.0], [19.9, 189.0], [20.0, 189.0], [20.1, 190.0], [20.2, 190.0], [20.3, 190.0], [20.4, 191.0], [20.5, 191.0], [20.6, 191.0], [20.7, 191.0], [20.8, 192.0], [20.9, 192.0], [21.0, 192.0], [21.1, 192.0], [21.2, 192.0], [21.3, 193.0], [21.4, 193.0], [21.5, 193.0], [21.6, 193.0], [21.7, 194.0], [21.8, 195.0], [21.9, 195.0], [22.0, 195.0], [22.1, 196.0], [22.2, 196.0], [22.3, 197.0], [22.4, 197.0], [22.5, 198.0], [22.6, 198.0], [22.7, 198.0], [22.8, 199.0], [22.9, 199.0], [23.0, 199.0], [23.1, 199.0], [23.2, 200.0], [23.3, 200.0], [23.4, 200.0], [23.5, 200.0], [23.6, 201.0], [23.7, 201.0], [23.8, 202.0], [23.9, 203.0], [24.0, 203.0], [24.1, 204.0], [24.2, 204.0], [24.3, 204.0], [24.4, 205.0], [24.5, 206.0], [24.6, 206.0], [24.7, 207.0], [24.8, 207.0], [24.9, 207.0], [25.0, 208.0], [25.1, 208.0], [25.2, 208.0], [25.3, 208.0], [25.4, 208.0], [25.5, 209.0], [25.6, 209.0], [25.7, 210.0], [25.8, 210.0], [25.9, 211.0], [26.0, 212.0], [26.1, 212.0], [26.2, 213.0], [26.3, 213.0], [26.4, 214.0], [26.5, 214.0], [26.6, 215.0], [26.7, 215.0], [26.8, 215.0], [26.9, 216.0], [27.0, 216.0], [27.1, 216.0], [27.2, 217.0], [27.3, 217.0], [27.4, 217.0], [27.5, 218.0], [27.6, 218.0], [27.7, 219.0], [27.8, 220.0], [27.9, 220.0], [28.0, 221.0], [28.1, 221.0], [28.2, 221.0], [28.3, 222.0], [28.4, 222.0], [28.5, 223.0], [28.6, 223.0], [28.7, 224.0], [28.8, 224.0], [28.9, 224.0], [29.0, 224.0], [29.1, 225.0], [29.2, 225.0], [29.3, 226.0], [29.4, 227.0], [29.5, 227.0], [29.6, 227.0], [29.7, 228.0], [29.8, 229.0], [29.9, 230.0], [30.0, 230.0], [30.1, 231.0], [30.2, 231.0], [30.3, 232.0], [30.4, 232.0], [30.5, 232.0], [30.6, 232.0], [30.7, 233.0], [30.8, 233.0], [30.9, 233.0], [31.0, 234.0], [31.1, 234.0], [31.2, 235.0], [31.3, 235.0], [31.4, 236.0], [31.5, 237.0], [31.6, 238.0], [31.7, 238.0], [31.8, 239.0], [31.9, 239.0], [32.0, 240.0], [32.1, 240.0], [32.2, 240.0], [32.3, 241.0], [32.4, 241.0], [32.5, 242.0], [32.6, 243.0], [32.7, 243.0], [32.8, 244.0], [32.9, 246.0], [33.0, 247.0], [33.1, 247.0], [33.2, 247.0], [33.3, 248.0], [33.4, 248.0], [33.5, 248.0], [33.6, 249.0], [33.7, 249.0], [33.8, 250.0], [33.9, 251.0], [34.0, 252.0], [34.1, 252.0], [34.2, 253.0], [34.3, 254.0], [34.4, 255.0], [34.5, 255.0], [34.6, 256.0], [34.7, 256.0], [34.8, 256.0], [34.9, 257.0], [35.0, 258.0], [35.1, 259.0], [35.2, 259.0], [35.3, 261.0], [35.4, 262.0], [35.5, 262.0], [35.6, 263.0], [35.7, 264.0], [35.8, 264.0], [35.9, 265.0], [36.0, 266.0], [36.1, 268.0], [36.2, 269.0], [36.3, 269.0], [36.4, 270.0], [36.5, 271.0], [36.6, 271.0], [36.7, 272.0], [36.8, 273.0], [36.9, 274.0], [37.0, 275.0], [37.1, 276.0], [37.2, 277.0], [37.3, 278.0], [37.4, 279.0], [37.5, 280.0], [37.6, 280.0], [37.7, 281.0], [37.8, 282.0], [37.9, 283.0], [38.0, 284.0], [38.1, 284.0], [38.2, 285.0], [38.3, 286.0], [38.4, 287.0], [38.5, 288.0], [38.6, 290.0], [38.7, 291.0], [38.8, 292.0], [38.9, 293.0], [39.0, 294.0], [39.1, 295.0], [39.2, 296.0], [39.3, 297.0], [39.4, 298.0], [39.5, 300.0], [39.6, 304.0], [39.7, 306.0], [39.8, 308.0], [39.9, 309.0], [40.0, 310.0], [40.1, 311.0], [40.2, 312.0], [40.3, 313.0], [40.4, 314.0], [40.5, 315.0], [40.6, 315.0], [40.7, 316.0], [40.8, 317.0], [40.9, 317.0], [41.0, 318.0], [41.1, 318.0], [41.2, 320.0], [41.3, 320.0], [41.4, 321.0], [41.5, 321.0], [41.6, 322.0], [41.7, 323.0], [41.8, 323.0], [41.9, 324.0], [42.0, 324.0], [42.1, 325.0], [42.2, 325.0], [42.3, 326.0], [42.4, 326.0], [42.5, 327.0], [42.6, 328.0], [42.7, 328.0], [42.8, 329.0], [42.9, 330.0], [43.0, 331.0], [43.1, 331.0], [43.2, 332.0], [43.3, 333.0], [43.4, 333.0], [43.5, 334.0], [43.6, 334.0], [43.7, 335.0], [43.8, 336.0], [43.9, 336.0], [44.0, 337.0], [44.1, 338.0], [44.2, 339.0], [44.3, 340.0], [44.4, 340.0], [44.5, 341.0], [44.6, 341.0], [44.7, 342.0], [44.8, 343.0], [44.9, 343.0], [45.0, 344.0], [45.1, 345.0], [45.2, 346.0], [45.3, 347.0], [45.4, 348.0], [45.5, 348.0], [45.6, 349.0], [45.7, 351.0], [45.8, 351.0], [45.9, 352.0], [46.0, 352.0], [46.1, 353.0], [46.2, 355.0], [46.3, 356.0], [46.4, 356.0], [46.5, 358.0], [46.6, 359.0], [46.7, 360.0], [46.8, 360.0], [46.9, 361.0], [47.0, 362.0], [47.1, 362.0], [47.2, 362.0], [47.3, 363.0], [47.4, 364.0], [47.5, 364.0], [47.6, 364.0], [47.7, 365.0], [47.8, 366.0], [47.9, 367.0], [48.0, 367.0], [48.1, 367.0], [48.2, 368.0], [48.3, 368.0], [48.4, 369.0], [48.5, 369.0], [48.6, 370.0], [48.7, 370.0], [48.8, 371.0], [48.9, 371.0], [49.0, 372.0], [49.1, 372.0], [49.2, 373.0], [49.3, 374.0], [49.4, 375.0], [49.5, 375.0], [49.6, 375.0], [49.7, 376.0], [49.8, 376.0], [49.9, 377.0], [50.0, 377.0], [50.1, 377.0], [50.2, 378.0], [50.3, 379.0], [50.4, 379.0], [50.5, 380.0], [50.6, 380.0], [50.7, 380.0], [50.8, 381.0], [50.9, 382.0], [51.0, 383.0], [51.1, 383.0], [51.2, 384.0], [51.3, 385.0], [51.4, 385.0], [51.5, 385.0], [51.6, 386.0], [51.7, 386.0], [51.8, 387.0], [51.9, 387.0], [52.0, 387.0], [52.1, 388.0], [52.2, 388.0], [52.3, 389.0], [52.4, 390.0], [52.5, 390.0], [52.6, 391.0], [52.7, 391.0], [52.8, 392.0], [52.9, 392.0], [53.0, 393.0], [53.1, 393.0], [53.2, 394.0], [53.3, 394.0], [53.4, 395.0], [53.5, 396.0], [53.6, 396.0], [53.7, 396.0], [53.8, 397.0], [53.9, 397.0], [54.0, 398.0], [54.1, 398.0], [54.2, 399.0], [54.3, 399.0], [54.4, 400.0], [54.5, 401.0], [54.6, 401.0], [54.7, 401.0], [54.8, 402.0], [54.9, 402.0], [55.0, 403.0], [55.1, 403.0], [55.2, 404.0], [55.3, 404.0], [55.4, 405.0], [55.5, 405.0], [55.6, 405.0], [55.7, 406.0], [55.8, 407.0], [55.9, 407.0], [56.0, 407.0], [56.1, 408.0], [56.2, 408.0], [56.3, 409.0], [56.4, 409.0], [56.5, 409.0], [56.6, 410.0], [56.7, 410.0], [56.8, 411.0], [56.9, 411.0], [57.0, 411.0], [57.1, 412.0], [57.2, 412.0], [57.3, 412.0], [57.4, 413.0], [57.5, 413.0], [57.6, 414.0], [57.7, 414.0], [57.8, 414.0], [57.9, 415.0], [58.0, 415.0], [58.1, 416.0], [58.2, 416.0], [58.3, 417.0], [58.4, 417.0], [58.5, 417.0], [58.6, 418.0], [58.7, 418.0], [58.8, 418.0], [58.9, 419.0], [59.0, 419.0], [59.1, 419.0], [59.2, 420.0], [59.3, 420.0], [59.4, 421.0], [59.5, 421.0], [59.6, 422.0], [59.7, 422.0], [59.8, 423.0], [59.9, 423.0], [60.0, 424.0], [60.1, 424.0], [60.2, 425.0], [60.3, 425.0], [60.4, 426.0], [60.5, 426.0], [60.6, 426.0], [60.7, 427.0], [60.8, 427.0], [60.9, 428.0], [61.0, 428.0], [61.1, 428.0], [61.2, 429.0], [61.3, 429.0], [61.4, 429.0], [61.5, 430.0], [61.6, 430.0], [61.7, 431.0], [61.8, 431.0], [61.9, 431.0], [62.0, 431.0], [62.1, 432.0], [62.2, 432.0], [62.3, 432.0], [62.4, 433.0], [62.5, 433.0], [62.6, 434.0], [62.7, 434.0], [62.8, 434.0], [62.9, 435.0], [63.0, 435.0], [63.1, 436.0], [63.2, 436.0], [63.3, 436.0], [63.4, 437.0], [63.5, 437.0], [63.6, 438.0], [63.7, 438.0], [63.8, 438.0], [63.9, 439.0], [64.0, 439.0], [64.1, 440.0], [64.2, 440.0], [64.3, 440.0], [64.4, 441.0], [64.5, 441.0], [64.6, 441.0], [64.7, 441.0], [64.8, 441.0], [64.9, 442.0], [65.0, 442.0], [65.1, 443.0], [65.2, 443.0], [65.3, 443.0], [65.4, 443.0], [65.5, 444.0], [65.6, 444.0], [65.7, 444.0], [65.8, 445.0], [65.9, 445.0], [66.0, 445.0], [66.1, 446.0], [66.2, 446.0], [66.3, 446.0], [66.4, 447.0], [66.5, 447.0], [66.6, 447.0], [66.7, 448.0], [66.8, 448.0], [66.9, 448.0], [67.0, 449.0], [67.1, 449.0], [67.2, 449.0], [67.3, 450.0], [67.4, 450.0], [67.5, 451.0], [67.6, 451.0], [67.7, 451.0], [67.8, 452.0], [67.9, 452.0], [68.0, 452.0], [68.1, 453.0], [68.2, 453.0], [68.3, 453.0], [68.4, 454.0], [68.5, 455.0], [68.6, 455.0], [68.7, 456.0], [68.8, 456.0], [68.9, 456.0], [69.0, 456.0], [69.1, 457.0], [69.2, 457.0], [69.3, 458.0], [69.4, 458.0], [69.5, 459.0], [69.6, 459.0], [69.7, 459.0], [69.8, 459.0], [69.9, 460.0], [70.0, 460.0], [70.1, 461.0], [70.2, 461.0], [70.3, 462.0], [70.4, 463.0], [70.5, 463.0], [70.6, 464.0], [70.7, 464.0], [70.8, 464.0], [70.9, 465.0], [71.0, 465.0], [71.1, 465.0], [71.2, 466.0], [71.3, 467.0], [71.4, 467.0], [71.5, 467.0], [71.6, 468.0], [71.7, 468.0], [71.8, 468.0], [71.9, 469.0], [72.0, 469.0], [72.1, 470.0], [72.2, 470.0], [72.3, 470.0], [72.4, 471.0], [72.5, 471.0], [72.6, 471.0], [72.7, 471.0], [72.8, 472.0], [72.9, 472.0], [73.0, 473.0], [73.1, 473.0], [73.2, 473.0], [73.3, 474.0], [73.4, 474.0], [73.5, 475.0], [73.6, 475.0], [73.7, 476.0], [73.8, 476.0], [73.9, 476.0], [74.0, 477.0], [74.1, 478.0], [74.2, 478.0], [74.3, 479.0], [74.4, 479.0], [74.5, 480.0], [74.6, 480.0], [74.7, 481.0], [74.8, 482.0], [74.9, 482.0], [75.0, 482.0], [75.1, 483.0], [75.2, 483.0], [75.3, 484.0], [75.4, 484.0], [75.5, 485.0], [75.6, 485.0], [75.7, 486.0], [75.8, 487.0], [75.9, 487.0], [76.0, 488.0], [76.1, 488.0], [76.2, 489.0], [76.3, 489.0], [76.4, 490.0], [76.5, 490.0], [76.6, 490.0], [76.7, 491.0], [76.8, 491.0], [76.9, 491.0], [77.0, 492.0], [77.1, 492.0], [77.2, 493.0], [77.3, 494.0], [77.4, 494.0], [77.5, 495.0], [77.6, 495.0], [77.7, 496.0], [77.8, 496.0], [77.9, 497.0], [78.0, 497.0], [78.1, 498.0], [78.2, 498.0], [78.3, 499.0], [78.4, 499.0], [78.5, 500.0], [78.6, 500.0], [78.7, 500.0], [78.8, 501.0], [78.9, 502.0], [79.0, 502.0], [79.1, 503.0], [79.2, 503.0], [79.3, 504.0], [79.4, 504.0], [79.5, 505.0], [79.6, 505.0], [79.7, 506.0], [79.8, 508.0], [79.9, 508.0], [80.0, 509.0], [80.1, 510.0], [80.2, 511.0], [80.3, 511.0], [80.4, 512.0], [80.5, 512.0], [80.6, 513.0], [80.7, 513.0], [80.8, 514.0], [80.9, 515.0], [81.0, 516.0], [81.1, 516.0], [81.2, 518.0], [81.3, 518.0], [81.4, 519.0], [81.5, 520.0], [81.6, 520.0], [81.7, 521.0], [81.8, 521.0], [81.9, 522.0], [82.0, 523.0], [82.1, 523.0], [82.2, 524.0], [82.3, 525.0], [82.4, 525.0], [82.5, 526.0], [82.6, 527.0], [82.7, 529.0], [82.8, 530.0], [82.9, 531.0], [83.0, 532.0], [83.1, 533.0], [83.2, 535.0], [83.3, 536.0], [83.4, 538.0], [83.5, 539.0], [83.6, 539.0], [83.7, 541.0], [83.8, 541.0], [83.9, 542.0], [84.0, 543.0], [84.1, 544.0], [84.2, 545.0], [84.3, 546.0], [84.4, 548.0], [84.5, 549.0], [84.6, 549.0], [84.7, 551.0], [84.8, 552.0], [84.9, 553.0], [85.0, 555.0], [85.1, 555.0], [85.2, 556.0], [85.3, 557.0], [85.4, 558.0], [85.5, 559.0], [85.6, 560.0], [85.7, 560.0], [85.8, 562.0], [85.9, 563.0], [86.0, 564.0], [86.1, 565.0], [86.2, 566.0], [86.3, 567.0], [86.4, 568.0], [86.5, 569.0], [86.6, 570.0], [86.7, 571.0], [86.8, 572.0], [86.9, 573.0], [87.0, 574.0], [87.1, 576.0], [87.2, 578.0], [87.3, 579.0], [87.4, 581.0], [87.5, 583.0], [87.6, 585.0], [87.7, 587.0], [87.8, 588.0], [87.9, 589.0], [88.0, 591.0], [88.1, 593.0], [88.2, 594.0], [88.3, 596.0], [88.4, 597.0], [88.5, 599.0], [88.6, 601.0], [88.7, 602.0], [88.8, 603.0], [88.9, 605.0], [89.0, 607.0], [89.1, 608.0], [89.2, 610.0], [89.3, 612.0], [89.4, 613.0], [89.5, 615.0], [89.6, 617.0], [89.7, 620.0], [89.8, 621.0], [89.9, 622.0], [90.0, 623.0], [90.1, 625.0], [90.2, 627.0], [90.3, 628.0], [90.4, 630.0], [90.5, 631.0], [90.6, 633.0], [90.7, 635.0], [90.8, 637.0], [90.9, 639.0], [91.0, 640.0], [91.1, 643.0], [91.2, 646.0], [91.3, 648.0], [91.4, 651.0], [91.5, 654.0], [91.6, 657.0], [91.7, 663.0], [91.8, 668.0], [91.9, 671.0], [92.0, 674.0], [92.1, 679.0], [92.2, 683.0], [92.3, 686.0], [92.4, 689.0], [92.5, 693.0], [92.6, 699.0], [92.7, 704.0], [92.8, 709.0], [92.9, 716.0], [93.0, 722.0], [93.1, 729.0], [93.2, 733.0], [93.3, 736.0], [93.4, 740.0], [93.5, 745.0], [93.6, 751.0], [93.7, 762.0], [93.8, 769.0], [93.9, 778.0], [94.0, 790.0], [94.1, 821.0], [94.2, 839.0], [94.3, 872.0], [94.4, 917.0], [94.5, 947.0], [94.6, 993.0], [94.7, 1051.0], [94.8, 1098.0], [94.9, 1177.0], [95.0, 1250.0], [95.1, 1289.0], [95.2, 1304.0], [95.3, 1328.0], [95.4, 1355.0], [95.5, 1393.0], [95.6, 1440.0], [95.7, 1455.0], [95.8, 1475.0], [95.9, 1489.0], [96.0, 1517.0], [96.1, 1531.0], [96.2, 1604.0], [96.3, 1940.0], [96.4, 2079.0], [96.5, 2445.0], [96.6, 2793.0], [96.7, 2945.0], [96.8, 3246.0], [96.9, 3326.0], [97.0, 3606.0], [97.1, 3801.0], [97.2, 3954.0], [97.3, 4075.0], [97.4, 4107.0], [97.5, 4211.0], [97.6, 4289.0], [97.7, 4347.0], [97.8, 4410.0], [97.9, 4531.0], [98.0, 4600.0], [98.1, 4705.0], [98.2, 4772.0], [98.3, 4853.0], [98.4, 4942.0], [98.5, 4986.0], [98.6, 5019.0], [98.7, 5037.0], [98.8, 5057.0], [98.9, 5087.0], [99.0, 5116.0], [99.1, 5159.0], [99.2, 5279.0], [99.3, 5363.0], [99.4, 5416.0], [99.5, 5518.0], [99.6, 5550.0], [99.7, 5627.0], [99.8, 5732.0], [99.9, 5822.0], [100.0, 6054.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2416.0, "series": [{"data": [[0.0, 266.0], [600.0, 405.0], [700.0, 141.0], [800.0, 34.0], [900.0, 26.0], [1000.0, 19.0], [1100.0, 10.0], [1200.0, 23.0], [1300.0, 38.0], [1400.0, 44.0], [1500.0, 23.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 8.0], [2100.0, 2.0], [2300.0, 6.0], [2400.0, 10.0], [2700.0, 3.0], [2800.0, 5.0], [2900.0, 6.0], [3000.0, 2.0], [3200.0, 10.0], [3300.0, 6.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 6.0], [3700.0, 5.0], [3800.0, 4.0], [3900.0, 9.0], [4000.0, 15.0], [4100.0, 7.0], [4200.0, 18.0], [4300.0, 16.0], [4400.0, 10.0], [4500.0, 11.0], [4600.0, 8.0], [4700.0, 15.0], [4800.0, 13.0], [4900.0, 20.0], [5000.0, 37.0], [5100.0, 24.0], [5200.0, 7.0], [5300.0, 15.0], [5400.0, 6.0], [5500.0, 23.0], [5600.0, 9.0], [5700.0, 7.0], [5800.0, 10.0], [5900.0, 3.0], [6000.0, 4.0], [100.0, 2048.0], [200.0, 1630.0], [300.0, 1486.0], [400.0, 2416.0], [500.0, 1009.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 404.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7870.0, "series": [{"data": [[0.0, 7870.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1726.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 404.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 669.1110999999997, "minX": 1.66956174E12, "maxY": 669.1110999999997, "series": [{"data": [[1.66956174E12, 669.1110999999997]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956174E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 4532.0, "series": [{"data": [[2.0, 6.0], [3.0, 6.0], [4.0, 9.0], [5.0, 51.0], [6.0, 52.0], [7.0, 53.25], [8.0, 62.0], [9.0, 63.0], [10.0, 13.5], [11.0, 20.0], [12.0, 19.25], [13.0, 21.5], [14.0, 23.5], [15.0, 17.0], [16.0, 53.0], [17.0, 30.666666666666668], [18.0, 41.6], [19.0, 41.0], [20.0, 44.090909090909086], [21.0, 56.5], [22.0, 59.5], [23.0, 97.0], [24.0, 43.0], [25.0, 10.0], [26.0, 3.0], [27.0, 47.666666666666664], [28.0, 43.0], [29.0, 61.666666666666664], [30.0, 23.0], [32.0, 59.8], [34.0, 67.33333333333333], [37.0, 100.0], [36.0, 60.333333333333336], [39.0, 59.2], [38.0, 52.25], [41.0, 39.0], [40.0, 68.5], [45.0, 50.0], [44.0, 65.16666666666666], [47.0, 57.0], [49.0, 70.6], [51.0, 74.6], [50.0, 61.5], [53.0, 42.666666666666664], [52.0, 124.0], [55.0, 86.0], [54.0, 127.0], [57.0, 105.5], [56.0, 117.0], [61.0, 52.0], [60.0, 86.5], [63.0, 121.5], [62.0, 119.0], [67.0, 96.33333333333333], [66.0, 92.28571428571429], [65.0, 81.25], [64.0, 82.66666666666667], [71.0, 93.75], [70.0, 106.75], [69.0, 137.0], [68.0, 31.0], [73.0, 106.33333333333334], [72.0, 91.2], [78.0, 114.5], [77.0, 93.6], [76.0, 96.0], [83.0, 115.00000000000001], [81.0, 160.0], [80.0, 119.0], [87.0, 119.0], [86.0, 74.0], [85.0, 117.87499999999999], [84.0, 164.0], [91.0, 165.0], [90.0, 127.75], [89.0, 112.57142857142857], [88.0, 179.0], [95.0, 126.0], [94.0, 161.0], [93.0, 170.0], [92.0, 63.0], [99.0, 134.66666666666666], [98.0, 131.6], [97.0, 173.5], [96.0, 137.66666666666666], [103.0, 176.0], [102.0, 146.2], [101.0, 148.88888888888889], [100.0, 138.5], [107.0, 158.16666666666669], [106.0, 185.33333333333334], [105.0, 167.1], [111.0, 177.2], [109.0, 199.83333333333331], [108.0, 192.75], [114.0, 181.0], [113.0, 176.33333333333334], [112.0, 156.66666666666666], [119.0, 120.0], [118.0, 137.0], [117.0, 189.5], [116.0, 177.0], [123.0, 172.73333333333332], [122.0, 215.0], [121.0, 156.0], [120.0, 220.0], [126.0, 150.9090909090909], [125.0, 71.0], [124.0, 191.39999999999998], [135.0, 165.55555555555554], [134.0, 240.0], [133.0, 190.49999999999997], [132.0, 138.5], [131.0, 193.9090909090909], [130.0, 192.16666666666669], [129.0, 166.16666666666666], [143.0, 194.06666666666663], [142.0, 210.5], [141.0, 184.44444444444446], [140.0, 138.33333333333334], [139.0, 214.5], [138.0, 233.0], [137.0, 148.8], [136.0, 214.0], [151.0, 183.0], [150.0, 247.0], [147.0, 179.14285714285717], [144.0, 171.0], [159.0, 233.75], [158.0, 220.0], [157.0, 207.44444444444446], [155.0, 204.6], [154.0, 208.66666666666666], [153.0, 191.29411764705878], [152.0, 209.5], [167.0, 193.0], [166.0, 216.33333333333334], [165.0, 206.79999999999998], [164.0, 226.125], [163.0, 227.25], [162.0, 209.75], [161.0, 216.85714285714286], [175.0, 172.0], [174.0, 192.38888888888889], [173.0, 219.66666666666666], [172.0, 198.33333333333334], [171.0, 174.5], [170.0, 191.87499999999997], [169.0, 217.0], [168.0, 194.4], [183.0, 168.30769230769232], [182.0, 174.90476190476193], [181.0, 181.7142857142857], [180.0, 222.0], [179.0, 182.375], [177.0, 183.25], [191.0, 156.83333333333334], [189.0, 167.71428571428572], [188.0, 172.44444444444446], [187.0, 170.0], [186.0, 156.0], [185.0, 170.0], [184.0, 156.75], [199.0, 170.25], [196.0, 169.12499999999997], [194.0, 164.7], [193.0, 150.90909090909093], [207.0, 216.9090909090909], [206.0, 194.5], [205.0, 194.75], [204.0, 195.1875], [203.0, 172.5], [202.0, 180.46153846153845], [201.0, 174.0555555555556], [200.0, 144.0], [215.0, 234.28571428571428], [213.0, 241.37500000000003], [212.0, 229.76923076923077], [211.0, 2406.5], [210.0, 1708.75], [209.0, 237.42857142857142], [208.0, 221.75999999999996], [223.0, 236.5], [222.0, 242.25], [221.0, 223.8], [220.0, 1072.2857142857144], [219.0, 232.54838709677418], [218.0, 241.88888888888889], [217.0, 247.0], [216.0, 233.0], [231.0, 501.5945945945946], [230.0, 215.23076923076923], [229.0, 214.25], [228.0, 613.9285714285716], [227.0, 791.0], [226.0, 203.0], [225.0, 557.7058823529412], [224.0, 218.75], [239.0, 216.26666666666665], [238.0, 335.91111111111104], [237.0, 1473.6666666666667], [236.0, 1320.0], [234.0, 2087.666666666667], [233.0, 1605.0000000000002], [232.0, 637.0384615384617], [247.0, 215.2], [246.0, 222.6], [245.0, 213.56249999999997], [244.0, 877.9705882352943], [243.0, 237.16666666666666], [242.0, 225.0], [240.0, 229.0], [255.0, 1989.8333333333335], [252.0, 172.8], [251.0, 180.2], [250.0, 894.0869565217391], [249.0, 201.125], [248.0, 209.42857142857142], [270.0, 190.4545454545454], [271.0, 234.5], [269.0, 198.258064516129], [268.0, 465.5], [267.0, 1980.6666666666667], [266.0, 202.0], [265.0, 195.66666666666666], [264.0, 1290.7045454545457], [263.0, 690.6363636363636], [257.0, 1207.5625], [256.0, 685.3636363636364], [259.0, 189.33333333333334], [258.0, 197.5], [262.0, 734.6], [261.0, 191.46153846153845], [260.0, 978.2857142857143], [286.0, 614.1363636363637], [287.0, 138.0], [285.0, 798.625], [284.0, 1260.421052631579], [283.0, 1200.6000000000001], [282.0, 1214.3], [281.0, 160.55555555555554], [280.0, 209.6], [279.0, 172.4375], [272.0, 175.66666666666666], [274.0, 184.8181818181818], [273.0, 1149.1818181818182], [278.0, 171.66666666666666], [277.0, 821.125], [276.0, 609.25], [302.0, 2230.2], [303.0, 515.1874999999999], [301.0, 1235.6], [300.0, 1473.5], [299.0, 476.4736842105263], [298.0, 613.5416666666666], [296.0, 225.83333333333334], [295.0, 186.12903225806454], [288.0, 168.99999999999997], [290.0, 144.5], [289.0, 203.16666666666666], [294.0, 179.83333333333334], [292.0, 162.875], [318.0, 1381.3749999999998], [319.0, 1496.1351351351352], [317.0, 924.2692307692306], [316.0, 2673.0], [315.0, 1704.7391304347823], [314.0, 442.5641025641025], [313.0, 184.00000000000003], [310.0, 190.84615384615387], [307.0, 464.421052631579], [306.0, 576.3571428571429], [305.0, 199.46153846153848], [304.0, 219.2], [308.0, 191.41666666666669], [334.0, 1135.8999999999999], [335.0, 1173.1666666666663], [333.0, 1476.9999999999998], [332.0, 1540.1999999999998], [331.0, 2874.5172413793102], [330.0, 996.7777777777779], [329.0, 994.1666666666666], [328.0, 168.77777777777774], [326.0, 550.2307692307693], [322.0, 703.6666666666666], [320.0, 2117.9], [325.0, 160.5], [350.0, 715.7777777777778], [351.0, 180.0], [349.0, 232.0], [348.0, 170.0], [347.0, 1221.6562499999998], [346.0, 190.39999999999998], [345.0, 165.94444444444446], [344.0, 152.5], [342.0, 175.0], [337.0, 850.1428571428571], [336.0, 167.0], [339.0, 801.2000000000002], [338.0, 159.21739130434779], [341.0, 1362.75], [340.0, 1364.5], [367.0, 1116.8], [362.0, 743.0454545454545], [364.0, 924.7878787878788], [355.0, 1743.0], [354.0, 985.6666666666667], [353.0, 207.33333333333337], [352.0, 200.7142857142857], [366.0, 229.33333333333334], [365.0, 445.57142857142856], [363.0, 1136.9333333333332], [361.0, 618.7222222222223], [360.0, 216.75], [359.0, 726.4444444444443], [358.0, 200.60000000000002], [357.0, 219.5], [356.0, 856.0000000000001], [382.0, 1458.142857142857], [371.0, 257.1], [370.0, 1358.5000000000002], [369.0, 1700.6666666666665], [368.0, 1121.666666666667], [373.0, 225.33333333333331], [372.0, 207.99999999999997], [383.0, 604.5], [381.0, 237.0], [380.0, 227.2857142857143], [378.0, 208.20000000000005], [377.0, 281.0], [376.0, 215.7], [399.0, 193.8], [395.0, 628.1746031746032], [385.0, 632.5263157894738], [390.0, 608.0], [389.0, 221.2], [388.0, 219.66666666666666], [391.0, 444.4], [384.0, 1322.75], [392.0, 499.3000000000001], [393.0, 197.25], [394.0, 532.7777777777779], [398.0, 329.8333333333333], [397.0, 210.0], [387.0, 202.0], [386.0, 608.5454545454545], [414.0, 597.5454545454545], [415.0, 497.125], [405.0, 199.5], [404.0, 802.125], [413.0, 244.0], [412.0, 223.75], [407.0, 253.66666666666666], [403.0, 234.66666666666666], [401.0, 4532.0], [400.0, 244.5], [406.0, 1661.3333333333333], [411.0, 276.25], [409.0, 830.7142857142857], [408.0, 849.7142857142858], [431.0, 233.5], [430.0, 164.33333333333334], [419.0, 1262.25], [418.0, 735.25], [417.0, 2341.0], [416.0, 203.5], [427.0, 250.0], [426.0, 214.25], [425.0, 162.66666666666666], [424.0, 236.5], [423.0, 191.25], [422.0, 561.9166666666666], [421.0, 259.0], [420.0, 213.25], [435.0, 161.33333333333334], [436.0, 250.66666666666666], [437.0, 655.4444444444445], [438.0, 221.7142857142857], [439.0, 216.0], [434.0, 1623.6666666666667], [433.0, 1046.2], [432.0, 763.0000000000001], [440.0, 210.2], [442.0, 627.0], [441.0, 546.5454545454546], [444.0, 103.0], [445.0, 102.0], [446.0, 229.5], [443.0, 490.0384615384614], [462.0, 186.2], [463.0, 137.5], [461.0, 697.25], [460.0, 1244.75], [459.0, 167.5], [458.0, 706.75], [457.0, 375.1627906976744], [478.0, 570.1052631578947], [464.0, 150.2], [465.0, 580.3636363636364], [467.0, 196.6], [468.0, 592.8333333333334], [470.0, 1200.0], [469.0, 202.42857142857142], [471.0, 175.0], [473.0, 546.1818181818181], [474.0, 294.7142857142857], [475.0, 153.0], [479.0, 438.91666666666674], [472.0, 1525.3333333333335], [477.0, 685.2941176470589], [483.0, 483.7142857142857], [481.0, 472.5333333333333], [482.0, 1558.6666666666667], [495.0, 186.66666666666663], [494.0, 114.0], [492.0, 88.0], [491.0, 901.6666666666666], [490.0, 616.6666666666667], [487.0, 215.66666666666666], [485.0, 225.0], [484.0, 163.8], [511.0, 184.0], [508.0, 441.00000000000006], [499.0, 191.63636363636363], [498.0, 220.0], [497.0, 163.66666666666666], [496.0, 644.6250000000001], [509.0, 258.25], [510.0, 149.57142857142856], [507.0, 122.44444444444441], [506.0, 103.2], [505.0, 123.33333333333333], [504.0, 108.41666666666667], [503.0, 2832.6666666666665], [502.0, 932.6], [500.0, 515.2], [537.0, 155.33333333333334], [542.0, 134.33333333333334], [543.0, 712.5333333333333], [528.0, 177.0], [530.0, 174.5], [529.0, 755.8571428571428], [532.0, 117.0], [531.0, 168.0], [541.0, 189.83333333333334], [540.0, 175.69230769230768], [538.0, 184.0], [536.0, 155.33333333333334], [519.0, 147.33333333333331], [518.0, 177.5], [517.0, 125.5], [516.0, 139.0], [515.0, 1320.7142857142856], [514.0, 145.75], [513.0, 152.25], [512.0, 149.25], [527.0, 186.66666666666666], [526.0, 161.0], [525.0, 188.5], [524.0, 140.0], [523.0, 558.4], [522.0, 620.2222222222222], [521.0, 340.1304347826087], [520.0, 614.6666666666666], [535.0, 195.11111111111111], [533.0, 176.88888888888889], [551.0, 312.0], [555.0, 293.28571428571433], [545.0, 262.5333333333334], [546.0, 285.8695652173913], [547.0, 310.0], [550.0, 199.0], [549.0, 181.66666666666666], [560.0, 705.116666666667], [570.0, 355.1428571428571], [573.0, 380.4166666666667], [575.0, 376.7142857142857], [568.0, 431.77777777777777], [569.0, 351.7333333333334], [561.0, 419.8], [563.0, 562.5], [564.0, 490.25], [565.0, 544.0], [567.0, 509.6923076923077], [552.0, 312.1666666666667], [553.0, 532.04], [554.0, 607.0], [556.0, 891.6249999999998], [558.0, 267.0], [557.0, 476.4117647058824], [559.0, 954.5], [601.0, 410.3333333333333], [576.0, 654.1666666666667], [591.0, 462.25], [590.0, 457.5], [589.0, 374.3333333333333], [588.0, 426.8], [587.0, 434.0], [586.0, 412.57142857142856], [585.0, 427.0], [584.0, 407.0], [577.0, 374.3333333333333], [578.0, 467.8], [580.0, 398.3636363636364], [579.0, 797.8888888888889], [582.0, 391.0], [581.0, 394.0], [600.0, 447.0], [583.0, 408.0], [593.0, 426.55555555555554], [599.0, 434.42105263157896], [597.0, 431.5], [595.0, 397.0], [594.0, 468.6666666666667], [602.0, 393.57142857142856], [603.0, 381.0], [604.0, 346.0], [606.0, 616.8], [607.0, 597.2962962962962], [592.0, 478.5], [633.0, 672.0], [609.0, 762.2380952380952], [608.0, 528.0], [610.0, 545.375], [612.0, 442.3333333333333], [611.0, 310.6666666666667], [614.0, 417.75], [613.0, 373.0], [616.0, 461.0], [618.0, 1642.0], [617.0, 482.0], [620.0, 426.0], [619.0, 373.75], [622.0, 364.0], [621.0, 3986.0], [623.0, 377.75], [635.0, 554.3333333333334], [639.0, 654.5], [625.0, 487.0], [624.0, 491.5], [627.0, 461.3333333333333], [626.0, 1082.6], [630.0, 1274.75], [628.0, 1752.6], [634.0, 370.4], [632.0, 472.0], [615.0, 208.0], [665.0, 327.5], [650.0, 710.4545454545454], [648.0, 700.0], [649.0, 405.6], [652.0, 559.6], [651.0, 309.0], [655.0, 471.0], [645.0, 452.0], [644.0, 376.375], [642.0, 428.25], [647.0, 503.5], [646.0, 323.0], [653.0, 2183.5], [660.0, 614.0555555555554], [661.0, 957.875], [662.0, 705.6666666666666], [663.0, 560.6666666666666], [666.0, 644.8333333333334], [667.0, 639.3333333333334], [669.0, 2180.5], [658.0, 1088.0], [657.0, 470.0], [656.0, 435.0], [668.0, 493.0], [686.0, 559.8333333333334], [673.0, 336.2], [674.0, 577.0], [675.0, 646.7142857142857], [676.0, 458.6666666666667], [679.0, 481.0], [678.0, 314.3333333333333], [697.0, 328.5], [696.0, 449.0], [680.0, 686.1481481481482], [681.0, 499.2], [685.0, 546.0555555555557], [684.0, 454.6666666666667], [682.0, 230.5], [687.0, 555.8999999999999], [672.0, 957.1428571428572], [698.0, 633.0], [699.0, 466.2857142857143], [701.0, 441.0], [703.0, 542.0], [688.0, 481.6], [691.0, 316.0], [690.0, 452.6], [694.0, 446.0], [693.0, 326.5], [702.0, 140.0], [728.0, 482.5], [704.0, 693.0], [710.0, 421.6666666666667], [708.0, 133.0], [707.0, 440.6666666666667], [705.0, 429.0], [712.0, 491.6400000000001], [713.0, 164.0], [717.0, 333.0], [716.0, 424.83333333333337], [719.0, 891.1666666666666], [718.0, 336.0], [727.0, 443.58333333333337], [726.0, 334.5], [724.0, 403.5], [723.0, 1263.25], [722.0, 320.0], [721.0, 458.0], [720.0, 356.0], [734.0, 432.0], [735.0, 472.0], [730.0, 419.8571428571429], [729.0, 441.0], [731.0, 352.99999999999994], [732.0, 479.0], [733.0, 394.5], [748.0, 434.5], [737.0, 463.18518518518516], [736.0, 381.3333333333333], [740.0, 442.0], [739.0, 429.25], [741.0, 417.75], [742.0, 471.0], [743.0, 376.75], [764.0, 456.0], [752.0, 391.0], [754.0, 436.0], [753.0, 463.0], [759.0, 408.8], [757.0, 445.25], [762.0, 460.0], [760.0, 428.6], [744.0, 358.6], [745.0, 402.77777777777777], [746.0, 363.5], [747.0, 422.25], [750.0, 390.3333333333333], [751.0, 437.0], [796.0, 483.16666666666663], [799.0, 1591.0], [785.0, 453.83333333333337], [784.0, 430.6666666666667], [787.0, 460.6666666666667], [786.0, 479.3333333333333], [798.0, 562.0], [797.0, 418.6666666666667], [795.0, 535.0], [794.0, 487.2], [793.0, 460.42857142857144], [792.0, 437.5], [781.0, 408.0], [775.0, 442.6363636363636], [774.0, 491.0], [780.0, 390.0], [779.0, 452.0], [777.0, 462.3333333333333], [791.0, 494.0], [789.0, 468.5], [827.0, 800.4864864864863], [800.0, 482.5], [815.0, 471.0], [814.0, 450.75], [813.0, 455.5], [812.0, 468.9], [811.0, 406.3333333333333], [810.0, 498.75], [809.0, 452.5], [808.0, 406.0], [801.0, 1574.6666666666667], [802.0, 503.0], [804.0, 1068.1], [803.0, 550.25], [807.0, 500.0], [805.0, 448.0], [831.0, 317.55555555555554], [817.0, 467.4], [819.0, 378.5], [818.0, 434.16666666666663], [821.0, 466.0416666666666], [820.0, 2570.0], [823.0, 369.0], [822.0, 381.5], [829.0, 275.0], [828.0, 453.5], [826.0, 476.0], [824.0, 638.5405405405406], [857.0, 975.1666666666666], [861.0, 324.0], [862.0, 428.0909090909091], [849.0, 363.0], [848.0, 388.5], [851.0, 278.0], [850.0, 621.8095238095237], [853.0, 513.0666666666667], [852.0, 407.5], [860.0, 283.0], [859.0, 470.92307692307696], [858.0, 1437.6666666666665], [856.0, 284.0], [839.0, 446.5], [838.0, 429.66666666666663], [837.0, 460.0], [836.0, 1013.0], [835.0, 362.0], [834.0, 333.0], [833.0, 457.3125], [832.0, 442.0909090909091], [847.0, 515.5], [846.0, 368.4], [845.0, 251.0], [844.0, 242.0], [843.0, 343.5], [842.0, 503.00000000000006], [841.0, 387.8333333333333], [840.0, 441.8], [855.0, 1068.8], [854.0, 546.0], [894.0, 533.0], [884.0, 514.1249999999999], [895.0, 805.0], [881.0, 456.2], [880.0, 500.4285714285714], [883.0, 549.3333333333334], [882.0, 536.0], [890.0, 503.5], [889.0, 616.5], [888.0, 532.0], [870.0, 482.8888888888889], [868.0, 382.0], [867.0, 494.0], [866.0, 483.0], [865.0, 488.38461538461536], [864.0, 496.09090909090907], [879.0, 481.33333333333337], [878.0, 584.6666666666666], [877.0, 506.96428571428584], [876.0, 486.0], [875.0, 489.0], [874.0, 472.0], [873.0, 586.5], [872.0, 455.5], [887.0, 607.6666666666666], [886.0, 489.0], [885.0, 504.66666666666663], [921.0, 555.4], [925.0, 517.0], [916.0, 417.2], [915.0, 512.5], [914.0, 3316.0], [912.0, 578.0], [919.0, 564.6], [918.0, 561.6], [926.0, 549.3333333333334], [927.0, 510.0], [924.0, 554.5], [923.0, 580.0], [922.0, 555.625], [920.0, 572.0], [903.0, 387.0], [900.0, 513.9090909090909], [899.0, 771.5833333333333], [898.0, 964.5], [897.0, 529.8], [910.0, 553.0], [909.0, 943.2857142857143], [908.0, 534.5], [907.0, 549.0], [906.0, 498.5], [905.0, 583.75], [904.0, 578.3333333333333], [935.0, 474.0], [931.0, 906.9333333333333], [929.0, 619.7499999999999], [928.0, 512.5], [930.0, 1950.0], [932.0, 563.75], [933.0, 476.0], [936.0, 451.45454545454544], [938.0, 918.047619047619], [937.0, 562.5], [940.0, 579.0], [939.0, 545.6], [942.0, 550.4285714285714], [941.0, 763.5714285714286], [943.0, 588.3333333333334], [948.0, 439.09090909090907], [950.0, 563.2857142857142], [949.0, 522.4444444444443], [951.0, 592.2352941176471], [956.0, 489.5], [955.0, 556.4], [954.0, 572.6666666666666], [953.0, 502.0], [952.0, 571.5555555555555], [957.0, 520.6666666666666], [959.0, 549.875], [945.0, 547.5], [944.0, 483.0], [947.0, 645.0], [946.0, 567.3333333333334], [958.0, 616.4285714285714], [985.0, 477.12500000000006], [964.0, 559.3750000000001], [960.0, 560.2857142857142], [961.0, 611.6666666666666], [963.0, 594.5384615384615], [962.0, 586.3636363636364], [965.0, 568.4444444444445], [966.0, 583.0], [967.0, 571.9215686274508], [971.0, 433.3], [970.0, 562.625], [969.0, 536.1428571428572], [968.0, 930.5714285714286], [972.0, 438.8], [973.0, 527.5833333333333], [974.0, 519.5], [975.0, 532.5500000000001], [983.0, 470.1428571428571], [982.0, 623.3636363636363], [981.0, 514.2666666666668], [980.0, 538.2666666666667], [979.0, 573.3333333333334], [978.0, 733.3076923076923], [977.0, 767.9999999999999], [976.0, 941.4444444444445], [991.0, 492.9090909090909], [989.0, 472.8], [988.0, 552.75], [987.0, 500.0], [986.0, 497.6315789473685], [984.0, 457.0], [994.0, 707.4909090909091], [1000.0, 481.35720988426715], [999.0, 473.75], [998.0, 480.2941176470588], [997.0, 476.1111111111111], [996.0, 497.5338983050847], [995.0, 620.9090909090909], [993.0, 687.4230769230769], [992.0, 536.25], [1.0, 2.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[669.1110000000024, 520.4001999999999]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956174E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956174E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956174E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956174E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 520.4001999999999, "minX": 1.66956174E12, "maxY": 520.4001999999999, "series": [{"data": [[1.66956174E12, 520.4001999999999]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956174E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 520.2503000000007, "minX": 1.66956174E12, "maxY": 520.2503000000007, "series": [{"data": [[1.66956174E12, 520.2503000000007]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956174E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5814000000000004, "minX": 1.66956174E12, "maxY": 0.5814000000000004, "series": [{"data": [[1.66956174E12, 0.5814000000000004]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956174E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.66956174E12, "maxY": 6054.0, "series": [{"data": [[1.66956174E12, 6054.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956174E12, 623.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956174E12, 5121.939999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956174E12, 1257.5999999999913]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956174E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956174E12, 377.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956174E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 78.0, "minX": 321.0, "maxY": 593.0, "series": [{"data": [[1156.0, 422.0], [1255.0, 186.0], [667.0, 593.0], [1320.0, 455.0], [321.0, 78.0], [1400.0, 484.0], [1384.0, 203.0], [1481.0, 417.0], [1016.0, 203.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1481.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 78.0, "minX": 321.0, "maxY": 593.0, "series": [{"data": [[1156.0, 422.0], [1255.0, 185.0], [667.0, 593.0], [1320.0, 455.0], [321.0, 78.0], [1400.0, 484.0], [1384.0, 203.0], [1481.0, 417.0], [1016.0, 203.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1481.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956174E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956174E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956174E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956174E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956174E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956174E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956174E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956174E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956174E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956174E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956174E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

