/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3045.0, "series": [{"data": [[0.0, 1.0], [0.1, 4.0], [0.2, 5.0], [0.3, 6.0], [0.4, 7.0], [0.5, 8.0], [0.6, 8.0], [0.7, 10.0], [0.8, 11.0], [0.9, 13.0], [1.0, 14.0], [1.1, 15.0], [1.2, 16.0], [1.3, 16.0], [1.4, 16.0], [1.5, 17.0], [1.6, 17.0], [1.7, 18.0], [1.8, 19.0], [1.9, 19.0], [2.0, 20.0], [2.1, 20.0], [2.2, 21.0], [2.3, 22.0], [2.4, 23.0], [2.5, 23.0], [2.6, 24.0], [2.7, 24.0], [2.8, 24.0], [2.9, 25.0], [3.0, 25.0], [3.1, 26.0], [3.2, 26.0], [3.3, 26.0], [3.4, 27.0], [3.5, 27.0], [3.6, 27.0], [3.7, 28.0], [3.8, 28.0], [3.9, 29.0], [4.0, 30.0], [4.1, 31.0], [4.2, 31.0], [4.3, 32.0], [4.4, 32.0], [4.5, 33.0], [4.6, 33.0], [4.7, 34.0], [4.8, 34.0], [4.9, 34.0], [5.0, 35.0], [5.1, 35.0], [5.2, 36.0], [5.3, 36.0], [5.4, 36.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 38.0], [5.9, 38.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 42.0], [7.0, 42.0], [7.1, 42.0], [7.2, 43.0], [7.3, 43.0], [7.4, 44.0], [7.5, 44.0], [7.6, 44.0], [7.7, 45.0], [7.8, 45.0], [7.9, 45.0], [8.0, 46.0], [8.1, 46.0], [8.2, 47.0], [8.3, 47.0], [8.4, 48.0], [8.5, 48.0], [8.6, 48.0], [8.7, 48.0], [8.8, 49.0], [8.9, 49.0], [9.0, 49.0], [9.1, 50.0], [9.2, 50.0], [9.3, 51.0], [9.4, 51.0], [9.5, 52.0], [9.6, 52.0], [9.7, 52.0], [9.8, 53.0], [9.9, 53.0], [10.0, 54.0], [10.1, 54.0], [10.2, 55.0], [10.3, 55.0], [10.4, 56.0], [10.5, 56.0], [10.6, 56.0], [10.7, 57.0], [10.8, 57.0], [10.9, 57.0], [11.0, 57.0], [11.1, 59.0], [11.2, 59.0], [11.3, 60.0], [11.4, 60.0], [11.5, 60.0], [11.6, 61.0], [11.7, 61.0], [11.8, 61.0], [11.9, 61.0], [12.0, 61.0], [12.1, 62.0], [12.2, 62.0], [12.3, 62.0], [12.4, 63.0], [12.5, 63.0], [12.6, 63.0], [12.7, 64.0], [12.8, 64.0], [12.9, 64.0], [13.0, 64.0], [13.1, 64.0], [13.2, 64.0], [13.3, 65.0], [13.4, 65.0], [13.5, 65.0], [13.6, 65.0], [13.7, 66.0], [13.8, 66.0], [13.9, 67.0], [14.0, 67.0], [14.1, 67.0], [14.2, 68.0], [14.3, 68.0], [14.4, 69.0], [14.5, 69.0], [14.6, 69.0], [14.7, 70.0], [14.8, 70.0], [14.9, 70.0], [15.0, 71.0], [15.1, 71.0], [15.2, 71.0], [15.3, 71.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 72.0], [15.8, 73.0], [15.9, 73.0], [16.0, 73.0], [16.1, 73.0], [16.2, 74.0], [16.3, 74.0], [16.4, 74.0], [16.5, 75.0], [16.6, 75.0], [16.7, 75.0], [16.8, 76.0], [16.9, 76.0], [17.0, 76.0], [17.1, 77.0], [17.2, 77.0], [17.3, 78.0], [17.4, 78.0], [17.5, 79.0], [17.6, 79.0], [17.7, 79.0], [17.8, 79.0], [17.9, 80.0], [18.0, 80.0], [18.1, 80.0], [18.2, 81.0], [18.3, 81.0], [18.4, 81.0], [18.5, 82.0], [18.6, 82.0], [18.7, 82.0], [18.8, 83.0], [18.9, 83.0], [19.0, 84.0], [19.1, 84.0], [19.2, 84.0], [19.3, 84.0], [19.4, 85.0], [19.5, 85.0], [19.6, 85.0], [19.7, 86.0], [19.8, 86.0], [19.9, 86.0], [20.0, 87.0], [20.1, 87.0], [20.2, 87.0], [20.3, 87.0], [20.4, 88.0], [20.5, 88.0], [20.6, 88.0], [20.7, 89.0], [20.8, 89.0], [20.9, 89.0], [21.0, 89.0], [21.1, 89.0], [21.2, 90.0], [21.3, 90.0], [21.4, 90.0], [21.5, 90.0], [21.6, 90.0], [21.7, 91.0], [21.8, 91.0], [21.9, 91.0], [22.0, 92.0], [22.1, 92.0], [22.2, 92.0], [22.3, 92.0], [22.4, 93.0], [22.5, 93.0], [22.6, 93.0], [22.7, 94.0], [22.8, 94.0], [22.9, 94.0], [23.0, 94.0], [23.1, 95.0], [23.2, 95.0], [23.3, 95.0], [23.4, 95.0], [23.5, 95.0], [23.6, 96.0], [23.7, 96.0], [23.8, 96.0], [23.9, 96.0], [24.0, 96.0], [24.1, 97.0], [24.2, 97.0], [24.3, 97.0], [24.4, 97.0], [24.5, 98.0], [24.6, 98.0], [24.7, 98.0], [24.8, 98.0], [24.9, 99.0], [25.0, 99.0], [25.1, 100.0], [25.2, 100.0], [25.3, 100.0], [25.4, 101.0], [25.5, 101.0], [25.6, 101.0], [25.7, 102.0], [25.8, 102.0], [25.9, 102.0], [26.0, 102.0], [26.1, 103.0], [26.2, 103.0], [26.3, 103.0], [26.4, 104.0], [26.5, 104.0], [26.6, 104.0], [26.7, 104.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 106.0], [27.3, 106.0], [27.4, 106.0], [27.5, 106.0], [27.6, 107.0], [27.7, 107.0], [27.8, 107.0], [27.9, 107.0], [28.0, 108.0], [28.1, 108.0], [28.2, 108.0], [28.3, 108.0], [28.4, 108.0], [28.5, 108.0], [28.6, 109.0], [28.7, 109.0], [28.8, 109.0], [28.9, 110.0], [29.0, 110.0], [29.1, 110.0], [29.2, 111.0], [29.3, 111.0], [29.4, 111.0], [29.5, 111.0], [29.6, 112.0], [29.7, 112.0], [29.8, 112.0], [29.9, 113.0], [30.0, 113.0], [30.1, 113.0], [30.2, 113.0], [30.3, 113.0], [30.4, 114.0], [30.5, 114.0], [30.6, 114.0], [30.7, 115.0], [30.8, 115.0], [30.9, 115.0], [31.0, 116.0], [31.1, 116.0], [31.2, 116.0], [31.3, 116.0], [31.4, 117.0], [31.5, 117.0], [31.6, 117.0], [31.7, 118.0], [31.8, 118.0], [31.9, 118.0], [32.0, 118.0], [32.1, 119.0], [32.2, 119.0], [32.3, 119.0], [32.4, 120.0], [32.5, 120.0], [32.6, 120.0], [32.7, 120.0], [32.8, 120.0], [32.9, 121.0], [33.0, 121.0], [33.1, 121.0], [33.2, 122.0], [33.3, 122.0], [33.4, 122.0], [33.5, 123.0], [33.6, 123.0], [33.7, 123.0], [33.8, 124.0], [33.9, 124.0], [34.0, 124.0], [34.1, 124.0], [34.2, 125.0], [34.3, 125.0], [34.4, 125.0], [34.5, 125.0], [34.6, 126.0], [34.7, 126.0], [34.8, 127.0], [34.9, 127.0], [35.0, 127.0], [35.1, 128.0], [35.2, 128.0], [35.3, 128.0], [35.4, 128.0], [35.5, 129.0], [35.6, 129.0], [35.7, 129.0], [35.8, 130.0], [35.9, 130.0], [36.0, 130.0], [36.1, 131.0], [36.2, 131.0], [36.3, 131.0], [36.4, 132.0], [36.5, 132.0], [36.6, 132.0], [36.7, 132.0], [36.8, 132.0], [36.9, 132.0], [37.0, 133.0], [37.1, 133.0], [37.2, 133.0], [37.3, 133.0], [37.4, 134.0], [37.5, 134.0], [37.6, 134.0], [37.7, 135.0], [37.8, 135.0], [37.9, 135.0], [38.0, 136.0], [38.1, 136.0], [38.2, 136.0], [38.3, 137.0], [38.4, 137.0], [38.5, 137.0], [38.6, 138.0], [38.7, 138.0], [38.8, 138.0], [38.9, 139.0], [39.0, 139.0], [39.1, 139.0], [39.2, 139.0], [39.3, 140.0], [39.4, 140.0], [39.5, 140.0], [39.6, 140.0], [39.7, 141.0], [39.8, 141.0], [39.9, 141.0], [40.0, 141.0], [40.1, 141.0], [40.2, 142.0], [40.3, 142.0], [40.4, 142.0], [40.5, 142.0], [40.6, 143.0], [40.7, 143.0], [40.8, 143.0], [40.9, 143.0], [41.0, 144.0], [41.1, 144.0], [41.2, 144.0], [41.3, 144.0], [41.4, 145.0], [41.5, 145.0], [41.6, 145.0], [41.7, 145.0], [41.8, 145.0], [41.9, 146.0], [42.0, 146.0], [42.1, 146.0], [42.2, 147.0], [42.3, 147.0], [42.4, 147.0], [42.5, 147.0], [42.6, 148.0], [42.7, 148.0], [42.8, 148.0], [42.9, 148.0], [43.0, 148.0], [43.1, 149.0], [43.2, 149.0], [43.3, 149.0], [43.4, 149.0], [43.5, 149.0], [43.6, 150.0], [43.7, 150.0], [43.8, 150.0], [43.9, 150.0], [44.0, 150.0], [44.1, 151.0], [44.2, 151.0], [44.3, 151.0], [44.4, 152.0], [44.5, 152.0], [44.6, 152.0], [44.7, 153.0], [44.8, 153.0], [44.9, 153.0], [45.0, 153.0], [45.1, 153.0], [45.2, 154.0], [45.3, 154.0], [45.4, 154.0], [45.5, 155.0], [45.6, 155.0], [45.7, 155.0], [45.8, 156.0], [45.9, 156.0], [46.0, 157.0], [46.1, 157.0], [46.2, 157.0], [46.3, 158.0], [46.4, 158.0], [46.5, 158.0], [46.6, 159.0], [46.7, 159.0], [46.8, 159.0], [46.9, 159.0], [47.0, 160.0], [47.1, 160.0], [47.2, 161.0], [47.3, 161.0], [47.4, 161.0], [47.5, 162.0], [47.6, 162.0], [47.7, 162.0], [47.8, 163.0], [47.9, 163.0], [48.0, 163.0], [48.1, 164.0], [48.2, 164.0], [48.3, 165.0], [48.4, 165.0], [48.5, 165.0], [48.6, 165.0], [48.7, 166.0], [48.8, 166.0], [48.9, 166.0], [49.0, 167.0], [49.1, 167.0], [49.2, 167.0], [49.3, 167.0], [49.4, 168.0], [49.5, 168.0], [49.6, 168.0], [49.7, 169.0], [49.8, 169.0], [49.9, 169.0], [50.0, 170.0], [50.1, 170.0], [50.2, 171.0], [50.3, 171.0], [50.4, 171.0], [50.5, 171.0], [50.6, 172.0], [50.7, 172.0], [50.8, 172.0], [50.9, 173.0], [51.0, 173.0], [51.1, 173.0], [51.2, 174.0], [51.3, 174.0], [51.4, 175.0], [51.5, 175.0], [51.6, 175.0], [51.7, 176.0], [51.8, 176.0], [51.9, 176.0], [52.0, 176.0], [52.1, 176.0], [52.2, 176.0], [52.3, 177.0], [52.4, 177.0], [52.5, 177.0], [52.6, 178.0], [52.7, 178.0], [52.8, 178.0], [52.9, 179.0], [53.0, 179.0], [53.1, 179.0], [53.2, 180.0], [53.3, 180.0], [53.4, 181.0], [53.5, 181.0], [53.6, 182.0], [53.7, 182.0], [53.8, 182.0], [53.9, 183.0], [54.0, 183.0], [54.1, 184.0], [54.2, 184.0], [54.3, 184.0], [54.4, 184.0], [54.5, 185.0], [54.6, 185.0], [54.7, 185.0], [54.8, 186.0], [54.9, 186.0], [55.0, 187.0], [55.1, 187.0], [55.2, 187.0], [55.3, 188.0], [55.4, 188.0], [55.5, 188.0], [55.6, 189.0], [55.7, 189.0], [55.8, 190.0], [55.9, 190.0], [56.0, 191.0], [56.1, 191.0], [56.2, 191.0], [56.3, 192.0], [56.4, 192.0], [56.5, 192.0], [56.6, 193.0], [56.7, 193.0], [56.8, 194.0], [56.9, 195.0], [57.0, 195.0], [57.1, 195.0], [57.2, 196.0], [57.3, 196.0], [57.4, 197.0], [57.5, 197.0], [57.6, 198.0], [57.7, 198.0], [57.8, 198.0], [57.9, 199.0], [58.0, 199.0], [58.1, 199.0], [58.2, 200.0], [58.3, 200.0], [58.4, 200.0], [58.5, 201.0], [58.6, 201.0], [58.7, 202.0], [58.8, 203.0], [58.9, 203.0], [59.0, 204.0], [59.1, 204.0], [59.2, 204.0], [59.3, 205.0], [59.4, 205.0], [59.5, 206.0], [59.6, 206.0], [59.7, 207.0], [59.8, 207.0], [59.9, 207.0], [60.0, 208.0], [60.1, 208.0], [60.2, 208.0], [60.3, 208.0], [60.4, 209.0], [60.5, 209.0], [60.6, 210.0], [60.7, 210.0], [60.8, 211.0], [60.9, 211.0], [61.0, 212.0], [61.1, 212.0], [61.2, 212.0], [61.3, 213.0], [61.4, 213.0], [61.5, 214.0], [61.6, 214.0], [61.7, 215.0], [61.8, 215.0], [61.9, 215.0], [62.0, 216.0], [62.1, 216.0], [62.2, 216.0], [62.3, 216.0], [62.4, 217.0], [62.5, 217.0], [62.6, 218.0], [62.7, 218.0], [62.8, 219.0], [62.9, 219.0], [63.0, 219.0], [63.1, 219.0], [63.2, 220.0], [63.3, 220.0], [63.4, 220.0], [63.5, 221.0], [63.6, 221.0], [63.7, 222.0], [63.8, 222.0], [63.9, 222.0], [64.0, 223.0], [64.1, 223.0], [64.2, 223.0], [64.3, 224.0], [64.4, 224.0], [64.5, 224.0], [64.6, 224.0], [64.7, 225.0], [64.8, 225.0], [64.9, 225.0], [65.0, 226.0], [65.1, 226.0], [65.2, 227.0], [65.3, 228.0], [65.4, 228.0], [65.5, 228.0], [65.6, 229.0], [65.7, 229.0], [65.8, 229.0], [65.9, 230.0], [66.0, 230.0], [66.1, 230.0], [66.2, 231.0], [66.3, 231.0], [66.4, 231.0], [66.5, 232.0], [66.6, 232.0], [66.7, 232.0], [66.8, 233.0], [66.9, 233.0], [67.0, 234.0], [67.1, 235.0], [67.2, 235.0], [67.3, 235.0], [67.4, 236.0], [67.5, 236.0], [67.6, 236.0], [67.7, 236.0], [67.8, 237.0], [67.9, 237.0], [68.0, 237.0], [68.1, 238.0], [68.2, 239.0], [68.3, 239.0], [68.4, 240.0], [68.5, 240.0], [68.6, 240.0], [68.7, 241.0], [68.8, 241.0], [68.9, 242.0], [69.0, 242.0], [69.1, 243.0], [69.2, 243.0], [69.3, 243.0], [69.4, 244.0], [69.5, 244.0], [69.6, 245.0], [69.7, 245.0], [69.8, 246.0], [69.9, 246.0], [70.0, 247.0], [70.1, 248.0], [70.2, 249.0], [70.3, 250.0], [70.4, 250.0], [70.5, 251.0], [70.6, 251.0], [70.7, 252.0], [70.8, 252.0], [70.9, 252.0], [71.0, 253.0], [71.1, 254.0], [71.2, 254.0], [71.3, 255.0], [71.4, 255.0], [71.5, 256.0], [71.6, 257.0], [71.7, 257.0], [71.8, 258.0], [71.9, 259.0], [72.0, 259.0], [72.1, 259.0], [72.2, 260.0], [72.3, 260.0], [72.4, 260.0], [72.5, 261.0], [72.6, 261.0], [72.7, 262.0], [72.8, 262.0], [72.9, 263.0], [73.0, 264.0], [73.1, 265.0], [73.2, 266.0], [73.3, 266.0], [73.4, 267.0], [73.5, 268.0], [73.6, 268.0], [73.7, 268.0], [73.8, 269.0], [73.9, 270.0], [74.0, 270.0], [74.1, 271.0], [74.2, 272.0], [74.3, 273.0], [74.4, 274.0], [74.5, 275.0], [74.6, 275.0], [74.7, 276.0], [74.8, 276.0], [74.9, 277.0], [75.0, 278.0], [75.1, 279.0], [75.2, 280.0], [75.3, 281.0], [75.4, 281.0], [75.5, 282.0], [75.6, 283.0], [75.7, 283.0], [75.8, 284.0], [75.9, 284.0], [76.0, 286.0], [76.1, 287.0], [76.2, 288.0], [76.3, 288.0], [76.4, 289.0], [76.5, 291.0], [76.6, 291.0], [76.7, 292.0], [76.8, 293.0], [76.9, 294.0], [77.0, 294.0], [77.1, 296.0], [77.2, 297.0], [77.3, 297.0], [77.4, 298.0], [77.5, 299.0], [77.6, 299.0], [77.7, 300.0], [77.8, 300.0], [77.9, 301.0], [78.0, 302.0], [78.1, 303.0], [78.2, 304.0], [78.3, 305.0], [78.4, 306.0], [78.5, 307.0], [78.6, 308.0], [78.7, 309.0], [78.8, 309.0], [78.9, 310.0], [79.0, 310.0], [79.1, 311.0], [79.2, 312.0], [79.3, 313.0], [79.4, 314.0], [79.5, 315.0], [79.6, 316.0], [79.7, 317.0], [79.8, 319.0], [79.9, 320.0], [80.0, 321.0], [80.1, 321.0], [80.2, 322.0], [80.3, 323.0], [80.4, 324.0], [80.5, 324.0], [80.6, 325.0], [80.7, 327.0], [80.8, 328.0], [80.9, 329.0], [81.0, 329.0], [81.1, 330.0], [81.2, 331.0], [81.3, 331.0], [81.4, 331.0], [81.5, 332.0], [81.6, 333.0], [81.7, 333.0], [81.8, 334.0], [81.9, 334.0], [82.0, 335.0], [82.1, 336.0], [82.2, 337.0], [82.3, 338.0], [82.4, 338.0], [82.5, 339.0], [82.6, 339.0], [82.7, 340.0], [82.8, 341.0], [82.9, 343.0], [83.0, 344.0], [83.1, 345.0], [83.2, 345.0], [83.3, 346.0], [83.4, 346.0], [83.5, 347.0], [83.6, 347.0], [83.7, 348.0], [83.8, 348.0], [83.9, 349.0], [84.0, 349.0], [84.1, 350.0], [84.2, 351.0], [84.3, 352.0], [84.4, 353.0], [84.5, 354.0], [84.6, 354.0], [84.7, 355.0], [84.8, 356.0], [84.9, 356.0], [85.0, 357.0], [85.1, 357.0], [85.2, 358.0], [85.3, 359.0], [85.4, 360.0], [85.5, 361.0], [85.6, 361.0], [85.7, 362.0], [85.8, 363.0], [85.9, 363.0], [86.0, 364.0], [86.1, 365.0], [86.2, 365.0], [86.3, 366.0], [86.4, 366.0], [86.5, 368.0], [86.6, 368.0], [86.7, 368.0], [86.8, 369.0], [86.9, 369.0], [87.0, 370.0], [87.1, 371.0], [87.2, 371.0], [87.3, 372.0], [87.4, 372.0], [87.5, 373.0], [87.6, 374.0], [87.7, 374.0], [87.8, 375.0], [87.9, 376.0], [88.0, 377.0], [88.1, 378.0], [88.2, 379.0], [88.3, 379.0], [88.4, 380.0], [88.5, 381.0], [88.6, 382.0], [88.7, 383.0], [88.8, 384.0], [88.9, 384.0], [89.0, 385.0], [89.1, 387.0], [89.2, 388.0], [89.3, 389.0], [89.4, 390.0], [89.5, 391.0], [89.6, 393.0], [89.7, 394.0], [89.8, 395.0], [89.9, 396.0], [90.0, 397.0], [90.1, 398.0], [90.2, 399.0], [90.3, 401.0], [90.4, 402.0], [90.5, 405.0], [90.6, 406.0], [90.7, 408.0], [90.8, 410.0], [90.9, 410.0], [91.0, 412.0], [91.1, 414.0], [91.2, 415.0], [91.3, 417.0], [91.4, 419.0], [91.5, 422.0], [91.6, 424.0], [91.7, 429.0], [91.8, 432.0], [91.9, 436.0], [92.0, 439.0], [92.1, 442.0], [92.2, 446.0], [92.3, 453.0], [92.4, 459.0], [92.5, 467.0], [92.6, 475.0], [92.7, 484.0], [92.8, 506.0], [92.9, 517.0], [93.0, 555.0], [93.1, 578.0], [93.2, 690.0], [93.3, 759.0], [93.4, 850.0], [93.5, 909.0], [93.6, 972.0], [93.7, 1064.0], [93.8, 1134.0], [93.9, 1169.0], [94.0, 1184.0], [94.1, 1204.0], [94.2, 1246.0], [94.3, 1302.0], [94.4, 1326.0], [94.5, 1387.0], [94.6, 1471.0], [94.7, 1536.0], [94.8, 1570.0], [94.9, 1661.0], [95.0, 1718.0], [95.1, 1775.0], [95.2, 1804.0], [95.3, 1871.0], [95.4, 1939.0], [95.5, 1959.0], [95.6, 1984.0], [95.7, 2011.0], [95.8, 2029.0], [95.9, 2062.0], [96.0, 2083.0], [96.1, 2091.0], [96.2, 2102.0], [96.3, 2116.0], [96.4, 2120.0], [96.5, 2127.0], [96.6, 2133.0], [96.7, 2140.0], [96.8, 2153.0], [96.9, 2163.0], [97.0, 2177.0], [97.1, 2182.0], [97.2, 2192.0], [97.3, 2198.0], [97.4, 2207.0], [97.5, 2214.0], [97.6, 2224.0], [97.7, 2233.0], [97.8, 2235.0], [97.9, 2241.0], [98.0, 2245.0], [98.1, 2255.0], [98.2, 2258.0], [98.3, 2261.0], [98.4, 2268.0], [98.5, 2273.0], [98.6, 2276.0], [98.7, 2280.0], [98.8, 2283.0], [98.9, 2287.0], [99.0, 2293.0], [99.1, 2302.0], [99.2, 2310.0], [99.3, 2326.0], [99.4, 2346.0], [99.5, 2362.0], [99.6, 2407.0], [99.7, 2487.0], [99.8, 2552.0], [99.9, 2688.0], [100.0, 3045.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3307.0, "series": [{"data": [[0.0, 2507.0], [600.0, 7.0], [700.0, 13.0], [800.0, 14.0], [900.0, 17.0], [1000.0, 11.0], [1100.0, 31.0], [1200.0, 22.0], [1300.0, 22.0], [1400.0, 11.0], [1500.0, 22.0], [100.0, 3307.0], [1600.0, 12.0], [1700.0, 22.0], [1800.0, 12.0], [1900.0, 35.0], [2000.0, 51.0], [2100.0, 115.0], [2200.0, 174.0], [2300.0, 53.0], [2400.0, 13.0], [2500.0, 11.0], [2600.0, 9.0], [2700.0, 6.0], [2800.0, 2.0], [3000.0, 1.0], [200.0, 1950.0], [300.0, 1260.0], [400.0, 254.0], [500.0, 36.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 183.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9279.0, "series": [{"data": [[0.0, 9279.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 183.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 538.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 571.9709999999991, "minX": 1.66956702E12, "maxY": 571.9709999999991, "series": [{"data": [[1.66956702E12, 571.9709999999991]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 2077.0, "series": [{"data": [[4.0, 2.0], [5.0, 5.0], [7.0, 7.0], [9.0, 18.8], [10.0, 51.0], [11.0, 43.0], [12.0, 50.0], [13.0, 45.33333333333333], [14.0, 49.0], [15.0, 47.0], [16.0, 48.0], [17.0, 51.5], [18.0, 48.0], [20.0, 48.0], [21.0, 50.0], [22.0, 46.0], [23.0, 41.0], [24.0, 41.0], [27.0, 49.666666666666664], [28.0, 53.0], [29.0, 45.0], [30.0, 45.5], [31.0, 38.0], [33.0, 38.0], [34.0, 34.0], [37.0, 33.0], [36.0, 33.666666666666664], [39.0, 33.0], [41.0, 37.0], [40.0, 29.0], [43.0, 37.0], [45.0, 30.5], [44.0, 35.0], [47.0, 35.785714285714285], [46.0, 46.22222222222223], [49.0, 36.285714285714285], [48.0, 34.18181818181819], [51.0, 43.0], [50.0, 41.0], [53.0, 83.29629629629628], [52.0, 29.333333333333332], [55.0, 8.0], [54.0, 97.53846153846153], [57.0, 9.0], [56.0, 8.0], [59.0, 66.0], [58.0, 112.22222222222223], [61.0, 132.7], [60.0, 83.66666666666667], [63.0, 139.0], [62.0, 139.0], [67.0, 6.166666666666667], [65.0, 8.0], [71.0, 4.0], [70.0, 8.0], [69.0, 5.0], [68.0, 9.0], [74.0, 11.0], [73.0, 7.333333333333333], [72.0, 6.5], [83.0, 124.0], [82.0, 122.0], [80.0, 46.333333333333336], [85.0, 77.95454545454544], [87.0, 71.04545454545455], [86.0, 163.33333333333334], [84.0, 116.0], [90.0, 54.0], [89.0, 11.0], [88.0, 125.83333333333333], [91.0, 145.2], [92.0, 78.66666666666667], [93.0, 89.0], [95.0, 90.0], [96.0, 58.15384615384615], [97.0, 14.5], [98.0, 68.77777777777777], [99.0, 157.0714285714286], [100.0, 73.0], [104.0, 57.47368421052633], [105.0, 47.550000000000004], [107.0, 54.0], [108.0, 55.57142857142857], [109.0, 69.31249999999999], [110.0, 61.5], [111.0, 135.24999999999997], [115.0, 153.5], [114.0, 105.0], [113.0, 104.0], [112.0, 145.0], [118.0, 213.0], [117.0, 114.42857142857142], [116.0, 117.25], [123.0, 158.5], [122.0, 158.6], [121.0, 84.0], [120.0, 171.5], [126.0, 152.0], [124.0, 86.0], [128.0, 111.0], [129.0, 116.60000000000001], [130.0, 86.5], [135.0, 119.0], [134.0, 120.0], [133.0, 104.33333333333334], [132.0, 149.5], [131.0, 83.5], [136.0, 101.89473684210526], [137.0, 119.0], [138.0, 125.25], [141.0, 106.23076923076921], [142.0, 92.14285714285715], [143.0, 98.0], [140.0, 170.5], [147.0, 110.30434782608695], [149.0, 196.0], [150.0, 134.5], [148.0, 130.08333333333334], [146.0, 21.0], [144.0, 26.0], [153.0, 103.41666666666667], [158.0, 80.33333333333333], [157.0, 143.0], [155.0, 26.333333333333336], [161.0, 118.06666666666666], [162.0, 121.14285714285715], [163.0, 103.92000000000002], [164.0, 127.42857142857143], [166.0, 113.83333333333334], [165.0, 132.0], [168.0, 88.69999999999999], [169.0, 108.57142857142857], [174.0, 110.31249999999999], [178.0, 138.95000000000002], [179.0, 167.5], [181.0, 119.0], [183.0, 4.0], [185.0, 99.44444444444444], [188.0, 98.625], [190.0, 91.23076923076923], [191.0, 84.33333333333334], [189.0, 129.83333333333334], [187.0, 6.0], [199.0, 152.5], [197.0, 112.57142857142857], [196.0, 136.66666666666666], [195.0, 68.5], [194.0, 124.0], [198.0, 140.0], [192.0, 124.0], [193.0, 5.0], [200.0, 108.11111111111111], [201.0, 89.0], [202.0, 126.4], [205.0, 144.00000000000003], [204.0, 149.0], [203.0, 100.66666666666667], [210.0, 148.0], [212.0, 123.0], [214.0, 49.8], [215.0, 79.66666666666667], [216.0, 73.42857142857143], [217.0, 74.0], [218.0, 123.25000000000001], [220.0, 128.71428571428572], [222.0, 152.57142857142858], [223.0, 138.16666666666666], [219.0, 109.33333333333333], [221.0, 113.0], [224.0, 153.75], [225.0, 141.66666666666666], [226.0, 167.8], [227.0, 209.0], [228.0, 130.14285714285714], [231.0, 141.33333333333334], [230.0, 102.33333333333333], [229.0, 125.7], [233.0, 136.9], [234.0, 191.5], [236.0, 147.66666666666666], [237.0, 155.12500000000003], [239.0, 139.25], [238.0, 162.23529411764707], [235.0, 201.28571428571428], [232.0, 85.0], [243.0, 4.7142857142857135], [242.0, 5.0], [255.0, 141.33333333333334], [254.0, 84.14285714285714], [253.0, 18.0], [252.0, 18.0], [251.0, 17.0], [259.0, 155.0], [257.0, 118.0], [256.0, 174.85714285714283], [258.0, 148.5], [260.0, 153.9090909090909], [261.0, 32.0], [262.0, 194.0], [264.0, 54.666666666666664], [270.0, 161.45454545454547], [271.0, 18.5], [265.0, 183.6], [266.0, 207.0], [286.0, 155.0], [272.0, 95.0], [277.0, 155.25], [276.0, 42.0], [287.0, 137.5], [284.0, 140.2619047619048], [275.0, 42.0], [273.0, 23.75], [283.0, 104.53333333333336], [282.0, 161.24999999999997], [281.0, 82.85000000000001], [279.0, 24.0], [301.0, 155.8095238095238], [298.0, 89.07407407407406], [299.0, 127.81818181818181], [303.0, 167.73684210526312], [300.0, 142.88888888888889], [289.0, 26.0], [288.0, 90.80000000000001], [297.0, 105.09375000000001], [296.0, 164.0], [295.0, 140.05882352941174], [294.0, 77.0], [293.0, 119.375], [292.0, 26.444444444444446], [317.0, 95.5], [312.0, 159.66666666666666], [305.0, 203.75], [304.0, 271.8], [307.0, 107.0], [306.0, 192.11111111111111], [313.0, 212.15384615384616], [319.0, 164.875], [318.0, 188.4], [315.0, 155.54545454545456], [314.0, 8.0], [311.0, 131.14285714285714], [310.0, 106.0], [333.0, 226.76923076923077], [323.0, 146.1818181818182], [326.0, 196.28571428571428], [325.0, 150.36363636363635], [324.0, 115.0], [327.0, 147.75], [320.0, 224.0], [322.0, 253.5], [321.0, 273.5833333333333], [328.0, 195.5], [331.0, 157.16666666666666], [332.0, 212.22222222222223], [335.0, 90.5], [334.0, 248.29999999999998], [330.0, 203.4375], [329.0, 188.33333333333331], [343.0, 198.29999999999998], [340.0, 147.85714285714286], [341.0, 201.2777777777778], [346.0, 225.83333333333334], [350.0, 152.44444444444443], [351.0, 208.85714285714283], [344.0, 27.0], [342.0, 175.33333333333334], [339.0, 114.0], [338.0, 117.33333333333333], [336.0, 70.6], [366.0, 51.333333333333336], [352.0, 216.27272727272725], [358.0, 191.77777777777777], [357.0, 224.1], [364.0, 43.0], [355.0, 200.25], [354.0, 181.66666666666666], [353.0, 134.0], [363.0, 185.63636363636365], [362.0, 173.45454545454547], [361.0, 93.5], [360.0, 164.25], [359.0, 14.333333333333334], [382.0, 144.5], [368.0, 187.61904761904762], [371.0, 210.1818181818182], [376.0, 206.5], [378.0, 242.33333333333331], [381.0, 186.78571428571428], [383.0, 198.57142857142856], [380.0, 95.5], [369.0, 173.0], [384.0, 244.36363636363635], [385.0, 230.0], [387.0, 178.0], [386.0, 86.5], [389.0, 269.5333333333333], [388.0, 259.57142857142856], [390.0, 238.3461538461538], [395.0, 224.16666666666666], [399.0, 226.7], [393.0, 257.70000000000005], [392.0, 140.33333333333334], [391.0, 213.5], [413.0, 195.0], [405.0, 225.0], [415.0, 235.0], [414.0, 206.31249999999997], [412.0, 48.0], [410.0, 213.16666666666666], [409.0, 229.6], [408.0, 98.0], [407.0, 158.578947368421], [406.0, 147.0], [429.0, 248.44444444444443], [425.0, 225.22222222222223], [418.0, 261.5454545454545], [423.0, 237.8], [417.0, 136.9090909090909], [416.0, 38.0], [422.0, 519.0], [421.0, 32.0], [420.0, 270.0], [427.0, 245.22222222222223], [431.0, 134.0], [430.0, 172.6764705882353], [428.0, 198.4], [419.0, 257.5], [426.0, 198.875], [424.0, 134.47540983606552], [447.0, 170.94594594594597], [435.0, 242.41176470588235], [432.0, 226.1891891891892], [434.0, 201.16666666666663], [433.0, 139.08333333333334], [439.0, 198.0], [438.0, 201.95833333333334], [436.0, 209.07142857142856], [441.0, 226.0], [440.0, 171.64705882352942], [446.0, 159.76923076923077], [445.0, 247.0], [444.0, 142.29729729729726], [443.0, 182.60606060606065], [442.0, 207.85714285714283], [463.0, 322.40740740740745], [451.0, 174.8484848484848], [450.0, 267.0], [449.0, 119.80645161290322], [448.0, 48.84615384615385], [459.0, 277.48648648648646], [462.0, 317.6666666666667], [461.0, 251.07142857142856], [458.0, 225.0], [457.0, 186.5909090909091], [456.0, 153.0], [455.0, 205.66666666666663], [454.0, 143.64705882352945], [453.0, 528.2068965517241], [452.0, 177.4], [478.0, 409.16666666666663], [467.0, 234.56410256410263], [471.0, 320.79999999999995], [464.0, 279.064935064935], [466.0, 204.21428571428578], [465.0, 762.6000000000001], [470.0, 284.6363636363636], [469.0, 365.26530612244903], [468.0, 494.9090909090909], [472.0, 227.8048780487805], [474.0, 530.9166666666666], [473.0, 296.23529411764713], [479.0, 297.96], [477.0, 155.7], [476.0, 207.96774193548387], [475.0, 250.2], [495.0, 111.42857142857143], [483.0, 170.16666666666669], [487.0, 383.6666666666667], [480.0, 218.16101694915253], [482.0, 298.68181818181813], [481.0, 271.1], [486.0, 474.6097560975609], [485.0, 61.0], [484.0, 63.333333333333336], [488.0, 267.0625], [489.0, 247.7], [491.0, 138.0], [490.0, 67.87499999999999], [492.0, 393.6666666666667], [494.0, 114.0], [493.0, 176.79999999999998], [508.0, 378.61538461538464], [499.0, 236.60606060606054], [498.0, 134.72727272727275], [497.0, 147.33333333333334], [496.0, 146.64705882352942], [503.0, 253.0], [502.0, 322.8727272727272], [500.0, 244.26666666666668], [501.0, 290.4], [509.0, 229.85000000000002], [511.0, 193.7], [505.0, 139.02083333333334], [504.0, 253.30882352941177], [510.0, 193.13636363636363], [507.0, 216.47058823529414], [506.0, 268.8717948717948], [538.0, 199.95833333333334], [517.0, 229.25714285714287], [527.0, 154.93333333333334], [512.0, 150.66666666666669], [514.0, 603.2], [513.0, 168.0], [536.0, 52.0], [519.0, 120.25], [518.0, 169.0], [522.0, 268.3142857142858], [520.0, 118.0], [525.0, 325.18367346938766], [524.0, 180.58823529411765], [526.0, 361.99999999999994], [532.0, 159.83333333333334], [531.0, 1152.0], [530.0, 1051.142857142857], [529.0, 537.7391304347826], [528.0, 183.33333333333334], [535.0, 446.4], [533.0, 99.0], [543.0, 1031.9512195121956], [542.0, 802.3508771929819], [541.0, 614.0], [540.0, 78.33333333333333], [539.0, 598.0], [568.0, 449.75000000000006], [572.0, 328.84999999999997], [544.0, 703.076923076923], [551.0, 1203.2727272727273], [550.0, 1437.1578947368423], [549.0, 780.8823529411764], [548.0, 1250.0], [547.0, 111.6], [546.0, 1345.888888888889], [545.0, 1496.2307692307693], [569.0, 1135.5], [571.0, 1180.75], [570.0, 122.66666666666667], [552.0, 1108.3999999999999], [553.0, 1060.864864864865], [556.0, 256.0], [555.0, 1115.8148148148148], [554.0, 196.66666666666666], [557.0, 185.66666666666669], [559.0, 1320.3823529411761], [558.0, 1192.3333333333335], [560.0, 1422.5], [564.0, 502.00000000000006], [562.0, 1406.8333333333333], [561.0, 1079.0357142857142], [565.0, 1401.923076923077], [567.0, 994.2222222222224], [566.0, 1657.2647058823532], [575.0, 394.55555555555554], [580.0, 102.86956521739131], [588.0, 319.0], [585.0, 240.69230769230776], [586.0, 817.5384615384617], [587.0, 278.40000000000003], [589.0, 318.0], [590.0, 422.375], [591.0, 350.0], [577.0, 758.9411764705883], [576.0, 323.50000000000006], [579.0, 83.40000000000002], [578.0, 137.77777777777777], [581.0, 214.0], [600.0, 78.75], [583.0, 460.7142857142858], [601.0, 531.4166666666666], [606.0, 349.8387096774194], [605.0, 41.666666666666664], [604.0, 667.0], [603.0, 100.15384615384615], [607.0, 549.4166666666666], [593.0, 174.88888888888889], [594.0, 276.4117647058824], [595.0, 67.0], [596.0, 155.6], [599.0, 114.0], [598.0, 412.3333333333333], [597.0, 137.125], [633.0, 94.11111111111111], [638.0, 433.8333333333333], [621.0, 303.547169811321], [620.0, 40.0], [619.0, 229.1818181818182], [618.0, 445.0], [617.0, 53.0], [616.0, 44.0], [622.0, 40.0], [632.0, 50.25], [615.0, 129.83333333333334], [614.0, 100.33333333333333], [613.0, 782.3333333333334], [612.0, 99.75], [611.0, 783.6666666666667], [610.0, 222.625], [609.0, 34.0], [608.0, 367.9411764705882], [623.0, 75.83333333333334], [624.0, 194.33333333333334], [625.0, 316.5], [628.0, 115.46666666666665], [631.0, 782.4444444444445], [629.0, 289.09090909090907], [639.0, 114.71428571428572], [636.0, 106.63636363636365], [635.0, 87.33333333333333], [634.0, 109.75], [665.0, 257.1666666666667], [642.0, 183.08333333333334], [643.0, 174.5], [645.0, 70.85714285714285], [644.0, 72.0], [647.0, 73.5], [646.0, 106.75], [648.0, 333.44444444444446], [649.0, 423.0], [652.0, 762.5], [651.0, 270.2307692307692], [654.0, 711.25], [655.0, 99.75], [641.0, 2077.0], [657.0, 278.2857142857143], [656.0, 138.0], [659.0, 191.5], [658.0, 549.4285714285713], [661.0, 52.0], [660.0, 456.66666666666663], [663.0, 299.5416666666667], [662.0, 74.66666666666666], [671.0, 99.0], [670.0, 100.0], [669.0, 52.0], [668.0, 98.7727272727273], [667.0, 104.33333333333333], [666.0, 165.23076923076923], [701.0, 98.2], [686.0, 172.28571428571428], [679.0, 237.33333333333331], [681.0, 324.0], [680.0, 114.28571428571429], [682.0, 360.5], [683.0, 344.16666666666663], [684.0, 118.0], [687.0, 346.0], [673.0, 522.75], [672.0, 474.2083333333335], [678.0, 17.0], [677.0, 55.5], [688.0, 345.22222222222223], [689.0, 44.99999999999999], [691.0, 220.0], [690.0, 487.4166666666668], [693.0, 86.6], [692.0, 79.0], [695.0, 102.0], [694.0, 89.0], [698.0, 233.44444444444446], [696.0, 109.0], [700.0, 103.28571428571429], [699.0, 106.16666666666667], [702.0, 158.5], [703.0, 159.0], [728.0, 352.0], [704.0, 304.55555555555554], [705.0, 351.0], [706.0, 92.33333333333333], [708.0, 109.87499999999999], [707.0, 111.4], [712.0, 348.0], [713.0, 208.50000000000003], [724.0, 208.0], [725.0, 358.3333333333333], [727.0, 356.25], [726.0, 246.6], [735.0, 126.61538461538463], [734.0, 164.5], [733.0, 78.0], [763.0, 346.7333333333333], [738.0, 363.2249999999999], [742.0, 325.99999999999994], [740.0, 163.14814814814815], [739.0, 150.25], [761.0, 403.7083333333333], [743.0, 148.0], [751.0, 223.44444444444446], [737.0, 129.375], [750.0, 290.25000000000006], [749.0, 1067.0], [748.0, 1462.7142857142858], [747.0, 136.66666666666666], [746.0, 299.57142857142856], [745.0, 640.0666666666667], [744.0, 80.0], [758.0, 483.1666666666666], [759.0, 284.4], [767.0, 247.33333333333334], [753.0, 107.44444444444444], [752.0, 156.33333333333334], [755.0, 171.875], [754.0, 129.0], [757.0, 318.8181818181818], [756.0, 143.63636363636365], [766.0, 175.2592592592593], [765.0, 760.5833333333333], [764.0, 724.0], [792.0, 218.4], [768.0, 235.13333333333335], [770.0, 307.375], [769.0, 109.2], [772.0, 500.1666666666667], [771.0, 270.8], [775.0, 172.3684210526316], [773.0, 179.0], [781.0, 285.0], [780.0, 572.9230769230769], [779.0, 162.75], [778.0, 309.0], [777.0, 151.0], [776.0, 215.0], [782.0, 386.75], [786.0, 305.59999999999997], [784.0, 258.8], [788.0, 166.33333333333334], [787.0, 140.5], [790.0, 339.0], [789.0, 764.0], [793.0, 346.4444444444444], [794.0, 228.4], [796.0, 288.1111111111111], [795.0, 321.88], [799.0, 167.3571428571429], [798.0, 231.5], [797.0, 211.38461538461536], [828.0, 63.0], [804.0, 560.0], [805.0, 374.0], [807.0, 36.0], [806.0, 350.52941176470586], [812.0, 200.8095238095238], [811.0, 94.0], [809.0, 271.375], [808.0, 35.6], [815.0, 203.0], [803.0, 14.625], [800.0, 343.0], [813.0, 100.0], [817.0, 238.13513513513513], [823.0, 311.0344827586207], [821.0, 414.4545454545455], [820.0, 399.17647058823536], [819.0, 148.0], [818.0, 74.33333333333333], [830.0, 242.8], [831.0, 408.8260869565218], [816.0, 31.727272727272734], [829.0, 259.25000000000006], [827.0, 144.0], [825.0, 238.60000000000002], [858.0, 184.66666666666666], [862.0, 148.0], [845.0, 202.1818181818182], [844.0, 146.0], [843.0, 170.25], [842.0, 110.0], [841.0, 265.57142857142856], [846.0, 252.5], [852.0, 339.5882352941176], [853.0, 390.0], [855.0, 464.7857142857143], [854.0, 194.9], [863.0, 233.93333333333337], [848.0, 168.83333333333334], [851.0, 426.1428571428571], [850.0, 297.578947368421], [861.0, 586.5263157894736], [860.0, 286.8], [859.0, 172.4], [857.0, 219.0], [856.0, 459.14285714285717], [847.0, 177.5], [833.0, 279.83333333333337], [832.0, 252.0], [839.0, 115.5], [837.0, 152.0], [893.0, 279.45454545454544], [864.0, 387.0714285714285], [865.0, 359.0], [866.0, 75.0], [868.0, 66.61538461538458], [867.0, 64.53846153846153], [870.0, 140.75675675675674], [869.0, 88.6], [888.0, 305.9523809523809], [871.0, 225.0], [890.0, 200.54545454545456], [889.0, 229.2], [878.0, 439.19999999999993], [877.0, 184.2941176470588], [876.0, 161.0], [875.0, 184.5], [874.0, 229.5], [873.0, 197.5], [872.0, 227.10526315789474], [879.0, 160.2], [880.0, 319.44444444444434], [881.0, 172.5], [883.0, 251.0], [882.0, 309.6046511627906], [885.0, 164.04000000000002], [884.0, 146.6129032258065], [887.0, 399.0909090909091], [886.0, 47.66666666666666], [895.0, 568.5384615384614], [894.0, 282.0], [892.0, 380.1818181818182], [891.0, 303.68292682926835], [922.0, 304.13333333333327], [902.0, 276.32394366197195], [903.0, 344.44444444444446], [921.0, 195.76744186046508], [920.0, 208.1333333333333], [906.0, 387.91666666666663], [905.0, 138.33333333333334], [904.0, 102.0], [907.0, 221.71428571428572], [910.0, 319.235294117647], [909.0, 260.64814814814804], [908.0, 200.35714285714286], [911.0, 369.7037037037037], [896.0, 249.2142857142857], [898.0, 274.33333333333337], [897.0, 267.95454545454544], [901.0, 277.94444444444446], [900.0, 85.66666666666667], [913.0, 294.8275862068966], [916.0, 354.0], [915.0, 388.0], [917.0, 294.91666666666663], [919.0, 160.92592592592592], [918.0, 257.0], [927.0, 201.45454545454547], [912.0, 229.59375000000003], [925.0, 249.0], [923.0, 302.7727272727272], [954.0, 433.42857142857144], [935.0, 370.16666666666663], [943.0, 438.5], [928.0, 184.6], [930.0, 198.57142857142856], [929.0, 207.25], [932.0, 534.0], [931.0, 436.45161290322596], [934.0, 210.5], [933.0, 209.71428571428572], [942.0, 350.28571428571445], [940.0, 102.29411764705883], [939.0, 329.1904761904761], [938.0, 383.32142857142856], [937.0, 211.0], [936.0, 263.8571428571428], [944.0, 290.00000000000006], [950.0, 356.8181818181818], [948.0, 305.7], [947.0, 510.3846153846153], [946.0, 449.6111111111111], [945.0, 357.3157894736842], [951.0, 296.8888888888889], [953.0, 467.42857142857144], [952.0, 362.25000000000006], [955.0, 384.57142857142856], [956.0, 509.0], [957.0, 420.0], [959.0, 415.49999999999994], [986.0, 438.2571428571428], [961.0, 502.1666666666667], [960.0, 338.0], [962.0, 420.5], [975.0, 347.0], [974.0, 574.0], [973.0, 417.1538461538462], [972.0, 498.73076923076917], [971.0, 684.3333333333334], [970.0, 618.0769230769231], [968.0, 430.79999999999995], [963.0, 446.72727272727275], [978.0, 495.5714285714286], [977.0, 367.6666666666667], [976.0, 482.50000000000006], [981.0, 363.83333333333337], [979.0, 367.5], [983.0, 341.6086956521738], [982.0, 356.28571428571433], [985.0, 408.56250000000006], [984.0, 433.4347826086956], [966.0, 461.0], [965.0, 446.0], [964.0, 467.6666666666667], [991.0, 400.4], [990.0, 376.7241379310344], [989.0, 456.91463414634177], [988.0, 441.2352941176471], [987.0, 580.0909090909091], [995.0, 417.7199999999999], [996.0, 439.5], [994.0, 415.8125], [993.0, 424.54545454545456], [992.0, 494.33333333333337], [1.0, 1.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[571.9707000000013, 299.6611]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 996.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956702E12, "maxY": 64666.666666666664, "series": [{"data": [[1.66956702E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956702E12, 64666.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 299.6611, "minX": 1.66956702E12, "maxY": 299.6611, "series": [{"data": [[1.66956702E12, 299.6611]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 299.4008999999988, "minX": 1.66956702E12, "maxY": 299.4008999999988, "series": [{"data": [[1.66956702E12, 299.4008999999988]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9971999999999996, "minX": 1.66956702E12, "maxY": 0.9971999999999996, "series": [{"data": [[1.66956702E12, 0.9971999999999996]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.66956702E12, "maxY": 3045.0, "series": [{"data": [[1.66956702E12, 3045.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956702E12, 397.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956702E12, 2293.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956702E12, 1727.499999999989]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956702E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956702E12, 170.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 96.0, "minX": 536.0, "maxY": 319.0, "series": [{"data": [[536.0, 96.0], [2470.0, 139.0], [2710.0, 173.0], [1584.0, 298.0], [1775.0, 129.0], [925.0, 319.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2710.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 96.0, "minX": 536.0, "maxY": 319.0, "series": [{"data": [[536.0, 96.0], [2470.0, 139.0], [2710.0, 173.0], [1584.0, 298.0], [1775.0, 129.0], [925.0, 319.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2710.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

