/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 6750.0, "series": [{"data": [[0.0, 5.0], [0.1, 12.0], [0.2, 17.0], [0.3, 20.0], [0.4, 21.0], [0.5, 22.0], [0.6, 24.0], [0.7, 25.0], [0.8, 26.0], [0.9, 28.0], [1.0, 30.0], [1.1, 31.0], [1.2, 33.0], [1.3, 35.0], [1.4, 36.0], [1.5, 38.0], [1.6, 39.0], [1.7, 40.0], [1.8, 44.0], [1.9, 45.0], [2.0, 47.0], [2.1, 49.0], [2.2, 53.0], [2.3, 56.0], [2.4, 62.0], [2.5, 66.0], [2.6, 67.0], [2.7, 70.0], [2.8, 73.0], [2.9, 75.0], [3.0, 77.0], [3.1, 79.0], [3.2, 81.0], [3.3, 87.0], [3.4, 90.0], [3.5, 94.0], [3.6, 98.0], [3.7, 104.0], [3.8, 105.0], [3.9, 112.0], [4.0, 119.0], [4.1, 121.0], [4.2, 127.0], [4.3, 131.0], [4.4, 135.0], [4.5, 136.0], [4.6, 141.0], [4.7, 143.0], [4.8, 146.0], [4.9, 149.0], [5.0, 151.0], [5.1, 152.0], [5.2, 153.0], [5.3, 154.0], [5.4, 155.0], [5.5, 156.0], [5.6, 158.0], [5.7, 159.0], [5.8, 160.0], [5.9, 160.0], [6.0, 161.0], [6.1, 163.0], [6.2, 165.0], [6.3, 166.0], [6.4, 167.0], [6.5, 168.0], [6.6, 169.0], [6.7, 171.0], [6.8, 173.0], [6.9, 174.0], [7.0, 175.0], [7.1, 175.0], [7.2, 176.0], [7.3, 177.0], [7.4, 179.0], [7.5, 181.0], [7.6, 182.0], [7.7, 183.0], [7.8, 183.0], [7.9, 184.0], [8.0, 186.0], [8.1, 187.0], [8.2, 188.0], [8.3, 189.0], [8.4, 189.0], [8.5, 190.0], [8.6, 191.0], [8.7, 192.0], [8.8, 193.0], [8.9, 193.0], [9.0, 194.0], [9.1, 196.0], [9.2, 196.0], [9.3, 197.0], [9.4, 197.0], [9.5, 198.0], [9.6, 199.0], [9.7, 199.0], [9.8, 200.0], [9.9, 201.0], [10.0, 201.0], [10.1, 202.0], [10.2, 203.0], [10.3, 203.0], [10.4, 204.0], [10.5, 204.0], [10.6, 205.0], [10.7, 206.0], [10.8, 207.0], [10.9, 207.0], [11.0, 208.0], [11.1, 208.0], [11.2, 209.0], [11.3, 210.0], [11.4, 211.0], [11.5, 211.0], [11.6, 212.0], [11.7, 212.0], [11.8, 213.0], [11.9, 213.0], [12.0, 213.0], [12.1, 214.0], [12.2, 214.0], [12.3, 215.0], [12.4, 215.0], [12.5, 216.0], [12.6, 216.0], [12.7, 217.0], [12.8, 217.0], [12.9, 218.0], [13.0, 219.0], [13.1, 219.0], [13.2, 220.0], [13.3, 220.0], [13.4, 220.0], [13.5, 221.0], [13.6, 221.0], [13.7, 222.0], [13.8, 222.0], [13.9, 223.0], [14.0, 223.0], [14.1, 224.0], [14.2, 224.0], [14.3, 225.0], [14.4, 225.0], [14.5, 226.0], [14.6, 227.0], [14.7, 227.0], [14.8, 228.0], [14.9, 228.0], [15.0, 228.0], [15.1, 229.0], [15.2, 229.0], [15.3, 229.0], [15.4, 230.0], [15.5, 230.0], [15.6, 231.0], [15.7, 232.0], [15.8, 233.0], [15.9, 233.0], [16.0, 233.0], [16.1, 234.0], [16.2, 234.0], [16.3, 235.0], [16.4, 235.0], [16.5, 235.0], [16.6, 236.0], [16.7, 236.0], [16.8, 236.0], [16.9, 236.0], [17.0, 236.0], [17.1, 237.0], [17.2, 237.0], [17.3, 238.0], [17.4, 238.0], [17.5, 239.0], [17.6, 239.0], [17.7, 240.0], [17.8, 240.0], [17.9, 241.0], [18.0, 241.0], [18.1, 242.0], [18.2, 243.0], [18.3, 243.0], [18.4, 243.0], [18.5, 243.0], [18.6, 244.0], [18.7, 244.0], [18.8, 244.0], [18.9, 244.0], [19.0, 245.0], [19.1, 245.0], [19.2, 245.0], [19.3, 246.0], [19.4, 246.0], [19.5, 246.0], [19.6, 247.0], [19.7, 247.0], [19.8, 248.0], [19.9, 249.0], [20.0, 249.0], [20.1, 249.0], [20.2, 250.0], [20.3, 250.0], [20.4, 250.0], [20.5, 251.0], [20.6, 251.0], [20.7, 251.0], [20.8, 252.0], [20.9, 252.0], [21.0, 252.0], [21.1, 252.0], [21.2, 253.0], [21.3, 253.0], [21.4, 253.0], [21.5, 254.0], [21.6, 255.0], [21.7, 255.0], [21.8, 256.0], [21.9, 256.0], [22.0, 256.0], [22.1, 257.0], [22.2, 257.0], [22.3, 258.0], [22.4, 258.0], [22.5, 259.0], [22.6, 259.0], [22.7, 259.0], [22.8, 260.0], [22.9, 260.0], [23.0, 260.0], [23.1, 260.0], [23.2, 260.0], [23.3, 260.0], [23.4, 261.0], [23.5, 261.0], [23.6, 261.0], [23.7, 262.0], [23.8, 262.0], [23.9, 262.0], [24.0, 263.0], [24.1, 263.0], [24.2, 263.0], [24.3, 264.0], [24.4, 264.0], [24.5, 265.0], [24.6, 265.0], [24.7, 266.0], [24.8, 266.0], [24.9, 267.0], [25.0, 267.0], [25.1, 267.0], [25.2, 268.0], [25.3, 268.0], [25.4, 268.0], [25.5, 268.0], [25.6, 268.0], [25.7, 269.0], [25.8, 269.0], [25.9, 269.0], [26.0, 269.0], [26.1, 270.0], [26.2, 271.0], [26.3, 271.0], [26.4, 272.0], [26.5, 272.0], [26.6, 273.0], [26.7, 273.0], [26.8, 273.0], [26.9, 274.0], [27.0, 274.0], [27.1, 274.0], [27.2, 275.0], [27.3, 275.0], [27.4, 275.0], [27.5, 276.0], [27.6, 276.0], [27.7, 276.0], [27.8, 276.0], [27.9, 277.0], [28.0, 277.0], [28.1, 278.0], [28.2, 278.0], [28.3, 279.0], [28.4, 279.0], [28.5, 279.0], [28.6, 280.0], [28.7, 280.0], [28.8, 281.0], [28.9, 281.0], [29.0, 282.0], [29.1, 282.0], [29.2, 282.0], [29.3, 283.0], [29.4, 283.0], [29.5, 283.0], [29.6, 283.0], [29.7, 284.0], [29.8, 284.0], [29.9, 284.0], [30.0, 285.0], [30.1, 286.0], [30.2, 287.0], [30.3, 287.0], [30.4, 288.0], [30.5, 288.0], [30.6, 289.0], [30.7, 289.0], [30.8, 290.0], [30.9, 290.0], [31.0, 291.0], [31.1, 292.0], [31.2, 292.0], [31.3, 292.0], [31.4, 293.0], [31.5, 293.0], [31.6, 293.0], [31.7, 294.0], [31.8, 295.0], [31.9, 295.0], [32.0, 296.0], [32.1, 296.0], [32.2, 297.0], [32.3, 297.0], [32.4, 298.0], [32.5, 298.0], [32.6, 299.0], [32.7, 299.0], [32.8, 300.0], [32.9, 300.0], [33.0, 300.0], [33.1, 301.0], [33.2, 302.0], [33.3, 303.0], [33.4, 303.0], [33.5, 304.0], [33.6, 304.0], [33.7, 304.0], [33.8, 305.0], [33.9, 305.0], [34.0, 306.0], [34.1, 307.0], [34.2, 307.0], [34.3, 308.0], [34.4, 308.0], [34.5, 309.0], [34.6, 310.0], [34.7, 310.0], [34.8, 311.0], [34.9, 311.0], [35.0, 312.0], [35.1, 312.0], [35.2, 313.0], [35.3, 313.0], [35.4, 314.0], [35.5, 314.0], [35.6, 315.0], [35.7, 315.0], [35.8, 315.0], [35.9, 316.0], [36.0, 316.0], [36.1, 317.0], [36.2, 319.0], [36.3, 319.0], [36.4, 319.0], [36.5, 320.0], [36.6, 320.0], [36.7, 321.0], [36.8, 321.0], [36.9, 322.0], [37.0, 322.0], [37.1, 323.0], [37.2, 323.0], [37.3, 324.0], [37.4, 324.0], [37.5, 325.0], [37.6, 326.0], [37.7, 327.0], [37.8, 328.0], [37.9, 328.0], [38.0, 328.0], [38.1, 329.0], [38.2, 329.0], [38.3, 330.0], [38.4, 330.0], [38.5, 331.0], [38.6, 332.0], [38.7, 332.0], [38.8, 333.0], [38.9, 334.0], [39.0, 335.0], [39.1, 336.0], [39.2, 337.0], [39.3, 337.0], [39.4, 338.0], [39.5, 339.0], [39.6, 340.0], [39.7, 341.0], [39.8, 342.0], [39.9, 343.0], [40.0, 343.0], [40.1, 344.0], [40.2, 345.0], [40.3, 346.0], [40.4, 346.0], [40.5, 347.0], [40.6, 348.0], [40.7, 350.0], [40.8, 351.0], [40.9, 351.0], [41.0, 352.0], [41.1, 353.0], [41.2, 354.0], [41.3, 355.0], [41.4, 356.0], [41.5, 357.0], [41.6, 359.0], [41.7, 360.0], [41.8, 360.0], [41.9, 361.0], [42.0, 362.0], [42.1, 363.0], [42.2, 364.0], [42.3, 365.0], [42.4, 365.0], [42.5, 366.0], [42.6, 367.0], [42.7, 368.0], [42.8, 369.0], [42.9, 369.0], [43.0, 370.0], [43.1, 370.0], [43.2, 371.0], [43.3, 371.0], [43.4, 372.0], [43.5, 372.0], [43.6, 374.0], [43.7, 375.0], [43.8, 376.0], [43.9, 376.0], [44.0, 377.0], [44.1, 378.0], [44.2, 379.0], [44.3, 379.0], [44.4, 380.0], [44.5, 381.0], [44.6, 382.0], [44.7, 383.0], [44.8, 384.0], [44.9, 384.0], [45.0, 385.0], [45.1, 386.0], [45.2, 388.0], [45.3, 388.0], [45.4, 389.0], [45.5, 389.0], [45.6, 390.0], [45.7, 391.0], [45.8, 392.0], [45.9, 392.0], [46.0, 393.0], [46.1, 394.0], [46.2, 395.0], [46.3, 396.0], [46.4, 397.0], [46.5, 397.0], [46.6, 398.0], [46.7, 399.0], [46.8, 400.0], [46.9, 401.0], [47.0, 402.0], [47.1, 403.0], [47.2, 404.0], [47.3, 405.0], [47.4, 406.0], [47.5, 407.0], [47.6, 408.0], [47.7, 408.0], [47.8, 410.0], [47.9, 410.0], [48.0, 411.0], [48.1, 412.0], [48.2, 413.0], [48.3, 414.0], [48.4, 415.0], [48.5, 415.0], [48.6, 416.0], [48.7, 417.0], [48.8, 417.0], [48.9, 418.0], [49.0, 419.0], [49.1, 419.0], [49.2, 420.0], [49.3, 421.0], [49.4, 422.0], [49.5, 422.0], [49.6, 423.0], [49.7, 424.0], [49.8, 424.0], [49.9, 425.0], [50.0, 426.0], [50.1, 427.0], [50.2, 427.0], [50.3, 428.0], [50.4, 429.0], [50.5, 429.0], [50.6, 430.0], [50.7, 430.0], [50.8, 431.0], [50.9, 432.0], [51.0, 432.0], [51.1, 433.0], [51.2, 434.0], [51.3, 434.0], [51.4, 435.0], [51.5, 436.0], [51.6, 437.0], [51.7, 438.0], [51.8, 438.0], [51.9, 439.0], [52.0, 439.0], [52.1, 440.0], [52.2, 440.0], [52.3, 441.0], [52.4, 442.0], [52.5, 443.0], [52.6, 443.0], [52.7, 444.0], [52.8, 444.0], [52.9, 445.0], [53.0, 446.0], [53.1, 446.0], [53.2, 447.0], [53.3, 448.0], [53.4, 448.0], [53.5, 449.0], [53.6, 449.0], [53.7, 450.0], [53.8, 450.0], [53.9, 451.0], [54.0, 452.0], [54.1, 452.0], [54.2, 453.0], [54.3, 454.0], [54.4, 454.0], [54.5, 455.0], [54.6, 456.0], [54.7, 456.0], [54.8, 457.0], [54.9, 458.0], [55.0, 459.0], [55.1, 459.0], [55.2, 460.0], [55.3, 460.0], [55.4, 461.0], [55.5, 461.0], [55.6, 462.0], [55.7, 463.0], [55.8, 463.0], [55.9, 464.0], [56.0, 465.0], [56.1, 465.0], [56.2, 466.0], [56.3, 467.0], [56.4, 468.0], [56.5, 469.0], [56.6, 470.0], [56.7, 470.0], [56.8, 471.0], [56.9, 471.0], [57.0, 472.0], [57.1, 473.0], [57.2, 474.0], [57.3, 475.0], [57.4, 476.0], [57.5, 476.0], [57.6, 477.0], [57.7, 477.0], [57.8, 478.0], [57.9, 478.0], [58.0, 479.0], [58.1, 479.0], [58.2, 480.0], [58.3, 480.0], [58.4, 481.0], [58.5, 481.0], [58.6, 482.0], [58.7, 482.0], [58.8, 483.0], [58.9, 484.0], [59.0, 484.0], [59.1, 485.0], [59.2, 486.0], [59.3, 487.0], [59.4, 487.0], [59.5, 488.0], [59.6, 488.0], [59.7, 489.0], [59.8, 489.0], [59.9, 490.0], [60.0, 490.0], [60.1, 491.0], [60.2, 491.0], [60.3, 491.0], [60.4, 492.0], [60.5, 492.0], [60.6, 493.0], [60.7, 493.0], [60.8, 494.0], [60.9, 495.0], [61.0, 496.0], [61.1, 497.0], [61.2, 498.0], [61.3, 498.0], [61.4, 499.0], [61.5, 499.0], [61.6, 500.0], [61.7, 500.0], [61.8, 501.0], [61.9, 501.0], [62.0, 501.0], [62.1, 502.0], [62.2, 502.0], [62.3, 503.0], [62.4, 503.0], [62.5, 504.0], [62.6, 504.0], [62.7, 504.0], [62.8, 505.0], [62.9, 505.0], [63.0, 506.0], [63.1, 506.0], [63.2, 506.0], [63.3, 507.0], [63.4, 508.0], [63.5, 508.0], [63.6, 508.0], [63.7, 509.0], [63.8, 509.0], [63.9, 510.0], [64.0, 510.0], [64.1, 511.0], [64.2, 512.0], [64.3, 512.0], [64.4, 512.0], [64.5, 513.0], [64.6, 513.0], [64.7, 514.0], [64.8, 514.0], [64.9, 515.0], [65.0, 515.0], [65.1, 516.0], [65.2, 516.0], [65.3, 516.0], [65.4, 517.0], [65.5, 517.0], [65.6, 517.0], [65.7, 518.0], [65.8, 518.0], [65.9, 519.0], [66.0, 520.0], [66.1, 520.0], [66.2, 520.0], [66.3, 521.0], [66.4, 522.0], [66.5, 522.0], [66.6, 523.0], [66.7, 523.0], [66.8, 524.0], [66.9, 524.0], [67.0, 524.0], [67.1, 525.0], [67.2, 525.0], [67.3, 526.0], [67.4, 526.0], [67.5, 527.0], [67.6, 527.0], [67.7, 527.0], [67.8, 528.0], [67.9, 528.0], [68.0, 529.0], [68.1, 529.0], [68.2, 529.0], [68.3, 530.0], [68.4, 531.0], [68.5, 531.0], [68.6, 532.0], [68.7, 532.0], [68.8, 532.0], [68.9, 533.0], [69.0, 533.0], [69.1, 534.0], [69.2, 534.0], [69.3, 535.0], [69.4, 535.0], [69.5, 535.0], [69.6, 536.0], [69.7, 536.0], [69.8, 537.0], [69.9, 537.0], [70.0, 537.0], [70.1, 538.0], [70.2, 538.0], [70.3, 539.0], [70.4, 539.0], [70.5, 539.0], [70.6, 540.0], [70.7, 540.0], [70.8, 541.0], [70.9, 541.0], [71.0, 542.0], [71.1, 542.0], [71.2, 542.0], [71.3, 543.0], [71.4, 543.0], [71.5, 544.0], [71.6, 544.0], [71.7, 544.0], [71.8, 545.0], [71.9, 545.0], [72.0, 545.0], [72.1, 546.0], [72.2, 546.0], [72.3, 546.0], [72.4, 547.0], [72.5, 547.0], [72.6, 547.0], [72.7, 548.0], [72.8, 548.0], [72.9, 548.0], [73.0, 549.0], [73.1, 549.0], [73.2, 549.0], [73.3, 550.0], [73.4, 550.0], [73.5, 550.0], [73.6, 551.0], [73.7, 551.0], [73.8, 551.0], [73.9, 552.0], [74.0, 552.0], [74.1, 552.0], [74.2, 552.0], [74.3, 553.0], [74.4, 553.0], [74.5, 554.0], [74.6, 554.0], [74.7, 554.0], [74.8, 555.0], [74.9, 555.0], [75.0, 555.0], [75.1, 556.0], [75.2, 556.0], [75.3, 556.0], [75.4, 557.0], [75.5, 557.0], [75.6, 557.0], [75.7, 557.0], [75.8, 558.0], [75.9, 558.0], [76.0, 558.0], [76.1, 559.0], [76.2, 559.0], [76.3, 560.0], [76.4, 560.0], [76.5, 560.0], [76.6, 561.0], [76.7, 561.0], [76.8, 562.0], [76.9, 562.0], [77.0, 562.0], [77.1, 563.0], [77.2, 563.0], [77.3, 564.0], [77.4, 564.0], [77.5, 565.0], [77.6, 565.0], [77.7, 565.0], [77.8, 566.0], [77.9, 566.0], [78.0, 567.0], [78.1, 568.0], [78.2, 568.0], [78.3, 569.0], [78.4, 569.0], [78.5, 570.0], [78.6, 571.0], [78.7, 571.0], [78.8, 572.0], [78.9, 572.0], [79.0, 573.0], [79.1, 573.0], [79.2, 574.0], [79.3, 574.0], [79.4, 575.0], [79.5, 575.0], [79.6, 576.0], [79.7, 576.0], [79.8, 577.0], [79.9, 577.0], [80.0, 578.0], [80.1, 578.0], [80.2, 578.0], [80.3, 579.0], [80.4, 579.0], [80.5, 580.0], [80.6, 580.0], [80.7, 581.0], [80.8, 581.0], [80.9, 582.0], [81.0, 583.0], [81.1, 583.0], [81.2, 584.0], [81.3, 584.0], [81.4, 585.0], [81.5, 585.0], [81.6, 586.0], [81.7, 587.0], [81.8, 587.0], [81.9, 587.0], [82.0, 588.0], [82.1, 588.0], [82.2, 589.0], [82.3, 590.0], [82.4, 590.0], [82.5, 592.0], [82.6, 592.0], [82.7, 593.0], [82.8, 593.0], [82.9, 594.0], [83.0, 594.0], [83.1, 594.0], [83.2, 595.0], [83.3, 596.0], [83.4, 596.0], [83.5, 597.0], [83.6, 597.0], [83.7, 599.0], [83.8, 599.0], [83.9, 600.0], [84.0, 600.0], [84.1, 601.0], [84.2, 602.0], [84.3, 602.0], [84.4, 602.0], [84.5, 603.0], [84.6, 603.0], [84.7, 604.0], [84.8, 604.0], [84.9, 605.0], [85.0, 606.0], [85.1, 607.0], [85.2, 607.0], [85.3, 608.0], [85.4, 608.0], [85.5, 609.0], [85.6, 610.0], [85.7, 611.0], [85.8, 611.0], [85.9, 612.0], [86.0, 613.0], [86.1, 613.0], [86.2, 614.0], [86.3, 615.0], [86.4, 615.0], [86.5, 616.0], [86.6, 616.0], [86.7, 617.0], [86.8, 617.0], [86.9, 618.0], [87.0, 619.0], [87.1, 620.0], [87.2, 621.0], [87.3, 622.0], [87.4, 623.0], [87.5, 624.0], [87.6, 624.0], [87.7, 626.0], [87.8, 627.0], [87.9, 627.0], [88.0, 629.0], [88.1, 630.0], [88.2, 631.0], [88.3, 632.0], [88.4, 633.0], [88.5, 634.0], [88.6, 635.0], [88.7, 636.0], [88.8, 637.0], [88.9, 638.0], [89.0, 639.0], [89.1, 640.0], [89.2, 641.0], [89.3, 642.0], [89.4, 643.0], [89.5, 644.0], [89.6, 645.0], [89.7, 646.0], [89.8, 647.0], [89.9, 648.0], [90.0, 648.0], [90.1, 649.0], [90.2, 650.0], [90.3, 652.0], [90.4, 653.0], [90.5, 653.0], [90.6, 655.0], [90.7, 656.0], [90.8, 657.0], [90.9, 657.0], [91.0, 659.0], [91.1, 660.0], [91.2, 661.0], [91.3, 661.0], [91.4, 662.0], [91.5, 664.0], [91.6, 665.0], [91.7, 666.0], [91.8, 667.0], [91.9, 668.0], [92.0, 669.0], [92.1, 670.0], [92.2, 671.0], [92.3, 672.0], [92.4, 673.0], [92.5, 673.0], [92.6, 674.0], [92.7, 676.0], [92.8, 676.0], [92.9, 677.0], [93.0, 679.0], [93.1, 680.0], [93.2, 681.0], [93.3, 682.0], [93.4, 683.0], [93.5, 685.0], [93.6, 687.0], [93.7, 689.0], [93.8, 691.0], [93.9, 693.0], [94.0, 695.0], [94.1, 699.0], [94.2, 704.0], [94.3, 708.0], [94.4, 714.0], [94.5, 717.0], [94.6, 721.0], [94.7, 726.0], [94.8, 736.0], [94.9, 751.0], [95.0, 765.0], [95.1, 801.0], [95.2, 836.0], [95.3, 1012.0], [95.4, 1122.0], [95.5, 1253.0], [95.6, 1361.0], [95.7, 1418.0], [95.8, 1513.0], [95.9, 1643.0], [96.0, 1905.0], [96.1, 2247.0], [96.2, 2444.0], [96.3, 2731.0], [96.4, 2929.0], [96.5, 3084.0], [96.6, 3669.0], [96.7, 3825.0], [96.8, 4093.0], [96.9, 4229.0], [97.0, 4389.0], [97.1, 4500.0], [97.2, 4560.0], [97.3, 4679.0], [97.4, 4750.0], [97.5, 4825.0], [97.6, 4892.0], [97.7, 4960.0], [97.8, 5016.0], [97.9, 5034.0], [98.0, 5043.0], [98.1, 5083.0], [98.2, 5112.0], [98.3, 5138.0], [98.4, 5157.0], [98.5, 5168.0], [98.6, 5182.0], [98.7, 5206.0], [98.8, 5233.0], [98.9, 5314.0], [99.0, 5456.0], [99.1, 5608.0], [99.2, 5700.0], [99.3, 5916.0], [99.4, 6088.0], [99.5, 6239.0], [99.6, 6373.0], [99.7, 6502.0], [99.8, 6540.0], [99.9, 6583.0], [100.0, 6750.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2300.0, "series": [{"data": [[0.0, 363.0], [600.0, 1030.0], [700.0, 95.0], [800.0, 20.0], [900.0, 2.0], [1000.0, 9.0], [1100.0, 6.0], [1200.0, 11.0], [1300.0, 12.0], [1400.0, 12.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 4.0], [1900.0, 7.0], [2000.0, 1.0], [2100.0, 2.0], [2200.0, 2.0], [2300.0, 8.0], [2400.0, 6.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 6.0], [2800.0, 4.0], [2900.0, 4.0], [3000.0, 8.0], [3100.0, 4.0], [3300.0, 2.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 6.0], [3800.0, 5.0], [3900.0, 4.0], [4000.0, 4.0], [4100.0, 6.0], [4200.0, 7.0], [4300.0, 7.0], [4400.0, 8.0], [4500.0, 16.0], [4600.0, 10.0], [4700.0, 14.0], [4800.0, 13.0], [4900.0, 13.0], [5000.0, 39.0], [5100.0, 52.0], [5200.0, 19.0], [5300.0, 9.0], [5400.0, 11.0], [5500.0, 4.0], [5600.0, 10.0], [5700.0, 6.0], [5800.0, 4.0], [5900.0, 2.0], [6000.0, 10.0], [6100.0, 4.0], [6200.0, 10.0], [6300.0, 8.0], [6400.0, 6.0], [6500.0, 25.0], [6600.0, 5.0], [6700.0, 1.0], [100.0, 614.0], [200.0, 2300.0], [300.0, 1399.0], [400.0, 1484.0], [500.0, 2222.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 421.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6179.0, "series": [{"data": [[0.0, 6179.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3400.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 421.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 675.187199999997, "minX": 1.66956252E12, "maxY": 675.187199999997, "series": [{"data": [[1.66956252E12, 675.187199999997]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956252E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 3430.1666666666665, "series": [{"data": [[2.0, 6.0], [3.0, 5.0], [4.0, 53.0], [5.0, 58.5], [6.0, 61.0], [7.0, 65.0], [8.0, 18.5], [9.0, 22.0], [10.0, 25.0], [11.0, 26.0], [12.0, 24.0], [13.0, 35.0], [14.0, 31.0], [15.0, 23.5], [17.0, 33.0], [19.0, 24.0], [20.0, 45.0], [23.0, 26.0], [24.0, 30.0], [25.0, 29.0], [27.0, 40.0], [29.0, 33.75], [30.0, 21.5], [31.0, 15.5], [33.0, 27.75], [37.0, 33.0], [36.0, 35.25], [38.0, 32.666666666666664], [41.0, 18.0], [40.0, 27.6], [42.0, 29.6], [45.0, 43.25], [44.0, 17.0], [47.0, 26.0], [46.0, 8.0], [51.0, 31.857142857142854], [50.0, 30.666666666666668], [52.0, 40.42857142857142], [55.0, 21.0], [54.0, 32.25], [57.0, 71.75], [56.0, 51.85714285714286], [59.0, 75.5], [58.0, 76.66666666666667], [61.0, 59.14285714285714], [60.0, 50.5], [63.0, 68.83333333333334], [67.0, 19.5], [66.0, 46.333333333333336], [65.0, 39.0], [64.0, 36.0], [71.0, 48.0], [70.0, 48.0], [69.0, 54.666666666666664], [68.0, 60.666666666666664], [75.0, 27.0], [74.0, 26.0], [73.0, 37.83333333333333], [72.0, 55.599999999999994], [79.0, 30.8125], [78.0, 26.0], [76.0, 77.0], [83.0, 23.0], [81.0, 43.2], [87.0, 63.5], [86.0, 67.0], [85.0, 67.75], [84.0, 74.0], [91.0, 63.4], [90.0, 41.0], [89.0, 74.46153846153847], [88.0, 75.0], [95.0, 141.5], [94.0, 72.2], [93.0, 103.66666666666667], [92.0, 66.33333333333333], [99.0, 91.23076923076924], [98.0, 74.5], [97.0, 116.0], [96.0, 112.0], [102.0, 83.0], [101.0, 115.85714285714286], [100.0, 119.0], [107.0, 94.0], [106.0, 135.75], [105.0, 69.0], [104.0, 118.14285714285714], [111.0, 98.25], [110.0, 105.14285714285715], [108.0, 102.0], [115.0, 128.66666666666666], [114.0, 130.16666666666669], [113.0, 23.0], [112.0, 185.75], [119.0, 115.5], [117.0, 73.14285714285714], [116.0, 22.0], [123.0, 126.5], [122.0, 123.18181818181817], [121.0, 80.5], [120.0, 133.25], [127.0, 129.0], [125.0, 152.25], [124.0, 131.6190476190476], [135.0, 126.0], [134.0, 123.00000000000001], [133.0, 112.0], [132.0, 213.0], [130.0, 143.33333333333334], [142.0, 177.5], [141.0, 136.42857142857142], [140.0, 163.5], [139.0, 126.0], [137.0, 135.0], [151.0, 201.0], [150.0, 158.75], [149.0, 163.0], [147.0, 160.0], [146.0, 200.0], [145.0, 175.66666666666666], [144.0, 135.25], [158.0, 158.75], [156.0, 202.0], [155.0, 136.6], [154.0, 148.0], [153.0, 168.77777777777777], [152.0, 166.0], [167.0, 199.0], [166.0, 135.0], [165.0, 174.5], [164.0, 171.0], [162.0, 204.25], [160.0, 180.0], [175.0, 220.4], [174.0, 196.2], [173.0, 214.66666666666666], [172.0, 199.45454545454547], [170.0, 176.0], [169.0, 195.33333333333334], [183.0, 213.5], [181.0, 192.4], [180.0, 204.0], [179.0, 182.0], [178.0, 202.5], [177.0, 225.33333333333334], [176.0, 200.2], [191.0, 193.0], [188.0, 193.33333333333334], [187.0, 210.74999999999997], [185.0, 197.75], [184.0, 163.5], [199.0, 220.87500000000003], [198.0, 227.0], [197.0, 219.75], [196.0, 210.15384615384613], [194.0, 213.88888888888889], [193.0, 215.75], [192.0, 199.66666666666666], [207.0, 206.44444444444443], [206.0, 237.0], [204.0, 206.66666666666666], [203.0, 219.5], [201.0, 216.75], [200.0, 232.5], [215.0, 231.53846153846155], [214.0, 222.5], [213.0, 225.625], [212.0, 229.24999999999997], [211.0, 216.33333333333334], [209.0, 222.14285714285714], [208.0, 189.0], [222.0, 246.5], [221.0, 256.0], [220.0, 248.0], [219.0, 246.33333333333334], [218.0, 241.33333333333334], [217.0, 261.6666666666667], [216.0, 229.0], [231.0, 234.66666666666663], [230.0, 238.68750000000003], [229.0, 239.5], [228.0, 246.33333333333334], [227.0, 230.66666666666666], [226.0, 247.1818181818182], [225.0, 260.0], [224.0, 247.16666666666669], [239.0, 240.33333333333334], [238.0, 240.75], [237.0, 236.625], [235.0, 256.0], [234.0, 235.2], [233.0, 235.75], [232.0, 240.66666666666666], [247.0, 268.5652173913043], [246.0, 256.0], [245.0, 257.75], [244.0, 253.2], [243.0, 284.0], [242.0, 247.0], [241.0, 258.19047619047615], [240.0, 249.64285714285714], [255.0, 263.34210526315786], [254.0, 273.77777777777777], [253.0, 282.62500000000006], [252.0, 275.5344827586206], [251.0, 273.2857142857143], [250.0, 277.1428571428571], [249.0, 305.1428571428571], [248.0, 278.3421052631579], [270.0, 284.75], [271.0, 263.5], [268.0, 788.0], [259.0, 287.4545454545455], [258.0, 290.22222222222223], [257.0, 282.5238095238095], [256.0, 1194.2857142857144], [266.0, 1551.8], [265.0, 1361.3333333333333], [264.0, 290.8], [263.0, 269.375], [262.0, 284.0], [261.0, 280.62500000000006], [260.0, 269.0], [285.0, 1823.0833333333333], [286.0, 275.61538461538464], [284.0, 905.0999999999999], [275.0, 1324.3793103448277], [274.0, 3170.230769230769], [273.0, 1188.9999999999998], [272.0, 903.3499999999999], [283.0, 290.5], [282.0, 977.0], [281.0, 1827.25], [280.0, 662.4000000000002], [279.0, 1301.2083333333333], [278.0, 1296.5], [277.0, 871.3999999999999], [276.0, 251.66666666666666], [302.0, 1150.4285714285713], [303.0, 312.0], [301.0, 329.33333333333337], [300.0, 895.8999999999999], [299.0, 226.0], [298.0, 1171.0714285714284], [297.0, 303.33333333333337], [296.0, 1161.5714285714287], [295.0, 632.5833333333334], [289.0, 743.4230769230769], [288.0, 279.0243902439025], [291.0, 952.6666666666666], [290.0, 297.6666666666667], [294.0, 843.8181818181816], [293.0, 306.75], [292.0, 953.7777777777778], [318.0, 614.6842105263158], [319.0, 1759.3125], [317.0, 1289.1666666666665], [307.0, 1833.0000000000002], [306.0, 1643.3076923076924], [305.0, 218.0], [304.0, 308.0], [315.0, 1047.1250000000002], [314.0, 313.8333333333333], [313.0, 293.0], [312.0, 288.85714285714283], [311.0, 302.0], [310.0, 314.99999999999994], [309.0, 302.17021276595744], [308.0, 306.59999999999997], [323.0, 295.25], [333.0, 230.5], [335.0, 580.151515151515], [332.0, 573.8285714285714], [322.0, 291.46153846153845], [321.0, 489.51724137931035], [320.0, 1749.7], [329.0, 454.5762711864406], [328.0, 258.42857142857144], [327.0, 274.5], [326.0, 277.0], [325.0, 275.75], [324.0, 289.5], [350.0, 289.42857142857144], [351.0, 515.0851063829787], [349.0, 288.0833333333333], [348.0, 285.3333333333333], [347.0, 1433.1428571428569], [346.0, 1085.951219512195], [345.0, 783.0909090909092], [344.0, 281.83333333333337], [343.0, 273.5], [337.0, 246.0], [336.0, 255.2], [339.0, 254.0], [338.0, 496.26760563380276], [342.0, 261.0], [341.0, 276.23076923076917], [340.0, 876.1111111111111], [366.0, 1540.25], [367.0, 1272.2], [365.0, 778.0689655172415], [355.0, 799.7249999999999], [354.0, 288.3333333333333], [353.0, 289.99999999999994], [352.0, 295.4], [363.0, 252.4], [362.0, 236.0], [361.0, 994.3571428571428], [360.0, 1409.2222222222222], [359.0, 660.4230769230768], [358.0, 268.8], [357.0, 267.0], [356.0, 270.875], [382.0, 561.0], [381.0, 848.1666666666666], [383.0, 724.4545454545455], [380.0, 269.2], [379.0, 261.09090909090907], [378.0, 713.8636363636364], [377.0, 251.66666666666666], [375.0, 258.7], [369.0, 228.49999999999997], [368.0, 1526.5], [371.0, 221.22580645161293], [370.0, 1022.0769230769231], [374.0, 1004.1489361702129], [373.0, 436.76], [372.0, 231.14285714285714], [398.0, 1335.846153846154], [399.0, 1966.24], [397.0, 2674.5], [396.0, 1698.9], [395.0, 3073.1578947368425], [394.0, 3160.0], [393.0, 3004.75], [392.0, 2309.5833333333335], [391.0, 2105.25], [385.0, 277.7142857142857], [384.0, 261.49999999999994], [387.0, 924.6774193548389], [386.0, 744.1904761904763], [390.0, 1985.3846153846157], [389.0, 741.1818181818182], [388.0, 988.857142857143], [414.0, 162.0], [406.0, 2462.6153846153843], [405.0, 182.5], [404.0, 1269.111111111111], [407.0, 184.75], [401.0, 722.7368421052631], [400.0, 896.2857142857143], [402.0, 1111.035714285714], [415.0, 183.0], [413.0, 165.53333333333333], [412.0, 164.38461538461536], [403.0, 1809.3333333333335], [411.0, 713.0], [410.0, 500.06666666666666], [409.0, 1804.6666666666667], [408.0, 3430.1666666666665], [428.0, 1737.6666666666667], [419.0, 545.7254901960783], [418.0, 837.5714285714284], [417.0, 1415.3478260869567], [416.0, 479.06666666666666], [431.0, 175.4], [430.0, 755.1874999999999], [429.0, 159.0], [427.0, 150.36363636363635], [423.0, 151.5], [422.0, 156.0], [420.0, 172.33333333333334], [446.0, 230.8], [433.0, 295.2857142857143], [439.0, 214.0], [438.0, 651.3870967741938], [437.0, 806.4666666666666], [436.0, 160.4], [434.0, 1587.75], [447.0, 220.27272727272728], [444.0, 225.0], [435.0, 1108.2], [443.0, 658.0909090909091], [442.0, 220.0], [441.0, 887.0], [440.0, 216.66666666666666], [461.0, 661.0], [456.0, 587.3333333333334], [450.0, 642.111111111111], [455.0, 246.74193548387098], [449.0, 1069.090909090909], [448.0, 221.25], [454.0, 319.0], [453.0, 238.0], [452.0, 253.75], [458.0, 523.1], [459.0, 556.8947368421053], [463.0, 279.0], [462.0, 1276.888888888889], [460.0, 1386.75], [451.0, 195.0], [457.0, 255.42857142857144], [465.0, 648.5384615384617], [464.0, 1054.0], [466.0, 1527.3636363636365], [467.0, 1210.3636363636365], [469.0, 447.5000000000001], [468.0, 335.0], [471.0, 513.3333333333334], [470.0, 1030.6956521739132], [472.0, 842.1764705882352], [479.0, 616.6153846153845], [478.0, 530.741935483871], [476.0, 303.09999999999997], [477.0, 263.3636363636364], [473.0, 1050.6470588235295], [474.0, 656.8620689655171], [475.0, 310.75], [482.0, 268.5714285714286], [494.0, 638.5000000000001], [495.0, 386.6666666666667], [487.0, 373.2857142857143], [481.0, 984.3333333333334], [480.0, 1244.388888888889], [488.0, 574.8571428571429], [486.0, 1762.3333333333335], [485.0, 919.769230769231], [484.0, 1327.5], [483.0, 279.375], [509.0, 1718.6666666666665], [498.0, 507.9], [499.0, 564.2857142857143], [508.0, 339.0], [500.0, 446.6], [501.0, 312.0], [502.0, 51.0], [503.0, 485.55555555555554], [497.0, 360.0], [504.0, 573.5], [507.0, 2430.5], [505.0, 1514.857142857143], [511.0, 306.0], [510.0, 277.0], [519.0, 585.5], [527.0, 515.4], [526.0, 546.0], [518.0, 459.0], [517.0, 333.0], [516.0, 384.0], [515.0, 332.0], [514.0, 298.0], [513.0, 335.5], [512.0, 325.25], [532.0, 430.25], [542.0, 332.0], [530.0, 328.0], [541.0, 304.0], [540.0, 282.0], [539.0, 312.5], [538.0, 380.0], [536.0, 244.0], [521.0, 446.0], [520.0, 1142.2], [522.0, 497.25], [525.0, 928.1428571428572], [524.0, 350.0], [533.0, 1484.6363636363635], [535.0, 311.0], [534.0, 1718.6666666666665], [557.0, 368.0], [549.0, 167.0], [548.0, 353.0], [547.0, 336.0], [546.0, 344.6666666666667], [544.0, 343.5], [550.0, 430.3333333333333], [551.0, 579.0], [568.0, 491.0], [569.0, 314.3], [573.0, 1107.0], [572.0, 1350.5], [571.0, 331.6666666666667], [574.0, 223.66666666666669], [575.0, 226.0], [560.0, 378.0], [562.0, 312.0], [561.0, 288.0], [563.0, 363.0], [564.0, 261.8571428571429], [565.0, 262.6666666666667], [566.0, 313.75], [552.0, 416.0], [553.0, 321.2], [555.0, 384.5], [556.0, 524.0], [558.0, 453.5], [559.0, 399.1666666666667], [583.0, 335.8125], [578.0, 626.0], [576.0, 349.3333333333333], [580.0, 435.5], [579.0, 328.0], [581.0, 462.5], [582.0, 400.12499999999994], [592.0, 365.0], [593.0, 415.0], [607.0, 641.0], [604.0, 405.0], [606.0, 587.6666666666666], [600.0, 571.6153846153845], [601.0, 590.6999999999999], [595.0, 423.4], [596.0, 253.0], [597.0, 407.0], [598.0, 820.3333333333334], [599.0, 401.5], [584.0, 550.0], [585.0, 373.2], [590.0, 328.0], [587.0, 384.25], [586.0, 281.0], [591.0, 436.0], [615.0, 409.0], [616.0, 494.4545454545455], [617.0, 578.2105263157894], [622.0, 601.0], [621.0, 370.0], [620.0, 427.0], [618.0, 806.2222222222222], [619.0, 538.0], [623.0, 395.3333333333333], [611.0, 417.8333333333333], [614.0, 1429.25], [613.0, 358.70833333333326], [627.0, 511.0], [639.0, 609.875], [628.0, 531.1428571428571], [629.0, 413.44444444444446], [630.0, 525.8], [633.0, 558.0], [632.0, 384.6666666666667], [634.0, 459.6666666666667], [638.0, 494.1111111111111], [642.0, 451.14285714285717], [647.0, 355.0], [644.0, 476.5], [664.0, 539.1304347826087], [665.0, 584.0], [666.0, 427.58333333333337], [667.0, 541.1666666666666], [668.0, 500.3461538461538], [671.0, 483.50000000000006], [670.0, 466.0], [648.0, 506.5789473684209], [649.0, 634.25], [650.0, 538.75], [652.0, 526.0], [653.0, 504.2], [640.0, 392.8333333333333], [641.0, 410.5], [660.0, 610.8139534883719], [661.0, 552.3333333333334], [662.0, 480.375], [663.0, 475.37499999999994], [675.0, 409.44444444444446], [684.0, 523.0], [681.0, 475.0625], [701.0, 430.0], [700.0, 974.0000000000001], [698.0, 1021.5714285714287], [679.0, 423.6666666666667], [676.0, 451.0], [686.0, 482.0], [673.0, 461.75], [683.0, 392.5], [680.0, 445.0], [733.0, 480.6666666666667], [721.0, 458.0], [720.0, 495.24137931034494], [722.0, 513.7777777777778], [723.0, 452.7], [724.0, 426.75], [725.0, 425.6666666666667], [727.0, 423.5], [726.0, 450.6666666666667], [735.0, 491.0], [734.0, 489.5], [731.0, 497.5], [730.0, 448.0], [719.0, 532.0], [706.0, 439.3333333333333], [704.0, 473.25], [709.0, 444.0], [708.0, 499.0], [711.0, 440.5], [710.0, 550.0], [718.0, 417.0], [717.0, 465.6666666666667], [715.0, 2389.5], [714.0, 1713.3333333333335], [713.0, 1435.5], [712.0, 2421.0], [761.0, 483.0], [736.0, 446.0], [740.0, 455.8333333333333], [737.0, 509.0], [741.0, 1136.0], [760.0, 496.3333333333333], [742.0, 2402.5], [745.0, 431.0], [744.0, 473.0], [746.0, 458.1428571428571], [751.0, 487.29999999999995], [752.0, 508.1111111111111], [753.0, 524.3333333333334], [755.0, 557.0], [754.0, 491.625], [757.0, 476.0], [756.0, 503.6666666666667], [759.0, 524.0], [758.0, 488.3333333333333], [764.0, 487.5652173913044], [763.0, 515.0], [765.0, 460.0], [766.0, 481.0], [795.0, 515.0], [780.0, 1148.2], [776.0, 419.2857142857143], [778.0, 398.0], [779.0, 451.25], [783.0, 593.0], [782.0, 537.25], [792.0, 465.0], [774.0, 554.0], [772.0, 523.5], [773.0, 425.5], [775.0, 490.6666666666667], [793.0, 517.0], [794.0, 501.0], [796.0, 498.7], [797.0, 529.2727272727273], [784.0, 461.4444444444444], [786.0, 531.75], [787.0, 1161.0], [788.0, 538.3333333333334], [789.0, 416.3333333333333], [790.0, 527.1666666666667], [791.0, 329.0], [826.0, 1305.2], [805.0, 423.2608695652174], [804.0, 489.0], [803.0, 524.6666666666666], [802.0, 520.0], [807.0, 589.5], [815.0, 519.6666666666666], [814.0, 845.3636363636364], [813.0, 535.4444444444443], [810.0, 436.5], [808.0, 477.5], [811.0, 446.8823529411765], [829.0, 454.6470588235294], [830.0, 467.5], [831.0, 428.4285714285714], [823.0, 549.2857142857143], [821.0, 512.5], [819.0, 503.6666666666667], [818.0, 544.25], [817.0, 1000.1249999999998], [816.0, 487.0], [828.0, 886.3], [825.0, 506.0], [824.0, 501.5], [837.0, 442.0], [832.0, 334.6666666666667], [833.0, 357.62500000000006], [835.0, 451.7857142857142], [834.0, 577.4285714285714], [836.0, 527.6666666666666], [838.0, 583.75], [839.0, 379.5], [845.0, 347.85714285714283], [843.0, 533.2857142857142], [841.0, 568.5], [840.0, 601.0], [846.0, 496.3333333333333], [847.0, 2378.5], [851.0, 607.85], [852.0, 528.5], [863.0, 566.6666666666666], [850.0, 528.0], [857.0, 485.6], [856.0, 552.25], [858.0, 589.3333333333334], [861.0, 513.6666666666666], [860.0, 577.6666666666666], [862.0, 453.75], [853.0, 475.8571428571429], [855.0, 622.6], [892.0, 534.3333333333334], [879.0, 417.0], [874.0, 433.0], [873.0, 559.3333333333334], [876.0, 1725.6666666666667], [878.0, 572.3333333333334], [877.0, 545.6], [881.0, 1577.1428571428569], [880.0, 607.0], [884.0, 589.0], [883.0, 609.0], [887.0, 2337.0], [886.0, 629.5], [891.0, 544.6], [895.0, 417.0], [893.0, 566.2], [890.0, 612.25], [889.0, 624.3333333333334], [871.0, 443.0], [869.0, 541.8], [868.0, 449.0], [867.0, 542.0], [865.0, 508.6666666666667], [864.0, 538.5], [920.0, 896.125], [896.0, 496.59999999999997], [898.0, 596.0], [899.0, 512.5], [901.0, 476.5], [900.0, 617.6666666666666], [903.0, 595.0], [902.0, 581.0], [907.0, 527.5714285714286], [906.0, 564.5], [905.0, 528.0], [904.0, 623.5], [910.0, 625.6], [909.0, 535.0], [908.0, 657.0], [911.0, 587.0], [926.0, 574.6666666666666], [913.0, 602.25], [912.0, 589.6666666666666], [915.0, 566.8], [914.0, 597.75], [917.0, 593.0], [916.0, 1457.5], [919.0, 2327.0], [918.0, 588.0], [925.0, 581.4], [924.0, 2285.5], [923.0, 597.5], [922.0, 578.6923076923077], [921.0, 1046.857142857143], [956.0, 534.125], [934.0, 511.12499999999994], [935.0, 499.75], [953.0, 518.6], [952.0, 581.0], [936.0, 512.7], [939.0, 587.4838709677418], [937.0, 570.9333333333334], [940.0, 396.0], [942.0, 570.2], [933.0, 601.875], [932.0, 574.0], [928.0, 589.6842105263158], [941.0, 574.8888888888889], [958.0, 498.7777777777777], [959.0, 466.42857142857144], [944.0, 567.0], [947.0, 498.0], [946.0, 627.0], [949.0, 851.8181818181819], [948.0, 569.4], [951.0, 520.0], [950.0, 1287.7777777777778], [957.0, 512.5], [955.0, 550.3333333333334], [954.0, 525.25], [985.0, 494.0], [989.0, 583.7647058823529], [960.0, 452.3333333333333], [974.0, 893.9574468085107], [973.0, 596.0], [972.0, 589.2222222222223], [970.0, 628.5], [969.0, 589.25], [968.0, 611.3333333333334], [975.0, 656.3214285714284], [978.0, 600.4444444444445], [979.0, 957.690476190476], [983.0, 667.4444444444445], [980.0, 689.9285714285713], [984.0, 632.75], [967.0, 541.3333333333334], [966.0, 626.5], [965.0, 559.6666666666666], [964.0, 586.6], [962.0, 515.0], [961.0, 1659.0], [986.0, 623.1428571428571], [991.0, 549.5], [977.0, 641.8888888888888], [976.0, 603.9], [988.0, 680.5645161290323], [987.0, 632.7142857142858], [995.0, 575.8974358974359], [1000.0, 545.8108866442197], [999.0, 575.2881355932203], [998.0, 590.1666666666667], [997.0, 579.5555555555555], [996.0, 590.2857142857142], [994.0, 551.5], [993.0, 614.25], [992.0, 586.7142857142858], [1.0, 12.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[675.1868999999989, 585.4859999999981]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956252E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956252E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956252E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956252E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 585.4859999999981, "minX": 1.66956252E12, "maxY": 585.4859999999981, "series": [{"data": [[1.66956252E12, 585.4859999999981]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956252E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 585.3269999999989, "minX": 1.66956252E12, "maxY": 585.3269999999989, "series": [{"data": [[1.66956252E12, 585.3269999999989]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956252E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9341000000000073, "minX": 1.66956252E12, "maxY": 0.9341000000000073, "series": [{"data": [[1.66956252E12, 0.9341000000000073]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956252E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.66956252E12, "maxY": 6750.0, "series": [{"data": [[1.66956252E12, 6750.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956252E12, 648.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956252E12, 5457.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956252E12, 766.8999999999978]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956252E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956252E12, 426.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956252E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 201.0, "minX": 699.0, "maxY": 587.0, "series": [{"data": [[1054.0, 265.0], [1143.0, 587.0], [1178.0, 435.0], [1159.0, 545.0], [1193.0, 201.0], [1292.0, 470.0], [1315.0, 338.0], [699.0, 558.0], [967.0, 277.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1315.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 201.0, "minX": 699.0, "maxY": 587.0, "series": [{"data": [[1054.0, 264.5], [1143.0, 587.0], [1178.0, 435.0], [1159.0, 545.0], [1193.0, 201.0], [1292.0, 470.0], [1315.0, 338.0], [699.0, 557.0], [967.0, 277.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1315.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956252E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956252E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956252E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956252E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956252E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956252E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956252E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956252E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956252E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956252E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956252E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

