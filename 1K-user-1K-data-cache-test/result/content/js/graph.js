/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4701.0, "series": [{"data": [[0.0, 1.0], [0.1, 11.0], [0.2, 17.0], [0.3, 19.0], [0.4, 22.0], [0.5, 25.0], [0.6, 28.0], [0.7, 31.0], [0.8, 33.0], [0.9, 36.0], [1.0, 40.0], [1.1, 45.0], [1.2, 50.0], [1.3, 52.0], [1.4, 54.0], [1.5, 57.0], [1.6, 59.0], [1.7, 60.0], [1.8, 62.0], [1.9, 64.0], [2.0, 65.0], [2.1, 67.0], [2.2, 68.0], [2.3, 70.0], [2.4, 72.0], [2.5, 73.0], [2.6, 74.0], [2.7, 75.0], [2.8, 76.0], [2.9, 77.0], [3.0, 79.0], [3.1, 80.0], [3.2, 81.0], [3.3, 81.0], [3.4, 83.0], [3.5, 83.0], [3.6, 84.0], [3.7, 85.0], [3.8, 86.0], [3.9, 87.0], [4.0, 87.0], [4.1, 88.0], [4.2, 88.0], [4.3, 89.0], [4.4, 89.0], [4.5, 90.0], [4.6, 91.0], [4.7, 92.0], [4.8, 93.0], [4.9, 93.0], [5.0, 94.0], [5.1, 95.0], [5.2, 95.0], [5.3, 96.0], [5.4, 96.0], [5.5, 97.0], [5.6, 97.0], [5.7, 98.0], [5.8, 99.0], [5.9, 99.0], [6.0, 100.0], [6.1, 100.0], [6.2, 100.0], [6.3, 101.0], [6.4, 101.0], [6.5, 101.0], [6.6, 102.0], [6.7, 102.0], [6.8, 103.0], [6.9, 103.0], [7.0, 103.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 105.0], [7.5, 105.0], [7.6, 105.0], [7.7, 106.0], [7.8, 107.0], [7.9, 107.0], [8.0, 108.0], [8.1, 108.0], [8.2, 108.0], [8.3, 109.0], [8.4, 109.0], [8.5, 110.0], [8.6, 110.0], [8.7, 111.0], [8.8, 111.0], [8.9, 112.0], [9.0, 112.0], [9.1, 112.0], [9.2, 112.0], [9.3, 113.0], [9.4, 113.0], [9.5, 113.0], [9.6, 114.0], [9.7, 115.0], [9.8, 115.0], [9.9, 115.0], [10.0, 116.0], [10.1, 116.0], [10.2, 116.0], [10.3, 117.0], [10.4, 117.0], [10.5, 117.0], [10.6, 118.0], [10.7, 118.0], [10.8, 119.0], [10.9, 119.0], [11.0, 119.0], [11.1, 120.0], [11.2, 120.0], [11.3, 120.0], [11.4, 120.0], [11.5, 120.0], [11.6, 121.0], [11.7, 121.0], [11.8, 122.0], [11.9, 122.0], [12.0, 123.0], [12.1, 123.0], [12.2, 123.0], [12.3, 124.0], [12.4, 124.0], [12.5, 124.0], [12.6, 124.0], [12.7, 124.0], [12.8, 125.0], [12.9, 125.0], [13.0, 126.0], [13.1, 126.0], [13.2, 127.0], [13.3, 127.0], [13.4, 127.0], [13.5, 127.0], [13.6, 128.0], [13.7, 128.0], [13.8, 128.0], [13.9, 128.0], [14.0, 129.0], [14.1, 129.0], [14.2, 130.0], [14.3, 130.0], [14.4, 130.0], [14.5, 131.0], [14.6, 131.0], [14.7, 131.0], [14.8, 131.0], [14.9, 132.0], [15.0, 132.0], [15.1, 132.0], [15.2, 133.0], [15.3, 133.0], [15.4, 134.0], [15.5, 134.0], [15.6, 135.0], [15.7, 135.0], [15.8, 135.0], [15.9, 135.0], [16.0, 136.0], [16.1, 136.0], [16.2, 136.0], [16.3, 136.0], [16.4, 136.0], [16.5, 137.0], [16.6, 137.0], [16.7, 138.0], [16.8, 139.0], [16.9, 139.0], [17.0, 139.0], [17.1, 139.0], [17.2, 139.0], [17.3, 140.0], [17.4, 140.0], [17.5, 140.0], [17.6, 140.0], [17.7, 141.0], [17.8, 141.0], [17.9, 142.0], [18.0, 142.0], [18.1, 143.0], [18.2, 143.0], [18.3, 143.0], [18.4, 143.0], [18.5, 143.0], [18.6, 144.0], [18.7, 144.0], [18.8, 144.0], [18.9, 144.0], [19.0, 145.0], [19.1, 145.0], [19.2, 145.0], [19.3, 145.0], [19.4, 146.0], [19.5, 146.0], [19.6, 147.0], [19.7, 147.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 148.0], [20.2, 149.0], [20.3, 149.0], [20.4, 149.0], [20.5, 150.0], [20.6, 150.0], [20.7, 151.0], [20.8, 151.0], [20.9, 151.0], [21.0, 151.0], [21.1, 151.0], [21.2, 152.0], [21.3, 152.0], [21.4, 152.0], [21.5, 152.0], [21.6, 153.0], [21.7, 153.0], [21.8, 153.0], [21.9, 153.0], [22.0, 154.0], [22.1, 155.0], [22.2, 155.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 157.0], [22.8, 157.0], [22.9, 157.0], [23.0, 157.0], [23.1, 158.0], [23.2, 158.0], [23.3, 158.0], [23.4, 159.0], [23.5, 159.0], [23.6, 159.0], [23.7, 160.0], [23.8, 160.0], [23.9, 160.0], [24.0, 160.0], [24.1, 160.0], [24.2, 160.0], [24.3, 161.0], [24.4, 161.0], [24.5, 161.0], [24.6, 161.0], [24.7, 161.0], [24.8, 162.0], [24.9, 162.0], [25.0, 162.0], [25.1, 163.0], [25.2, 163.0], [25.3, 163.0], [25.4, 163.0], [25.5, 164.0], [25.6, 164.0], [25.7, 164.0], [25.8, 164.0], [25.9, 165.0], [26.0, 165.0], [26.1, 165.0], [26.2, 166.0], [26.3, 166.0], [26.4, 166.0], [26.5, 167.0], [26.6, 167.0], [26.7, 167.0], [26.8, 167.0], [26.9, 168.0], [27.0, 168.0], [27.1, 168.0], [27.2, 168.0], [27.3, 168.0], [27.4, 169.0], [27.5, 169.0], [27.6, 169.0], [27.7, 169.0], [27.8, 170.0], [27.9, 170.0], [28.0, 171.0], [28.1, 171.0], [28.2, 171.0], [28.3, 171.0], [28.4, 172.0], [28.5, 172.0], [28.6, 172.0], [28.7, 173.0], [28.8, 173.0], [28.9, 173.0], [29.0, 174.0], [29.1, 174.0], [29.2, 175.0], [29.3, 175.0], [29.4, 175.0], [29.5, 175.0], [29.6, 176.0], [29.7, 176.0], [29.8, 176.0], [29.9, 176.0], [30.0, 177.0], [30.1, 177.0], [30.2, 178.0], [30.3, 178.0], [30.4, 178.0], [30.5, 179.0], [30.6, 179.0], [30.7, 179.0], [30.8, 179.0], [30.9, 180.0], [31.0, 180.0], [31.1, 180.0], [31.2, 180.0], [31.3, 180.0], [31.4, 181.0], [31.5, 181.0], [31.6, 181.0], [31.7, 182.0], [31.8, 182.0], [31.9, 183.0], [32.0, 183.0], [32.1, 183.0], [32.2, 184.0], [32.3, 184.0], [32.4, 184.0], [32.5, 185.0], [32.6, 185.0], [32.7, 185.0], [32.8, 185.0], [32.9, 186.0], [33.0, 186.0], [33.1, 187.0], [33.2, 187.0], [33.3, 187.0], [33.4, 187.0], [33.5, 187.0], [33.6, 188.0], [33.7, 188.0], [33.8, 188.0], [33.9, 188.0], [34.0, 189.0], [34.1, 189.0], [34.2, 189.0], [34.3, 190.0], [34.4, 190.0], [34.5, 191.0], [34.6, 191.0], [34.7, 191.0], [34.8, 191.0], [34.9, 192.0], [35.0, 192.0], [35.1, 192.0], [35.2, 192.0], [35.3, 192.0], [35.4, 192.0], [35.5, 192.0], [35.6, 192.0], [35.7, 193.0], [35.8, 193.0], [35.9, 193.0], [36.0, 194.0], [36.1, 194.0], [36.2, 195.0], [36.3, 195.0], [36.4, 195.0], [36.5, 196.0], [36.6, 196.0], [36.7, 196.0], [36.8, 196.0], [36.9, 197.0], [37.0, 197.0], [37.1, 197.0], [37.2, 198.0], [37.3, 198.0], [37.4, 198.0], [37.5, 199.0], [37.6, 199.0], [37.7, 199.0], [37.8, 199.0], [37.9, 200.0], [38.0, 200.0], [38.1, 200.0], [38.2, 200.0], [38.3, 200.0], [38.4, 201.0], [38.5, 201.0], [38.6, 201.0], [38.7, 202.0], [38.8, 202.0], [38.9, 202.0], [39.0, 203.0], [39.1, 203.0], [39.2, 203.0], [39.3, 204.0], [39.4, 204.0], [39.5, 205.0], [39.6, 205.0], [39.7, 205.0], [39.8, 206.0], [39.9, 206.0], [40.0, 206.0], [40.1, 207.0], [40.2, 207.0], [40.3, 207.0], [40.4, 208.0], [40.5, 208.0], [40.6, 208.0], [40.7, 208.0], [40.8, 209.0], [40.9, 209.0], [41.0, 209.0], [41.1, 210.0], [41.2, 210.0], [41.3, 211.0], [41.4, 211.0], [41.5, 211.0], [41.6, 212.0], [41.7, 212.0], [41.8, 212.0], [41.9, 212.0], [42.0, 213.0], [42.1, 213.0], [42.2, 214.0], [42.3, 214.0], [42.4, 214.0], [42.5, 215.0], [42.6, 215.0], [42.7, 216.0], [42.8, 216.0], [42.9, 216.0], [43.0, 217.0], [43.1, 217.0], [43.2, 217.0], [43.3, 217.0], [43.4, 218.0], [43.5, 218.0], [43.6, 218.0], [43.7, 219.0], [43.8, 219.0], [43.9, 219.0], [44.0, 219.0], [44.1, 220.0], [44.2, 220.0], [44.3, 221.0], [44.4, 222.0], [44.5, 222.0], [44.6, 223.0], [44.7, 223.0], [44.8, 224.0], [44.9, 224.0], [45.0, 225.0], [45.1, 225.0], [45.2, 226.0], [45.3, 227.0], [45.4, 227.0], [45.5, 228.0], [45.6, 229.0], [45.7, 229.0], [45.8, 230.0], [45.9, 231.0], [46.0, 232.0], [46.1, 232.0], [46.2, 232.0], [46.3, 232.0], [46.4, 233.0], [46.5, 233.0], [46.6, 233.0], [46.7, 234.0], [46.8, 234.0], [46.9, 235.0], [47.0, 236.0], [47.1, 236.0], [47.2, 237.0], [47.3, 237.0], [47.4, 239.0], [47.5, 239.0], [47.6, 239.0], [47.7, 240.0], [47.8, 240.0], [47.9, 240.0], [48.0, 241.0], [48.1, 241.0], [48.2, 242.0], [48.3, 243.0], [48.4, 243.0], [48.5, 244.0], [48.6, 245.0], [48.7, 246.0], [48.8, 247.0], [48.9, 247.0], [49.0, 248.0], [49.1, 248.0], [49.2, 248.0], [49.3, 249.0], [49.4, 249.0], [49.5, 250.0], [49.6, 251.0], [49.7, 252.0], [49.8, 253.0], [49.9, 254.0], [50.0, 255.0], [50.1, 255.0], [50.2, 256.0], [50.3, 256.0], [50.4, 257.0], [50.5, 257.0], [50.6, 258.0], [50.7, 260.0], [50.8, 260.0], [50.9, 261.0], [51.0, 262.0], [51.1, 262.0], [51.2, 263.0], [51.3, 264.0], [51.4, 264.0], [51.5, 264.0], [51.6, 265.0], [51.7, 266.0], [51.8, 267.0], [51.9, 267.0], [52.0, 268.0], [52.1, 269.0], [52.2, 270.0], [52.3, 272.0], [52.4, 272.0], [52.5, 272.0], [52.6, 272.0], [52.7, 273.0], [52.8, 273.0], [52.9, 274.0], [53.0, 275.0], [53.1, 275.0], [53.2, 276.0], [53.3, 277.0], [53.4, 278.0], [53.5, 279.0], [53.6, 279.0], [53.7, 280.0], [53.8, 280.0], [53.9, 280.0], [54.0, 280.0], [54.1, 280.0], [54.2, 281.0], [54.3, 282.0], [54.4, 283.0], [54.5, 284.0], [54.6, 284.0], [54.7, 284.0], [54.8, 285.0], [54.9, 285.0], [55.0, 286.0], [55.1, 287.0], [55.2, 287.0], [55.3, 288.0], [55.4, 288.0], [55.5, 288.0], [55.6, 289.0], [55.7, 289.0], [55.8, 290.0], [55.9, 290.0], [56.0, 291.0], [56.1, 291.0], [56.2, 291.0], [56.3, 292.0], [56.4, 292.0], [56.5, 292.0], [56.6, 293.0], [56.7, 294.0], [56.8, 294.0], [56.9, 295.0], [57.0, 295.0], [57.1, 296.0], [57.2, 296.0], [57.3, 296.0], [57.4, 297.0], [57.5, 297.0], [57.6, 298.0], [57.7, 298.0], [57.8, 298.0], [57.9, 299.0], [58.0, 299.0], [58.1, 299.0], [58.2, 300.0], [58.3, 300.0], [58.4, 300.0], [58.5, 300.0], [58.6, 300.0], [58.7, 301.0], [58.8, 301.0], [58.9, 301.0], [59.0, 301.0], [59.1, 302.0], [59.2, 302.0], [59.3, 302.0], [59.4, 303.0], [59.5, 303.0], [59.6, 304.0], [59.7, 304.0], [59.8, 304.0], [59.9, 305.0], [60.0, 305.0], [60.1, 306.0], [60.2, 306.0], [60.3, 306.0], [60.4, 307.0], [60.5, 307.0], [60.6, 307.0], [60.7, 307.0], [60.8, 308.0], [60.9, 308.0], [61.0, 308.0], [61.1, 308.0], [61.2, 309.0], [61.3, 309.0], [61.4, 309.0], [61.5, 310.0], [61.6, 310.0], [61.7, 311.0], [61.8, 311.0], [61.9, 311.0], [62.0, 312.0], [62.1, 312.0], [62.2, 312.0], [62.3, 312.0], [62.4, 313.0], [62.5, 313.0], [62.6, 314.0], [62.7, 314.0], [62.8, 315.0], [62.9, 315.0], [63.0, 315.0], [63.1, 316.0], [63.2, 316.0], [63.3, 316.0], [63.4, 317.0], [63.5, 317.0], [63.6, 317.0], [63.7, 318.0], [63.8, 318.0], [63.9, 319.0], [64.0, 319.0], [64.1, 319.0], [64.2, 320.0], [64.3, 320.0], [64.4, 320.0], [64.5, 320.0], [64.6, 320.0], [64.7, 321.0], [64.8, 321.0], [64.9, 321.0], [65.0, 322.0], [65.1, 322.0], [65.2, 322.0], [65.3, 322.0], [65.4, 323.0], [65.5, 323.0], [65.6, 323.0], [65.7, 324.0], [65.8, 324.0], [65.9, 324.0], [66.0, 324.0], [66.1, 324.0], [66.2, 325.0], [66.3, 325.0], [66.4, 326.0], [66.5, 326.0], [66.6, 327.0], [66.7, 327.0], [66.8, 327.0], [66.9, 328.0], [67.0, 328.0], [67.1, 328.0], [67.2, 329.0], [67.3, 329.0], [67.4, 330.0], [67.5, 330.0], [67.6, 331.0], [67.7, 331.0], [67.8, 331.0], [67.9, 332.0], [68.0, 332.0], [68.1, 332.0], [68.2, 333.0], [68.3, 333.0], [68.4, 333.0], [68.5, 334.0], [68.6, 335.0], [68.7, 335.0], [68.8, 335.0], [68.9, 336.0], [69.0, 336.0], [69.1, 336.0], [69.2, 336.0], [69.3, 337.0], [69.4, 337.0], [69.5, 337.0], [69.6, 338.0], [69.7, 338.0], [69.8, 339.0], [69.9, 339.0], [70.0, 339.0], [70.1, 340.0], [70.2, 340.0], [70.3, 340.0], [70.4, 340.0], [70.5, 341.0], [70.6, 341.0], [70.7, 341.0], [70.8, 342.0], [70.9, 343.0], [71.0, 343.0], [71.1, 343.0], [71.2, 343.0], [71.3, 344.0], [71.4, 344.0], [71.5, 344.0], [71.6, 344.0], [71.7, 344.0], [71.8, 344.0], [71.9, 345.0], [72.0, 345.0], [72.1, 346.0], [72.2, 346.0], [72.3, 347.0], [72.4, 347.0], [72.5, 348.0], [72.6, 348.0], [72.7, 348.0], [72.8, 348.0], [72.9, 349.0], [73.0, 349.0], [73.1, 350.0], [73.2, 350.0], [73.3, 351.0], [73.4, 351.0], [73.5, 351.0], [73.6, 352.0], [73.7, 352.0], [73.8, 352.0], [73.9, 352.0], [74.0, 352.0], [74.1, 352.0], [74.2, 353.0], [74.3, 353.0], [74.4, 353.0], [74.5, 353.0], [74.6, 354.0], [74.7, 354.0], [74.8, 355.0], [74.9, 355.0], [75.0, 355.0], [75.1, 356.0], [75.2, 356.0], [75.3, 356.0], [75.4, 357.0], [75.5, 357.0], [75.6, 357.0], [75.7, 358.0], [75.8, 359.0], [75.9, 359.0], [76.0, 359.0], [76.1, 359.0], [76.2, 360.0], [76.3, 360.0], [76.4, 360.0], [76.5, 360.0], [76.6, 360.0], [76.7, 360.0], [76.8, 360.0], [76.9, 360.0], [77.0, 360.0], [77.1, 361.0], [77.2, 361.0], [77.3, 361.0], [77.4, 361.0], [77.5, 362.0], [77.6, 362.0], [77.7, 363.0], [77.8, 363.0], [77.9, 363.0], [78.0, 363.0], [78.1, 364.0], [78.2, 364.0], [78.3, 364.0], [78.4, 365.0], [78.5, 365.0], [78.6, 365.0], [78.7, 366.0], [78.8, 366.0], [78.9, 367.0], [79.0, 367.0], [79.1, 367.0], [79.2, 367.0], [79.3, 368.0], [79.4, 368.0], [79.5, 368.0], [79.6, 368.0], [79.7, 369.0], [79.8, 369.0], [79.9, 369.0], [80.0, 370.0], [80.1, 371.0], [80.2, 371.0], [80.3, 372.0], [80.4, 372.0], [80.5, 373.0], [80.6, 373.0], [80.7, 374.0], [80.8, 374.0], [80.9, 375.0], [81.0, 375.0], [81.1, 375.0], [81.2, 375.0], [81.3, 376.0], [81.4, 376.0], [81.5, 376.0], [81.6, 376.0], [81.7, 376.0], [81.8, 377.0], [81.9, 377.0], [82.0, 377.0], [82.1, 378.0], [82.2, 378.0], [82.3, 379.0], [82.4, 379.0], [82.5, 380.0], [82.6, 380.0], [82.7, 381.0], [82.8, 381.0], [82.9, 381.0], [83.0, 382.0], [83.1, 383.0], [83.2, 383.0], [83.3, 383.0], [83.4, 383.0], [83.5, 384.0], [83.6, 384.0], [83.7, 384.0], [83.8, 384.0], [83.9, 385.0], [84.0, 386.0], [84.1, 386.0], [84.2, 387.0], [84.3, 387.0], [84.4, 388.0], [84.5, 388.0], [84.6, 389.0], [84.7, 390.0], [84.8, 390.0], [84.9, 391.0], [85.0, 391.0], [85.1, 391.0], [85.2, 392.0], [85.3, 392.0], [85.4, 393.0], [85.5, 394.0], [85.6, 394.0], [85.7, 395.0], [85.8, 396.0], [85.9, 396.0], [86.0, 397.0], [86.1, 398.0], [86.2, 399.0], [86.3, 400.0], [86.4, 400.0], [86.5, 400.0], [86.6, 401.0], [86.7, 401.0], [86.8, 401.0], [86.9, 402.0], [87.0, 403.0], [87.1, 403.0], [87.2, 404.0], [87.3, 404.0], [87.4, 405.0], [87.5, 406.0], [87.6, 407.0], [87.7, 407.0], [87.8, 408.0], [87.9, 408.0], [88.0, 408.0], [88.1, 408.0], [88.2, 409.0], [88.3, 409.0], [88.4, 411.0], [88.5, 411.0], [88.6, 412.0], [88.7, 414.0], [88.8, 415.0], [88.9, 415.0], [89.0, 416.0], [89.1, 416.0], [89.2, 416.0], [89.3, 417.0], [89.4, 417.0], [89.5, 419.0], [89.6, 420.0], [89.7, 421.0], [89.8, 423.0], [89.9, 423.0], [90.0, 423.0], [90.1, 424.0], [90.2, 424.0], [90.3, 425.0], [90.4, 427.0], [90.5, 429.0], [90.6, 431.0], [90.7, 432.0], [90.8, 433.0], [90.9, 434.0], [91.0, 436.0], [91.1, 438.0], [91.2, 440.0], [91.3, 441.0], [91.4, 444.0], [91.5, 446.0], [91.6, 449.0], [91.7, 452.0], [91.8, 454.0], [91.9, 456.0], [92.0, 458.0], [92.1, 460.0], [92.2, 464.0], [92.3, 467.0], [92.4, 470.0], [92.5, 473.0], [92.6, 480.0], [92.7, 503.0], [92.8, 522.0], [92.9, 533.0], [93.0, 545.0], [93.1, 558.0], [93.2, 574.0], [93.3, 589.0], [93.4, 607.0], [93.5, 636.0], [93.6, 649.0], [93.7, 670.0], [93.8, 694.0], [93.9, 717.0], [94.0, 740.0], [94.1, 762.0], [94.2, 777.0], [94.3, 794.0], [94.4, 816.0], [94.5, 889.0], [94.6, 946.0], [94.7, 984.0], [94.8, 1025.0], [94.9, 1076.0], [95.0, 1128.0], [95.1, 1236.0], [95.2, 1258.0], [95.3, 1287.0], [95.4, 1362.0], [95.5, 1440.0], [95.6, 1562.0], [95.7, 1682.0], [95.8, 1748.0], [95.9, 2022.0], [96.0, 2118.0], [96.1, 2316.0], [96.2, 2439.0], [96.3, 2478.0], [96.4, 2626.0], [96.5, 2743.0], [96.6, 2851.0], [96.7, 2994.0], [96.8, 3144.0], [96.9, 3285.0], [97.0, 3331.0], [97.1, 3422.0], [97.2, 3489.0], [97.3, 3609.0], [97.4, 3689.0], [97.5, 3733.0], [97.6, 3757.0], [97.7, 3832.0], [97.8, 3857.0], [97.9, 3924.0], [98.0, 3947.0], [98.1, 4000.0], [98.2, 4067.0], [98.3, 4140.0], [98.4, 4203.0], [98.5, 4254.0], [98.6, 4277.0], [98.7, 4287.0], [98.8, 4300.0], [98.9, 4312.0], [99.0, 4331.0], [99.1, 4362.0], [99.2, 4373.0], [99.3, 4381.0], [99.4, 4389.0], [99.5, 4395.0], [99.6, 4400.0], [99.7, 4405.0], [99.8, 4425.0], [99.9, 4523.0], [100.0, 4701.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3187.0, "series": [{"data": [[0.0, 596.0], [600.0, 45.0], [700.0, 49.0], [800.0, 24.0], [900.0, 20.0], [1000.0, 21.0], [1100.0, 10.0], [1200.0, 25.0], [1300.0, 12.0], [1400.0, 11.0], [1500.0, 11.0], [100.0, 3187.0], [1600.0, 7.0], [1700.0, 13.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 10.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 10.0], [2400.0, 12.0], [2500.0, 7.0], [2600.0, 7.0], [2700.0, 11.0], [2800.0, 8.0], [2900.0, 9.0], [3000.0, 6.0], [3100.0, 8.0], [200.0, 2035.0], [3200.0, 4.0], [3300.0, 14.0], [3400.0, 16.0], [3500.0, 6.0], [3600.0, 16.0], [3700.0, 21.0], [3800.0, 21.0], [3900.0, 25.0], [4000.0, 15.0], [4100.0, 14.0], [4200.0, 41.0], [4300.0, 80.0], [4400.0, 28.0], [4500.0, 7.0], [4600.0, 5.0], [300.0, 2810.0], [4700.0, 1.0], [400.0, 642.0], [500.0, 66.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 283.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9270.0, "series": [{"data": [[0.0, 9270.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 283.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 447.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 540.0395, "minX": 1.66956054E12, "maxY": 540.0395, "series": [{"data": [[1.66956054E12, 540.0395]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956054E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2803.875, "series": [{"data": [[2.0, 46.66666666666667], [3.0, 72.0], [4.0, 80.0], [6.0, 16.0], [7.0, 40.0], [9.0, 55.0], [10.0, 2.0], [12.0, 84.5], [14.0, 86.33333333333333], [17.0, 92.75], [20.0, 93.0], [22.0, 93.33333333333333], [24.0, 94.0], [25.0, 89.0], [27.0, 96.5], [31.0, 79.75], [32.0, 101.0], [37.0, 89.0], [36.0, 82.0], [39.0, 105.33333333333333], [40.0, 15.0], [44.0, 108.8], [47.0, 106.0], [48.0, 57.0], [51.0, 101.0], [53.0, 112.0], [54.0, 106.5], [57.0, 120.0], [58.0, 109.33333333333333], [61.0, 103.0], [63.0, 121.75], [62.0, 112.0], [67.0, 128.0], [66.0, 104.0], [71.0, 136.0], [70.0, 121.33333333333333], [74.0, 137.0], [73.0, 118.25], [79.0, 132.0], [78.0, 133.0], [77.0, 116.66666666666667], [76.0, 144.0], [83.0, 140.5], [81.0, 139.2], [87.0, 131.33333333333334], [86.0, 131.0], [85.0, 134.5], [91.0, 134.75], [90.0, 130.4], [88.0, 129.0], [95.0, 116.16666666666667], [94.0, 132.0], [93.0, 125.5], [92.0, 122.28571428571428], [99.0, 122.31250000000001], [98.0, 116.14285714285714], [97.0, 116.8], [96.0, 121.75], [103.0, 124.85714285714286], [102.0, 75.5], [101.0, 104.16666666666667], [100.0, 116.28571428571429], [107.0, 91.5], [106.0, 113.41666666666669], [105.0, 104.62500000000001], [104.0, 100.25], [108.0, 47.909090909090914], [111.0, 60.625], [109.0, 57.5], [110.0, 121.0], [112.0, 78.57142857142857], [115.0, 96.0], [113.0, 102.0], [114.0, 83.66666666666666], [116.0, 67.26666666666667], [117.0, 77.19999999999999], [118.0, 74.0], [119.0, 29.2], [120.0, 90.63157894736841], [121.0, 105.7], [122.0, 94.0], [123.0, 73.66666666666666], [126.0, 93.25], [127.0, 86.2], [125.0, 116.33333333333333], [129.0, 80.75], [133.0, 101.69230769230768], [134.0, 140.66666666666666], [135.0, 124.0], [130.0, 124.5], [128.0, 128.0], [136.0, 77.2], [138.0, 84.64285714285714], [139.0, 105.92857142857144], [142.0, 138.12499999999994], [143.0, 153.0], [141.0, 108.0], [140.0, 137.28571428571428], [137.0, 129.16666666666666], [145.0, 136.75], [146.0, 127.14285714285712], [148.0, 146.35714285714283], [151.0, 120.15384615384615], [150.0, 113.0], [149.0, 145.5], [147.0, 149.33333333333331], [144.0, 148.85714285714283], [154.0, 99.1], [155.0, 140.14285714285714], [158.0, 127.37499999999999], [159.0, 151.28571428571428], [157.0, 143.85714285714286], [156.0, 153.1], [153.0, 145.16666666666666], [152.0, 141.75], [161.0, 135.31428571428572], [163.0, 146.33333333333334], [167.0, 131.83333333333334], [166.0, 146.0], [165.0, 141.61538461538464], [164.0, 131.6], [162.0, 139.11111111111111], [160.0, 156.91666666666669], [169.0, 126.83333333333333], [172.0, 187.7], [175.0, 200.125], [173.0, 125.9], [171.0, 132.88888888888886], [168.0, 147.6], [178.0, 153.49999999999997], [181.0, 168.3333333333333], [183.0, 159.29999999999998], [182.0, 169.66666666666666], [180.0, 138.0], [179.0, 147.46666666666664], [177.0, 134.55555555555554], [185.0, 183.26666666666668], [187.0, 156.0], [189.0, 163.7222222222222], [190.0, 172.0], [188.0, 179.66666666666666], [186.0, 167.57142857142856], [192.0, 154.1818181818182], [193.0, 125.5], [196.0, 119.625], [199.0, 156.54838709677415], [198.0, 175.4831460674157], [195.0, 174.0625], [194.0, 170.71428571428572], [201.0, 167.1666666666667], [207.0, 130.0], [206.0, 178.5], [205.0, 166.33333333333334], [204.0, 179.0], [203.0, 188.66666666666666], [202.0, 185.0], [200.0, 166.5], [211.0, 152.8139534883721], [212.0, 174.64285714285714], [213.0, 153.57692307692307], [214.0, 162.0], [215.0, 159.75510204081635], [209.0, 179.46428571428572], [208.0, 192.25], [218.0, 132.25], [223.0, 132.99999999999997], [222.0, 103.66666666666667], [220.0, 143.27272727272728], [219.0, 142.83333333333334], [217.0, 143.8181818181818], [216.0, 144.75000000000003], [231.0, 173.72413793103453], [230.0, 171.14285714285717], [229.0, 148.0], [228.0, 193.25], [227.0, 146.34615384615384], [225.0, 126.8], [224.0, 134.0], [235.0, 153.5], [236.0, 165.23076923076923], [239.0, 186.93333333333334], [238.0, 199.42857142857142], [237.0, 211.0], [234.0, 194.33333333333334], [233.0, 154.72727272727272], [232.0, 164.38709677419357], [246.0, 154.62500000000003], [247.0, 179.0], [245.0, 202.0], [244.0, 167.0], [243.0, 173.6], [242.0, 208.33333333333334], [240.0, 191.33333333333334], [252.0, 172.6428571428571], [255.0, 200.0], [254.0, 158.0], [251.0, 163.45454545454547], [250.0, 196.04000000000002], [249.0, 204.2], [248.0, 192.63157894736844], [270.0, 202.5], [261.0, 195.25806451612905], [260.0, 877.2307692307695], [262.0, 148.5], [263.0, 195.69230769230768], [271.0, 685.9444444444445], [269.0, 196.39285714285714], [268.0, 212.0], [259.0, 189.75], [258.0, 445.1764705882352], [257.0, 197.3913043478261], [256.0, 166.4705882352941], [267.0, 198.0], [266.0, 209.83333333333331], [265.0, 193.78947368421052], [264.0, 172.85714285714286], [285.0, 169.29411764705884], [272.0, 194.1875], [277.0, 196.125], [276.0, 922.0], [279.0, 522.6153846153846], [278.0, 123.0], [280.0, 389.2926829268294], [281.0, 439.6875], [284.0, 154.71428571428572], [275.0, 188.18181818181816], [274.0, 178.5263157894737], [273.0, 190.40625], [286.0, 159.32432432432432], [287.0, 425.6470588235294], [283.0, 418.9714285714284], [300.0, 377.1578947368421], [289.0, 142.3125], [291.0, 174.0], [290.0, 165.72000000000003], [295.0, 193.5], [288.0, 168.1], [293.0, 144.57142857142858], [292.0, 166.66666666666666], [294.0, 166.875], [299.0, 785.4117647058823], [303.0, 2803.875], [302.0, 2083.181818181818], [301.0, 1849.2666666666664], [298.0, 346.0399999999999], [297.0, 172.2], [296.0, 170.0], [316.0, 1780.4], [306.0, 205.0], [307.0, 2440.3783783783783], [309.0, 1289.1555555555562], [308.0, 2482.8500000000004], [311.0, 919.1363636363635], [305.0, 1847.4], [304.0, 2271.954545454545], [310.0, 1533.4444444444446], [312.0, 202.5], [315.0, 140.00000000000003], [314.0, 909.5714285714286], [313.0, 120.8], [317.0, 199.6], [319.0, 2121.8260869565215], [318.0, 1627.36], [322.0, 200.14285714285714], [325.0, 179.0], [324.0, 1492.5555555555557], [326.0, 169.0], [327.0, 744.4146341463415], [321.0, 1531.3333333333335], [320.0, 1895.0], [328.0, 361.15789473684214], [329.0, 2185.0], [331.0, 121.66666666666667], [330.0, 106.5], [335.0, 130.1875], [334.0, 1063.7777777777778], [333.0, 689.9090909090909], [332.0, 136.41666666666666], [348.0, 155.625], [340.0, 144.41666666666669], [341.0, 132.5], [343.0, 181.73170731707324], [339.0, 111.66666666666667], [338.0, 120.33333333333333], [337.0, 794.0833333333333], [336.0, 124.0], [342.0, 130.0], [344.0, 163.7], [346.0, 400.16129032258067], [345.0, 116.75], [347.0, 197.72727272727275], [351.0, 977.1999999999999], [350.0, 123.66666666666667], [353.0, 191.76923076923075], [358.0, 181.41666666666666], [357.0, 173.6], [356.0, 118.0], [359.0, 145.66666666666666], [352.0, 802.1666666666667], [361.0, 190.93333333333334], [366.0, 901.2558139534881], [367.0, 125.5], [365.0, 424.93103448275866], [364.0, 421.4285714285714], [355.0, 840.0], [354.0, 477.0833333333333], [362.0, 130.33333333333334], [360.0, 139.25], [383.0, 115.66666666666667], [377.0, 174.09090909090912], [382.0, 181.5], [381.0, 111.5], [380.0, 902.1999999999999], [371.0, 128.875], [370.0, 97.0], [369.0, 136.14285714285717], [368.0, 345.57894736842104], [379.0, 108.85714285714286], [378.0, 116.33333333333333], [376.0, 2090.0], [375.0, 122.66666666666667], [374.0, 1109.75], [373.0, 123.73913043478261], [372.0, 124.5], [397.0, 201.1818181818182], [385.0, 254.22222222222223], [390.0, 547.5454545454545], [389.0, 97.83333333333333], [388.0, 731.3157894736844], [391.0, 100.0], [384.0, 378.0689655172414], [392.0, 219.5], [396.0, 350.2105263157894], [387.0, 111.0], [386.0, 95.94117647058825], [399.0, 129.0526315789474], [395.0, 896.2], [394.0, 670.9642857142858], [393.0, 121.0], [403.0, 165.83333333333334], [400.0, 153.25], [401.0, 220.88888888888886], [402.0, 278.0], [405.0, 215.375], [404.0, 138.31578947368416], [406.0, 168.6], [407.0, 1425.611111111111], [408.0, 667.4565217391305], [409.0, 215.99999999999997], [411.0, 342.81481481481484], [410.0, 702.5714285714286], [415.0, 165.75], [414.0, 168.99999999999997], [413.0, 114.0], [412.0, 212.0], [419.0, 574.578947368421], [416.0, 475.50000000000006], [423.0, 184.4], [422.0, 192.16666666666666], [421.0, 186.10000000000002], [420.0, 165.0], [417.0, 191.42857142857142], [418.0, 185.76923076923077], [425.0, 228.9411764705882], [424.0, 173.25], [427.0, 892.190476190476], [426.0, 209.75], [431.0, 420.75], [430.0, 580.0714285714286], [429.0, 182.16666666666666], [428.0, 1430.0], [446.0, 115.66666666666667], [432.0, 221.0625], [433.0, 214.66666666666666], [435.0, 709.8571428571429], [434.0, 138.2], [439.0, 510.4545454545455], [438.0, 192.33333333333334], [437.0, 147.625], [436.0, 534.8], [441.0, 234.44444444444443], [443.0, 283.0], [444.0, 193.77777777777777], [445.0, 160.15384615384613], [447.0, 198.0], [442.0, 173.42857142857142], [440.0, 1371.3333333333335], [461.0, 197.33333333333334], [454.0, 547.7], [453.0, 233.33333333333334], [452.0, 138.33333333333334], [458.0, 591.6666666666667], [463.0, 197.0], [462.0, 1993.5], [460.0, 232.0], [455.0, 228.5], [448.0, 518.1000000000001], [450.0, 516.2727272727274], [449.0, 823.9411764705882], [451.0, 205.5], [457.0, 159.0], [456.0, 175.0], [479.0, 522.1818181818182], [470.0, 228.42857142857142], [469.0, 514.75], [468.0, 169.6], [474.0, 219.33333333333331], [478.0, 569.3404255319148], [477.0, 182.0], [476.0, 215.85714285714286], [471.0, 169.7], [466.0, 182.0], [464.0, 1212.5714285714287], [467.0, 476.6666666666667], [475.0, 448.46153846153845], [473.0, 909.0], [472.0, 496.3636363636364], [492.0, 194.5], [484.0, 215.82352941176467], [485.0, 1107.75], [486.0, 184.8], [487.0, 214.75], [481.0, 591.4444444444445], [480.0, 1066.25], [483.0, 978.5937499999999], [482.0, 212.44444444444443], [491.0, 211.6153846153846], [493.0, 261.11111111111114], [494.0, 793.0], [490.0, 222.42857142857142], [489.0, 201.4], [499.0, 580.4166666666667], [502.0, 277.40000000000003], [501.0, 237.10000000000002], [500.0, 214.0], [504.0, 303.8571428571429], [503.0, 282.1363636363637], [498.0, 241.0], [496.0, 223.88888888888886], [509.0, 262.6666666666667], [510.0, 290.0], [511.0, 244.25], [508.0, 226.0], [505.0, 269.0], [536.0, 249.0909090909091], [513.0, 247.66666666666669], [514.0, 255.39999999999998], [515.0, 244.66666666666666], [516.0, 258.7], [517.0, 251.16666666666666], [519.0, 252.42857142857142], [518.0, 263.6666666666667], [526.0, 261.1], [525.0, 812.1666666666666], [524.0, 680.3750000000002], [523.0, 771.4615384615385], [522.0, 1194.5200000000004], [521.0, 1097.5], [520.0, 222.0], [527.0, 231.0], [528.0, 260.5], [532.0, 233.99999999999997], [531.0, 270.75], [530.0, 228.33333333333334], [529.0, 275.5], [533.0, 267.3333333333333], [535.0, 256.4545454545455], [534.0, 254.0], [542.0, 264.0769230769231], [541.0, 244.6363636363636], [540.0, 375.0], [539.0, 244.66666666666663], [538.0, 250.18181818181816], [537.0, 240.0], [543.0, 634.8888888888889], [569.0, 280.25], [574.0, 954.0], [546.0, 860.40625], [547.0, 280.0999999999999], [549.0, 257.75], [548.0, 260.8571428571429], [568.0, 272.80000000000007], [550.0, 239.2], [570.0, 267.0], [573.0, 886.6999999999998], [571.0, 310.0], [554.0, 292.2307692307692], [553.0, 552.5652173913045], [552.0, 258.0], [556.0, 263.6666666666667], [557.0, 245.0], [558.0, 276.8], [559.0, 675.0], [545.0, 652.625], [544.0, 1858.5], [560.0, 631.6842105263158], [562.0, 514.7333333333332], [561.0, 316.5], [563.0, 239.0], [565.0, 282.0], [564.0, 278.6875], [567.0, 855.7272727272727], [566.0, 546.3181818181818], [575.0, 292.3333333333333], [580.0, 551.0], [577.0, 347.52], [576.0, 327.7142857142857], [578.0, 1150.2857142857142], [579.0, 680.9374999999999], [584.0, 387.0], [589.0, 304.3333333333333], [587.0, 305.8], [591.0, 915.8], [595.0, 387.8235294117647], [599.0, 330.2631578947368], [598.0, 356.0], [596.0, 302.25], [601.0, 371.875], [600.0, 254.14285714285714], [583.0, 256.3333333333333], [582.0, 302.25], [581.0, 315.6666666666667], [602.0, 282.2], [604.0, 422.75757575757586], [603.0, 317.7142857142857], [605.0, 330.4], [607.0, 207.75], [593.0, 1020.0], [592.0, 340.0], [606.0, 524.4615384615385], [632.0, 1026.0], [622.0, 330.0], [616.0, 337.5], [617.0, 628.125], [618.0, 641.0], [621.0, 692.5714285714286], [620.0, 1316.6666666666665], [619.0, 258.0], [624.0, 995.0], [625.0, 302.0], [627.0, 302.75], [626.0, 266.6], [630.0, 349.5], [629.0, 599.1], [639.0, 364.6363636363637], [637.0, 214.0], [638.0, 338.5], [635.0, 269.25], [634.0, 358.0], [633.0, 251.0], [623.0, 278.5], [608.0, 405.0], [610.0, 287.4], [609.0, 286.0], [614.0, 275.33333333333337], [613.0, 282.75], [647.0, 329.58333333333337], [651.0, 368.71428571428567], [643.0, 323.0], [642.0, 358.3636363636363], [641.0, 647.6666666666667], [640.0, 400.0], [646.0, 345.3333333333333], [645.0, 339.0], [644.0, 611.4444444444445], [648.0, 427.7857142857143], [661.0, 474.3333333333333], [667.0, 490.0], [665.0, 291.0], [664.0, 321.0], [668.0, 395.3076923076923], [669.0, 296.6666666666667], [670.0, 529.2], [671.0, 329.93333333333334], [657.0, 285.0], [656.0, 462.88888888888897], [659.0, 1241.0], [658.0, 280.8], [662.0, 427.3333333333333], [663.0, 315.25], [649.0, 405.42857142857144], [650.0, 324.6666666666667], [654.0, 321.25], [653.0, 349.4], [652.0, 292.6], [655.0, 426.81250000000006], [701.0, 461.0], [696.0, 429.6923076923077], [677.0, 678.6666666666667], [676.0, 324.09090909090907], [675.0, 345.2], [674.0, 605.7777777777778], [673.0, 307.0], [672.0, 1215.6666666666667], [679.0, 342.2857142857143], [687.0, 343.5], [686.0, 319.0833333333333], [685.0, 1661.0], [684.0, 923.7777777777778], [683.0, 337.0], [682.0, 337.625], [681.0, 698.4285714285714], [680.0, 314.5], [698.0, 778.4285714285714], [702.0, 896.6], [703.0, 341.0], [699.0, 381.0], [697.0, 378.3333333333333], [695.0, 364.0], [694.0, 366.5], [693.0, 374.2], [692.0, 347.0], [691.0, 380.0], [690.0, 652.25], [689.0, 359.25], [688.0, 331.8888888888889], [728.0, 767.8333333333335], [733.0, 517.25], [705.0, 469.45454545454544], [711.0, 449.66666666666663], [710.0, 379.5], [709.0, 386.25], [708.0, 373.57142857142856], [707.0, 398.0], [706.0, 387.0], [729.0, 854.6666666666667], [732.0, 375.2857142857143], [730.0, 536.4], [712.0, 385.75], [714.0, 381.0], [716.0, 388.8], [715.0, 372.75], [717.0, 577.5], [718.0, 559.9375], [719.0, 359.0], [721.0, 617.0769230769232], [722.0, 626.3636363636365], [723.0, 672.9999999999999], [725.0, 381.0], [724.0, 372.2222222222222], [727.0, 576.0], [726.0, 371.6363636363636], [734.0, 375.8181818181818], [735.0, 404.92307692307696], [742.0, 438.64705882352933], [749.0, 397.70000000000005], [737.0, 687.5263157894736], [736.0, 400.29999999999995], [738.0, 441.92857142857144], [739.0, 378.00000000000006], [741.0, 453.5217391304348], [740.0, 401.75], [743.0, 424.62500000000006], [760.0, 568.6999999999999], [761.0, 508.74074074074076], [766.0, 339.3333333333333], [765.0, 345.6666666666667], [764.0, 354.2], [763.0, 344.4], [762.0, 466.38888888888886], [767.0, 506.46153846153845], [748.0, 355.9444444444444], [747.0, 371.00000000000006], [746.0, 379.125], [745.0, 373.64], [744.0, 418.7368421052632], [753.0, 777.6923076923076], [755.0, 370.8333333333333], [754.0, 495.9473684210526], [757.0, 344.8888888888889], [756.0, 381.2222222222222], [759.0, 621.4117647058823], [758.0, 340.0], [752.0, 728.1538461538462], [751.0, 586.8181818181819], [750.0, 377.0], [795.0, 323.6666666666667], [774.0, 346.1428571428571], [775.0, 795.3000000000001], [792.0, 302.25], [794.0, 310.3333333333333], [793.0, 327.0], [773.0, 800.5555555555555], [772.0, 437.0], [771.0, 690.6666666666666], [770.0, 338.16666666666663], [769.0, 505.88461538461536], [768.0, 700.3333333333333], [783.0, 549.5555555555555], [782.0, 321.92307692307685], [781.0, 323.0952380952381], [780.0, 327.6666666666667], [776.0, 391.06249999999994], [778.0, 736.3333333333335], [777.0, 411.3076923076923], [779.0, 424.68181818181824], [796.0, 442.6875], [797.0, 306.4], [798.0, 513.2142857142859], [799.0, 337.75], [784.0, 319.0], [786.0, 458.2857142857143], [785.0, 331.6666666666667], [788.0, 294.0], [787.0, 326.75], [791.0, 319.8], [790.0, 294.0], [828.0, 310.125], [813.0, 318.8500000000001], [808.0, 514.6666666666666], [809.0, 319.6], [810.0, 301.5], [812.0, 288.8], [811.0, 275.9090909090909], [826.0, 360.19047619047615], [825.0, 310.8], [824.0, 302.9333333333334], [815.0, 233.0], [807.0, 269.3333333333333], [806.0, 586.4285714285714], [805.0, 281.79999999999995], [804.0, 475.5], [803.0, 751.9999999999999], [802.0, 598.0], [801.0, 460.1538461538462], [800.0, 612.9230769230769], [814.0, 288.8125], [827.0, 514.4444444444445], [830.0, 352.46153846153834], [831.0, 301.8888888888889], [817.0, 291.00000000000006], [816.0, 529.375], [819.0, 316.37999999999994], [818.0, 314.3333333333333], [821.0, 300.0], [820.0, 311.0], [823.0, 300.9], [822.0, 307.2727272727273], [829.0, 303.6363636363636], [861.0, 315.75], [856.0, 510.50000000000006], [832.0, 394.8235294117647], [838.0, 336.17647058823525], [836.0, 613.0], [835.0, 299.0], [834.0, 305.33333333333337], [833.0, 306.6], [839.0, 319.5], [840.0, 543.9], [841.0, 306.70370370370375], [843.0, 326.75], [842.0, 313.57142857142856], [845.0, 560.7142857142857], [844.0, 321.0], [847.0, 814.4285714285714], [846.0, 381.78125000000006], [854.0, 362.7272727272727], [853.0, 332.2857142857143], [852.0, 324.0], [851.0, 1192.0], [850.0, 717.5384615384615], [849.0, 320.47058823529414], [848.0, 325.25], [855.0, 356.0], [863.0, 369.08450704225356], [862.0, 311.71794871794873], [860.0, 297.83333333333337], [859.0, 309.0], [858.0, 321.0], [857.0, 308.44444444444446], [891.0, 407.5384615384616], [869.0, 365.764705882353], [868.0, 335.0714285714286], [867.0, 328.5625], [866.0, 370.98461538461544], [865.0, 370.75], [864.0, 467.5], [870.0, 387.06666666666666], [871.0, 420.38095238095235], [880.0, 374.2692307692308], [882.0, 401.0833333333333], [884.0, 465.1621621621622], [883.0, 387.39130434782606], [886.0, 537.3846153846156], [885.0, 464.89473684210526], [895.0, 415.5], [894.0, 505.1538461538462], [879.0, 368.2631578947368], [878.0, 582.8076923076923], [877.0, 406.75], [876.0, 363.9166666666667], [875.0, 501.325], [874.0, 455.7333333333333], [873.0, 592.7333333333333], [872.0, 539.375], [892.0, 488.57142857142856], [890.0, 479.8333333333333], [889.0, 387.0], [888.0, 577.1538461538461], [893.0, 438.0], [925.0, 324.25], [911.0, 357.1818181818182], [905.0, 503.1764705882353], [904.0, 517.1333333333333], [906.0, 410.6875], [908.0, 614.1111111111111], [907.0, 404.7142857142857], [912.0, 500.06666666666666], [913.0, 577.5185185185184], [915.0, 352.0], [914.0, 356.0], [917.0, 497.3684210526315], [916.0, 360.3333333333333], [919.0, 541.255319148936], [918.0, 705.0000000000001], [927.0, 306.90909090909093], [926.0, 341.1111111111111], [910.0, 356.99999999999994], [909.0, 474.40816326530614], [921.0, 394.9166666666667], [920.0, 402.925925925926], [903.0, 414.3333333333333], [902.0, 604.0], [901.0, 415.75], [900.0, 400.3333333333333], [899.0, 571.6153846153845], [898.0, 417.1666666666667], [897.0, 473.97499999999997], [896.0, 430.2352941176471], [924.0, 413.13333333333344], [923.0, 478.2], [922.0, 325.722891566265], [930.0, 415.81250000000006], [929.0, 420.5576923076924], [935.0, 362.25], [934.0, 325.0], [933.0, 389.01515151515133], [932.0, 347.19999999999993], [931.0, 504.625], [936.0, 402.5111111111111], [938.0, 461.46875], [937.0, 532.3333333333334], [940.0, 367.8695652173913], [939.0, 399.28571428571433], [941.0, 323.6938775510205], [946.0, 342.00000000000006], [945.0, 371.1428571428571], [944.0, 285.5], [943.0, 440.12499999999994], [942.0, 368.5], [1.0, 2.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[540.039300000002, 410.3451000000011]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 946.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956054E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956054E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956054E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956054E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 410.3451000000011, "minX": 1.66956054E12, "maxY": 410.3451000000011, "series": [{"data": [[1.66956054E12, 410.3451000000011]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956054E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 410.1445000000007, "minX": 1.66956054E12, "maxY": 410.1445000000007, "series": [{"data": [[1.66956054E12, 410.1445000000007]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956054E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.5589000000000066, "minX": 1.66956054E12, "maxY": 1.5589000000000066, "series": [{"data": [[1.66956054E12, 1.5589000000000066]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956054E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.66956054E12, "maxY": 4701.0, "series": [{"data": [[1.66956054E12, 4701.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956054E12, 423.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956054E12, 4331.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956054E12, 1137.499999999989]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956054E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956054E12, 255.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956054E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 87.0, "minX": 176.0, "maxY": 372.0, "series": [{"data": [[1153.0, 214.0], [1269.0, 345.0], [1285.0, 343.0], [1280.0, 239.0], [1331.0, 162.0], [1380.0, 372.0], [176.0, 112.0], [421.0, 87.0], [1705.0, 155.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1705.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 87.0, "minX": 176.0, "maxY": 372.0, "series": [{"data": [[1153.0, 213.0], [1269.0, 345.0], [1285.0, 343.0], [1280.0, 239.0], [1331.0, 161.0], [1380.0, 372.0], [176.0, 112.0], [421.0, 87.0], [1705.0, 154.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1705.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956054E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956054E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956054E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956054E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956054E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956054E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956054E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956054E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956054E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956054E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956054E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956054E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

