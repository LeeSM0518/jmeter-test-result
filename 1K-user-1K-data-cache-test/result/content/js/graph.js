/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6264.0, "series": [{"data": [[0.0, 3.0], [0.1, 11.0], [0.2, 13.0], [0.3, 15.0], [0.4, 19.0], [0.5, 24.0], [0.6, 26.0], [0.7, 30.0], [0.8, 32.0], [0.9, 33.0], [1.0, 35.0], [1.1, 39.0], [1.2, 41.0], [1.3, 41.0], [1.4, 43.0], [1.5, 46.0], [1.6, 47.0], [1.7, 48.0], [1.8, 49.0], [1.9, 53.0], [2.0, 55.0], [2.1, 58.0], [2.2, 60.0], [2.3, 62.0], [2.4, 63.0], [2.5, 64.0], [2.6, 64.0], [2.7, 65.0], [2.8, 67.0], [2.9, 69.0], [3.0, 71.0], [3.1, 72.0], [3.2, 72.0], [3.3, 73.0], [3.4, 74.0], [3.5, 78.0], [3.6, 79.0], [3.7, 79.0], [3.8, 80.0], [3.9, 81.0], [4.0, 83.0], [4.1, 84.0], [4.2, 86.0], [4.3, 87.0], [4.4, 89.0], [4.5, 91.0], [4.6, 92.0], [4.7, 93.0], [4.8, 94.0], [4.9, 95.0], [5.0, 96.0], [5.1, 98.0], [5.2, 100.0], [5.3, 101.0], [5.4, 103.0], [5.5, 105.0], [5.6, 106.0], [5.7, 109.0], [5.8, 110.0], [5.9, 112.0], [6.0, 113.0], [6.1, 116.0], [6.2, 116.0], [6.3, 118.0], [6.4, 120.0], [6.5, 121.0], [6.6, 123.0], [6.7, 124.0], [6.8, 125.0], [6.9, 125.0], [7.0, 126.0], [7.1, 127.0], [7.2, 129.0], [7.3, 130.0], [7.4, 131.0], [7.5, 132.0], [7.6, 133.0], [7.7, 134.0], [7.8, 135.0], [7.9, 136.0], [8.0, 137.0], [8.1, 138.0], [8.2, 138.0], [8.3, 139.0], [8.4, 139.0], [8.5, 140.0], [8.6, 141.0], [8.7, 141.0], [8.8, 143.0], [8.9, 144.0], [9.0, 144.0], [9.1, 144.0], [9.2, 145.0], [9.3, 146.0], [9.4, 146.0], [9.5, 147.0], [9.6, 147.0], [9.7, 147.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 149.0], [10.2, 150.0], [10.3, 151.0], [10.4, 151.0], [10.5, 152.0], [10.6, 152.0], [10.7, 153.0], [10.8, 153.0], [10.9, 154.0], [11.0, 154.0], [11.1, 155.0], [11.2, 155.0], [11.3, 156.0], [11.4, 156.0], [11.5, 156.0], [11.6, 156.0], [11.7, 157.0], [11.8, 157.0], [11.9, 158.0], [12.0, 159.0], [12.1, 159.0], [12.2, 160.0], [12.3, 160.0], [12.4, 161.0], [12.5, 162.0], [12.6, 162.0], [12.7, 162.0], [12.8, 163.0], [12.9, 163.0], [13.0, 164.0], [13.1, 164.0], [13.2, 164.0], [13.3, 165.0], [13.4, 165.0], [13.5, 165.0], [13.6, 166.0], [13.7, 167.0], [13.8, 167.0], [13.9, 168.0], [14.0, 169.0], [14.1, 169.0], [14.2, 169.0], [14.3, 170.0], [14.4, 171.0], [14.5, 171.0], [14.6, 171.0], [14.7, 172.0], [14.8, 172.0], [14.9, 173.0], [15.0, 173.0], [15.1, 173.0], [15.2, 174.0], [15.3, 174.0], [15.4, 175.0], [15.5, 175.0], [15.6, 175.0], [15.7, 176.0], [15.8, 176.0], [15.9, 176.0], [16.0, 177.0], [16.1, 177.0], [16.2, 178.0], [16.3, 178.0], [16.4, 179.0], [16.5, 179.0], [16.6, 179.0], [16.7, 180.0], [16.8, 180.0], [16.9, 180.0], [17.0, 180.0], [17.1, 181.0], [17.2, 181.0], [17.3, 181.0], [17.4, 182.0], [17.5, 182.0], [17.6, 183.0], [17.7, 183.0], [17.8, 184.0], [17.9, 184.0], [18.0, 184.0], [18.1, 185.0], [18.2, 185.0], [18.3, 186.0], [18.4, 186.0], [18.5, 186.0], [18.6, 187.0], [18.7, 187.0], [18.8, 188.0], [18.9, 188.0], [19.0, 188.0], [19.1, 189.0], [19.2, 189.0], [19.3, 190.0], [19.4, 191.0], [19.5, 191.0], [19.6, 192.0], [19.7, 192.0], [19.8, 192.0], [19.9, 193.0], [20.0, 193.0], [20.1, 193.0], [20.2, 193.0], [20.3, 194.0], [20.4, 194.0], [20.5, 194.0], [20.6, 195.0], [20.7, 195.0], [20.8, 195.0], [20.9, 196.0], [21.0, 196.0], [21.1, 196.0], [21.2, 196.0], [21.3, 196.0], [21.4, 197.0], [21.5, 197.0], [21.6, 197.0], [21.7, 198.0], [21.8, 198.0], [21.9, 199.0], [22.0, 199.0], [22.1, 200.0], [22.2, 200.0], [22.3, 200.0], [22.4, 201.0], [22.5, 201.0], [22.6, 201.0], [22.7, 201.0], [22.8, 202.0], [22.9, 202.0], [23.0, 203.0], [23.1, 203.0], [23.2, 203.0], [23.3, 204.0], [23.4, 204.0], [23.5, 204.0], [23.6, 204.0], [23.7, 204.0], [23.8, 205.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 207.0], [24.3, 207.0], [24.4, 207.0], [24.5, 208.0], [24.6, 208.0], [24.7, 208.0], [24.8, 209.0], [24.9, 209.0], [25.0, 209.0], [25.1, 210.0], [25.2, 210.0], [25.3, 210.0], [25.4, 210.0], [25.5, 211.0], [25.6, 211.0], [25.7, 211.0], [25.8, 212.0], [25.9, 212.0], [26.0, 212.0], [26.1, 212.0], [26.2, 213.0], [26.3, 213.0], [26.4, 213.0], [26.5, 213.0], [26.6, 214.0], [26.7, 214.0], [26.8, 215.0], [26.9, 215.0], [27.0, 215.0], [27.1, 216.0], [27.2, 216.0], [27.3, 216.0], [27.4, 217.0], [27.5, 217.0], [27.6, 217.0], [27.7, 217.0], [27.8, 218.0], [27.9, 218.0], [28.0, 218.0], [28.1, 218.0], [28.2, 219.0], [28.3, 219.0], [28.4, 219.0], [28.5, 220.0], [28.6, 220.0], [28.7, 220.0], [28.8, 220.0], [28.9, 221.0], [29.0, 221.0], [29.1, 221.0], [29.2, 221.0], [29.3, 222.0], [29.4, 223.0], [29.5, 223.0], [29.6, 223.0], [29.7, 224.0], [29.8, 224.0], [29.9, 224.0], [30.0, 224.0], [30.1, 225.0], [30.2, 225.0], [30.3, 226.0], [30.4, 226.0], [30.5, 227.0], [30.6, 227.0], [30.7, 228.0], [30.8, 228.0], [30.9, 228.0], [31.0, 229.0], [31.1, 229.0], [31.2, 229.0], [31.3, 230.0], [31.4, 230.0], [31.5, 230.0], [31.6, 230.0], [31.7, 231.0], [31.8, 231.0], [31.9, 232.0], [32.0, 232.0], [32.1, 232.0], [32.2, 233.0], [32.3, 233.0], [32.4, 233.0], [32.5, 234.0], [32.6, 234.0], [32.7, 235.0], [32.8, 235.0], [32.9, 235.0], [33.0, 236.0], [33.1, 236.0], [33.2, 237.0], [33.3, 237.0], [33.4, 238.0], [33.5, 238.0], [33.6, 239.0], [33.7, 239.0], [33.8, 239.0], [33.9, 239.0], [34.0, 240.0], [34.1, 240.0], [34.2, 241.0], [34.3, 241.0], [34.4, 242.0], [34.5, 243.0], [34.6, 243.0], [34.7, 243.0], [34.8, 244.0], [34.9, 244.0], [35.0, 245.0], [35.1, 246.0], [35.2, 246.0], [35.3, 247.0], [35.4, 247.0], [35.5, 248.0], [35.6, 248.0], [35.7, 249.0], [35.8, 250.0], [35.9, 250.0], [36.0, 251.0], [36.1, 252.0], [36.2, 253.0], [36.3, 253.0], [36.4, 254.0], [36.5, 254.0], [36.6, 255.0], [36.7, 255.0], [36.8, 256.0], [36.9, 257.0], [37.0, 257.0], [37.1, 258.0], [37.2, 259.0], [37.3, 259.0], [37.4, 261.0], [37.5, 262.0], [37.6, 263.0], [37.7, 264.0], [37.8, 266.0], [37.9, 267.0], [38.0, 268.0], [38.1, 269.0], [38.2, 269.0], [38.3, 271.0], [38.4, 272.0], [38.5, 273.0], [38.6, 274.0], [38.7, 275.0], [38.8, 276.0], [38.9, 277.0], [39.0, 278.0], [39.1, 279.0], [39.2, 279.0], [39.3, 280.0], [39.4, 281.0], [39.5, 282.0], [39.6, 283.0], [39.7, 283.0], [39.8, 285.0], [39.9, 287.0], [40.0, 288.0], [40.1, 289.0], [40.2, 290.0], [40.3, 291.0], [40.4, 292.0], [40.5, 293.0], [40.6, 294.0], [40.7, 295.0], [40.8, 296.0], [40.9, 297.0], [41.0, 298.0], [41.1, 298.0], [41.2, 299.0], [41.3, 300.0], [41.4, 300.0], [41.5, 301.0], [41.6, 303.0], [41.7, 304.0], [41.8, 305.0], [41.9, 306.0], [42.0, 307.0], [42.1, 308.0], [42.2, 310.0], [42.3, 311.0], [42.4, 312.0], [42.5, 313.0], [42.6, 314.0], [42.7, 315.0], [42.8, 316.0], [42.9, 317.0], [43.0, 318.0], [43.1, 318.0], [43.2, 319.0], [43.3, 320.0], [43.4, 321.0], [43.5, 322.0], [43.6, 324.0], [43.7, 325.0], [43.8, 326.0], [43.9, 327.0], [44.0, 327.0], [44.1, 328.0], [44.2, 329.0], [44.3, 330.0], [44.4, 331.0], [44.5, 332.0], [44.6, 333.0], [44.7, 334.0], [44.8, 336.0], [44.9, 337.0], [45.0, 338.0], [45.1, 339.0], [45.2, 339.0], [45.3, 340.0], [45.4, 341.0], [45.5, 342.0], [45.6, 343.0], [45.7, 343.0], [45.8, 344.0], [45.9, 345.0], [46.0, 346.0], [46.1, 347.0], [46.2, 347.0], [46.3, 349.0], [46.4, 350.0], [46.5, 351.0], [46.6, 352.0], [46.7, 353.0], [46.8, 354.0], [46.9, 355.0], [47.0, 356.0], [47.1, 356.0], [47.2, 357.0], [47.3, 357.0], [47.4, 358.0], [47.5, 359.0], [47.6, 361.0], [47.7, 361.0], [47.8, 362.0], [47.9, 363.0], [48.0, 363.0], [48.1, 364.0], [48.2, 365.0], [48.3, 366.0], [48.4, 366.0], [48.5, 367.0], [48.6, 368.0], [48.7, 369.0], [48.8, 369.0], [48.9, 370.0], [49.0, 372.0], [49.1, 372.0], [49.2, 373.0], [49.3, 373.0], [49.4, 375.0], [49.5, 376.0], [49.6, 376.0], [49.7, 377.0], [49.8, 378.0], [49.9, 379.0], [50.0, 380.0], [50.1, 381.0], [50.2, 382.0], [50.3, 383.0], [50.4, 384.0], [50.5, 384.0], [50.6, 385.0], [50.7, 386.0], [50.8, 387.0], [50.9, 388.0], [51.0, 389.0], [51.1, 390.0], [51.2, 390.0], [51.3, 391.0], [51.4, 391.0], [51.5, 392.0], [51.6, 392.0], [51.7, 393.0], [51.8, 394.0], [51.9, 395.0], [52.0, 395.0], [52.1, 396.0], [52.2, 396.0], [52.3, 396.0], [52.4, 397.0], [52.5, 397.0], [52.6, 398.0], [52.7, 399.0], [52.8, 400.0], [52.9, 400.0], [53.0, 401.0], [53.1, 402.0], [53.2, 403.0], [53.3, 403.0], [53.4, 404.0], [53.5, 404.0], [53.6, 405.0], [53.7, 406.0], [53.8, 406.0], [53.9, 407.0], [54.0, 407.0], [54.1, 408.0], [54.2, 408.0], [54.3, 408.0], [54.4, 409.0], [54.5, 409.0], [54.6, 410.0], [54.7, 410.0], [54.8, 411.0], [54.9, 411.0], [55.0, 412.0], [55.1, 412.0], [55.2, 413.0], [55.3, 413.0], [55.4, 414.0], [55.5, 415.0], [55.6, 415.0], [55.7, 416.0], [55.8, 416.0], [55.9, 417.0], [56.0, 417.0], [56.1, 417.0], [56.2, 418.0], [56.3, 418.0], [56.4, 418.0], [56.5, 419.0], [56.6, 419.0], [56.7, 420.0], [56.8, 420.0], [56.9, 421.0], [57.0, 421.0], [57.1, 422.0], [57.2, 422.0], [57.3, 423.0], [57.4, 423.0], [57.5, 424.0], [57.6, 424.0], [57.7, 425.0], [57.8, 425.0], [57.9, 426.0], [58.0, 426.0], [58.1, 427.0], [58.2, 428.0], [58.3, 428.0], [58.4, 429.0], [58.5, 429.0], [58.6, 430.0], [58.7, 430.0], [58.8, 431.0], [58.9, 431.0], [59.0, 431.0], [59.1, 432.0], [59.2, 432.0], [59.3, 433.0], [59.4, 433.0], [59.5, 433.0], [59.6, 433.0], [59.7, 434.0], [59.8, 434.0], [59.9, 435.0], [60.0, 435.0], [60.1, 436.0], [60.2, 436.0], [60.3, 437.0], [60.4, 437.0], [60.5, 438.0], [60.6, 438.0], [60.7, 439.0], [60.8, 439.0], [60.9, 439.0], [61.0, 440.0], [61.1, 440.0], [61.2, 440.0], [61.3, 441.0], [61.4, 441.0], [61.5, 442.0], [61.6, 442.0], [61.7, 442.0], [61.8, 443.0], [61.9, 443.0], [62.0, 444.0], [62.1, 444.0], [62.2, 444.0], [62.3, 445.0], [62.4, 445.0], [62.5, 445.0], [62.6, 445.0], [62.7, 446.0], [62.8, 446.0], [62.9, 446.0], [63.0, 447.0], [63.1, 447.0], [63.2, 447.0], [63.3, 449.0], [63.4, 449.0], [63.5, 450.0], [63.6, 450.0], [63.7, 450.0], [63.8, 451.0], [63.9, 452.0], [64.0, 452.0], [64.1, 453.0], [64.2, 453.0], [64.3, 454.0], [64.4, 454.0], [64.5, 455.0], [64.6, 455.0], [64.7, 456.0], [64.8, 456.0], [64.9, 457.0], [65.0, 457.0], [65.1, 458.0], [65.2, 459.0], [65.3, 459.0], [65.4, 459.0], [65.5, 460.0], [65.6, 460.0], [65.7, 460.0], [65.8, 461.0], [65.9, 461.0], [66.0, 462.0], [66.1, 462.0], [66.2, 462.0], [66.3, 463.0], [66.4, 463.0], [66.5, 463.0], [66.6, 464.0], [66.7, 464.0], [66.8, 465.0], [66.9, 466.0], [67.0, 466.0], [67.1, 466.0], [67.2, 467.0], [67.3, 467.0], [67.4, 468.0], [67.5, 468.0], [67.6, 468.0], [67.7, 469.0], [67.8, 469.0], [67.9, 470.0], [68.0, 470.0], [68.1, 471.0], [68.2, 471.0], [68.3, 472.0], [68.4, 472.0], [68.5, 472.0], [68.6, 473.0], [68.7, 473.0], [68.8, 474.0], [68.9, 474.0], [69.0, 475.0], [69.1, 475.0], [69.2, 475.0], [69.3, 476.0], [69.4, 476.0], [69.5, 477.0], [69.6, 477.0], [69.7, 477.0], [69.8, 478.0], [69.9, 478.0], [70.0, 479.0], [70.1, 479.0], [70.2, 480.0], [70.3, 480.0], [70.4, 481.0], [70.5, 481.0], [70.6, 482.0], [70.7, 482.0], [70.8, 483.0], [70.9, 483.0], [71.0, 483.0], [71.1, 484.0], [71.2, 484.0], [71.3, 484.0], [71.4, 485.0], [71.5, 485.0], [71.6, 485.0], [71.7, 486.0], [71.8, 487.0], [71.9, 487.0], [72.0, 487.0], [72.1, 487.0], [72.2, 488.0], [72.3, 488.0], [72.4, 489.0], [72.5, 489.0], [72.6, 490.0], [72.7, 490.0], [72.8, 491.0], [72.9, 491.0], [73.0, 491.0], [73.1, 492.0], [73.2, 492.0], [73.3, 493.0], [73.4, 493.0], [73.5, 494.0], [73.6, 494.0], [73.7, 494.0], [73.8, 494.0], [73.9, 495.0], [74.0, 495.0], [74.1, 496.0], [74.2, 496.0], [74.3, 496.0], [74.4, 497.0], [74.5, 497.0], [74.6, 497.0], [74.7, 498.0], [74.8, 498.0], [74.9, 499.0], [75.0, 499.0], [75.1, 499.0], [75.2, 500.0], [75.3, 500.0], [75.4, 501.0], [75.5, 501.0], [75.6, 501.0], [75.7, 502.0], [75.8, 502.0], [75.9, 503.0], [76.0, 503.0], [76.1, 503.0], [76.2, 504.0], [76.3, 504.0], [76.4, 504.0], [76.5, 505.0], [76.6, 506.0], [76.7, 506.0], [76.8, 506.0], [76.9, 507.0], [77.0, 507.0], [77.1, 508.0], [77.2, 508.0], [77.3, 509.0], [77.4, 509.0], [77.5, 510.0], [77.6, 510.0], [77.7, 511.0], [77.8, 512.0], [77.9, 512.0], [78.0, 512.0], [78.1, 513.0], [78.2, 513.0], [78.3, 513.0], [78.4, 514.0], [78.5, 514.0], [78.6, 515.0], [78.7, 515.0], [78.8, 516.0], [78.9, 516.0], [79.0, 517.0], [79.1, 517.0], [79.2, 518.0], [79.3, 518.0], [79.4, 519.0], [79.5, 519.0], [79.6, 519.0], [79.7, 520.0], [79.8, 520.0], [79.9, 520.0], [80.0, 520.0], [80.1, 521.0], [80.2, 521.0], [80.3, 522.0], [80.4, 522.0], [80.5, 523.0], [80.6, 523.0], [80.7, 524.0], [80.8, 524.0], [80.9, 524.0], [81.0, 525.0], [81.1, 526.0], [81.2, 526.0], [81.3, 527.0], [81.4, 527.0], [81.5, 528.0], [81.6, 528.0], [81.7, 529.0], [81.8, 529.0], [81.9, 530.0], [82.0, 530.0], [82.1, 530.0], [82.2, 531.0], [82.3, 531.0], [82.4, 532.0], [82.5, 532.0], [82.6, 533.0], [82.7, 533.0], [82.8, 534.0], [82.9, 534.0], [83.0, 535.0], [83.1, 535.0], [83.2, 536.0], [83.3, 536.0], [83.4, 536.0], [83.5, 536.0], [83.6, 537.0], [83.7, 538.0], [83.8, 538.0], [83.9, 539.0], [84.0, 539.0], [84.1, 540.0], [84.2, 540.0], [84.3, 540.0], [84.4, 541.0], [84.5, 541.0], [84.6, 542.0], [84.7, 543.0], [84.8, 543.0], [84.9, 544.0], [85.0, 545.0], [85.1, 545.0], [85.2, 546.0], [85.3, 546.0], [85.4, 547.0], [85.5, 547.0], [85.6, 547.0], [85.7, 548.0], [85.8, 548.0], [85.9, 548.0], [86.0, 549.0], [86.1, 550.0], [86.2, 551.0], [86.3, 552.0], [86.4, 553.0], [86.5, 553.0], [86.6, 554.0], [86.7, 554.0], [86.8, 555.0], [86.9, 555.0], [87.0, 556.0], [87.1, 557.0], [87.2, 557.0], [87.3, 559.0], [87.4, 559.0], [87.5, 560.0], [87.6, 561.0], [87.7, 561.0], [87.8, 562.0], [87.9, 563.0], [88.0, 563.0], [88.1, 564.0], [88.2, 565.0], [88.3, 566.0], [88.4, 567.0], [88.5, 567.0], [88.6, 568.0], [88.7, 569.0], [88.8, 570.0], [88.9, 571.0], [89.0, 571.0], [89.1, 572.0], [89.2, 573.0], [89.3, 573.0], [89.4, 574.0], [89.5, 575.0], [89.6, 575.0], [89.7, 576.0], [89.8, 577.0], [89.9, 578.0], [90.0, 579.0], [90.1, 580.0], [90.2, 581.0], [90.3, 582.0], [90.4, 582.0], [90.5, 583.0], [90.6, 584.0], [90.7, 584.0], [90.8, 585.0], [90.9, 587.0], [91.0, 589.0], [91.1, 590.0], [91.2, 591.0], [91.3, 593.0], [91.4, 594.0], [91.5, 595.0], [91.6, 596.0], [91.7, 597.0], [91.8, 599.0], [91.9, 600.0], [92.0, 601.0], [92.1, 603.0], [92.2, 604.0], [92.3, 604.0], [92.4, 606.0], [92.5, 607.0], [92.6, 608.0], [92.7, 609.0], [92.8, 611.0], [92.9, 612.0], [93.0, 613.0], [93.1, 615.0], [93.2, 617.0], [93.3, 618.0], [93.4, 620.0], [93.5, 621.0], [93.6, 623.0], [93.7, 625.0], [93.8, 631.0], [93.9, 635.0], [94.0, 637.0], [94.1, 639.0], [94.2, 644.0], [94.3, 655.0], [94.4, 666.0], [94.5, 682.0], [94.6, 696.0], [94.7, 755.0], [94.8, 808.0], [94.9, 877.0], [95.0, 938.0], [95.1, 973.0], [95.2, 1049.0], [95.3, 1110.0], [95.4, 1155.0], [95.5, 1232.0], [95.6, 1304.0], [95.7, 1338.0], [95.8, 1395.0], [95.9, 1453.0], [96.0, 1632.0], [96.1, 1947.0], [96.2, 2277.0], [96.3, 2388.0], [96.4, 2665.0], [96.5, 2803.0], [96.6, 3174.0], [96.7, 3462.0], [96.8, 3654.0], [96.9, 3682.0], [97.0, 3907.0], [97.1, 3962.0], [97.2, 4114.0], [97.3, 4264.0], [97.4, 4303.0], [97.5, 4506.0], [97.6, 4573.0], [97.7, 4710.0], [97.8, 4736.0], [97.9, 4838.0], [98.0, 4888.0], [98.1, 4950.0], [98.2, 4964.0], [98.3, 4972.0], [98.4, 4980.0], [98.5, 5011.0], [98.6, 5090.0], [98.7, 5135.0], [98.8, 5196.0], [98.9, 5300.0], [99.0, 5378.0], [99.1, 5409.0], [99.2, 5521.0], [99.3, 5553.0], [99.4, 5764.0], [99.5, 5895.0], [99.6, 5977.0], [99.7, 6103.0], [99.8, 6161.0], [99.9, 6193.0], [100.0, 6264.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2235.0, "series": [{"data": [[0.0, 515.0], [600.0, 271.0], [700.0, 19.0], [800.0, 14.0], [900.0, 20.0], [1000.0, 16.0], [1100.0, 18.0], [1200.0, 10.0], [1300.0, 24.0], [1400.0, 9.0], [1500.0, 8.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 6.0], [2000.0, 4.0], [2200.0, 2.0], [2300.0, 11.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 8.0], [2700.0, 5.0], [2800.0, 1.0], [3000.0, 3.0], [3100.0, 10.0], [3200.0, 3.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 18.0], [3700.0, 4.0], [3800.0, 5.0], [3900.0, 11.0], [4000.0, 7.0], [4100.0, 5.0], [4200.0, 16.0], [4300.0, 4.0], [4400.0, 7.0], [4500.0, 13.0], [4600.0, 6.0], [4700.0, 18.0], [4800.0, 14.0], [4900.0, 48.0], [5000.0, 14.0], [5100.0, 18.0], [5200.0, 9.0], [5300.0, 17.0], [5400.0, 11.0], [5500.0, 13.0], [5600.0, 6.0], [5700.0, 12.0], [5800.0, 2.0], [5900.0, 12.0], [6000.0, 7.0], [6100.0, 21.0], [6200.0, 10.0], [100.0, 1688.0], [200.0, 1926.0], [300.0, 1147.0], [400.0, 2235.0], [500.0, 1678.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 410.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7538.0, "series": [{"data": [[0.0, 7538.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2052.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 410.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 649.1572, "minX": 1.6695627E12, "maxY": 649.1572, "series": [{"data": [[1.6695627E12, 649.1572]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695627E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 4560.0, "series": [{"data": [[2.0, 46.0], [3.0, 47.0], [4.0, 49.0], [5.0, 11.0], [6.0, 12.5], [7.0, 10.0], [8.0, 15.0], [9.0, 12.5], [10.0, 13.0], [11.0, 13.0], [12.0, 21.5], [13.0, 25.0], [14.0, 32.0], [15.0, 6.0], [16.0, 38.0], [17.0, 13.0], [18.0, 48.5], [19.0, 38.333333333333336], [20.0, 41.0], [21.0, 41.2], [22.0, 48.5], [23.0, 31.0], [24.0, 41.2], [25.0, 24.0], [26.0, 46.0], [27.0, 46.0], [28.0, 59.0], [29.0, 48.0], [31.0, 49.888888888888886], [33.0, 50.44444444444444], [32.0, 46.75], [35.0, 43.25], [34.0, 32.0], [36.0, 81.0], [39.0, 46.5], [38.0, 53.5], [41.0, 41.333333333333336], [40.0, 73.0], [45.0, 61.0], [44.0, 61.0], [47.0, 67.8], [49.0, 69.0], [51.0, 18.5], [50.0, 81.875], [55.0, 67.66666666666667], [57.0, 80.11111111111111], [56.0, 46.0], [59.0, 74.14285714285714], [58.0, 78.25], [61.0, 54.0], [62.0, 70.375], [67.0, 50.0], [66.0, 46.0], [65.0, 58.333333333333336], [64.0, 64.8], [71.0, 33.0], [70.0, 62.4], [69.0, 41.0], [68.0, 58.2], [74.0, 54.25], [73.0, 31.333333333333332], [72.0, 55.0], [77.0, 46.62499999999999], [83.0, 65.36363636363636], [82.0, 39.875], [80.0, 49.63636363636364], [87.0, 64.0], [86.0, 62.5], [84.0, 62.166666666666664], [91.0, 57.0], [89.0, 79.0], [95.0, 59.833333333333336], [94.0, 77.0], [93.0, 51.5], [92.0, 89.42857142857143], [99.0, 47.0], [98.0, 69.0], [97.0, 63.0], [96.0, 83.0], [103.0, 74.16666666666667], [102.0, 48.0], [100.0, 59.5], [107.0, 91.63636363636364], [106.0, 81.46153846153847], [105.0, 61.0], [104.0, 97.5], [110.0, 71.0], [109.0, 124.14285714285714], [108.0, 70.25], [115.0, 117.62499999999999], [114.0, 65.0], [113.0, 96.66666666666667], [112.0, 104.57894736842104], [119.0, 140.75], [118.0, 103.2], [122.0, 120.85714285714286], [121.0, 111.0], [120.0, 104.0], [127.0, 115.66666666666667], [126.0, 113.0], [125.0, 118.66666666666666], [124.0, 148.0], [135.0, 140.75], [134.0, 81.33333333333333], [133.0, 159.0], [131.0, 110.0], [128.0, 117.5], [142.0, 179.66666666666666], [141.0, 230.33333333333334], [140.0, 40.0], [139.0, 127.0], [137.0, 137.5], [136.0, 147.0], [151.0, 198.00000000000003], [150.0, 177.07142857142856], [148.0, 116.5], [147.0, 182.57142857142858], [146.0, 153.0], [145.0, 79.0], [144.0, 109.71428571428571], [158.0, 207.2857142857143], [157.0, 151.5], [156.0, 195.42857142857142], [155.0, 216.44444444444446], [154.0, 213.0], [153.0, 200.2857142857143], [152.0, 210.53846153846152], [167.0, 210.66666666666666], [166.0, 163.0], [165.0, 182.0], [164.0, 192.0], [163.0, 200.4], [162.0, 197.0], [161.0, 214.0], [160.0, 97.0], [174.0, 195.4], [173.0, 182.4], [172.0, 201.8], [171.0, 179.25], [170.0, 193.25], [168.0, 147.0], [169.0, 196.0], [183.0, 200.0], [182.0, 153.99999999999997], [181.0, 179.33333333333334], [180.0, 78.0], [179.0, 177.0], [178.0, 172.5], [177.0, 184.0], [176.0, 193.37499999999997], [191.0, 170.0], [190.0, 156.33333333333334], [189.0, 148.0], [188.0, 179.33333333333331], [187.0, 158.99999999999997], [186.0, 178.85714285714283], [185.0, 166.14285714285714], [184.0, 99.0], [199.0, 186.6], [198.0, 175.6], [197.0, 182.28571428571428], [196.0, 178.25000000000006], [195.0, 178.66666666666666], [194.0, 171.52631578947367], [193.0, 156.0], [192.0, 164.66666666666666], [207.0, 184.0], [206.0, 188.625], [205.0, 166.0], [204.0, 165.0], [202.0, 191.5], [201.0, 185.5], [215.0, 228.0], [214.0, 176.5], [213.0, 208.0], [212.0, 199.14285714285714], [211.0, 186.66666666666669], [210.0, 195.77777777777777], [209.0, 182.7142857142857], [208.0, 179.33333333333334], [223.0, 1711.7500000000002], [222.0, 205.0], [221.0, 205.0], [219.0, 229.0], [218.0, 208.79999999999998], [216.0, 207.99999999999997], [231.0, 243.5], [230.0, 226.5], [229.0, 215.0], [228.0, 229.75], [227.0, 210.47999999999996], [226.0, 200.9090909090909], [225.0, 963.2916666666666], [224.0, 2213.25], [239.0, 694.3846153846154], [238.0, 2450.5], [237.0, 2062.9230769230767], [236.0, 915.2741935483873], [235.0, 1434.2], [234.0, 2318.4], [233.0, 2213.0], [232.0, 227.64285714285714], [247.0, 235.14285714285717], [246.0, 259.0], [245.0, 719.8000000000002], [244.0, 247.2857142857143], [243.0, 269.25], [242.0, 277.1666666666667], [241.0, 240.77777777777777], [240.0, 239.0], [254.0, 217.5], [253.0, 228.16666666666666], [252.0, 957.7096774193551], [251.0, 1426.8421052631581], [250.0, 834.1052631578948], [249.0, 251.6], [248.0, 242.77777777777777], [270.0, 205.08695652173913], [271.0, 185.33333333333334], [269.0, 215.25], [268.0, 526.1666666666667], [267.0, 827.888888888889], [266.0, 218.0], [265.0, 209.13333333333335], [264.0, 191.0], [263.0, 201.25], [258.0, 215.0], [257.0, 207.83333333333334], [262.0, 692.1150442477876], [261.0, 242.14285714285714], [260.0, 654.84], [286.0, 172.07692307692307], [287.0, 158.0], [285.0, 106.0], [284.0, 365.6896551724137], [283.0, 745.6315789473682], [282.0, 1240.8], [281.0, 213.25], [279.0, 179.0], [272.0, 221.0], [275.0, 863.5], [274.0, 310.4222222222221], [278.0, 178.5], [277.0, 150.0], [276.0, 179.0], [302.0, 170.6], [303.0, 176.5], [301.0, 180.0], [300.0, 173.88888888888889], [299.0, 182.07692307692307], [298.0, 182.0], [297.0, 182.0], [296.0, 180.11111111111111], [294.0, 1245.4], [289.0, 181.58333333333334], [288.0, 467.4999999999999], [291.0, 181.5], [290.0, 1349.3658536585365], [293.0, 171.91666666666669], [292.0, 441.1935483870968], [318.0, 122.75], [319.0, 681.448275862069], [317.0, 158.0], [316.0, 118.33333333333333], [315.0, 1008.3809523809529], [314.0, 166.2857142857143], [313.0, 563.2307692307692], [312.0, 161.33333333333334], [311.0, 163.0], [305.0, 1432.08], [304.0, 1495.7812500000002], [307.0, 937.7352941176472], [306.0, 160.0], [310.0, 469.0588235294119], [309.0, 633.7272727272729], [308.0, 1324.333333333333], [333.0, 213.4], [334.0, 733.6140350877192], [332.0, 222.6], [323.0, 161.5], [322.0, 160.57692307692312], [321.0, 186.5], [320.0, 158.5], [331.0, 197.59090909090907], [330.0, 444.7179487179488], [329.0, 151.5], [328.0, 796.25], [326.0, 1207.8], [325.0, 800.0625000000001], [324.0, 172.63636363636365], [350.0, 1788.7142857142858], [336.0, 660.1875], [337.0, 208.33333333333334], [339.0, 188.5], [338.0, 1186.3999999999999], [343.0, 164.5], [341.0, 2647.0], [340.0, 992.5348837209301], [351.0, 2593.375], [349.0, 1254.4444444444443], [348.0, 1012.5365853658537], [347.0, 194.8], [346.0, 1770.3333333333335], [345.0, 122.0], [344.0, 205.14285714285714], [366.0, 209.66666666666666], [352.0, 2269.142857142857], [354.0, 2237.095238095238], [353.0, 1556.6428571428573], [359.0, 1597.857142857143], [358.0, 3375.0], [357.0, 1005.1666666666666], [356.0, 216.2], [367.0, 200.0], [364.0, 210.66666666666663], [355.0, 239.0], [362.0, 218.2], [361.0, 1156.8000000000002], [360.0, 1772.1666666666665], [381.0, 379.87500000000006], [376.0, 508.46666666666664], [375.0, 572.6315789473684], [374.0, 443.29411764705884], [373.0, 644.4], [372.0, 2490.0], [377.0, 611.0], [378.0, 531.3888888888887], [379.0, 512.9545454545455], [383.0, 496.2857142857142], [382.0, 618.1951219512197], [380.0, 163.0], [371.0, 1403.447368421053], [370.0, 200.0], [369.0, 449.0555555555556], [368.0, 195.75000000000003], [397.0, 143.0769230769231], [393.0, 356.75], [384.0, 711.3571428571429], [391.0, 1111.6], [390.0, 1667.3333333333333], [389.0, 156.0], [388.0, 898.622222222222], [394.0, 223.66666666666666], [398.0, 215.6578947368421], [399.0, 457.5333333333333], [396.0, 186.0], [387.0, 921.3333333333334], [386.0, 226.66666666666666], [385.0, 179.0], [395.0, 247.0], [392.0, 841.0], [413.0, 341.0], [401.0, 102.0], [402.0, 139.0], [404.0, 83.0], [405.0, 193.3125], [406.0, 519.7777777777778], [407.0, 192.57142857142858], [400.0, 200.0], [415.0, 1303.75], [411.0, 151.33333333333334], [410.0, 183.375], [409.0, 504.3846153846154], [408.0, 730.0], [414.0, 204.0], [412.0, 210.66666666666666], [403.0, 194.66666666666666], [430.0, 242.0], [431.0, 1092.0], [429.0, 619.4999999999999], [428.0, 810.142857142857], [427.0, 981.090909090909], [426.0, 906.3333333333334], [425.0, 185.33333333333334], [424.0, 149.0], [423.0, 174.0], [417.0, 179.66666666666666], [416.0, 4560.0], [419.0, 856.9230769230769], [418.0, 206.66666666666666], [422.0, 197.5], [421.0, 170.0], [420.0, 172.4], [445.0, 208.66666666666666], [446.0, 1178.3333333333333], [444.0, 206.25], [435.0, 181.5], [434.0, 224.0], [433.0, 211.66666666666666], [432.0, 175.6], [443.0, 230.75], [442.0, 690.0], [441.0, 189.66666666666666], [440.0, 225.0], [439.0, 230.0], [438.0, 195.25], [437.0, 599.4545454545455], [436.0, 169.25], [462.0, 130.0], [463.0, 171.5], [460.0, 183.8], [461.0, 228.0], [459.0, 189.625], [458.0, 169.0], [457.0, 200.8], [456.0, 188.0], [455.0, 191.83333333333331], [449.0, 640.3], [451.0, 218.33333333333337], [450.0, 215.85714285714286], [454.0, 1596.6666666666665], [453.0, 176.875], [452.0, 351.9642857142857], [465.0, 430.9166666666667], [470.0, 310.3636363636363], [466.0, 301.25], [467.0, 298.7142857142857], [468.0, 535.75], [469.0, 277.4], [464.0, 408.9230769230769], [471.0, 297.0], [479.0, 248.0], [473.0, 203.6], [472.0, 212.875], [475.0, 223.45454545454547], [474.0, 328.0], [478.0, 202.5], [477.0, 262.8333333333333], [476.0, 162.0], [493.0, 557.4615384615385], [487.0, 324.0], [495.0, 238.33333333333334], [492.0, 1001.8125000000003], [483.0, 236.625], [482.0, 1564.0], [481.0, 258.8], [480.0, 1573.6666666666667], [491.0, 1731.625], [490.0, 678.2222222222222], [489.0, 185.0], [488.0, 259.0], [486.0, 231.2], [485.0, 722.875], [484.0, 913.8333333333334], [510.0, 315.6666666666667], [509.0, 462.25], [499.0, 291.40000000000003], [497.0, 239.57142857142858], [496.0, 1300.9500000000003], [511.0, 322.8181818181818], [507.0, 276.2], [506.0, 289.55555555555554], [505.0, 344.3333333333333], [503.0, 321.57142857142856], [502.0, 246.62499999999997], [501.0, 290.2], [500.0, 250.0], [516.0, 341.41666666666674], [523.0, 533.0], [513.0, 324.4], [515.0, 269.1428571428571], [527.0, 1463.7142857142856], [512.0, 289.66666666666663], [524.0, 409.23809523809524], [525.0, 1183.0], [526.0, 1047.0], [517.0, 467.0], [518.0, 347.0], [519.0, 450.0], [536.0, 350.0], [537.0, 441.8], [538.0, 516.0], [542.0, 734.3571428571429], [541.0, 2292.5], [540.0, 1413.5714285714284], [543.0, 332.0], [528.0, 346.5333333333334], [530.0, 340.0], [529.0, 281.7142857142857], [531.0, 483.0], [533.0, 222.4], [532.0, 365.6], [535.0, 339.8888888888889], [534.0, 479.0], [520.0, 477.79999999999995], [521.0, 401.71428571428567], [522.0, 406.27272727272725], [549.0, 434.6428571428572], [548.0, 550.1935483870968], [559.0, 327.6666666666667], [545.0, 357.375], [547.0, 321.8], [551.0, 312.0], [550.0, 329.2352941176471], [568.0, 408.3333333333333], [570.0, 293.764705882353], [569.0, 391.1666666666667], [572.0, 324.3333333333333], [571.0, 346.57142857142856], [574.0, 389.6], [573.0, 467.0], [554.0, 455.0], [553.0, 436.5], [552.0, 208.0], [555.0, 736.8999999999999], [557.0, 442.7368421052631], [556.0, 296.5], [558.0, 498.89999999999986], [560.0, 458.55555555555543], [561.0, 623.9230769230769], [562.0, 427.13333333333327], [566.0, 559.0], [565.0, 1357.142857142857], [563.0, 306.53333333333336], [581.0, 1651.0], [577.0, 672.1818181818182], [576.0, 422.0], [589.0, 330.5], [588.0, 389.5], [586.0, 429.3333333333333], [584.0, 275.0], [587.0, 374.5], [578.0, 1305.75], [580.0, 382.0], [579.0, 249.0], [595.0, 413.6], [594.0, 327.0], [593.0, 380.81818181818176], [592.0, 344.0], [603.0, 352.5], [606.0, 2130.5], [605.0, 1080.0], [607.0, 356.4], [601.0, 582.4615384615386], [600.0, 421.3333333333333], [582.0, 339.57142857142856], [602.0, 273.5], [596.0, 627.1333333333333], [597.0, 311.25], [598.0, 318.83333333333337], [599.0, 312.85714285714283], [633.0, 306.6666666666667], [616.0, 290.0], [617.0, 467.5], [618.0, 364.0], [619.0, 321.5], [621.0, 1061.0], [620.0, 540.0], [632.0, 414.0], [614.0, 1503.0], [613.0, 363.0], [612.0, 362.0], [609.0, 287.6666666666667], [608.0, 709.4444444444443], [623.0, 407.5], [635.0, 313.3684210526316], [634.0, 232.33333333333334], [636.0, 282.5], [637.0, 347.6666666666667], [639.0, 493.5], [625.0, 419.5], [624.0, 927.6666666666667], [627.0, 2056.0], [626.0, 314.3333333333333], [629.0, 430.0], [628.0, 459.0], [631.0, 284.0], [630.0, 806.2857142857143], [638.0, 206.0], [647.0, 365.44444444444446], [652.0, 391.0], [649.0, 332.3684210526316], [648.0, 308.0], [650.0, 321.13043478260886], [651.0, 334.9642857142858], [655.0, 420.0], [653.0, 313.3333333333333], [664.0, 389.0], [646.0, 306.0], [645.0, 431.75], [644.0, 316.0], [642.0, 287.0], [641.0, 364.57142857142856], [640.0, 413.0], [657.0, 440.3333333333333], [663.0, 344.5], [661.0, 2157.0], [660.0, 977.3333333333334], [671.0, 381.578947368421], [656.0, 361.5], [669.0, 354.70588235294116], [670.0, 328.1111111111111], [665.0, 473.0], [667.0, 392.47999999999996], [666.0, 447.0], [668.0, 325.7777777777778], [697.0, 305.0], [689.0, 356.42105263157896], [673.0, 370.00000000000006], [675.0, 328.57142857142856], [678.0, 289.6666666666667], [677.0, 409.83333333333337], [687.0, 933.8], [686.0, 255.0], [683.0, 355.88235294117646], [682.0, 280.625], [681.0, 212.0], [680.0, 433.3333333333333], [685.0, 371.0], [691.0, 418.0], [690.0, 418.0], [692.0, 305.3333333333333], [693.0, 370.2857142857143], [694.0, 846.2857142857142], [698.0, 401.71875], [699.0, 464.99999999999994], [703.0, 366.4], [688.0, 277.0], [702.0, 149.0], [701.0, 339.5], [700.0, 924.2857142857142], [705.0, 331.0], [704.0, 378.3333333333333], [706.0, 360.0], [707.0, 337.0], [708.0, 368.6666666666667], [728.0, 765.6000000000001], [710.0, 430.0], [730.0, 222.33333333333334], [729.0, 446.0], [732.0, 389.5], [731.0, 404.25], [735.0, 305.74999999999994], [720.0, 423.0], [723.0, 299.0], [722.0, 401.0], [734.0, 365.5], [713.0, 407.1666666666667], [712.0, 331.3333333333333], [714.0, 360.25], [718.0, 356.0], [717.0, 251.0], [716.0, 425.2], [715.0, 263.3333333333333], [719.0, 411.0], [724.0, 374.22222222222223], [725.0, 426.5], [726.0, 348.14285714285717], [727.0, 712.25], [736.0, 376.875], [737.0, 297.8], [738.0, 437.75], [741.0, 382.6], [740.0, 414.5], [743.0, 1915.0], [742.0, 496.5], [745.0, 652.1], [744.0, 465.75000000000006], [746.0, 381.25], [747.0, 336.0], [748.0, 386.8], [749.0, 276.0], [751.0, 346.0], [750.0, 520.5], [753.0, 600.6250000000001], [752.0, 740.4], [756.0, 506.0], [754.0, 496.0], [758.0, 1050.0], [757.0, 357.0], [767.0, 329.2307692307692], [766.0, 344.0], [765.0, 417.13636363636357], [764.0, 313.0], [774.0, 354.0], [768.0, 1196.25], [783.0, 477.0], [769.0, 342.92857142857144], [773.0, 320.85714285714283], [775.0, 356.0], [776.0, 369.0], [781.0, 529.0], [782.0, 513.0], [784.0, 504.09090909090907], [791.0, 362.1333333333333], [790.0, 1303.75], [788.0, 240.0], [787.0, 428.3333333333333], [785.0, 1214.75], [792.0, 975.6363636363637], [796.0, 718.4545454545454], [795.0, 1544.0], [794.0, 440.75], [798.0, 1053.8181818181818], [827.0, 393.0], [802.0, 401.6666666666667], [803.0, 355.4], [804.0, 435.5], [807.0, 437.0], [805.0, 1088.4], [826.0, 508.4285714285714], [824.0, 458.75000000000006], [808.0, 470.3333333333333], [809.0, 425.5], [815.0, 475.5], [801.0, 244.0], [800.0, 267.0], [814.0, 462.5], [813.0, 466.9], [812.0, 629.0], [811.0, 305.0], [819.0, 357.4], [821.0, 535.6666666666666], [830.0, 382.6666666666667], [831.0, 518.2], [816.0, 417.5714285714286], [818.0, 473.0], [817.0, 522.0], [829.0, 441.5], [860.0, 580.5], [835.0, 474.75], [838.0, 362.0], [836.0, 480.8], [839.0, 495.2857142857143], [857.0, 510.25], [856.0, 580.4], [845.0, 515.75], [843.0, 1297.25], [841.0, 904.75], [840.0, 532.5], [847.0, 565.6666666666666], [832.0, 519.5], [834.0, 513.2], [833.0, 521.5], [846.0, 475.0], [863.0, 420.22222222222223], [848.0, 516.4], [851.0, 516.3333333333334], [849.0, 536.0], [854.0, 509.3333333333333], [853.0, 560.0], [862.0, 582.0], [861.0, 520.0], [859.0, 550.8], [858.0, 577.6666666666666], [888.0, 510.4], [893.0, 587.8333333333334], [865.0, 481.59999999999997], [864.0, 571.0], [867.0, 580.0], [866.0, 1144.8], [871.0, 576.5], [870.0, 1284.0], [879.0, 747.1923076923076], [878.0, 563.7142857142858], [877.0, 574.8888888888888], [876.0, 617.2631578947368], [875.0, 553.0], [874.0, 564.5], [873.0, 530.6666666666666], [872.0, 556.0], [895.0, 572.5], [881.0, 508.4], [880.0, 543.0], [883.0, 550.0], [882.0, 612.0], [885.0, 506.0], [884.0, 471.0], [892.0, 546.0], [890.0, 549.5], [889.0, 546.0], [887.0, 598.5], [886.0, 557.5], [922.0, 586.0], [926.0, 583.25], [906.0, 451.0], [905.0, 596.8], [904.0, 501.0], [909.0, 585.5], [908.0, 581.2], [911.0, 549.6666666666666], [898.0, 584.75], [897.0, 562.0], [900.0, 596.6], [899.0, 563.0], [903.0, 595.2], [902.0, 587.5], [910.0, 603.0], [921.0, 573.1904761904763], [920.0, 579.1250000000001], [912.0, 390.75], [913.0, 429.44444444444446], [915.0, 622.0], [914.0, 579.2857142857142], [916.0, 439.2], [919.0, 567.8], [918.0, 570.4285714285714], [917.0, 550.625], [927.0, 471.5], [925.0, 557.5], [924.0, 585.3333333333334], [923.0, 576.0], [934.0, 511.6666666666667], [930.0, 580.0], [929.0, 548.8], [928.0, 559.3076923076923], [931.0, 562.0], [938.0, 567.0], [937.0, 532.6666666666666], [936.0, 541.3125], [932.0, 802.9999999999999], [933.0, 498.5], [947.0, 448.0588235294118], [955.0, 630.0], [957.0, 435.0], [956.0, 449.0], [952.0, 640.0], [935.0, 1108.5263157894738], [953.0, 450.0], [984.0, 500.5833333333333], [961.0, 434.7857142857143], [965.0, 460.0], [970.0, 537.3333333333334], [971.0, 461.5], [975.0, 558.75], [973.0, 578.5], [976.0, 513.3333333333334], [983.0, 738.4416666666667], [990.0, 459.3076923076923], [991.0, 448.25], [989.0, 457.52941176470586], [988.0, 519.1866028708135], [987.0, 679.8717948717949], [986.0, 548.0], [985.0, 548.8333333333334], [995.0, 438.5], [992.0, 465.52380952380946], [993.0, 447.0], [994.0, 465.9230769230769], [996.0, 411.22222222222223], [999.0, 535.0091743119269], [1000.0, 499.0374241402565], [998.0, 532.1111111111112], [997.0, 665.9090909090909], [1.0, 46.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[649.1566999999993, 523.6850999999992]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.6695627E12, "maxY": 50166.666666666664, "series": [{"data": [[1.6695627E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6695627E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695627E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 523.6850999999992, "minX": 1.6695627E12, "maxY": 523.6850999999992, "series": [{"data": [[1.6695627E12, 523.6850999999992]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695627E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 523.5202000000012, "minX": 1.6695627E12, "maxY": 523.5202000000012, "series": [{"data": [[1.6695627E12, 523.5202000000012]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695627E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6495999999999981, "minX": 1.6695627E12, "maxY": 0.6495999999999981, "series": [{"data": [[1.6695627E12, 0.6495999999999981]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695627E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.6695627E12, "maxY": 6264.0, "series": [{"data": [[1.6695627E12, 6264.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6695627E12, 579.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6695627E12, 5381.959999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6695627E12, 941.7999999999956]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6695627E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6695627E12, 380.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695627E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 60.5, "minX": 422.0, "maxY": 499.0, "series": [{"data": [[1128.0, 213.0], [1097.0, 208.0], [1210.0, 192.0], [1239.0, 499.0], [1324.0, 398.0], [1311.0, 491.0], [1299.0, 474.0], [422.0, 60.5], [970.0, 395.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1324.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 60.5, "minX": 422.0, "maxY": 499.0, "series": [{"data": [[1128.0, 213.0], [1097.0, 208.0], [1210.0, 192.0], [1239.0, 499.0], [1324.0, 398.0], [1311.0, 490.0], [1299.0, 474.0], [422.0, 60.5], [970.0, 395.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1324.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695627E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695627E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695627E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695627E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695627E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695627E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695627E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695627E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695627E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695627E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695627E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695627E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

