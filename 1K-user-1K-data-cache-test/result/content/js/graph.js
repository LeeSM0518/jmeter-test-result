/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 4631.0, "series": [{"data": [[0.0, 2.0], [0.1, 7.0], [0.2, 10.0], [0.3, 16.0], [0.4, 19.0], [0.5, 25.0], [0.6, 32.0], [0.7, 41.0], [0.8, 48.0], [0.9, 54.0], [1.0, 62.0], [1.1, 71.0], [1.2, 78.0], [1.3, 81.0], [1.4, 86.0], [1.5, 91.0], [1.6, 94.0], [1.7, 96.0], [1.8, 98.0], [1.9, 99.0], [2.0, 102.0], [2.1, 103.0], [2.2, 104.0], [2.3, 106.0], [2.4, 111.0], [2.5, 113.0], [2.6, 117.0], [2.7, 119.0], [2.8, 121.0], [2.9, 124.0], [3.0, 127.0], [3.1, 129.0], [3.2, 134.0], [3.3, 136.0], [3.4, 140.0], [3.5, 142.0], [3.6, 144.0], [3.7, 145.0], [3.8, 147.0], [3.9, 148.0], [4.0, 153.0], [4.1, 154.0], [4.2, 156.0], [4.3, 159.0], [4.4, 161.0], [4.5, 163.0], [4.6, 166.0], [4.7, 168.0], [4.8, 173.0], [4.9, 175.0], [5.0, 176.0], [5.1, 180.0], [5.2, 183.0], [5.3, 187.0], [5.4, 188.0], [5.5, 192.0], [5.6, 196.0], [5.7, 203.0], [5.8, 210.0], [5.9, 214.0], [6.0, 218.0], [6.1, 221.0], [6.2, 227.0], [6.3, 231.0], [6.4, 240.0], [6.5, 244.0], [6.6, 250.0], [6.7, 252.0], [6.8, 255.0], [6.9, 256.0], [7.0, 258.0], [7.1, 260.0], [7.2, 264.0], [7.3, 268.0], [7.4, 271.0], [7.5, 274.0], [7.6, 278.0], [7.7, 280.0], [7.8, 283.0], [7.9, 284.0], [8.0, 285.0], [8.1, 286.0], [8.2, 288.0], [8.3, 290.0], [8.4, 291.0], [8.5, 292.0], [8.6, 293.0], [8.7, 294.0], [8.8, 296.0], [8.9, 297.0], [9.0, 298.0], [9.1, 299.0], [9.2, 300.0], [9.3, 301.0], [9.4, 302.0], [9.5, 303.0], [9.6, 304.0], [9.7, 305.0], [9.8, 306.0], [9.9, 306.0], [10.0, 308.0], [10.1, 309.0], [10.2, 310.0], [10.3, 311.0], [10.4, 311.0], [10.5, 312.0], [10.6, 313.0], [10.7, 314.0], [10.8, 315.0], [10.9, 315.0], [11.0, 317.0], [11.1, 317.0], [11.2, 318.0], [11.3, 319.0], [11.4, 320.0], [11.5, 321.0], [11.6, 322.0], [11.7, 324.0], [11.8, 325.0], [11.9, 325.0], [12.0, 326.0], [12.1, 327.0], [12.2, 329.0], [12.3, 330.0], [12.4, 331.0], [12.5, 331.0], [12.6, 332.0], [12.7, 333.0], [12.8, 333.0], [12.9, 334.0], [13.0, 335.0], [13.1, 335.0], [13.2, 336.0], [13.3, 336.0], [13.4, 338.0], [13.5, 338.0], [13.6, 339.0], [13.7, 340.0], [13.8, 341.0], [13.9, 342.0], [14.0, 343.0], [14.1, 344.0], [14.2, 344.0], [14.3, 346.0], [14.4, 347.0], [14.5, 348.0], [14.6, 348.0], [14.7, 349.0], [14.8, 351.0], [14.9, 351.0], [15.0, 353.0], [15.1, 353.0], [15.2, 354.0], [15.3, 355.0], [15.4, 355.0], [15.5, 356.0], [15.6, 358.0], [15.7, 359.0], [15.8, 360.0], [15.9, 361.0], [16.0, 361.0], [16.1, 362.0], [16.2, 363.0], [16.3, 363.0], [16.4, 364.0], [16.5, 365.0], [16.6, 366.0], [16.7, 367.0], [16.8, 368.0], [16.9, 369.0], [17.0, 370.0], [17.1, 370.0], [17.2, 371.0], [17.3, 372.0], [17.4, 372.0], [17.5, 373.0], [17.6, 373.0], [17.7, 374.0], [17.8, 375.0], [17.9, 376.0], [18.0, 377.0], [18.1, 378.0], [18.2, 379.0], [18.3, 379.0], [18.4, 380.0], [18.5, 381.0], [18.6, 382.0], [18.7, 383.0], [18.8, 384.0], [18.9, 384.0], [19.0, 385.0], [19.1, 385.0], [19.2, 387.0], [19.3, 388.0], [19.4, 388.0], [19.5, 389.0], [19.6, 389.0], [19.7, 391.0], [19.8, 392.0], [19.9, 392.0], [20.0, 393.0], [20.1, 394.0], [20.2, 394.0], [20.3, 395.0], [20.4, 395.0], [20.5, 396.0], [20.6, 396.0], [20.7, 397.0], [20.8, 397.0], [20.9, 398.0], [21.0, 399.0], [21.1, 400.0], [21.2, 400.0], [21.3, 401.0], [21.4, 402.0], [21.5, 402.0], [21.6, 403.0], [21.7, 404.0], [21.8, 405.0], [21.9, 405.0], [22.0, 406.0], [22.1, 407.0], [22.2, 408.0], [22.3, 408.0], [22.4, 409.0], [22.5, 409.0], [22.6, 410.0], [22.7, 411.0], [22.8, 411.0], [22.9, 412.0], [23.0, 413.0], [23.1, 413.0], [23.2, 414.0], [23.3, 415.0], [23.4, 416.0], [23.5, 416.0], [23.6, 417.0], [23.7, 418.0], [23.8, 419.0], [23.9, 419.0], [24.0, 420.0], [24.1, 421.0], [24.2, 422.0], [24.3, 423.0], [24.4, 424.0], [24.5, 424.0], [24.6, 425.0], [24.7, 427.0], [24.8, 427.0], [24.9, 428.0], [25.0, 428.0], [25.1, 429.0], [25.2, 430.0], [25.3, 430.0], [25.4, 431.0], [25.5, 431.0], [25.6, 432.0], [25.7, 433.0], [25.8, 434.0], [25.9, 435.0], [26.0, 436.0], [26.1, 436.0], [26.2, 437.0], [26.3, 437.0], [26.4, 439.0], [26.5, 440.0], [26.6, 440.0], [26.7, 441.0], [26.8, 442.0], [26.9, 443.0], [27.0, 444.0], [27.1, 445.0], [27.2, 446.0], [27.3, 447.0], [27.4, 448.0], [27.5, 449.0], [27.6, 450.0], [27.7, 451.0], [27.8, 451.0], [27.9, 451.0], [28.0, 452.0], [28.1, 452.0], [28.2, 453.0], [28.3, 454.0], [28.4, 455.0], [28.5, 455.0], [28.6, 456.0], [28.7, 456.0], [28.8, 458.0], [28.9, 459.0], [29.0, 459.0], [29.1, 460.0], [29.2, 460.0], [29.3, 461.0], [29.4, 461.0], [29.5, 462.0], [29.6, 464.0], [29.7, 464.0], [29.8, 465.0], [29.9, 466.0], [30.0, 467.0], [30.1, 468.0], [30.2, 469.0], [30.3, 469.0], [30.4, 470.0], [30.5, 471.0], [30.6, 472.0], [30.7, 472.0], [30.8, 473.0], [30.9, 475.0], [31.0, 476.0], [31.1, 477.0], [31.2, 478.0], [31.3, 479.0], [31.4, 479.0], [31.5, 481.0], [31.6, 481.0], [31.7, 482.0], [31.8, 483.0], [31.9, 484.0], [32.0, 485.0], [32.1, 485.0], [32.2, 487.0], [32.3, 488.0], [32.4, 488.0], [32.5, 489.0], [32.6, 490.0], [32.7, 491.0], [32.8, 492.0], [32.9, 493.0], [33.0, 494.0], [33.1, 495.0], [33.2, 495.0], [33.3, 496.0], [33.4, 496.0], [33.5, 497.0], [33.6, 498.0], [33.7, 498.0], [33.8, 499.0], [33.9, 499.0], [34.0, 500.0], [34.1, 501.0], [34.2, 502.0], [34.3, 503.0], [34.4, 503.0], [34.5, 504.0], [34.6, 505.0], [34.7, 507.0], [34.8, 508.0], [34.9, 508.0], [35.0, 509.0], [35.1, 509.0], [35.2, 510.0], [35.3, 511.0], [35.4, 511.0], [35.5, 512.0], [35.6, 512.0], [35.7, 513.0], [35.8, 513.0], [35.9, 514.0], [36.0, 514.0], [36.1, 515.0], [36.2, 516.0], [36.3, 517.0], [36.4, 517.0], [36.5, 518.0], [36.6, 519.0], [36.7, 520.0], [36.8, 520.0], [36.9, 521.0], [37.0, 522.0], [37.1, 523.0], [37.2, 523.0], [37.3, 524.0], [37.4, 525.0], [37.5, 526.0], [37.6, 526.0], [37.7, 527.0], [37.8, 527.0], [37.9, 528.0], [38.0, 530.0], [38.1, 530.0], [38.2, 531.0], [38.3, 532.0], [38.4, 533.0], [38.5, 533.0], [38.6, 534.0], [38.7, 535.0], [38.8, 536.0], [38.9, 536.0], [39.0, 537.0], [39.1, 538.0], [39.2, 538.0], [39.3, 539.0], [39.4, 539.0], [39.5, 540.0], [39.6, 540.0], [39.7, 541.0], [39.8, 542.0], [39.9, 542.0], [40.0, 543.0], [40.1, 543.0], [40.2, 544.0], [40.3, 544.0], [40.4, 545.0], [40.5, 546.0], [40.6, 547.0], [40.7, 548.0], [40.8, 548.0], [40.9, 549.0], [41.0, 550.0], [41.1, 551.0], [41.2, 552.0], [41.3, 552.0], [41.4, 552.0], [41.5, 553.0], [41.6, 553.0], [41.7, 554.0], [41.8, 554.0], [41.9, 555.0], [42.0, 555.0], [42.1, 556.0], [42.2, 557.0], [42.3, 557.0], [42.4, 559.0], [42.5, 559.0], [42.6, 560.0], [42.7, 560.0], [42.8, 561.0], [42.9, 561.0], [43.0, 561.0], [43.1, 562.0], [43.2, 563.0], [43.3, 564.0], [43.4, 564.0], [43.5, 565.0], [43.6, 565.0], [43.7, 566.0], [43.8, 567.0], [43.9, 567.0], [44.0, 567.0], [44.1, 568.0], [44.2, 568.0], [44.3, 569.0], [44.4, 569.0], [44.5, 569.0], [44.6, 570.0], [44.7, 571.0], [44.8, 571.0], [44.9, 572.0], [45.0, 573.0], [45.1, 573.0], [45.2, 574.0], [45.3, 575.0], [45.4, 575.0], [45.5, 576.0], [45.6, 576.0], [45.7, 576.0], [45.8, 577.0], [45.9, 578.0], [46.0, 578.0], [46.1, 579.0], [46.2, 579.0], [46.3, 580.0], [46.4, 580.0], [46.5, 581.0], [46.6, 581.0], [46.7, 582.0], [46.8, 583.0], [46.9, 583.0], [47.0, 583.0], [47.1, 584.0], [47.2, 584.0], [47.3, 585.0], [47.4, 585.0], [47.5, 586.0], [47.6, 586.0], [47.7, 587.0], [47.8, 587.0], [47.9, 588.0], [48.0, 588.0], [48.1, 589.0], [48.2, 589.0], [48.3, 590.0], [48.4, 591.0], [48.5, 591.0], [48.6, 592.0], [48.7, 592.0], [48.8, 592.0], [48.9, 593.0], [49.0, 593.0], [49.1, 594.0], [49.2, 595.0], [49.3, 596.0], [49.4, 596.0], [49.5, 597.0], [49.6, 597.0], [49.7, 597.0], [49.8, 598.0], [49.9, 598.0], [50.0, 599.0], [50.1, 599.0], [50.2, 600.0], [50.3, 600.0], [50.4, 600.0], [50.5, 601.0], [50.6, 601.0], [50.7, 602.0], [50.8, 603.0], [50.9, 603.0], [51.0, 604.0], [51.1, 604.0], [51.2, 604.0], [51.3, 605.0], [51.4, 606.0], [51.5, 606.0], [51.6, 607.0], [51.7, 607.0], [51.8, 608.0], [51.9, 608.0], [52.0, 608.0], [52.1, 609.0], [52.2, 609.0], [52.3, 610.0], [52.4, 611.0], [52.5, 611.0], [52.6, 612.0], [52.7, 612.0], [52.8, 613.0], [52.9, 613.0], [53.0, 613.0], [53.1, 614.0], [53.2, 614.0], [53.3, 615.0], [53.4, 615.0], [53.5, 615.0], [53.6, 616.0], [53.7, 616.0], [53.8, 616.0], [53.9, 617.0], [54.0, 617.0], [54.1, 618.0], [54.2, 618.0], [54.3, 618.0], [54.4, 619.0], [54.5, 619.0], [54.6, 620.0], [54.7, 620.0], [54.8, 620.0], [54.9, 621.0], [55.0, 621.0], [55.1, 621.0], [55.2, 622.0], [55.3, 622.0], [55.4, 623.0], [55.5, 623.0], [55.6, 624.0], [55.7, 624.0], [55.8, 624.0], [55.9, 625.0], [56.0, 625.0], [56.1, 626.0], [56.2, 626.0], [56.3, 627.0], [56.4, 627.0], [56.5, 627.0], [56.6, 627.0], [56.7, 628.0], [56.8, 628.0], [56.9, 629.0], [57.0, 629.0], [57.1, 629.0], [57.2, 630.0], [57.3, 630.0], [57.4, 631.0], [57.5, 631.0], [57.6, 631.0], [57.7, 631.0], [57.8, 632.0], [57.9, 632.0], [58.0, 632.0], [58.1, 633.0], [58.2, 633.0], [58.3, 634.0], [58.4, 634.0], [58.5, 635.0], [58.6, 635.0], [58.7, 635.0], [58.8, 636.0], [58.9, 636.0], [59.0, 637.0], [59.1, 637.0], [59.2, 638.0], [59.3, 638.0], [59.4, 639.0], [59.5, 639.0], [59.6, 640.0], [59.7, 640.0], [59.8, 640.0], [59.9, 641.0], [60.0, 641.0], [60.1, 641.0], [60.2, 642.0], [60.3, 643.0], [60.4, 643.0], [60.5, 644.0], [60.6, 644.0], [60.7, 645.0], [60.8, 645.0], [60.9, 646.0], [61.0, 647.0], [61.1, 647.0], [61.2, 647.0], [61.3, 648.0], [61.4, 648.0], [61.5, 649.0], [61.6, 649.0], [61.7, 650.0], [61.8, 650.0], [61.9, 651.0], [62.0, 651.0], [62.1, 652.0], [62.2, 652.0], [62.3, 652.0], [62.4, 653.0], [62.5, 653.0], [62.6, 654.0], [62.7, 655.0], [62.8, 656.0], [62.9, 656.0], [63.0, 656.0], [63.1, 657.0], [63.2, 657.0], [63.3, 658.0], [63.4, 658.0], [63.5, 659.0], [63.6, 659.0], [63.7, 660.0], [63.8, 660.0], [63.9, 661.0], [64.0, 661.0], [64.1, 661.0], [64.2, 662.0], [64.3, 663.0], [64.4, 664.0], [64.5, 664.0], [64.6, 665.0], [64.7, 665.0], [64.8, 666.0], [64.9, 666.0], [65.0, 667.0], [65.1, 667.0], [65.2, 668.0], [65.3, 668.0], [65.4, 668.0], [65.5, 668.0], [65.6, 669.0], [65.7, 669.0], [65.8, 670.0], [65.9, 670.0], [66.0, 671.0], [66.1, 671.0], [66.2, 672.0], [66.3, 673.0], [66.4, 674.0], [66.5, 675.0], [66.6, 675.0], [66.7, 675.0], [66.8, 676.0], [66.9, 676.0], [67.0, 676.0], [67.1, 677.0], [67.2, 677.0], [67.3, 678.0], [67.4, 678.0], [67.5, 679.0], [67.6, 679.0], [67.7, 679.0], [67.8, 680.0], [67.9, 680.0], [68.0, 681.0], [68.1, 681.0], [68.2, 682.0], [68.3, 683.0], [68.4, 683.0], [68.5, 684.0], [68.6, 684.0], [68.7, 684.0], [68.8, 685.0], [68.9, 685.0], [69.0, 686.0], [69.1, 686.0], [69.2, 687.0], [69.3, 687.0], [69.4, 688.0], [69.5, 688.0], [69.6, 689.0], [69.7, 689.0], [69.8, 690.0], [69.9, 691.0], [70.0, 691.0], [70.1, 692.0], [70.2, 692.0], [70.3, 693.0], [70.4, 693.0], [70.5, 694.0], [70.6, 694.0], [70.7, 695.0], [70.8, 695.0], [70.9, 696.0], [71.0, 697.0], [71.1, 697.0], [71.2, 698.0], [71.3, 699.0], [71.4, 700.0], [71.5, 700.0], [71.6, 701.0], [71.7, 701.0], [71.8, 701.0], [71.9, 702.0], [72.0, 702.0], [72.1, 703.0], [72.2, 704.0], [72.3, 704.0], [72.4, 705.0], [72.5, 705.0], [72.6, 706.0], [72.7, 707.0], [72.8, 707.0], [72.9, 707.0], [73.0, 708.0], [73.1, 708.0], [73.2, 709.0], [73.3, 709.0], [73.4, 710.0], [73.5, 710.0], [73.6, 711.0], [73.7, 711.0], [73.8, 712.0], [73.9, 713.0], [74.0, 714.0], [74.1, 715.0], [74.2, 716.0], [74.3, 716.0], [74.4, 717.0], [74.5, 719.0], [74.6, 720.0], [74.7, 721.0], [74.8, 721.0], [74.9, 722.0], [75.0, 723.0], [75.1, 724.0], [75.2, 724.0], [75.3, 724.0], [75.4, 725.0], [75.5, 726.0], [75.6, 727.0], [75.7, 728.0], [75.8, 728.0], [75.9, 730.0], [76.0, 731.0], [76.1, 732.0], [76.2, 732.0], [76.3, 733.0], [76.4, 733.0], [76.5, 734.0], [76.6, 735.0], [76.7, 735.0], [76.8, 736.0], [76.9, 736.0], [77.0, 737.0], [77.1, 737.0], [77.2, 738.0], [77.3, 739.0], [77.4, 739.0], [77.5, 740.0], [77.6, 740.0], [77.7, 740.0], [77.8, 741.0], [77.9, 743.0], [78.0, 743.0], [78.1, 744.0], [78.2, 745.0], [78.3, 745.0], [78.4, 746.0], [78.5, 746.0], [78.6, 747.0], [78.7, 747.0], [78.8, 748.0], [78.9, 749.0], [79.0, 750.0], [79.1, 751.0], [79.2, 752.0], [79.3, 752.0], [79.4, 753.0], [79.5, 754.0], [79.6, 754.0], [79.7, 755.0], [79.8, 756.0], [79.9, 756.0], [80.0, 757.0], [80.1, 757.0], [80.2, 758.0], [80.3, 759.0], [80.4, 760.0], [80.5, 760.0], [80.6, 761.0], [80.7, 762.0], [80.8, 762.0], [80.9, 763.0], [81.0, 764.0], [81.1, 764.0], [81.2, 765.0], [81.3, 765.0], [81.4, 766.0], [81.5, 767.0], [81.6, 767.0], [81.7, 768.0], [81.8, 769.0], [81.9, 769.0], [82.0, 770.0], [82.1, 770.0], [82.2, 771.0], [82.3, 772.0], [82.4, 772.0], [82.5, 773.0], [82.6, 774.0], [82.7, 774.0], [82.8, 775.0], [82.9, 776.0], [83.0, 776.0], [83.1, 777.0], [83.2, 778.0], [83.3, 779.0], [83.4, 779.0], [83.5, 780.0], [83.6, 780.0], [83.7, 781.0], [83.8, 782.0], [83.9, 782.0], [84.0, 783.0], [84.1, 784.0], [84.2, 785.0], [84.3, 786.0], [84.4, 787.0], [84.5, 788.0], [84.6, 789.0], [84.7, 790.0], [84.8, 791.0], [84.9, 792.0], [85.0, 792.0], [85.1, 793.0], [85.2, 794.0], [85.3, 795.0], [85.4, 795.0], [85.5, 796.0], [85.6, 797.0], [85.7, 797.0], [85.8, 798.0], [85.9, 800.0], [86.0, 801.0], [86.1, 802.0], [86.2, 803.0], [86.3, 804.0], [86.4, 804.0], [86.5, 805.0], [86.6, 805.0], [86.7, 806.0], [86.8, 807.0], [86.9, 808.0], [87.0, 808.0], [87.1, 809.0], [87.2, 811.0], [87.3, 813.0], [87.4, 813.0], [87.5, 814.0], [87.6, 815.0], [87.7, 815.0], [87.8, 817.0], [87.9, 819.0], [88.0, 820.0], [88.1, 820.0], [88.2, 822.0], [88.3, 823.0], [88.4, 824.0], [88.5, 827.0], [88.6, 828.0], [88.7, 829.0], [88.8, 829.0], [88.9, 831.0], [89.0, 832.0], [89.1, 833.0], [89.2, 834.0], [89.3, 835.0], [89.4, 836.0], [89.5, 837.0], [89.6, 838.0], [89.7, 839.0], [89.8, 840.0], [89.9, 842.0], [90.0, 842.0], [90.1, 844.0], [90.2, 844.0], [90.3, 846.0], [90.4, 847.0], [90.5, 849.0], [90.6, 850.0], [90.7, 851.0], [90.8, 853.0], [90.9, 855.0], [91.0, 859.0], [91.1, 860.0], [91.2, 863.0], [91.3, 864.0], [91.4, 866.0], [91.5, 868.0], [91.6, 870.0], [91.7, 872.0], [91.8, 874.0], [91.9, 876.0], [92.0, 877.0], [92.1, 878.0], [92.2, 880.0], [92.3, 883.0], [92.4, 884.0], [92.5, 886.0], [92.6, 888.0], [92.7, 890.0], [92.8, 891.0], [92.9, 892.0], [93.0, 894.0], [93.1, 896.0], [93.2, 900.0], [93.3, 902.0], [93.4, 907.0], [93.5, 909.0], [93.6, 911.0], [93.7, 917.0], [93.8, 920.0], [93.9, 924.0], [94.0, 929.0], [94.1, 934.0], [94.2, 938.0], [94.3, 942.0], [94.4, 951.0], [94.5, 959.0], [94.6, 968.0], [94.7, 983.0], [94.8, 990.0], [94.9, 995.0], [95.0, 1005.0], [95.1, 1020.0], [95.2, 1034.0], [95.3, 1053.0], [95.4, 1070.0], [95.5, 1081.0], [95.6, 1089.0], [95.7, 1101.0], [95.8, 1119.0], [95.9, 1131.0], [96.0, 1147.0], [96.1, 1168.0], [96.2, 1190.0], [96.3, 1211.0], [96.4, 1231.0], [96.5, 1244.0], [96.6, 1258.0], [96.7, 1276.0], [96.8, 1290.0], [96.9, 1302.0], [97.0, 1321.0], [97.1, 1328.0], [97.2, 1343.0], [97.3, 1361.0], [97.4, 1382.0], [97.5, 1398.0], [97.6, 1420.0], [97.7, 1430.0], [97.8, 1476.0], [97.9, 1555.0], [98.0, 1790.0], [98.1, 2096.0], [98.2, 2118.0], [98.3, 2133.0], [98.4, 2158.0], [98.5, 2177.0], [98.6, 2185.0], [98.7, 2213.0], [98.8, 2250.0], [98.9, 2267.0], [99.0, 2292.0], [99.1, 2328.0], [99.2, 2363.0], [99.3, 2388.0], [99.4, 2471.0], [99.5, 2680.0], [99.6, 3211.0], [99.7, 3416.0], [99.8, 3747.0], [99.9, 4148.0], [100.0, 4631.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2123.0, "series": [{"data": [[0.0, 191.0], [600.0, 2123.0], [700.0, 1449.0], [800.0, 732.0], [900.0, 177.0], [1000.0, 69.0], [1100.0, 59.0], [1200.0, 63.0], [1300.0, 62.0], [1400.0, 34.0], [1500.0, 12.0], [100.0, 372.0], [1700.0, 4.0], [1900.0, 2.0], [2000.0, 10.0], [2100.0, 55.0], [2300.0, 32.0], [2200.0, 34.0], [2400.0, 11.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 2.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 4.0], [200.0, 349.0], [3200.0, 4.0], [3300.0, 6.0], [3400.0, 2.0], [3600.0, 5.0], [3700.0, 5.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 1.0], [4100.0, 4.0], [4200.0, 4.0], [4300.0, 4.0], [4600.0, 1.0], [300.0, 1198.0], [400.0, 1283.0], [500.0, 1623.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 216.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6378.0, "series": [{"data": [[0.0, 3406.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6378.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 216.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 794.513099999998, "minX": 1.66956498E12, "maxY": 794.513099999998, "series": [{"data": [[1.66956498E12, 794.513099999998]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1203.1250000000002, "series": [{"data": [[3.0, 4.666666666666667], [4.0, 7.0], [5.0, 18.75], [6.0, 57.0], [7.0, 86.0], [8.0, 80.5], [9.0, 22.0], [10.0, 5.0], [11.0, 13.0], [12.0, 89.0], [14.0, 39.333333333333336], [15.0, 44.0], [16.0, 45.333333333333336], [17.0, 23.0], [19.0, 44.666666666666664], [21.0, 36.25], [22.0, 56.5], [24.0, 8.0], [25.0, 19.0], [26.0, 77.33333333333333], [27.0, 104.0], [33.0, 44.33333333333333], [32.0, 10.0], [34.0, 79.0], [37.0, 113.0], [36.0, 101.0], [39.0, 112.0], [38.0, 111.66666666666667], [41.0, 97.16666666666666], [40.0, 104.0], [43.0, 123.0], [44.0, 60.5], [47.0, 82.5], [46.0, 123.0], [51.0, 107.5], [50.0, 133.25], [53.0, 125.0], [52.0, 112.25], [55.0, 128.33333333333334], [54.0, 61.0], [57.0, 118.0], [56.0, 126.0], [59.0, 114.0], [60.0, 124.0], [66.0, 11.0], [65.0, 123.0], [64.0, 121.75], [71.0, 111.0], [70.0, 9.0], [69.0, 104.0], [68.0, 118.0], [75.0, 85.85714285714285], [73.0, 106.66666666666666], [79.0, 191.0], [76.0, 84.0], [82.0, 123.5], [81.0, 56.0], [80.0, 37.0], [87.0, 142.0], [86.0, 71.0], [84.0, 135.33333333333334], [91.0, 110.33333333333333], [88.0, 71.0], [95.0, 112.11111111111111], [94.0, 80.0], [93.0, 83.90909090909092], [92.0, 78.0], [98.0, 150.0], [97.0, 86.33333333333333], [96.0, 136.0], [103.0, 172.2], [102.0, 183.75], [101.0, 125.8], [105.0, 172.6], [111.0, 111.16666666666667], [108.0, 47.5], [112.0, 296.0], [119.0, 210.75], [118.0, 161.75], [117.0, 97.5], [116.0, 89.5], [123.0, 112.0], [122.0, 180.0], [121.0, 81.0], [127.0, 294.25], [126.0, 219.875], [125.0, 215.57142857142858], [124.0, 117.0], [135.0, 8.0], [131.0, 289.6666666666667], [130.0, 222.0], [129.0, 124.5], [142.0, 217.0], [141.0, 213.0], [140.0, 218.33333333333334], [139.0, 262.1666666666667], [138.0, 271.1428571428571], [151.0, 340.0], [149.0, 302.6], [148.0, 266.12500000000006], [145.0, 194.83333333333331], [144.0, 122.0], [159.0, 144.0], [158.0, 271.2], [157.0, 189.0], [156.0, 265.6666666666667], [154.0, 229.66666666666666], [153.0, 282.6666666666667], [152.0, 137.0], [167.0, 398.0], [166.0, 436.0], [163.0, 447.0], [161.0, 244.25], [160.0, 233.39999999999998], [173.0, 217.6], [172.0, 447.0], [170.0, 112.0], [169.0, 250.33333333333334], [168.0, 171.66666666666669], [183.0, 391.5], [182.0, 192.0], [180.0, 455.0], [179.0, 328.0], [177.0, 268.5], [176.0, 298.25], [191.0, 379.0], [190.0, 327.0], [189.0, 294.5], [188.0, 266.0], [187.0, 382.5], [185.0, 166.0], [184.0, 349.0], [199.0, 353.0999999999999], [198.0, 377.6666666666667], [207.0, 404.3333333333333], [205.0, 326.0], [203.0, 332.8], [202.0, 403.0], [200.0, 348.6666666666667], [215.0, 390.0], [211.0, 301.25], [210.0, 194.66666666666666], [209.0, 458.0], [223.0, 334.5], [222.0, 189.2], [220.0, 362.6923076923077], [218.0, 437.0], [217.0, 257.0], [216.0, 307.75], [229.0, 276.3], [225.0, 447.0], [224.0, 296.5], [239.0, 42.0], [238.0, 412.6666666666667], [237.0, 281.25], [235.0, 256.5], [233.0, 358.70000000000005], [247.0, 499.5], [246.0, 472.6], [244.0, 334.6666666666667], [243.0, 493.0], [242.0, 240.33333333333331], [240.0, 203.6], [254.0, 388.66666666666663], [252.0, 182.4], [251.0, 170.0], [268.0, 373.0], [267.0, 7.0], [266.0, 203.0], [264.0, 144.0], [263.0, 299.5], [262.0, 373.99999999999994], [261.0, 335.2], [260.0, 329.0], [256.0, 144.0], [286.0, 403.0], [287.0, 393.0], [285.0, 379.75], [283.0, 270.2], [281.0, 349.09090909090907], [280.0, 329.70588235294116], [279.0, 153.0], [278.0, 461.0], [276.0, 46.0], [301.0, 345.4], [302.0, 246.0], [300.0, 436.25], [298.0, 357.2], [297.0, 362.75], [296.0, 291.75], [294.0, 403.0], [291.0, 307.25], [290.0, 405.6666666666667], [289.0, 332.83333333333337], [318.0, 407.25], [315.0, 295.5], [312.0, 409.3333333333333], [311.0, 299.5], [308.0, 423.5], [307.0, 304.5], [306.0, 427.2], [334.0, 266.6666666666667], [335.0, 240.5], [333.0, 213.0], [332.0, 321.71428571428567], [331.0, 128.0], [330.0, 120.5], [327.0, 120.0], [323.0, 389.0], [320.0, 273.75], [328.0, 120.0], [325.0, 117.0], [324.0, 336.25], [339.0, 344.625], [349.0, 323.77777777777777], [350.0, 303.6], [348.0, 291.8571428571429], [347.0, 297.00000000000006], [344.0, 309.125], [342.0, 190.0], [336.0, 409.0], [338.0, 362.0], [337.0, 308.0], [355.0, 364.0], [365.0, 439.5], [366.0, 438.0999999999999], [364.0, 338.33333333333337], [354.0, 366.5], [352.0, 351.2], [361.0, 353.0], [360.0, 361.0], [359.0, 352.4], [358.0, 330.0], [357.0, 276.8], [356.0, 416.4], [382.0, 519.3333333333334], [376.0, 347.0833333333333], [381.0, 354.0], [380.0, 415.33333333333337], [379.0, 349.0], [378.0, 409.2105263157894], [377.0, 421.1666666666667], [374.0, 331.0], [371.0, 387.0], [370.0, 330.0], [369.0, 324.5], [368.0, 307.6666666666667], [372.0, 212.0], [398.0, 406.75], [399.0, 442.99999999999994], [397.0, 453.3076923076923], [396.0, 413.8], [395.0, 440.75], [394.0, 443.8333333333333], [393.0, 421.12500000000006], [392.0, 423.0], [391.0, 427.75], [384.0, 449.0], [387.0, 471.4], [385.0, 409.6], [390.0, 415.75], [389.0, 472.2], [388.0, 474.0], [412.0, 466.6], [401.0, 415.0952380952381], [400.0, 455.6666666666667], [402.0, 473.7777777777777], [403.0, 488.9090909090909], [404.0, 440.2], [406.0, 409.1111111111111], [405.0, 401.2], [407.0, 421.1], [408.0, 463.8181818181818], [409.0, 485.5833333333333], [410.0, 627.5], [411.0, 438.1428571428571], [413.0, 549.1538461538461], [414.0, 593.0], [415.0, 598.4999999999999], [430.0, 535.4615384615385], [422.0, 666.0], [421.0, 481.0], [423.0, 634.8333333333333], [417.0, 479.6666666666667], [416.0, 344.5], [419.0, 392.25], [418.0, 426.5], [431.0, 613.0], [425.0, 460.0], [429.0, 349.0], [428.0, 464.25], [427.0, 361.25], [426.0, 463.0], [435.0, 462.1818181818182], [438.0, 524.1666666666667], [447.0, 236.66666666666669], [437.0, 430.6], [436.0, 612.0], [434.0, 590.0], [433.0, 435.6666666666667], [432.0, 481.7777777777777], [439.0, 378.75], [446.0, 109.5], [442.0, 200.0], [443.0, 388.0], [441.0, 285.53333333333336], [449.0, 264.4], [448.0, 396.1818181818182], [451.0, 352.0], [450.0, 470.0], [462.0, 416.6666666666667], [460.0, 398.5], [452.0, 130.0], [453.0, 110.0], [454.0, 256.25], [455.0, 122.0], [456.0, 159.10526315789477], [457.0, 108.33333333333333], [476.0, 367.8], [466.0, 318.6875], [465.0, 400.6666666666667], [464.0, 375.23529411764713], [467.0, 330.1428571428571], [470.0, 406.99999999999994], [469.0, 461.6666666666667], [468.0, 429.0], [471.0, 392.5], [477.0, 302.6666666666667], [478.0, 399.81249999999994], [479.0, 241.125], [473.0, 477.0], [472.0, 458.5], [475.0, 437.3333333333333], [474.0, 444.66666666666663], [483.0, 234.14285714285714], [485.0, 407.5], [484.0, 454.5], [486.0, 418.1818181818182], [487.0, 286.0], [482.0, 465.44444444444446], [480.0, 481.14285714285717], [489.0, 443.42857142857144], [490.0, 664.0], [491.0, 436.8888888888889], [492.0, 480.2727272727273], [493.0, 487.8], [495.0, 486.3333333333333], [488.0, 450.0], [494.0, 490.41666666666663], [510.0, 361.5], [496.0, 452.14285714285717], [497.0, 481.0], [499.0, 482.4], [498.0, 542.0], [503.0, 518.375], [502.0, 479.92307692307685], [501.0, 438.1666666666667], [500.0, 547.3333333333334], [511.0, 444.22222222222223], [509.0, 549.0], [508.0, 450.0], [507.0, 482.50980392156873], [506.0, 545.8333333333333], [505.0, 445.64285714285717], [504.0, 528.0], [539.0, 159.0], [533.0, 443.4285714285714], [534.0, 346.53333333333336], [535.0, 546.6666666666666], [536.0, 428.1666666666667], [519.0, 589.5], [518.0, 572.6], [517.0, 554.6666666666666], [516.0, 580.25], [515.0, 503.0], [514.0, 575.6], [513.0, 536.4285714285714], [512.0, 544.6666666666666], [527.0, 497.8571428571429], [526.0, 595.0], [525.0, 622.3333333333334], [524.0, 609.75], [523.0, 621.909090909091], [522.0, 612.0], [521.0, 600.7142857142857], [520.0, 610.25], [537.0, 414.1111111111111], [538.0, 412.1], [540.0, 463.3333333333333], [541.0, 160.0], [542.0, 443.6842105263158], [543.0, 693.6666666666666], [532.0, 682.0], [531.0, 640.6666666666666], [530.0, 597.0], [529.0, 662.0], [528.0, 577.6], [551.0, 280.66666666666663], [557.0, 744.0], [547.0, 407.5], [545.0, 544.1428571428571], [544.0, 603.5], [548.0, 240.5], [549.0, 577.3333333333333], [550.0, 429.0], [561.0, 695.0], [560.0, 449.8], [575.0, 608.0], [574.0, 542.0], [573.0, 400.875], [572.0, 512.75], [571.0, 429.5], [568.0, 570.0], [569.0, 531.5], [570.0, 610.25], [562.0, 548.0], [565.0, 653.3333333333334], [564.0, 577.3333333333334], [563.0, 463.77777777777777], [567.0, 508.0], [566.0, 495.5], [553.0, 243.0], [552.0, 583.0], [555.0, 574.5], [556.0, 573.0], [558.0, 617.0], [559.0, 706.0], [600.0, 505.5], [605.0, 429.625], [606.0, 565.7142857142857], [603.0, 549.0], [602.0, 508.0], [601.0, 657.0], [591.0, 547.3333333333334], [577.0, 420.8333333333333], [576.0, 284.0], [579.0, 451.5], [578.0, 619.8], [581.0, 460.25], [580.0, 513.0], [583.0, 627.0], [582.0, 644.0], [590.0, 513.5], [589.0, 573.5714285714286], [587.0, 345.57142857142856], [586.0, 274.0], [598.0, 597.0], [597.0, 539.3333333333334], [595.0, 568.25], [593.0, 419.8888888888889], [632.0, 349.66666666666663], [608.0, 473.0], [612.0, 291.3333333333333], [611.0, 572.3333333333334], [610.0, 568.8571428571429], [615.0, 622.0], [614.0, 588.0], [620.0, 287.6666666666667], [619.0, 536.0], [618.0, 592.7142857142857], [617.0, 663.0], [621.0, 358.2857142857143], [627.0, 346.0], [631.0, 558.0], [630.0, 655.0], [629.0, 501.25], [628.0, 646.75], [633.0, 453.6666666666667], [634.0, 488.42857142857144], [636.0, 527.0], [635.0, 634.0], [637.0, 605.0], [638.0, 713.3333333333334], [639.0, 662.4444444444445], [624.0, 592.1428571428572], [647.0, 657.75], [642.0, 283.0], [641.0, 637.5], [643.0, 581.1666666666667], [655.0, 596.0], [654.0, 591.1428571428572], [653.0, 609.8], [650.0, 556.3333333333334], [649.0, 609.3333333333334], [648.0, 578.0], [644.0, 562.375], [645.0, 572.6333333333331], [646.0, 564.3333333333334], [667.0, 732.0000000000001], [666.0, 449.0], [665.0, 620.5], [668.0, 669.2608695652175], [669.0, 612.8333333333333], [670.0, 532.0], [671.0, 511.0], [657.0, 602.6666666666667], [656.0, 549.8], [659.0, 443.0], [658.0, 649.5], [661.0, 601.0], [660.0, 421.0], [663.0, 642.0], [662.0, 598.5], [696.0, 693.6], [678.0, 363.0], [672.0, 441.6666666666667], [675.0, 638.5], [673.0, 603.0], [677.0, 597.5], [676.0, 652.5], [687.0, 604.0], [686.0, 572.0], [684.0, 618.3333333333334], [683.0, 486.5], [681.0, 475.0], [679.0, 653.0], [688.0, 673.8571428571429], [689.0, 668.5625000000001], [690.0, 575.1666666666666], [691.0, 614.1875], [692.0, 565.0], [694.0, 502.5], [693.0, 631.3333333333334], [697.0, 660.3600000000001], [699.0, 499.6], [698.0, 523.6666666666666], [700.0, 487.6], [701.0, 534.6250000000001], [729.0, 733.375], [715.0, 784.5454545454545], [714.0, 687.5], [712.0, 626.888888888889], [717.0, 690.1818181818181], [718.0, 711.1351351351351], [719.0, 652.2812499999999], [705.0, 655.0], [704.0, 574.1428571428572], [707.0, 577.6666666666667], [706.0, 549.0], [709.0, 674.625], [708.0, 633.551724137931], [728.0, 722.6666666666667], [711.0, 664.6], [726.0, 704.6296296296298], [725.0, 636.0], [724.0, 733.5], [723.0, 652.0], [722.0, 707.0], [721.0, 661.4], [720.0, 659.2857142857143], [727.0, 695.8333333333333], [735.0, 605.0], [734.0, 763.0], [733.0, 688.4285714285713], [732.0, 707.1428571428572], [731.0, 691.0909090909091], [730.0, 694.0], [740.0, 651.578947368421], [739.0, 674.0], [738.0, 665.0], [737.0, 666.0], [736.0, 693.0], [741.0, 690.75], [742.0, 695.0], [743.0, 625.945945945946], [745.0, 543.7647058823529], [744.0, 699.0], [747.0, 715.2857142857143], [746.0, 705.5714285714287], [748.0, 621.0], [749.0, 681.4545454545454], [751.0, 711.5], [754.0, 304.0], [760.0, 494.33333333333337], [762.0, 805.6], [761.0, 765.5384615384615], [764.0, 629.0], [763.0, 730.5], [767.0, 753.5714285714286], [753.0, 742.4], [752.0, 687.1666666666666], [766.0, 722.0], [759.0, 475.22222222222223], [758.0, 721.0], [757.0, 721.6666666666666], [756.0, 765.2], [755.0, 713.4], [793.0, 588.7692307692308], [798.0, 576.6666666666666], [769.0, 654.1999999999999], [779.0, 507.5], [778.0, 755.8461538461538], [776.0, 745.0], [780.0, 745.4], [782.0, 794.0], [768.0, 726.6666666666666], [781.0, 722.0], [785.0, 670.6666666666666], [786.0, 736.0], [787.0, 741.0], [789.0, 810.5], [788.0, 772.25], [791.0, 809.0], [790.0, 750.8], [792.0, 799.5], [775.0, 759.2], [774.0, 778.4615384615387], [773.0, 784.0], [771.0, 671.6666666666666], [770.0, 757.1428571428571], [794.0, 788.0], [799.0, 532.8571428571429], [784.0, 746.5], [797.0, 776.4285714285714], [795.0, 737.0], [805.0, 439.6666666666667], [801.0, 671.0], [800.0, 603.4285714285713], [815.0, 692.9999999999999], [812.0, 369.0], [813.0, 757.6], [814.0, 631.9375], [802.0, 516.0], [803.0, 582.4545454545454], [804.0, 621.0], [807.0, 535.2857142857143], [806.0, 795.0], [825.0, 715.6666666666666], [824.0, 785.0], [827.0, 705.5], [826.0, 710.8333333333334], [828.0, 721.4666666666667], [829.0, 795.2033898305086], [830.0, 744.6249999999999], [831.0, 723.1538461538462], [816.0, 607.8750000000002], [817.0, 635.0769230769231], [818.0, 520.1818181818181], [823.0, 816.6666666666666], [822.0, 733.6666666666666], [821.0, 790.875], [820.0, 771.3529411764707], [819.0, 774.0], [809.0, 542.0434782608694], [808.0, 753.3333333333334], [811.0, 618.0400000000002], [835.0, 671.8333333333334], [833.0, 601.2608695652174], [832.0, 332.6], [847.0, 779.7777777777778], [846.0, 786.5714285714287], [834.0, 656.4285714285714], [836.0, 582.0555555555554], [837.0, 701.6666666666666], [839.0, 764.0], [838.0, 622.0], [857.0, 724.75], [856.0, 764.1249999999999], [858.0, 698.6470588235294], [860.0, 625.5], [859.0, 797.0], [861.0, 816.8750000000001], [863.0, 764.4285714285714], [848.0, 779.0769230769231], [862.0, 754.1111111111111], [844.0, 468.38095238095235], [843.0, 791.0], [842.0, 682.0], [841.0, 768.1304347826089], [845.0, 524.8571428571429], [849.0, 528.4444444444445], [853.0, 405.90909090909093], [852.0, 802.3636363636364], [851.0, 765.0], [850.0, 793.8333333333334], [854.0, 609.9047619047619], [855.0, 644.8], [893.0, 668.6363636363636], [864.0, 731.2058823529412], [866.0, 766.4945054945056], [865.0, 988.8653846153848], [868.0, 684.4615384615385], [870.0, 774.5], [869.0, 809.7083333333334], [888.0, 595.0555555555557], [871.0, 845.6515151515154], [892.0, 546.0], [889.0, 622.3333333333334], [873.0, 637.1785714285713], [872.0, 837.8750000000002], [874.0, 567.8], [876.0, 617.0], [875.0, 720.4], [877.0, 860.8703703703704], [879.0, 573.5789473684209], [878.0, 837.8571428571431], [883.0, 528.5333333333333], [882.0, 637.5833333333334], [881.0, 627.9545454545454], [880.0, 645.740740740741], [885.0, 697.1111111111111], [884.0, 625.1739130434783], [887.0, 619.1142857142859], [886.0, 852.0833333333335], [895.0, 806.6346153846155], [894.0, 651.875], [903.0, 315.0], [907.0, 440.99999999999994], [897.0, 616.5714285714286], [896.0, 675.5714285714286], [899.0, 852.1333333333334], [898.0, 662.5416666666667], [900.0, 634.4615384615385], [901.0, 781.1818181818181], [902.0, 635.0], [927.0, 515.8695652173913], [912.0, 632.3333333333334], [914.0, 619.2500000000001], [913.0, 648.2], [917.0, 639.2692307692307], [915.0, 613.0], [919.0, 621.7045454545455], [918.0, 787.9444444444442], [926.0, 636.0222222222221], [925.0, 610.4642857142857], [924.0, 548.0], [923.0, 609.875], [922.0, 623.090909090909], [921.0, 590.0833333333334], [920.0, 681.0], [904.0, 873.4799999999999], [905.0, 591.5], [906.0, 557.0], [909.0, 385.54545454545456], [911.0, 637.0909090909091], [931.0, 935.6428571428571], [929.0, 528.1538461538462], [928.0, 562.3720930232561], [943.0, 568.1666666666666], [942.0, 585.46875], [940.0, 774.1212121212121], [939.0, 819.2592592592594], [938.0, 588.5999999999998], [937.0, 571.3333333333334], [936.0, 598.5], [930.0, 1203.1250000000002], [932.0, 385.8095238095238], [933.0, 394.5806451612903], [947.0, 598.9000000000001], [946.0, 562.6666666666666], [945.0, 906.25], [944.0, 853.3], [948.0, 547.1470588235294], [959.0, 591.2972972972972], [958.0, 590.3333333333334], [957.0, 651.0], [956.0, 621.9655172413793], [954.0, 559.7241379310344], [953.0, 594.0], [952.0, 513.0], [935.0, 590.4], [949.0, 312.0], [950.0, 571.4166666666667], [951.0, 665.2380952380951], [989.0, 537.5], [960.0, 466.1111111111111], [962.0, 622.4814814814814], [961.0, 666.75], [972.0, 814.0], [971.0, 669.6428571428572], [970.0, 694.0], [969.0, 606.3333333333334], [963.0, 565.9999999999999], [978.0, 559.0], [983.0, 753.8425531914895], [984.0, 310.0], [965.0, 625.5714285714283], [964.0, 623.4666666666666], [986.0, 670.5454545454545], [985.0, 637.0769230769231], [991.0, 579.1999999999999], [990.0, 647.4166666666666], [988.0, 720.9], [987.0, 531.6666666666666], [998.0, 557.4999999999999], [1000.0, 719.884264538199], [997.0, 663.9411764705883], [996.0, 632.7368421052631], [995.0, 672.0769230769231], [994.0, 649.5357142857144], [993.0, 621.75], [992.0, 654.0833333333333], [1.0, 2.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[794.5210000000039, 619.0006999999982]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956498E12, "maxY": 57666.666666666664, "series": [{"data": [[1.66956498E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956498E12, 57666.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 619.0006999999982, "minX": 1.66956498E12, "maxY": 619.0006999999982, "series": [{"data": [[1.66956498E12, 619.0006999999982]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 618.8199000000018, "minX": 1.66956498E12, "maxY": 618.8199000000018, "series": [{"data": [[1.66956498E12, 618.8199000000018]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6343000000000039, "minX": 1.66956498E12, "maxY": 0.6343000000000039, "series": [{"data": [[1.66956498E12, 0.6343000000000039]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.66956498E12, "maxY": 4631.0, "series": [{"data": [[1.66956498E12, 4631.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956498E12, 842.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956498E12, 2298.9299999999985]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956498E12, 1007.8499999999967]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956498E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956498E12, 599.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 187.0, "minX": 205.0, "maxY": 713.0, "series": [{"data": [[1132.0, 395.0], [1223.0, 649.0], [1287.0, 713.0], [1296.0, 440.0], [1371.0, 521.0], [1349.0, 634.0], [685.0, 187.0], [1452.0, 709.5], [205.0, 579.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1452.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 187.0, "minX": 205.0, "maxY": 713.0, "series": [{"data": [[1132.0, 395.0], [1223.0, 649.0], [1287.0, 713.0], [1296.0, 440.0], [1371.0, 521.0], [1349.0, 633.0], [685.0, 187.0], [1452.0, 709.5], [205.0, 579.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1452.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956498E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956498E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956498E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956498E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956498E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956498E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956498E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956498E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956498E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

