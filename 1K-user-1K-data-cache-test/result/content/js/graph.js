/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6177.0, "series": [{"data": [[0.0, 3.0], [0.1, 13.0], [0.2, 23.0], [0.3, 28.0], [0.4, 31.0], [0.5, 33.0], [0.6, 36.0], [0.7, 39.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 46.0], [1.2, 48.0], [1.3, 50.0], [1.4, 54.0], [1.5, 55.0], [1.6, 58.0], [1.7, 60.0], [1.8, 63.0], [1.9, 64.0], [2.0, 65.0], [2.1, 66.0], [2.2, 67.0], [2.3, 68.0], [2.4, 70.0], [2.5, 72.0], [2.6, 73.0], [2.7, 74.0], [2.8, 75.0], [2.9, 76.0], [3.0, 77.0], [3.1, 79.0], [3.2, 79.0], [3.3, 80.0], [3.4, 80.0], [3.5, 81.0], [3.6, 81.0], [3.7, 82.0], [3.8, 82.0], [3.9, 83.0], [4.0, 83.0], [4.1, 84.0], [4.2, 85.0], [4.3, 86.0], [4.4, 87.0], [4.5, 88.0], [4.6, 88.0], [4.7, 89.0], [4.8, 90.0], [4.9, 90.0], [5.0, 91.0], [5.1, 92.0], [5.2, 93.0], [5.3, 95.0], [5.4, 96.0], [5.5, 97.0], [5.6, 98.0], [5.7, 99.0], [5.8, 101.0], [5.9, 102.0], [6.0, 104.0], [6.1, 105.0], [6.2, 107.0], [6.3, 108.0], [6.4, 109.0], [6.5, 110.0], [6.6, 111.0], [6.7, 112.0], [6.8, 113.0], [6.9, 114.0], [7.0, 116.0], [7.1, 118.0], [7.2, 119.0], [7.3, 120.0], [7.4, 121.0], [7.5, 123.0], [7.6, 124.0], [7.7, 125.0], [7.8, 125.0], [7.9, 127.0], [8.0, 128.0], [8.1, 129.0], [8.2, 130.0], [8.3, 131.0], [8.4, 132.0], [8.5, 133.0], [8.6, 134.0], [8.7, 136.0], [8.8, 137.0], [8.9, 137.0], [9.0, 139.0], [9.1, 140.0], [9.2, 141.0], [9.3, 142.0], [9.4, 143.0], [9.5, 143.0], [9.6, 144.0], [9.7, 145.0], [9.8, 145.0], [9.9, 146.0], [10.0, 146.0], [10.1, 147.0], [10.2, 148.0], [10.3, 149.0], [10.4, 149.0], [10.5, 150.0], [10.6, 150.0], [10.7, 151.0], [10.8, 152.0], [10.9, 152.0], [11.0, 152.0], [11.1, 153.0], [11.2, 154.0], [11.3, 155.0], [11.4, 156.0], [11.5, 156.0], [11.6, 157.0], [11.7, 158.0], [11.8, 159.0], [11.9, 160.0], [12.0, 160.0], [12.1, 161.0], [12.2, 162.0], [12.3, 162.0], [12.4, 163.0], [12.5, 163.0], [12.6, 164.0], [12.7, 164.0], [12.8, 165.0], [12.9, 166.0], [13.0, 166.0], [13.1, 167.0], [13.2, 167.0], [13.3, 168.0], [13.4, 168.0], [13.5, 169.0], [13.6, 170.0], [13.7, 171.0], [13.8, 172.0], [13.9, 172.0], [14.0, 173.0], [14.1, 174.0], [14.2, 174.0], [14.3, 175.0], [14.4, 175.0], [14.5, 176.0], [14.6, 176.0], [14.7, 176.0], [14.8, 177.0], [14.9, 177.0], [15.0, 178.0], [15.1, 179.0], [15.2, 180.0], [15.3, 180.0], [15.4, 181.0], [15.5, 181.0], [15.6, 182.0], [15.7, 183.0], [15.8, 183.0], [15.9, 184.0], [16.0, 184.0], [16.1, 184.0], [16.2, 185.0], [16.3, 185.0], [16.4, 186.0], [16.5, 187.0], [16.6, 187.0], [16.7, 187.0], [16.8, 188.0], [16.9, 189.0], [17.0, 189.0], [17.1, 190.0], [17.2, 190.0], [17.3, 191.0], [17.4, 191.0], [17.5, 192.0], [17.6, 192.0], [17.7, 192.0], [17.8, 193.0], [17.9, 193.0], [18.0, 193.0], [18.1, 194.0], [18.2, 194.0], [18.3, 194.0], [18.4, 195.0], [18.5, 195.0], [18.6, 195.0], [18.7, 195.0], [18.8, 196.0], [18.9, 196.0], [19.0, 196.0], [19.1, 196.0], [19.2, 197.0], [19.3, 197.0], [19.4, 197.0], [19.5, 197.0], [19.6, 197.0], [19.7, 198.0], [19.8, 198.0], [19.9, 199.0], [20.0, 199.0], [20.1, 200.0], [20.2, 200.0], [20.3, 200.0], [20.4, 201.0], [20.5, 201.0], [20.6, 201.0], [20.7, 201.0], [20.8, 202.0], [20.9, 202.0], [21.0, 202.0], [21.1, 203.0], [21.2, 203.0], [21.3, 203.0], [21.4, 203.0], [21.5, 204.0], [21.6, 204.0], [21.7, 204.0], [21.8, 204.0], [21.9, 204.0], [22.0, 204.0], [22.1, 205.0], [22.2, 205.0], [22.3, 205.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 207.0], [22.8, 207.0], [22.9, 207.0], [23.0, 208.0], [23.1, 208.0], [23.2, 208.0], [23.3, 208.0], [23.4, 209.0], [23.5, 209.0], [23.6, 209.0], [23.7, 209.0], [23.8, 210.0], [23.9, 210.0], [24.0, 210.0], [24.1, 210.0], [24.2, 211.0], [24.3, 211.0], [24.4, 211.0], [24.5, 211.0], [24.6, 212.0], [24.7, 212.0], [24.8, 212.0], [24.9, 212.0], [25.0, 213.0], [25.1, 213.0], [25.2, 213.0], [25.3, 213.0], [25.4, 214.0], [25.5, 214.0], [25.6, 214.0], [25.7, 215.0], [25.8, 215.0], [25.9, 215.0], [26.0, 215.0], [26.1, 216.0], [26.2, 216.0], [26.3, 216.0], [26.4, 216.0], [26.5, 216.0], [26.6, 217.0], [26.7, 217.0], [26.8, 217.0], [26.9, 217.0], [27.0, 218.0], [27.1, 218.0], [27.2, 218.0], [27.3, 218.0], [27.4, 219.0], [27.5, 219.0], [27.6, 219.0], [27.7, 219.0], [27.8, 219.0], [27.9, 220.0], [28.0, 220.0], [28.1, 220.0], [28.2, 221.0], [28.3, 221.0], [28.4, 221.0], [28.5, 222.0], [28.6, 222.0], [28.7, 222.0], [28.8, 222.0], [28.9, 223.0], [29.0, 223.0], [29.1, 223.0], [29.2, 223.0], [29.3, 224.0], [29.4, 224.0], [29.5, 224.0], [29.6, 224.0], [29.7, 225.0], [29.8, 225.0], [29.9, 225.0], [30.0, 225.0], [30.1, 226.0], [30.2, 226.0], [30.3, 226.0], [30.4, 226.0], [30.5, 227.0], [30.6, 227.0], [30.7, 227.0], [30.8, 227.0], [30.9, 228.0], [31.0, 228.0], [31.1, 228.0], [31.2, 228.0], [31.3, 228.0], [31.4, 229.0], [31.5, 229.0], [31.6, 229.0], [31.7, 229.0], [31.8, 230.0], [31.9, 230.0], [32.0, 230.0], [32.1, 231.0], [32.2, 231.0], [32.3, 231.0], [32.4, 231.0], [32.5, 231.0], [32.6, 232.0], [32.7, 232.0], [32.8, 232.0], [32.9, 233.0], [33.0, 233.0], [33.1, 233.0], [33.2, 233.0], [33.3, 234.0], [33.4, 234.0], [33.5, 234.0], [33.6, 234.0], [33.7, 235.0], [33.8, 235.0], [33.9, 235.0], [34.0, 235.0], [34.1, 236.0], [34.2, 236.0], [34.3, 236.0], [34.4, 236.0], [34.5, 236.0], [34.6, 236.0], [34.7, 237.0], [34.8, 237.0], [34.9, 237.0], [35.0, 237.0], [35.1, 238.0], [35.2, 238.0], [35.3, 238.0], [35.4, 238.0], [35.5, 239.0], [35.6, 239.0], [35.7, 239.0], [35.8, 239.0], [35.9, 240.0], [36.0, 240.0], [36.1, 240.0], [36.2, 240.0], [36.3, 241.0], [36.4, 241.0], [36.5, 241.0], [36.6, 242.0], [36.7, 242.0], [36.8, 242.0], [36.9, 242.0], [37.0, 243.0], [37.1, 243.0], [37.2, 243.0], [37.3, 244.0], [37.4, 244.0], [37.5, 244.0], [37.6, 244.0], [37.7, 244.0], [37.8, 244.0], [37.9, 245.0], [38.0, 245.0], [38.1, 246.0], [38.2, 246.0], [38.3, 246.0], [38.4, 246.0], [38.5, 247.0], [38.6, 247.0], [38.7, 247.0], [38.8, 247.0], [38.9, 248.0], [39.0, 248.0], [39.1, 248.0], [39.2, 248.0], [39.3, 248.0], [39.4, 249.0], [39.5, 249.0], [39.6, 249.0], [39.7, 250.0], [39.8, 250.0], [39.9, 250.0], [40.0, 251.0], [40.1, 251.0], [40.2, 251.0], [40.3, 252.0], [40.4, 252.0], [40.5, 253.0], [40.6, 253.0], [40.7, 253.0], [40.8, 254.0], [40.9, 254.0], [41.0, 255.0], [41.1, 255.0], [41.2, 256.0], [41.3, 256.0], [41.4, 256.0], [41.5, 257.0], [41.6, 257.0], [41.7, 257.0], [41.8, 258.0], [41.9, 259.0], [42.0, 260.0], [42.1, 260.0], [42.2, 260.0], [42.3, 261.0], [42.4, 261.0], [42.5, 262.0], [42.6, 263.0], [42.7, 263.0], [42.8, 264.0], [42.9, 264.0], [43.0, 264.0], [43.1, 265.0], [43.2, 265.0], [43.3, 266.0], [43.4, 267.0], [43.5, 267.0], [43.6, 268.0], [43.7, 269.0], [43.8, 269.0], [43.9, 270.0], [44.0, 271.0], [44.1, 272.0], [44.2, 272.0], [44.3, 273.0], [44.4, 273.0], [44.5, 274.0], [44.6, 274.0], [44.7, 275.0], [44.8, 275.0], [44.9, 276.0], [45.0, 276.0], [45.1, 277.0], [45.2, 278.0], [45.3, 278.0], [45.4, 278.0], [45.5, 279.0], [45.6, 279.0], [45.7, 280.0], [45.8, 280.0], [45.9, 280.0], [46.0, 281.0], [46.1, 281.0], [46.2, 282.0], [46.3, 282.0], [46.4, 283.0], [46.5, 283.0], [46.6, 284.0], [46.7, 284.0], [46.8, 285.0], [46.9, 286.0], [47.0, 286.0], [47.1, 287.0], [47.2, 287.0], [47.3, 288.0], [47.4, 288.0], [47.5, 288.0], [47.6, 289.0], [47.7, 289.0], [47.8, 290.0], [47.9, 290.0], [48.0, 291.0], [48.1, 291.0], [48.2, 292.0], [48.3, 292.0], [48.4, 292.0], [48.5, 293.0], [48.6, 294.0], [48.7, 295.0], [48.8, 295.0], [48.9, 296.0], [49.0, 296.0], [49.1, 297.0], [49.2, 297.0], [49.3, 298.0], [49.4, 298.0], [49.5, 299.0], [49.6, 299.0], [49.7, 300.0], [49.8, 300.0], [49.9, 301.0], [50.0, 302.0], [50.1, 303.0], [50.2, 303.0], [50.3, 303.0], [50.4, 304.0], [50.5, 305.0], [50.6, 305.0], [50.7, 306.0], [50.8, 307.0], [50.9, 307.0], [51.0, 307.0], [51.1, 308.0], [51.2, 309.0], [51.3, 310.0], [51.4, 311.0], [51.5, 311.0], [51.6, 312.0], [51.7, 312.0], [51.8, 313.0], [51.9, 314.0], [52.0, 314.0], [52.1, 314.0], [52.2, 315.0], [52.3, 316.0], [52.4, 317.0], [52.5, 318.0], [52.6, 319.0], [52.7, 319.0], [52.8, 319.0], [52.9, 320.0], [53.0, 320.0], [53.1, 321.0], [53.2, 322.0], [53.3, 323.0], [53.4, 324.0], [53.5, 325.0], [53.6, 326.0], [53.7, 326.0], [53.8, 327.0], [53.9, 328.0], [54.0, 328.0], [54.1, 329.0], [54.2, 330.0], [54.3, 331.0], [54.4, 331.0], [54.5, 332.0], [54.6, 332.0], [54.7, 333.0], [54.8, 334.0], [54.9, 335.0], [55.0, 335.0], [55.1, 336.0], [55.2, 337.0], [55.3, 338.0], [55.4, 339.0], [55.5, 339.0], [55.6, 340.0], [55.7, 341.0], [55.8, 342.0], [55.9, 343.0], [56.0, 344.0], [56.1, 344.0], [56.2, 346.0], [56.3, 347.0], [56.4, 347.0], [56.5, 348.0], [56.6, 348.0], [56.7, 349.0], [56.8, 349.0], [56.9, 350.0], [57.0, 351.0], [57.1, 352.0], [57.2, 353.0], [57.3, 354.0], [57.4, 354.0], [57.5, 355.0], [57.6, 355.0], [57.7, 356.0], [57.8, 356.0], [57.9, 357.0], [58.0, 357.0], [58.1, 358.0], [58.2, 358.0], [58.3, 359.0], [58.4, 360.0], [58.5, 361.0], [58.6, 362.0], [58.7, 362.0], [58.8, 363.0], [58.9, 364.0], [59.0, 364.0], [59.1, 365.0], [59.2, 365.0], [59.3, 366.0], [59.4, 366.0], [59.5, 367.0], [59.6, 367.0], [59.7, 368.0], [59.8, 369.0], [59.9, 370.0], [60.0, 370.0], [60.1, 370.0], [60.2, 371.0], [60.3, 371.0], [60.4, 371.0], [60.5, 371.0], [60.6, 372.0], [60.7, 372.0], [60.8, 372.0], [60.9, 372.0], [61.0, 373.0], [61.1, 373.0], [61.2, 374.0], [61.3, 375.0], [61.4, 375.0], [61.5, 376.0], [61.6, 377.0], [61.7, 377.0], [61.8, 377.0], [61.9, 378.0], [62.0, 378.0], [62.1, 379.0], [62.2, 379.0], [62.3, 379.0], [62.4, 380.0], [62.5, 380.0], [62.6, 380.0], [62.7, 380.0], [62.8, 381.0], [62.9, 381.0], [63.0, 381.0], [63.1, 382.0], [63.2, 382.0], [63.3, 382.0], [63.4, 382.0], [63.5, 383.0], [63.6, 384.0], [63.7, 384.0], [63.8, 384.0], [63.9, 385.0], [64.0, 386.0], [64.1, 386.0], [64.2, 387.0], [64.3, 387.0], [64.4, 387.0], [64.5, 388.0], [64.6, 388.0], [64.7, 388.0], [64.8, 389.0], [64.9, 389.0], [65.0, 389.0], [65.1, 390.0], [65.2, 390.0], [65.3, 391.0], [65.4, 391.0], [65.5, 391.0], [65.6, 391.0], [65.7, 392.0], [65.8, 392.0], [65.9, 393.0], [66.0, 393.0], [66.1, 393.0], [66.2, 394.0], [66.3, 394.0], [66.4, 394.0], [66.5, 395.0], [66.6, 395.0], [66.7, 395.0], [66.8, 395.0], [66.9, 396.0], [67.0, 396.0], [67.1, 396.0], [67.2, 397.0], [67.3, 397.0], [67.4, 397.0], [67.5, 398.0], [67.6, 398.0], [67.7, 398.0], [67.8, 399.0], [67.9, 399.0], [68.0, 399.0], [68.1, 400.0], [68.2, 400.0], [68.3, 401.0], [68.4, 401.0], [68.5, 401.0], [68.6, 402.0], [68.7, 402.0], [68.8, 403.0], [68.9, 403.0], [69.0, 403.0], [69.1, 404.0], [69.2, 404.0], [69.3, 404.0], [69.4, 405.0], [69.5, 405.0], [69.6, 405.0], [69.7, 405.0], [69.8, 406.0], [69.9, 406.0], [70.0, 406.0], [70.1, 407.0], [70.2, 407.0], [70.3, 408.0], [70.4, 408.0], [70.5, 409.0], [70.6, 409.0], [70.7, 410.0], [70.8, 410.0], [70.9, 411.0], [71.0, 411.0], [71.1, 411.0], [71.2, 411.0], [71.3, 412.0], [71.4, 412.0], [71.5, 412.0], [71.6, 412.0], [71.7, 413.0], [71.8, 413.0], [71.9, 414.0], [72.0, 414.0], [72.1, 414.0], [72.2, 415.0], [72.3, 415.0], [72.4, 415.0], [72.5, 415.0], [72.6, 416.0], [72.7, 416.0], [72.8, 417.0], [72.9, 417.0], [73.0, 417.0], [73.1, 418.0], [73.2, 418.0], [73.3, 419.0], [73.4, 419.0], [73.5, 419.0], [73.6, 419.0], [73.7, 420.0], [73.8, 420.0], [73.9, 420.0], [74.0, 420.0], [74.1, 421.0], [74.2, 421.0], [74.3, 421.0], [74.4, 421.0], [74.5, 422.0], [74.6, 422.0], [74.7, 423.0], [74.8, 423.0], [74.9, 423.0], [75.0, 424.0], [75.1, 424.0], [75.2, 424.0], [75.3, 425.0], [75.4, 425.0], [75.5, 426.0], [75.6, 427.0], [75.7, 427.0], [75.8, 427.0], [75.9, 427.0], [76.0, 428.0], [76.1, 428.0], [76.2, 428.0], [76.3, 429.0], [76.4, 429.0], [76.5, 430.0], [76.6, 430.0], [76.7, 431.0], [76.8, 431.0], [76.9, 431.0], [77.0, 432.0], [77.1, 432.0], [77.2, 432.0], [77.3, 433.0], [77.4, 433.0], [77.5, 433.0], [77.6, 434.0], [77.7, 434.0], [77.8, 435.0], [77.9, 435.0], [78.0, 435.0], [78.1, 436.0], [78.2, 436.0], [78.3, 436.0], [78.4, 437.0], [78.5, 437.0], [78.6, 437.0], [78.7, 438.0], [78.8, 438.0], [78.9, 439.0], [79.0, 439.0], [79.1, 440.0], [79.2, 440.0], [79.3, 440.0], [79.4, 441.0], [79.5, 441.0], [79.6, 442.0], [79.7, 443.0], [79.8, 443.0], [79.9, 443.0], [80.0, 444.0], [80.1, 444.0], [80.2, 444.0], [80.3, 445.0], [80.4, 445.0], [80.5, 445.0], [80.6, 445.0], [80.7, 446.0], [80.8, 446.0], [80.9, 447.0], [81.0, 447.0], [81.1, 448.0], [81.2, 448.0], [81.3, 449.0], [81.4, 449.0], [81.5, 450.0], [81.6, 450.0], [81.7, 450.0], [81.8, 451.0], [81.9, 451.0], [82.0, 451.0], [82.1, 451.0], [82.2, 451.0], [82.3, 452.0], [82.4, 452.0], [82.5, 452.0], [82.6, 452.0], [82.7, 452.0], [82.8, 452.0], [82.9, 453.0], [83.0, 453.0], [83.1, 453.0], [83.2, 453.0], [83.3, 454.0], [83.4, 454.0], [83.5, 455.0], [83.6, 455.0], [83.7, 456.0], [83.8, 456.0], [83.9, 457.0], [84.0, 458.0], [84.1, 458.0], [84.2, 459.0], [84.3, 459.0], [84.4, 459.0], [84.5, 460.0], [84.6, 460.0], [84.7, 460.0], [84.8, 461.0], [84.9, 461.0], [85.0, 461.0], [85.1, 462.0], [85.2, 462.0], [85.3, 462.0], [85.4, 463.0], [85.5, 464.0], [85.6, 464.0], [85.7, 464.0], [85.8, 465.0], [85.9, 465.0], [86.0, 466.0], [86.1, 466.0], [86.2, 467.0], [86.3, 467.0], [86.4, 468.0], [86.5, 468.0], [86.6, 468.0], [86.7, 469.0], [86.8, 469.0], [86.9, 470.0], [87.0, 470.0], [87.1, 471.0], [87.2, 472.0], [87.3, 472.0], [87.4, 473.0], [87.5, 473.0], [87.6, 474.0], [87.7, 475.0], [87.8, 475.0], [87.9, 475.0], [88.0, 475.0], [88.1, 476.0], [88.2, 476.0], [88.3, 476.0], [88.4, 476.0], [88.5, 477.0], [88.6, 477.0], [88.7, 477.0], [88.8, 478.0], [88.9, 478.0], [89.0, 479.0], [89.1, 479.0], [89.2, 480.0], [89.3, 480.0], [89.4, 481.0], [89.5, 482.0], [89.6, 483.0], [89.7, 483.0], [89.8, 484.0], [89.9, 484.0], [90.0, 484.0], [90.1, 484.0], [90.2, 485.0], [90.3, 485.0], [90.4, 486.0], [90.5, 487.0], [90.6, 488.0], [90.7, 489.0], [90.8, 490.0], [90.9, 491.0], [91.0, 491.0], [91.1, 492.0], [91.2, 493.0], [91.3, 494.0], [91.4, 495.0], [91.5, 496.0], [91.6, 497.0], [91.7, 498.0], [91.8, 499.0], [91.9, 501.0], [92.0, 503.0], [92.1, 505.0], [92.2, 506.0], [92.3, 508.0], [92.4, 509.0], [92.5, 512.0], [92.6, 514.0], [92.7, 516.0], [92.8, 519.0], [92.9, 524.0], [93.0, 528.0], [93.1, 533.0], [93.2, 540.0], [93.3, 544.0], [93.4, 549.0], [93.5, 559.0], [93.6, 570.0], [93.7, 581.0], [93.8, 601.0], [93.9, 609.0], [94.0, 627.0], [94.1, 638.0], [94.2, 691.0], [94.3, 925.0], [94.4, 950.0], [94.5, 963.0], [94.6, 1109.0], [94.7, 1162.0], [94.8, 1228.0], [94.9, 1348.0], [95.0, 1374.0], [95.1, 1422.0], [95.2, 1489.0], [95.3, 1571.0], [95.4, 1623.0], [95.5, 1714.0], [95.6, 1791.0], [95.7, 1911.0], [95.8, 2009.0], [95.9, 2095.0], [96.0, 2241.0], [96.1, 2369.0], [96.2, 2440.0], [96.3, 2503.0], [96.4, 2679.0], [96.5, 2824.0], [96.6, 2934.0], [96.7, 3122.0], [96.8, 3212.0], [96.9, 3337.0], [97.0, 3547.0], [97.1, 3782.0], [97.2, 3863.0], [97.3, 3935.0], [97.4, 4047.0], [97.5, 4150.0], [97.6, 4353.0], [97.7, 4403.0], [97.8, 4458.0], [97.9, 4505.0], [98.0, 4610.0], [98.1, 4731.0], [98.2, 4791.0], [98.3, 4908.0], [98.4, 5042.0], [98.5, 5121.0], [98.6, 5253.0], [98.7, 5301.0], [98.8, 5341.0], [98.9, 5378.0], [99.0, 5407.0], [99.1, 5426.0], [99.2, 5442.0], [99.3, 5487.0], [99.4, 5616.0], [99.5, 5701.0], [99.6, 5801.0], [99.7, 5884.0], [99.8, 5949.0], [99.9, 5971.0], [100.0, 6177.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2960.0, "series": [{"data": [[0.0, 571.0], [600.0, 44.0], [700.0, 4.0], [800.0, 2.0], [900.0, 24.0], [1000.0, 6.0], [1100.0, 16.0], [1200.0, 8.0], [1300.0, 20.0], [1400.0, 18.0], [1500.0, 16.0], [1600.0, 9.0], [1700.0, 15.0], [1800.0, 7.0], [1900.0, 10.0], [2000.0, 13.0], [2100.0, 6.0], [2200.0, 9.0], [2300.0, 12.0], [2400.0, 9.0], [2500.0, 8.0], [2600.0, 8.0], [2700.0, 6.0], [2800.0, 6.0], [2900.0, 10.0], [3000.0, 4.0], [3100.0, 9.0], [3200.0, 9.0], [3300.0, 6.0], [3400.0, 6.0], [3500.0, 6.0], [3700.0, 9.0], [3800.0, 9.0], [3900.0, 12.0], [4000.0, 12.0], [4100.0, 6.0], [4200.0, 2.0], [4300.0, 15.0], [4400.0, 19.0], [4500.0, 10.0], [4600.0, 9.0], [4700.0, 14.0], [4800.0, 5.0], [4900.0, 10.0], [5000.0, 8.0], [5100.0, 8.0], [5200.0, 17.0], [5300.0, 28.0], [5400.0, 33.0], [5500.0, 6.0], [5600.0, 12.0], [5700.0, 11.0], [5800.0, 11.0], [5900.0, 21.0], [6000.0, 2.0], [6100.0, 7.0], [100.0, 1430.0], [200.0, 2960.0], [300.0, 1840.0], [400.0, 2380.0], [500.0, 197.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 333.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9187.0, "series": [{"data": [[0.0, 9187.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 333.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 480.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 535.0368000000019, "minX": 1.66956882E12, "maxY": 535.0368000000019, "series": [{"data": [[1.66956882E12, 535.0368000000019]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956882E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.0, "maxY": 5378.0, "series": [{"data": [[2.0, 6.0], [3.0, 5.0], [4.0, 6.0], [5.0, 50.0], [6.0, 54.0], [7.0, 71.5], [8.0, 65.5], [9.0, 7.0], [11.0, 22.0], [12.0, 27.333333333333336], [13.0, 29.0], [15.0, 29.0], [16.0, 28.0], [17.0, 35.0], [19.0, 51.5], [21.0, 38.0], [23.0, 57.5], [24.0, 41.0], [25.0, 55.0], [26.0, 32.0], [28.0, 54.5], [30.0, 61.666666666666664], [33.0, 58.666666666666664], [32.0, 51.0], [35.0, 57.666666666666664], [34.0, 50.0], [37.0, 49.333333333333336], [36.0, 47.0], [38.0, 57.0], [41.0, 100.0], [43.0, 64.0], [42.0, 36.75], [44.0, 42.0], [47.0, 55.5], [49.0, 75.0], [48.0, 57.66666666666667], [51.0, 38.0], [52.0, 76.0], [55.0, 81.33333333333333], [54.0, 52.0], [57.0, 60.2], [56.0, 61.00000000000001], [58.0, 60.0], [60.0, 50.5], [62.0, 68.75], [67.0, 77.0], [66.0, 65.125], [65.0, 57.0], [64.0, 63.25], [69.0, 57.63636363636364], [70.0, 59.083333333333336], [71.0, 72.1875], [68.0, 56.0], [72.0, 57.99999999999999], [75.0, 70.33333333333333], [74.0, 84.0], [76.0, 59.333333333333336], [78.0, 68.50000000000001], [79.0, 73.50000000000001], [77.0, 76.0], [80.0, 61.333333333333336], [81.0, 46.75], [82.0, 77.75], [83.0, 68.0], [87.0, 53.5], [86.0, 66.0], [85.0, 42.0], [84.0, 86.0], [91.0, 77.82142857142857], [90.0, 85.0], [89.0, 54.0], [88.0, 81.5], [93.0, 85.0], [95.0, 81.0], [94.0, 87.0], [92.0, 72.0], [96.0, 92.4], [98.0, 65.75], [99.0, 92.5], [97.0, 11.0], [103.0, 65.85714285714286], [102.0, 77.66666666666666], [100.0, 68.5], [104.0, 84.625], [107.0, 96.15384615384615], [106.0, 93.0], [105.0, 57.0], [109.0, 92.0], [111.0, 85.1111111111111], [110.0, 99.16666666666666], [108.0, 39.5], [114.0, 100.53846153846155], [115.0, 111.5], [113.0, 98.8], [112.0, 93.8], [116.0, 112.75], [117.0, 101.7], [118.0, 97.86666666666666], [119.0, 85.0], [120.0, 71.5], [122.0, 101.33333333333333], [123.0, 102.5], [121.0, 36.0], [125.0, 127.0], [127.0, 89.8], [126.0, 128.22222222222226], [124.0, 141.33333333333334], [128.0, 136.0], [129.0, 104.0], [132.0, 78.0], [133.0, 94.31818181818183], [135.0, 124.70833333333336], [131.0, 123.85714285714286], [130.0, 141.0], [136.0, 135.56521739130434], [139.0, 102.8], [143.0, 114.0232558139535], [142.0, 146.7142857142857], [141.0, 167.5], [140.0, 148.25], [138.0, 168.0], [137.0, 151.71428571428572], [144.0, 143.5], [145.0, 118.4], [147.0, 123.82142857142857], [151.0, 164.9090909090909], [149.0, 167.5], [148.0, 163.375], [146.0, 164.0], [152.0, 119.9090909090909], [154.0, 142.33333333333331], [155.0, 97.3888888888889], [156.0, 91.0], [159.0, 119.0], [158.0, 160.33333333333334], [157.0, 146.5], [153.0, 155.66666666666666], [161.0, 130.5263157894737], [167.0, 175.57142857142858], [166.0, 171.57142857142858], [164.0, 178.625], [163.0, 173.14285714285714], [162.0, 166.42857142857136], [160.0, 166.0588235294118], [169.0, 145.82352941176472], [173.0, 139.7], [174.0, 136.57142857142858], [175.0, 214.5], [172.0, 192.875], [171.0, 189.9090909090909], [170.0, 193.44444444444446], [176.0, 137.66666666666669], [182.0, 115.625], [183.0, 188.5], [181.0, 218.875], [179.0, 207.42857142857144], [178.0, 203.493670886076], [177.0, 206.25], [187.0, 183.625], [191.0, 184.33333333333334], [190.0, 224.16666666666669], [189.0, 208.63636363636365], [188.0, 203.25], [186.0, 214.85714285714286], [185.0, 213.0], [184.0, 221.6842105263158], [193.0, 161.07692307692307], [195.0, 220.85057471264366], [197.0, 206.25], [198.0, 135.6], [199.0, 137.5238095238095], [196.0, 221.0], [194.0, 195.0], [192.0, 209.0], [200.0, 163.3571428571429], [201.0, 115.2], [202.0, 170.97959183673467], [204.0, 215.22222222222223], [205.0, 219.75], [206.0, 177.64000000000001], [207.0, 209.0], [203.0, 216.07142857142856], [208.0, 221.0], [210.0, 172.5], [211.0, 181.20000000000002], [213.0, 213.0], [214.0, 183.58333333333334], [215.0, 256.0], [209.0, 233.75], [217.0, 243.42857142857142], [218.0, 182.26666666666665], [220.0, 211.25], [222.0, 226.3], [223.0, 229.71428571428572], [221.0, 238.5], [219.0, 230.05405405405406], [216.0, 243.0], [224.0, 226.10526315789474], [225.0, 215.23076923076923], [226.0, 224.2105263157895], [227.0, 190.15625000000003], [228.0, 201.16666666666666], [231.0, 256.33333333333337], [230.0, 267.0], [229.0, 257.5], [234.0, 224.9090909090909], [235.0, 924.5294117647059], [236.0, 1059.2857142857144], [238.0, 665.4285714285713], [239.0, 249.0], [237.0, 242.8], [233.0, 995.75], [232.0, 259.74999999999994], [240.0, 350.56451612903226], [241.0, 214.6], [242.0, 633.6666666666669], [244.0, 170.83333333333334], [246.0, 260.0], [247.0, 830.6666666666667], [245.0, 241.875], [243.0, 251.1], [250.0, 1710.5185185185187], [251.0, 1073.05], [252.0, 182.375], [253.0, 915.375], [255.0, 1290.2], [254.0, 234.0], [249.0, 880.0], [248.0, 3107.25], [270.0, 213.14285714285714], [257.0, 1013.1428571428571], [256.0, 174.26666666666668], [263.0, 217.5], [262.0, 222.5], [258.0, 129.5], [259.0, 936.3124999999999], [269.0, 510.16666666666663], [268.0, 198.0], [260.0, 784.9999999999998], [261.0, 213.20000000000002], [265.0, 883.8125], [266.0, 1436.2222222222222], [267.0, 897.875], [271.0, 171.21428571428572], [264.0, 1011.2857142857142], [287.0, 837.0384615384615], [273.0, 1932.4374999999998], [278.0, 184.37500000000003], [277.0, 1770.7142857142858], [276.0, 189.0], [279.0, 191.8181818181818], [272.0, 199.16666666666666], [283.0, 185.40000000000003], [284.0, 532.1249999999999], [275.0, 198.81249999999997], [274.0, 816.4444444444443], [286.0, 994.4285714285716], [285.0, 202.52941176470594], [282.0, 192.0], [281.0, 2951.0], [280.0, 194.79999999999998], [303.0, 1037.0], [293.0, 1047.9615384615386], [292.0, 1586.5], [295.0, 228.06060606060606], [296.0, 161.125], [297.0, 211.9], [299.0, 168.16666666666666], [298.0, 1654.9999999999998], [302.0, 818.5555555555557], [301.0, 486.3809523809523], [300.0, 240.6], [291.0, 1588.0], [290.0, 245.15384615384616], [289.0, 241.49999999999997], [288.0, 786.4736842105265], [318.0, 1636.409090909091], [306.0, 145.75], [307.0, 154.28571428571428], [311.0, 224.64705882352942], [305.0, 248.5], [304.0, 802.4444444444445], [310.0, 233.77777777777777], [309.0, 232.5], [308.0, 222.2857142857143], [312.0, 705.5454545454546], [313.0, 196.875], [319.0, 2380.5652173913045], [316.0, 1374.6666666666667], [315.0, 744.8], [314.0, 223.83333333333334], [333.0, 224.5], [320.0, 928.4827586206898], [327.0, 213.875], [326.0, 1069.8333333333335], [325.0, 1370.8888888888887], [324.0, 1501.9166666666665], [330.0, 836.9999999999999], [331.0, 177.8], [335.0, 1481.25], [332.0, 213.0], [323.0, 5378.0], [322.0, 1407.8461538461538], [321.0, 1593.3157894736844], [329.0, 1231.0285714285717], [328.0, 1497.4166666666667], [349.0, 208.0], [338.0, 314.0], [339.0, 175.5], [340.0, 193.86666666666665], [341.0, 190.0769230769231], [343.0, 1883.0], [337.0, 220.4], [336.0, 674.3636363636361], [342.0, 200.625], [346.0, 1020.6666666666667], [345.0, 193.75], [344.0, 1459.8750000000002], [347.0, 624.4166666666667], [351.0, 174.20833333333334], [350.0, 845.8510638297874], [348.0, 187.0], [367.0, 239.875], [352.0, 207.59374999999997], [355.0, 639.1818181818182], [354.0, 232.0], [353.0, 223.16666666666666], [358.0, 216.25], [357.0, 234.0], [356.0, 2665.0], [359.0, 220.0], [363.0, 177.75000000000003], [366.0, 232.0], [365.0, 2394.1111111111113], [362.0, 773.1111111111112], [361.0, 676.1818181818182], [360.0, 200.0], [369.0, 193.99999999999997], [372.0, 231.20000000000002], [373.0, 245.1875], [375.0, 236.6], [368.0, 1211.6], [374.0, 249.0], [376.0, 213.66666666666666], [377.0, 777.5555555555557], [379.0, 238.25], [378.0, 1137.2499999999998], [382.0, 826.0625], [383.0, 215.33333333333331], [381.0, 248.2], [380.0, 246.33333333333334], [371.0, 1057.8333333333333], [370.0, 248.54545454545453], [399.0, 193.22222222222226], [391.0, 1138.1], [389.0, 1545.5714285714284], [388.0, 215.33333333333334], [390.0, 222.33333333333334], [393.0, 725.5555555555555], [392.0, 202.33333333333334], [398.0, 181.5], [397.0, 197.0], [396.0, 198.75], [387.0, 744.2222222222222], [384.0, 457.1666666666667], [395.0, 208.0], [394.0, 202.33333333333334], [414.0, 221.25806451612905], [407.0, 229.36363636363635], [402.0, 196.26315789473682], [401.0, 667.1], [400.0, 513.0666666666666], [403.0, 236.0], [406.0, 362.0322580645161], [405.0, 871.3809523809524], [404.0, 211.9090909090909], [415.0, 219.25], [408.0, 649.7272727272726], [413.0, 780.125], [412.0, 1478.2222222222224], [411.0, 739.6666666666665], [409.0, 1752.6666666666667], [429.0, 842.8571428571429], [431.0, 1679.0], [424.0, 529.0], [430.0, 211.5333333333333], [428.0, 222.94117647058823], [419.0, 796.9375000000001], [417.0, 231.83333333333334], [416.0, 238.66666666666666], [426.0, 219.42857142857144], [425.0, 261.0], [423.0, 231.0], [422.0, 663.3], [421.0, 234.75000000000003], [420.0, 228.90909090909093], [446.0, 499.99999999999983], [437.0, 420.7222222222222], [436.0, 716.75], [447.0, 419.49999999999994], [445.0, 187.2], [434.0, 171.6], [433.0, 982.3846153846155], [432.0, 750.125], [443.0, 194.66666666666666], [442.0, 184.0], [440.0, 1064.6], [439.0, 4538.0], [438.0, 182.82352941176475], [462.0, 252.25], [448.0, 696.5555555555555], [451.0, 215.5625], [450.0, 203.0], [449.0, 194.25], [460.0, 245.66666666666666], [453.0, 1282.3333333333335], [452.0, 231.625], [454.0, 470.21621621621614], [456.0, 233.25], [457.0, 229.66666666666666], [459.0, 226.0], [458.0, 258.8], [463.0, 252.0], [479.0, 570.0666666666668], [464.0, 276.22222222222223], [470.0, 273.73333333333335], [469.0, 1364.578947368421], [468.0, 277.0], [471.0, 965.5], [475.0, 252.4], [476.0, 267.42857142857144], [467.0, 258.5], [466.0, 243.5], [478.0, 289.25], [477.0, 297.6666666666667], [474.0, 273.42857142857144], [473.0, 300.6666666666667], [472.0, 256.85714285714283], [494.0, 323.0], [480.0, 1263.8095238095236], [486.0, 282.87500000000006], [485.0, 313.0], [484.0, 1679.6666666666665], [487.0, 336.0], [489.0, 276.5833333333333], [490.0, 317.4], [495.0, 813.75], [493.0, 1934.0], [492.0, 1503.705882352941], [483.0, 1131.8], [482.0, 289.0], [481.0, 3006.3333333333335], [488.0, 337.0], [509.0, 302.37499999999994], [505.0, 333.5], [504.0, 293.49999999999983], [506.0, 286.42857142857144], [507.0, 295.0769230769231], [508.0, 272.6], [498.0, 393.25], [497.0, 304.25], [496.0, 314.3333333333333], [510.0, 279.5384615384615], [511.0, 305.0], [503.0, 278.6], [502.0, 285.6666666666667], [501.0, 284.5], [500.0, 780.5000000000001], [539.0, 293.0], [512.0, 276.6666666666667], [515.0, 237.2413793103448], [513.0, 301.0], [517.0, 266.0], [516.0, 294.3333333333333], [520.0, 350.0], [518.0, 253.66666666666666], [522.0, 232.5], [523.0, 265.0], [524.0, 419.88], [525.0, 364.0], [527.0, 412.21875], [526.0, 295.8333333333333], [530.0, 357.15151515151524], [532.0, 1252.25], [531.0, 288.4285714285714], [533.0, 321.96875], [534.0, 378.53846153846155], [535.0, 986.4545454545454], [529.0, 336.65714285714284], [528.0, 434.5588235294118], [541.0, 374.44444444444446], [540.0, 1235.75], [537.0, 287.83333333333337], [536.0, 1245.75], [519.0, 289.5], [542.0, 916.6666666666666], [543.0, 631.6363636363635], [570.0, 494.16666666666663], [545.0, 332.44444444444446], [546.0, 365.1111111111111], [547.0, 286.0], [549.0, 496.3684210526315], [548.0, 777.1304347826087], [568.0, 612.5833333333333], [551.0, 306.2631578947368], [555.0, 740.4166666666667], [554.0, 320.0], [553.0, 318.0], [552.0, 317.5], [557.0, 1225.5], [556.0, 305.0], [559.0, 308.61538461538464], [544.0, 1045.2], [558.0, 340.0], [562.0, 804.0000000000001], [564.0, 932.0000000000001], [563.0, 273.0], [565.0, 2134.5], [567.0, 375.6363636363636], [566.0, 1206.625], [573.0, 544.2500000000002], [572.0, 411.54545454545456], [571.0, 361.9523809523809], [574.0, 341.37499999999994], [575.0, 486.258064516129], [561.0, 1110.4444444444443], [560.0, 309.75], [579.0, 303.25], [591.0, 609.8928571428572], [576.0, 348.8], [577.0, 344.2592592592593], [583.0, 776.875], [600.0, 401.4], [603.0, 421.0], [602.0, 402.0], [604.0, 324.1538461538462], [605.0, 321.5], [607.0, 333.15384615384625], [593.0, 398.42857142857144], [592.0, 372.45454545454544], [606.0, 434.0], [594.0, 390.6428571428571], [595.0, 327.6428571428571], [596.0, 405.71428571428567], [598.0, 387.83333333333337], [597.0, 422.75], [582.0, 335.75000000000006], [580.0, 328.44444444444446], [581.0, 347.0], [578.0, 301.8536585365853], [585.0, 915.4705882352941], [584.0, 704.1111111111111], [586.0, 547.2999999999998], [587.0, 555.0882352941177], [589.0, 356.44444444444446], [588.0, 781.0], [590.0, 388.48148148148147], [615.0, 406.5], [636.0, 393.0], [608.0, 329.6666666666667], [609.0, 385.0], [610.0, 374.3333333333333], [612.0, 804.875], [611.0, 422.0], [614.0, 403.0], [613.0, 563.6499999999999], [633.0, 414.55555555555554], [635.0, 424.5], [634.0, 402.8], [617.0, 371.6666666666667], [616.0, 405.5], [618.0, 398.36363636363643], [623.0, 748.8749999999999], [622.0, 405.0], [621.0, 787.5], [620.0, 399.8], [619.0, 416.0], [626.0, 382.9], [627.0, 614.0], [629.0, 344.0], [628.0, 1192.25], [631.0, 400.42857142857144], [630.0, 756.9999999999999], [637.0, 420.2], [625.0, 399.5], [624.0, 398.0], [667.0, 305.0], [643.0, 466.3333333333333], [644.0, 329.5333333333334], [646.0, 405.6666666666667], [645.0, 427.6666666666667], [666.0, 423.0], [665.0, 419.5], [649.0, 331.20833333333337], [648.0, 417.8], [651.0, 429.0], [652.0, 306.0], [654.0, 1107.2222222222222], [641.0, 410.75], [653.0, 426.5], [656.0, 374.8], [663.0, 363.29999999999995], [662.0, 424.0], [660.0, 424.6666666666667], [659.0, 439.0], [657.0, 434.0], [671.0, 430.6666666666667], [670.0, 442.5], [669.0, 446.0], [668.0, 407.0], [699.0, 429.0909090909091], [678.0, 416.69230769230774], [679.0, 350.5714285714286], [681.0, 390.3333333333333], [682.0, 409.58333333333337], [685.0, 284.0], [683.0, 428.5714285714286], [687.0, 1936.5], [673.0, 401.0], [672.0, 401.0], [675.0, 431.5], [674.0, 433.75], [677.0, 420.2857142857143], [676.0, 441.0], [686.0, 431.75], [703.0, 416.0], [688.0, 428.5], [690.0, 1919.5], [689.0, 426.0], [692.0, 438.0], [691.0, 431.0], [695.0, 449.5], [693.0, 424.75], [702.0, 416.3333333333333], [700.0, 435.5], [710.0, 621.75], [734.0, 453.0], [709.0, 323.3333333333333], [707.0, 478.0], [706.0, 436.0], [705.0, 443.6666666666667], [719.0, 436.0], [718.0, 424.3333333333333], [717.0, 440.0], [716.0, 460.0], [715.0, 434.5], [714.0, 922.5], [712.0, 433.3333333333333], [721.0, 331.7142857142857], [727.0, 396.6], [726.0, 437.6666666666667], [725.0, 389.0], [724.0, 423.85714285714283], [723.0, 428.5], [722.0, 447.16666666666663], [728.0, 361.0], [731.0, 865.8571428571429], [730.0, 442.2857142857143], [735.0, 425.5], [720.0, 423.0], [733.0, 448.33333333333337], [732.0, 422.0], [762.0, 365.65], [740.0, 384.6666666666667], [741.0, 641.9000000000001], [743.0, 449.0], [742.0, 437.57142857142856], [761.0, 1016.4], [760.0, 860.1428571428571], [739.0, 422.7], [738.0, 577.0], [749.0, 387.0], [747.0, 440.6666666666667], [746.0, 446.6923076923077], [745.0, 444.5], [744.0, 1023.0], [751.0, 420.0], [737.0, 429.0], [736.0, 1036.6], [750.0, 445.6666666666667], [755.0, 434.3571428571429], [757.0, 455.75], [756.0, 459.5], [759.0, 1179.75], [758.0, 456.0], [754.0, 399.5], [763.0, 640.8181818181818], [764.0, 432.2857142857143], [767.0, 425.0], [753.0, 451.8], [752.0, 455.25], [766.0, 455.5], [792.0, 432.75], [797.0, 510.0799999999999], [773.0, 632.09375], [772.0, 695.24], [771.0, 1007.2], [770.0, 437.2], [769.0, 466.0], [768.0, 1154.0], [775.0, 503.1818181818182], [774.0, 503.25], [782.0, 490.53191489361706], [781.0, 676.9324324324326], [780.0, 1086.6666666666667], [778.0, 840.1249999999999], [777.0, 892.0], [776.0, 513.0], [784.0, 456.2857142857143], [796.0, 415.25], [798.0, 401.0], [794.0, 439.1666666666667], [793.0, 451.5], [791.0, 706.4444444444447], [790.0, 608.5], [789.0, 450.2], [788.0, 761.0], [787.0, 785.8181818181818], [786.0, 759.0833333333334], [785.0, 538.5915492957746], [825.0, 391.1666666666667], [830.0, 530.6923076923076], [800.0, 405.5625], [809.0, 404.1818181818182], [808.0, 381.25], [811.0, 549.5357142857143], [810.0, 411.5], [813.0, 391.05263157894734], [812.0, 391.33333333333326], [815.0, 401.25], [814.0, 507.15789473684197], [821.0, 383.8571428571429], [823.0, 393.3333333333333], [822.0, 379.3333333333333], [820.0, 748.7714285714286], [831.0, 399.0], [817.0, 1108.3333333333335], [816.0, 543.9310344827586], [819.0, 405.96153846153845], [818.0, 407.78378378378363], [829.0, 488.31578947368416], [827.0, 540.3846153846154], [826.0, 401.2], [824.0, 383.0], [807.0, 639.3829787234041], [806.0, 424.42857142857144], [805.0, 1152.0], [804.0, 403.75], [802.0, 681.4117647058824], [801.0, 718.2666666666667], [839.0, 428.33544303797476], [833.0, 377.5454545454546], [832.0, 651.2857142857143], [838.0, 477.75], [837.0, 383.25], [836.0, 529.1666666666665], [835.0, 657.2142857142858], [834.0, 623.8124999999999], [840.0, 565.8000000000001], [842.0, 1148.5714285714284], [841.0, 377.125], [844.0, 584.24], [843.0, 959.0], [846.0, 358.74999999999994], [845.0, 360.2083333333333], [847.0, 335.5], [850.0, 361.4074074074075], [849.0, 728.7], [848.0, 358.5384615384616], [851.0, 365.8888888888889], [854.0, 368.875], [855.0, 367.125], [852.0, 355.66666666666663], [856.0, 370.2857142857143], [858.0, 567.6666666666666], [860.0, 374.5], [859.0, 962.3333333333334], [862.0, 358.3333333333333], [861.0, 372.6923076923076], [863.0, 365.85714285714283], [888.0, 460.2], [892.0, 444.9230769230769], [864.0, 561.0240963855423], [865.0, 379.6000000000001], [867.0, 824.3870967741937], [866.0, 395.20430107526875], [869.0, 386.44444444444446], [868.0, 886.0], [871.0, 554.0526315789474], [870.0, 390.0769230769231], [889.0, 644.0], [891.0, 526.4449760765548], [890.0, 620.7916666666667], [874.0, 465.77777777777777], [873.0, 774.75], [872.0, 599.6250000000001], [875.0, 408.99999999999994], [877.0, 421.92307692307696], [876.0, 424.8333333333333], [879.0, 418.24999999999994], [878.0, 410.25], [883.0, 440.375], [882.0, 430.24999999999994], [880.0, 449.4], [885.0, 448.8], [884.0, 423.0], [887.0, 459.8333333333333], [886.0, 446.11764705882354], [895.0, 470.25], [893.0, 461.14285714285717], [921.0, 445.1818181818182], [898.0, 555.5555555555555], [899.0, 689.904761904762], [902.0, 563.0], [900.0, 686.0], [920.0, 437.8333333333333], [903.0, 642.5454545454544], [907.0, 405.0], [906.0, 716.25], [905.0, 1047.1818181818182], [904.0, 740.909090909091], [908.0, 426.3333333333333], [911.0, 499.05882352941177], [896.0, 448.0], [909.0, 442.6], [922.0, 562.5], [923.0, 517.3529411764706], [924.0, 634.0], [925.0, 539.6666666666666], [927.0, 661.3076923076924], [912.0, 603.1538461538462], [914.0, 448.0357142857143], [913.0, 563.6], [917.0, 599.4694835680756], [915.0, 457.92682926829264], [919.0, 439.55813953488376], [918.0, 437.8181818181818], [926.0, 453.0], [931.0, 472.83333333333337], [933.0, 617.3333333333334], [932.0, 660.4166666666666], [930.0, 475.6024096385541], [929.0, 583.1323529411764], [928.0, 583.8823529411765], [1.0, 3.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[535.0369000000009, 487.0430999999999]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 933.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956882E12, "maxY": 83166.66666666667, "series": [{"data": [[1.66956882E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956882E12, 83166.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956882E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 487.0430999999999, "minX": 1.66956882E12, "maxY": 487.0430999999999, "series": [{"data": [[1.66956882E12, 487.0430999999999]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956882E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 486.72090000000156, "minX": 1.66956882E12, "maxY": 486.72090000000156, "series": [{"data": [[1.66956882E12, 486.72090000000156]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956882E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.8414999999999953, "minX": 1.66956882E12, "maxY": 0.8414999999999953, "series": [{"data": [[1.66956882E12, 0.8414999999999953]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956882E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.66956882E12, "maxY": 6177.0, "series": [{"data": [[1.66956882E12, 6177.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956882E12, 484.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956882E12, 5413.9299999999985]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956882E12, 1377.7999999999956]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956882E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956882E12, 302.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956882E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 82.0, "minX": 368.0, "maxY": 440.0, "series": [{"data": [[1085.0, 440.0], [1059.0, 230.0], [1073.0, 233.0], [1130.0, 199.5], [1143.0, 395.0], [1148.0, 286.5], [1164.0, 436.0], [368.0, 82.0], [829.0, 156.0], [1001.0, 424.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1164.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 81.0, "minX": 368.0, "maxY": 440.0, "series": [{"data": [[1085.0, 440.0], [1059.0, 229.0], [1073.0, 233.0], [1130.0, 198.0], [1143.0, 395.0], [1148.0, 286.0], [1164.0, 436.0], [368.0, 81.0], [829.0, 155.0], [1001.0, 424.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1164.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956882E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956882E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956882E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956882E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956882E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956882E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956882E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956882E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956882E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956882E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956882E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956882E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

