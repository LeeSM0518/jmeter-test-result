/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 7452.0, "series": [{"data": [[0.0, 8.0], [0.1, 20.0], [0.2, 24.0], [0.3, 26.0], [0.4, 29.0], [0.5, 32.0], [0.6, 34.0], [0.7, 37.0], [0.8, 42.0], [0.9, 44.0], [1.0, 46.0], [1.1, 48.0], [1.2, 49.0], [1.3, 52.0], [1.4, 54.0], [1.5, 56.0], [1.6, 57.0], [1.7, 58.0], [1.8, 59.0], [1.9, 61.0], [2.0, 64.0], [2.1, 65.0], [2.2, 65.0], [2.3, 67.0], [2.4, 69.0], [2.5, 71.0], [2.6, 72.0], [2.7, 73.0], [2.8, 75.0], [2.9, 76.0], [3.0, 78.0], [3.1, 79.0], [3.2, 80.0], [3.3, 81.0], [3.4, 82.0], [3.5, 82.0], [3.6, 83.0], [3.7, 84.0], [3.8, 85.0], [3.9, 86.0], [4.0, 87.0], [4.1, 87.0], [4.2, 90.0], [4.3, 91.0], [4.4, 92.0], [4.5, 93.0], [4.6, 94.0], [4.7, 95.0], [4.8, 96.0], [4.9, 97.0], [5.0, 97.0], [5.1, 98.0], [5.2, 100.0], [5.3, 100.0], [5.4, 101.0], [5.5, 103.0], [5.6, 103.0], [5.7, 104.0], [5.8, 105.0], [5.9, 106.0], [6.0, 107.0], [6.1, 108.0], [6.2, 109.0], [6.3, 109.0], [6.4, 110.0], [6.5, 111.0], [6.6, 111.0], [6.7, 112.0], [6.8, 112.0], [6.9, 113.0], [7.0, 113.0], [7.1, 114.0], [7.2, 115.0], [7.3, 116.0], [7.4, 117.0], [7.5, 118.0], [7.6, 118.0], [7.7, 119.0], [7.8, 120.0], [7.9, 120.0], [8.0, 120.0], [8.1, 121.0], [8.2, 121.0], [8.3, 121.0], [8.4, 122.0], [8.5, 122.0], [8.6, 123.0], [8.7, 123.0], [8.8, 125.0], [8.9, 125.0], [9.0, 126.0], [9.1, 127.0], [9.2, 127.0], [9.3, 128.0], [9.4, 128.0], [9.5, 129.0], [9.6, 129.0], [9.7, 130.0], [9.8, 130.0], [9.9, 131.0], [10.0, 132.0], [10.1, 132.0], [10.2, 133.0], [10.3, 134.0], [10.4, 134.0], [10.5, 135.0], [10.6, 135.0], [10.7, 136.0], [10.8, 136.0], [10.9, 136.0], [11.0, 137.0], [11.1, 137.0], [11.2, 137.0], [11.3, 138.0], [11.4, 138.0], [11.5, 139.0], [11.6, 140.0], [11.7, 140.0], [11.8, 141.0], [11.9, 142.0], [12.0, 142.0], [12.1, 143.0], [12.2, 143.0], [12.3, 143.0], [12.4, 144.0], [12.5, 144.0], [12.6, 144.0], [12.7, 144.0], [12.8, 145.0], [12.9, 145.0], [13.0, 146.0], [13.1, 146.0], [13.2, 146.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 148.0], [13.7, 148.0], [13.8, 148.0], [13.9, 149.0], [14.0, 149.0], [14.1, 150.0], [14.2, 150.0], [14.3, 151.0], [14.4, 151.0], [14.5, 151.0], [14.6, 151.0], [14.7, 152.0], [14.8, 152.0], [14.9, 152.0], [15.0, 152.0], [15.1, 152.0], [15.2, 153.0], [15.3, 153.0], [15.4, 153.0], [15.5, 153.0], [15.6, 154.0], [15.7, 154.0], [15.8, 155.0], [15.9, 155.0], [16.0, 156.0], [16.1, 157.0], [16.2, 157.0], [16.3, 158.0], [16.4, 159.0], [16.5, 159.0], [16.6, 159.0], [16.7, 159.0], [16.8, 160.0], [16.9, 160.0], [17.0, 160.0], [17.1, 160.0], [17.2, 160.0], [17.3, 161.0], [17.4, 161.0], [17.5, 161.0], [17.6, 161.0], [17.7, 162.0], [17.8, 162.0], [17.9, 162.0], [18.0, 163.0], [18.1, 163.0], [18.2, 164.0], [18.3, 164.0], [18.4, 164.0], [18.5, 164.0], [18.6, 165.0], [18.7, 166.0], [18.8, 166.0], [18.9, 166.0], [19.0, 167.0], [19.1, 167.0], [19.2, 167.0], [19.3, 167.0], [19.4, 167.0], [19.5, 168.0], [19.6, 168.0], [19.7, 168.0], [19.8, 168.0], [19.9, 168.0], [20.0, 168.0], [20.1, 169.0], [20.2, 169.0], [20.3, 169.0], [20.4, 170.0], [20.5, 170.0], [20.6, 171.0], [20.7, 171.0], [20.8, 171.0], [20.9, 172.0], [21.0, 173.0], [21.1, 173.0], [21.2, 174.0], [21.3, 174.0], [21.4, 175.0], [21.5, 175.0], [21.6, 175.0], [21.7, 175.0], [21.8, 175.0], [21.9, 176.0], [22.0, 176.0], [22.1, 176.0], [22.2, 176.0], [22.3, 176.0], [22.4, 176.0], [22.5, 177.0], [22.6, 177.0], [22.7, 177.0], [22.8, 178.0], [22.9, 178.0], [23.0, 179.0], [23.1, 179.0], [23.2, 179.0], [23.3, 179.0], [23.4, 180.0], [23.5, 180.0], [23.6, 180.0], [23.7, 181.0], [23.8, 182.0], [23.9, 182.0], [24.0, 182.0], [24.1, 182.0], [24.2, 183.0], [24.3, 183.0], [24.4, 183.0], [24.5, 183.0], [24.6, 184.0], [24.7, 184.0], [24.8, 184.0], [24.9, 184.0], [25.0, 185.0], [25.1, 185.0], [25.2, 185.0], [25.3, 185.0], [25.4, 186.0], [25.5, 186.0], [25.6, 186.0], [25.7, 187.0], [25.8, 187.0], [25.9, 187.0], [26.0, 188.0], [26.1, 188.0], [26.2, 188.0], [26.3, 189.0], [26.4, 189.0], [26.5, 189.0], [26.6, 189.0], [26.7, 190.0], [26.8, 190.0], [26.9, 190.0], [27.0, 191.0], [27.1, 191.0], [27.2, 191.0], [27.3, 191.0], [27.4, 191.0], [27.5, 192.0], [27.6, 192.0], [27.7, 192.0], [27.8, 192.0], [27.9, 192.0], [28.0, 193.0], [28.1, 193.0], [28.2, 193.0], [28.3, 194.0], [28.4, 194.0], [28.5, 195.0], [28.6, 196.0], [28.7, 196.0], [28.8, 196.0], [28.9, 196.0], [29.0, 197.0], [29.1, 197.0], [29.2, 197.0], [29.3, 198.0], [29.4, 198.0], [29.5, 199.0], [29.6, 199.0], [29.7, 199.0], [29.8, 199.0], [29.9, 200.0], [30.0, 200.0], [30.1, 200.0], [30.2, 200.0], [30.3, 200.0], [30.4, 200.0], [30.5, 201.0], [30.6, 201.0], [30.7, 201.0], [30.8, 201.0], [30.9, 201.0], [31.0, 202.0], [31.1, 203.0], [31.2, 203.0], [31.3, 203.0], [31.4, 203.0], [31.5, 204.0], [31.6, 204.0], [31.7, 205.0], [31.8, 205.0], [31.9, 205.0], [32.0, 206.0], [32.1, 206.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 208.0], [32.9, 208.0], [33.0, 208.0], [33.1, 208.0], [33.2, 208.0], [33.3, 209.0], [33.4, 209.0], [33.5, 209.0], [33.6, 210.0], [33.7, 210.0], [33.8, 211.0], [33.9, 211.0], [34.0, 211.0], [34.1, 212.0], [34.2, 212.0], [34.3, 212.0], [34.4, 212.0], [34.5, 213.0], [34.6, 213.0], [34.7, 214.0], [34.8, 214.0], [34.9, 215.0], [35.0, 215.0], [35.1, 215.0], [35.2, 215.0], [35.3, 216.0], [35.4, 216.0], [35.5, 216.0], [35.6, 216.0], [35.7, 216.0], [35.8, 217.0], [35.9, 217.0], [36.0, 217.0], [36.1, 218.0], [36.2, 218.0], [36.3, 219.0], [36.4, 219.0], [36.5, 219.0], [36.6, 220.0], [36.7, 220.0], [36.8, 220.0], [36.9, 220.0], [37.0, 221.0], [37.1, 221.0], [37.2, 221.0], [37.3, 222.0], [37.4, 223.0], [37.5, 223.0], [37.6, 223.0], [37.7, 223.0], [37.8, 223.0], [37.9, 224.0], [38.0, 224.0], [38.1, 224.0], [38.2, 224.0], [38.3, 225.0], [38.4, 225.0], [38.5, 225.0], [38.6, 226.0], [38.7, 227.0], [38.8, 227.0], [38.9, 228.0], [39.0, 228.0], [39.1, 228.0], [39.2, 229.0], [39.3, 229.0], [39.4, 230.0], [39.5, 230.0], [39.6, 231.0], [39.7, 231.0], [39.8, 231.0], [39.9, 231.0], [40.0, 231.0], [40.1, 232.0], [40.2, 232.0], [40.3, 232.0], [40.4, 232.0], [40.5, 233.0], [40.6, 233.0], [40.7, 234.0], [40.8, 234.0], [40.9, 234.0], [41.0, 235.0], [41.1, 235.0], [41.2, 236.0], [41.3, 236.0], [41.4, 237.0], [41.5, 237.0], [41.6, 238.0], [41.7, 238.0], [41.8, 239.0], [41.9, 239.0], [42.0, 239.0], [42.1, 239.0], [42.2, 239.0], [42.3, 240.0], [42.4, 240.0], [42.5, 240.0], [42.6, 240.0], [42.7, 240.0], [42.8, 241.0], [42.9, 241.0], [43.0, 242.0], [43.1, 242.0], [43.2, 243.0], [43.3, 243.0], [43.4, 244.0], [43.5, 245.0], [43.6, 245.0], [43.7, 245.0], [43.8, 246.0], [43.9, 246.0], [44.0, 247.0], [44.1, 247.0], [44.2, 247.0], [44.3, 247.0], [44.4, 247.0], [44.5, 248.0], [44.6, 248.0], [44.7, 248.0], [44.8, 248.0], [44.9, 248.0], [45.0, 249.0], [45.1, 249.0], [45.2, 249.0], [45.3, 250.0], [45.4, 250.0], [45.5, 251.0], [45.6, 251.0], [45.7, 252.0], [45.8, 252.0], [45.9, 252.0], [46.0, 252.0], [46.1, 253.0], [46.2, 254.0], [46.3, 255.0], [46.4, 255.0], [46.5, 255.0], [46.6, 255.0], [46.7, 255.0], [46.8, 256.0], [46.9, 256.0], [47.0, 256.0], [47.1, 256.0], [47.2, 256.0], [47.3, 256.0], [47.4, 257.0], [47.5, 257.0], [47.6, 257.0], [47.7, 258.0], [47.8, 259.0], [47.9, 259.0], [48.0, 260.0], [48.1, 260.0], [48.2, 261.0], [48.3, 262.0], [48.4, 262.0], [48.5, 263.0], [48.6, 263.0], [48.7, 263.0], [48.8, 263.0], [48.9, 264.0], [49.0, 264.0], [49.1, 264.0], [49.2, 265.0], [49.3, 265.0], [49.4, 266.0], [49.5, 266.0], [49.6, 267.0], [49.7, 268.0], [49.8, 268.0], [49.9, 268.0], [50.0, 269.0], [50.1, 270.0], [50.2, 270.0], [50.3, 271.0], [50.4, 271.0], [50.5, 271.0], [50.6, 272.0], [50.7, 272.0], [50.8, 272.0], [50.9, 272.0], [51.0, 273.0], [51.1, 273.0], [51.2, 274.0], [51.3, 275.0], [51.4, 276.0], [51.5, 276.0], [51.6, 276.0], [51.7, 277.0], [51.8, 278.0], [51.9, 279.0], [52.0, 279.0], [52.1, 279.0], [52.2, 280.0], [52.3, 280.0], [52.4, 280.0], [52.5, 281.0], [52.6, 281.0], [52.7, 281.0], [52.8, 282.0], [52.9, 283.0], [53.0, 284.0], [53.1, 284.0], [53.2, 285.0], [53.3, 286.0], [53.4, 287.0], [53.5, 287.0], [53.6, 288.0], [53.7, 288.0], [53.8, 288.0], [53.9, 289.0], [54.0, 290.0], [54.1, 291.0], [54.2, 291.0], [54.3, 292.0], [54.4, 293.0], [54.5, 293.0], [54.6, 294.0], [54.7, 295.0], [54.8, 295.0], [54.9, 296.0], [55.0, 296.0], [55.1, 297.0], [55.2, 298.0], [55.3, 300.0], [55.4, 300.0], [55.5, 301.0], [55.6, 302.0], [55.7, 303.0], [55.8, 303.0], [55.9, 304.0], [56.0, 304.0], [56.1, 305.0], [56.2, 306.0], [56.3, 306.0], [56.4, 307.0], [56.5, 308.0], [56.6, 308.0], [56.7, 309.0], [56.8, 310.0], [56.9, 311.0], [57.0, 312.0], [57.1, 312.0], [57.2, 313.0], [57.3, 314.0], [57.4, 315.0], [57.5, 316.0], [57.6, 317.0], [57.7, 317.0], [57.8, 318.0], [57.9, 319.0], [58.0, 320.0], [58.1, 321.0], [58.2, 322.0], [58.3, 323.0], [58.4, 324.0], [58.5, 324.0], [58.6, 325.0], [58.7, 326.0], [58.8, 327.0], [58.9, 327.0], [59.0, 328.0], [59.1, 329.0], [59.2, 330.0], [59.3, 331.0], [59.4, 331.0], [59.5, 332.0], [59.6, 332.0], [59.7, 333.0], [59.8, 333.0], [59.9, 334.0], [60.0, 335.0], [60.1, 336.0], [60.2, 337.0], [60.3, 338.0], [60.4, 339.0], [60.5, 339.0], [60.6, 340.0], [60.7, 340.0], [60.8, 341.0], [60.9, 342.0], [61.0, 343.0], [61.1, 344.0], [61.2, 344.0], [61.3, 345.0], [61.4, 345.0], [61.5, 346.0], [61.6, 347.0], [61.7, 347.0], [61.8, 348.0], [61.9, 348.0], [62.0, 349.0], [62.1, 349.0], [62.2, 349.0], [62.3, 350.0], [62.4, 351.0], [62.5, 351.0], [62.6, 352.0], [62.7, 352.0], [62.8, 352.0], [62.9, 352.0], [63.0, 353.0], [63.1, 353.0], [63.2, 354.0], [63.3, 354.0], [63.4, 355.0], [63.5, 355.0], [63.6, 356.0], [63.7, 356.0], [63.8, 357.0], [63.9, 357.0], [64.0, 358.0], [64.1, 359.0], [64.2, 359.0], [64.3, 360.0], [64.4, 361.0], [64.5, 362.0], [64.6, 362.0], [64.7, 363.0], [64.8, 363.0], [64.9, 364.0], [65.0, 364.0], [65.1, 364.0], [65.2, 365.0], [65.3, 366.0], [65.4, 367.0], [65.5, 368.0], [65.6, 368.0], [65.7, 368.0], [65.8, 369.0], [65.9, 370.0], [66.0, 371.0], [66.1, 371.0], [66.2, 371.0], [66.3, 372.0], [66.4, 372.0], [66.5, 372.0], [66.6, 373.0], [66.7, 373.0], [66.8, 373.0], [66.9, 374.0], [67.0, 375.0], [67.1, 375.0], [67.2, 376.0], [67.3, 377.0], [67.4, 377.0], [67.5, 378.0], [67.6, 378.0], [67.7, 379.0], [67.8, 379.0], [67.9, 380.0], [68.0, 380.0], [68.1, 381.0], [68.2, 381.0], [68.3, 382.0], [68.4, 383.0], [68.5, 383.0], [68.6, 384.0], [68.7, 384.0], [68.8, 385.0], [68.9, 386.0], [69.0, 387.0], [69.1, 387.0], [69.2, 387.0], [69.3, 388.0], [69.4, 388.0], [69.5, 388.0], [69.6, 388.0], [69.7, 389.0], [69.8, 389.0], [69.9, 390.0], [70.0, 391.0], [70.1, 391.0], [70.2, 392.0], [70.3, 392.0], [70.4, 393.0], [70.5, 393.0], [70.6, 393.0], [70.7, 394.0], [70.8, 394.0], [70.9, 395.0], [71.0, 395.0], [71.1, 395.0], [71.2, 396.0], [71.3, 396.0], [71.4, 396.0], [71.5, 397.0], [71.6, 397.0], [71.7, 398.0], [71.8, 399.0], [71.9, 399.0], [72.0, 400.0], [72.1, 400.0], [72.2, 400.0], [72.3, 401.0], [72.4, 401.0], [72.5, 402.0], [72.6, 403.0], [72.7, 403.0], [72.8, 403.0], [72.9, 404.0], [73.0, 404.0], [73.1, 405.0], [73.2, 405.0], [73.3, 406.0], [73.4, 406.0], [73.5, 407.0], [73.6, 407.0], [73.7, 408.0], [73.8, 408.0], [73.9, 408.0], [74.0, 409.0], [74.1, 409.0], [74.2, 410.0], [74.3, 411.0], [74.4, 411.0], [74.5, 412.0], [74.6, 412.0], [74.7, 413.0], [74.8, 413.0], [74.9, 413.0], [75.0, 414.0], [75.1, 415.0], [75.2, 415.0], [75.3, 416.0], [75.4, 416.0], [75.5, 417.0], [75.6, 418.0], [75.7, 419.0], [75.8, 419.0], [75.9, 420.0], [76.0, 420.0], [76.1, 420.0], [76.2, 421.0], [76.3, 421.0], [76.4, 422.0], [76.5, 422.0], [76.6, 423.0], [76.7, 424.0], [76.8, 424.0], [76.9, 424.0], [77.0, 425.0], [77.1, 425.0], [77.2, 425.0], [77.3, 425.0], [77.4, 426.0], [77.5, 427.0], [77.6, 428.0], [77.7, 428.0], [77.8, 428.0], [77.9, 429.0], [78.0, 430.0], [78.1, 431.0], [78.2, 431.0], [78.3, 431.0], [78.4, 432.0], [78.5, 433.0], [78.6, 433.0], [78.7, 434.0], [78.8, 435.0], [78.9, 436.0], [79.0, 436.0], [79.1, 436.0], [79.2, 437.0], [79.3, 437.0], [79.4, 438.0], [79.5, 438.0], [79.6, 439.0], [79.7, 440.0], [79.8, 440.0], [79.9, 441.0], [80.0, 441.0], [80.1, 442.0], [80.2, 443.0], [80.3, 443.0], [80.4, 444.0], [80.5, 444.0], [80.6, 444.0], [80.7, 444.0], [80.8, 445.0], [80.9, 446.0], [81.0, 447.0], [81.1, 447.0], [81.2, 448.0], [81.3, 448.0], [81.4, 449.0], [81.5, 450.0], [81.6, 450.0], [81.7, 451.0], [81.8, 451.0], [81.9, 451.0], [82.0, 452.0], [82.1, 452.0], [82.2, 453.0], [82.3, 453.0], [82.4, 454.0], [82.5, 455.0], [82.6, 456.0], [82.7, 456.0], [82.8, 457.0], [82.9, 458.0], [83.0, 459.0], [83.1, 459.0], [83.2, 460.0], [83.3, 460.0], [83.4, 461.0], [83.5, 461.0], [83.6, 462.0], [83.7, 463.0], [83.8, 463.0], [83.9, 464.0], [84.0, 464.0], [84.1, 465.0], [84.2, 465.0], [84.3, 466.0], [84.4, 466.0], [84.5, 467.0], [84.6, 468.0], [84.7, 468.0], [84.8, 468.0], [84.9, 469.0], [85.0, 471.0], [85.1, 471.0], [85.2, 472.0], [85.3, 472.0], [85.4, 473.0], [85.5, 474.0], [85.6, 475.0], [85.7, 475.0], [85.8, 475.0], [85.9, 476.0], [86.0, 476.0], [86.1, 477.0], [86.2, 478.0], [86.3, 479.0], [86.4, 480.0], [86.5, 480.0], [86.6, 481.0], [86.7, 482.0], [86.8, 483.0], [86.9, 484.0], [87.0, 484.0], [87.1, 485.0], [87.2, 487.0], [87.3, 488.0], [87.4, 488.0], [87.5, 490.0], [87.6, 490.0], [87.7, 491.0], [87.8, 491.0], [87.9, 492.0], [88.0, 492.0], [88.1, 493.0], [88.2, 494.0], [88.3, 495.0], [88.4, 496.0], [88.5, 497.0], [88.6, 498.0], [88.7, 499.0], [88.8, 500.0], [88.9, 501.0], [89.0, 501.0], [89.1, 503.0], [89.2, 504.0], [89.3, 505.0], [89.4, 507.0], [89.5, 509.0], [89.6, 511.0], [89.7, 511.0], [89.8, 513.0], [89.9, 514.0], [90.0, 515.0], [90.1, 516.0], [90.2, 518.0], [90.3, 519.0], [90.4, 521.0], [90.5, 523.0], [90.6, 524.0], [90.7, 526.0], [90.8, 527.0], [90.9, 529.0], [91.0, 531.0], [91.1, 532.0], [91.2, 533.0], [91.3, 535.0], [91.4, 537.0], [91.5, 538.0], [91.6, 540.0], [91.7, 541.0], [91.8, 544.0], [91.9, 547.0], [92.0, 549.0], [92.1, 554.0], [92.2, 556.0], [92.3, 558.0], [92.4, 561.0], [92.5, 563.0], [92.6, 565.0], [92.7, 568.0], [92.8, 572.0], [92.9, 581.0], [93.0, 588.0], [93.1, 593.0], [93.2, 600.0], [93.3, 610.0], [93.4, 624.0], [93.5, 900.0], [93.6, 1031.0], [93.7, 1093.0], [93.8, 1175.0], [93.9, 1323.0], [94.0, 1361.0], [94.1, 1382.0], [94.2, 1506.0], [94.3, 1529.0], [94.4, 1693.0], [94.5, 1964.0], [94.6, 2093.0], [94.7, 2344.0], [94.8, 2512.0], [94.9, 2716.0], [95.0, 2833.0], [95.1, 3011.0], [95.2, 3131.0], [95.3, 3227.0], [95.4, 3403.0], [95.5, 3497.0], [95.6, 3539.0], [95.7, 3656.0], [95.8, 3790.0], [95.9, 3874.0], [96.0, 3982.0], [96.1, 4074.0], [96.2, 4244.0], [96.3, 4373.0], [96.4, 4419.0], [96.5, 4590.0], [96.6, 4724.0], [96.7, 4818.0], [96.8, 4910.0], [96.9, 4991.0], [97.0, 5123.0], [97.1, 5258.0], [97.2, 5359.0], [97.3, 5481.0], [97.4, 5642.0], [97.5, 5763.0], [97.6, 5959.0], [97.7, 6083.0], [97.8, 6161.0], [97.9, 6197.0], [98.0, 6214.0], [98.1, 6272.0], [98.2, 6309.0], [98.3, 6379.0], [98.4, 6447.0], [98.5, 6512.0], [98.6, 6535.0], [98.7, 6725.0], [98.8, 6781.0], [98.9, 6849.0], [99.0, 6966.0], [99.1, 7052.0], [99.2, 7178.0], [99.3, 7332.0], [99.4, 7365.0], [99.5, 7374.0], [99.6, 7384.0], [99.7, 7394.0], [99.8, 7424.0], [99.9, 7437.0], [100.0, 7452.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2543.0, "series": [{"data": [[0.0, 520.0], [600.0, 21.0], [700.0, 2.0], [800.0, 7.0], [900.0, 7.0], [1000.0, 16.0], [1100.0, 13.0], [1200.0, 3.0], [1300.0, 24.0], [1400.0, 6.0], [1500.0, 20.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 6.0], [1900.0, 3.0], [2000.0, 9.0], [2200.0, 6.0], [2300.0, 4.0], [2400.0, 5.0], [2500.0, 11.0], [2600.0, 2.0], [2700.0, 9.0], [2800.0, 5.0], [2900.0, 5.0], [3000.0, 8.0], [3100.0, 11.0], [3200.0, 6.0], [3300.0, 7.0], [3400.0, 12.0], [3500.0, 10.0], [3600.0, 12.0], [3700.0, 9.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 10.0], [4100.0, 6.0], [4200.0, 10.0], [4300.0, 8.0], [4400.0, 8.0], [4500.0, 8.0], [4600.0, 8.0], [4700.0, 6.0], [4800.0, 13.0], [4900.0, 13.0], [5000.0, 2.0], [5100.0, 15.0], [5200.0, 7.0], [5300.0, 9.0], [5400.0, 9.0], [5500.0, 2.0], [5600.0, 9.0], [5700.0, 11.0], [5800.0, 2.0], [5900.0, 6.0], [6000.0, 11.0], [6100.0, 18.0], [6200.0, 22.0], [6300.0, 19.0], [6400.0, 15.0], [6500.0, 17.0], [6600.0, 4.0], [6700.0, 14.0], [6800.0, 16.0], [6900.0, 6.0], [7000.0, 10.0], [7100.0, 6.0], [7200.0, 8.0], [7300.0, 45.0], [7400.0, 27.0], [100.0, 2466.0], [200.0, 2543.0], [300.0, 1670.0], [400.0, 1677.0], [500.0, 443.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 530.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8888.0, "series": [{"data": [[0.0, 8888.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 530.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 582.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 535.5354000000017, "minX": 1.6695621E12, "maxY": 535.5354000000017, "series": [{"data": [[1.6695621E12, 535.5354000000017]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695621E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.0, "maxY": 6487.0, "series": [{"data": [[2.0, 56.0], [3.0, 57.0], [4.0, 64.0], [5.0, 20.0], [6.0, 19.0], [7.0, 26.0], [8.0, 26.0], [9.0, 27.0], [11.0, 29.0], [12.0, 27.0], [13.0, 25.0], [15.0, 37.666666666666664], [17.0, 41.333333333333336], [19.0, 43.0], [20.0, 44.0], [22.0, 43.0], [23.0, 37.75], [25.0, 30.75], [27.0, 31.5], [28.0, 34.0], [29.0, 38.666666666666664], [31.0, 48.21052631578947], [33.0, 83.66666666666667], [35.0, 112.0], [34.0, 95.375], [37.0, 122.92857142857142], [36.0, 100.0], [39.0, 75.33333333333333], [38.0, 82.25], [41.0, 80.5], [40.0, 76.0], [42.0, 47.0], [45.0, 67.33333333333333], [47.0, 44.0], [46.0, 107.5], [49.0, 101.0], [48.0, 80.33333333333333], [51.0, 70.5], [52.0, 90.0], [54.0, 101.0], [57.0, 52.0], [56.0, 86.0], [58.0, 88.33333333333333], [61.0, 85.33333333333333], [60.0, 93.0], [62.0, 52.0], [67.0, 52.0], [66.0, 81.66666666666667], [64.0, 86.33333333333333], [71.0, 114.0], [70.0, 77.5], [69.0, 82.33333333333333], [68.0, 91.0], [75.0, 80.33333333333333], [72.0, 99.6], [79.0, 85.25], [78.0, 58.0], [77.0, 89.0], [76.0, 55.5], [82.0, 171.0], [83.0, 69.33333333333333], [87.0, 97.0], [86.0, 82.8], [85.0, 35.0], [84.0, 70.33333333333333], [91.0, 102.0], [90.0, 64.0], [89.0, 92.14285714285715], [93.0, 92.44444444444444], [94.0, 61.166666666666664], [95.0, 72.90000000000002], [92.0, 59.0], [96.0, 71.0], [98.0, 72.0], [99.0, 82.66666666666666], [97.0, 96.4], [100.0, 52.85185185185185], [103.0, 101.8], [102.0, 103.66666666666667], [101.0, 101.0], [104.0, 87.76923076923077], [106.0, 97.0], [107.0, 111.28571428571428], [105.0, 108.42857142857142], [109.0, 96.71428571428572], [110.0, 101.81818181818181], [111.0, 96.66666666666667], [108.0, 112.0], [115.0, 80.0], [114.0, 96.18181818181817], [113.0, 100.6], [112.0, 109.42857142857143], [117.0, 85.0], [119.0, 154.0], [118.0, 81.33333333333333], [120.0, 96.5], [121.0, 88.39999999999999], [123.0, 93.0], [122.0, 80.25], [124.0, 82.53846153846153], [127.0, 79.44444444444444], [126.0, 148.0], [125.0, 151.5], [128.0, 100.36363636363636], [129.0, 104.42857142857143], [132.0, 108.28846153846156], [133.0, 110.42857142857143], [135.0, 120.66666666666667], [134.0, 130.6], [131.0, 99.00000000000001], [139.0, 118.6], [142.0, 130.8], [141.0, 123.0], [140.0, 123.0], [138.0, 112.07142857142857], [136.0, 103.0], [148.0, 146.0], [149.0, 136.57142857142858], [151.0, 141.0], [150.0, 147.0], [147.0, 146.0], [146.0, 161.66666666666666], [145.0, 120.20000000000002], [152.0, 159.36363636363637], [154.0, 144.3], [159.0, 134.22222222222226], [158.0, 132.0], [157.0, 129.1935483870968], [156.0, 136.5], [155.0, 140.74999999999997], [153.0, 135.0], [160.0, 148.8421052631579], [163.0, 144.9310344827586], [164.0, 139.5], [165.0, 141.23076923076923], [167.0, 168.77777777777777], [166.0, 179.33333333333331], [162.0, 154.37500000000003], [161.0, 156.5], [171.0, 178.0], [172.0, 135.08333333333331], [173.0, 144.81249999999997], [175.0, 160.0], [170.0, 164.5333333333333], [169.0, 166.75], [168.0, 158.41176470588235], [176.0, 119.375], [179.0, 130.0], [181.0, 137.1818181818182], [183.0, 98.5], [178.0, 161.45454545454544], [177.0, 159.2], [184.0, 117.99999999999999], [185.0, 229.0], [186.0, 153.2941176470588], [187.0, 165.0], [188.0, 126.66666666666667], [189.0, 84.0], [190.0, 169.88888888888889], [191.0, 178.6086956521739], [193.0, 168.7], [194.0, 176.02985074626866], [197.0, 183.71428571428572], [199.0, 245.0], [198.0, 244.8], [196.0, 235.09090909090907], [195.0, 195.83333333333334], [192.0, 192.48275862068962], [201.0, 198.9], [202.0, 186.5], [205.0, 202.66666666666666], [207.0, 105.0], [206.0, 233.42857142857142], [204.0, 235.71428571428572], [203.0, 217.8], [200.0, 256.0], [212.0, 240.22222222222223], [214.0, 223.9090909090909], [215.0, 225.7058823529412], [211.0, 225.93333333333328], [210.0, 239.0], [209.0, 218.4], [208.0, 229.0], [217.0, 237.00000000000003], [218.0, 208.10526315789477], [219.0, 225.63157894736844], [222.0, 166.8181818181818], [223.0, 202.0], [221.0, 210.0], [220.0, 202.0909090909091], [216.0, 226.66666666666666], [226.0, 188.65217391304353], [231.0, 182.47619047619048], [230.0, 187.61904761904756], [229.0, 196.99999999999997], [228.0, 199.82608695652175], [225.0, 207.66666666666666], [224.0, 201.0], [232.0, 150.0], [233.0, 149.57142857142858], [239.0, 177.8], [238.0, 165.75], [237.0, 178.33333333333334], [236.0, 180.0], [235.0, 172.0], [234.0, 169.33333333333334], [240.0, 177.0909090909091], [245.0, 1367.6666666666665], [247.0, 1820.3636363636367], [246.0, 180.0], [244.0, 160.4], [243.0, 153.8], [242.0, 152.63636363636368], [241.0, 165.1111111111111], [255.0, 230.0], [254.0, 2597.166666666667], [253.0, 3071.0], [252.0, 2569.0], [251.0, 3213.000000000001], [250.0, 2472.276595744682], [249.0, 1969.1250000000002], [248.0, 2451.0392156862745], [270.0, 760.7999999999998], [257.0, 943.3166666666667], [256.0, 772.8461538461539], [259.0, 232.25], [258.0, 264.3333333333333], [261.0, 699.6206896551723], [260.0, 249.12500000000003], [262.0, 246.66666666666666], [263.0, 228.90909090909085], [264.0, 213.26086956521735], [267.0, 574.1578947368422], [266.0, 814.4166666666667], [265.0, 192.0], [271.0, 182.15384615384613], [269.0, 1871.9047619047622], [268.0, 1946.75], [287.0, 218.54545454545453], [272.0, 718.5714285714287], [279.0, 575.3333333333333], [278.0, 661.508474576271], [277.0, 202.8181818181818], [276.0, 893.9], [280.0, 933.2105263157895], [281.0, 534.4264705882351], [282.0, 232.25], [283.0, 603.1052631578948], [284.0, 181.0], [275.0, 144.0], [274.0, 182.4], [273.0, 756.8333333333336], [286.0, 1055.8749999999998], [285.0, 2921.2000000000003], [303.0, 894.9999999999999], [292.0, 214.16666666666666], [294.0, 223.42857142857144], [293.0, 241.12499999999997], [296.0, 215.76923076923077], [301.0, 196.87500000000003], [302.0, 2631.611111111111], [300.0, 1560.4], [291.0, 215.0], [290.0, 212.8], [289.0, 214.44444444444446], [288.0, 1710.7777777777778], [295.0, 221.48000000000002], [299.0, 245.0], [298.0, 3542.0], [297.0, 217.83333333333331], [318.0, 806.6363636363636], [309.0, 212.16666666666666], [308.0, 1173.0], [310.0, 1107.8666666666668], [311.0, 695.0], [312.0, 217.48387096774195], [317.0, 474.55555555555554], [316.0, 208.14285714285714], [307.0, 1168.0], [306.0, 214.0], [305.0, 3495.5], [304.0, 1442.7777777777774], [315.0, 672.7142857142858], [314.0, 218.66666666666666], [313.0, 217.5], [332.0, 178.05882352941177], [321.0, 527.4067796610169], [320.0, 195.0], [323.0, 4437.333333333333], [322.0, 185.0], [326.0, 816.1], [325.0, 1774.0833333333335], [324.0, 186.5], [327.0, 2201.92], [335.0, 200.57142857142858], [329.0, 199.5], [328.0, 1454.8], [334.0, 1766.2500000000002], [333.0, 993.0625], [331.0, 200.71428571428572], [330.0, 1092.5], [350.0, 153.85714285714286], [338.0, 650.8461538461538], [337.0, 951.4000000000001], [336.0, 6487.0], [343.0, 1415.0], [342.0, 158.2857142857143], [341.0, 148.0], [340.0, 180.66666666666666], [339.0, 435.0], [345.0, 163.66666666666669], [346.0, 421.0833333333333], [351.0, 1549.181818181818], [344.0, 173.5], [349.0, 159.1818181818182], [348.0, 936.3750000000001], [347.0, 795.7999999999998], [366.0, 206.38888888888889], [356.0, 160.33333333333334], [357.0, 130.625], [358.0, 195.99999999999997], [359.0, 152.6], [353.0, 2447.8750000000005], [352.0, 2202.8333333333335], [355.0, 1317.4468085106387], [354.0, 2603.8], [362.0, 178.83333333333334], [363.0, 218.5], [367.0, 912.375], [361.0, 141.75], [360.0, 144.5], [365.0, 1377.7999999999997], [364.0, 1663.25], [382.0, 381.06060606060606], [371.0, 1545.5555555555557], [370.0, 1029.4285714285716], [369.0, 188.25], [368.0, 283.44444444444446], [375.0, 216.0], [374.0, 161.0], [373.0, 179.33333333333334], [372.0, 2177.1388888888887], [377.0, 226.88888888888889], [383.0, 336.45238095238085], [381.0, 1198.6666666666667], [380.0, 2183.0], [379.0, 191.6], [378.0, 187.2], [376.0, 177.0], [397.0, 178.26315789473685], [384.0, 798.8], [391.0, 627.8], [390.0, 1548.3333333333333], [389.0, 1551.7222222222224], [388.0, 252.0], [385.0, 805.9000000000001], [392.0, 167.5], [395.0, 188.5], [396.0, 534.1666666666665], [387.0, 1684.5], [386.0, 402.8571428571428], [398.0, 446.9130434782609], [399.0, 253.0], [394.0, 1068.142857142857], [393.0, 161.0], [414.0, 195.71428571428572], [402.0, 162.0], [403.0, 679.36], [406.0, 202.5], [401.0, 948.75], [400.0, 1188.2777777777776], [405.0, 222.7142857142857], [404.0, 220.6], [409.0, 262.79999999999995], [415.0, 188.06250000000003], [408.0, 215.5], [413.0, 201.72727272727272], [412.0, 205.46153846153848], [411.0, 197.0], [410.0, 240.0], [430.0, 267.55555555555554], [420.0, 989.3181818181818], [421.0, 191.6], [423.0, 1429.5555555555557], [417.0, 179.6], [416.0, 1602.25], [419.0, 644.8750000000001], [418.0, 1298.0], [422.0, 1113.5], [425.0, 231.16666666666669], [431.0, 1487.076923076923], [429.0, 810.0], [428.0, 615.0769230769231], [427.0, 5716.0], [426.0, 199.11111111111111], [424.0, 195.57142857142856], [435.0, 240.58333333333331], [437.0, 318.66666666666663], [438.0, 242.50000000000003], [439.0, 234.125], [434.0, 232.52631578947367], [432.0, 223.22222222222223], [443.0, 275.44444444444446], [445.0, 276.5833333333333], [447.0, 235.125], [446.0, 248.0], [442.0, 740.9090909090909], [441.0, 981.2068965517242], [440.0, 1017.4285714285713], [462.0, 1062.3333333333333], [453.0, 805.6000000000001], [452.0, 239.33333333333334], [455.0, 1015.153846153846], [449.0, 558.6969696969697], [451.0, 199.0], [450.0, 247.66666666666666], [454.0, 211.6], [463.0, 983.2857142857142], [461.0, 202.5], [460.0, 189.0], [459.0, 771.6666666666666], [458.0, 5445.0], [457.0, 228.0], [456.0, 200.0], [476.0, 951.1428571428572], [464.0, 303.3333333333333], [467.0, 173.0], [466.0, 197.66666666666666], [471.0, 616.0833333333334], [470.0, 523.9375], [468.0, 305.0], [469.0, 255.49999999999997], [473.0, 320.72727272727275], [472.0, 837.875], [477.0, 306.0], [479.0, 198.2], [478.0, 195.0], [475.0, 193.0], [474.0, 1660.5714285714284], [481.0, 258.29411764705884], [485.0, 242.91666666666669], [484.0, 585.7307692307693], [487.0, 192.0], [480.0, 190.0], [486.0, 233.33333333333334], [489.0, 547.6842105263157], [494.0, 297.12500000000006], [495.0, 199.0], [493.0, 215.66666666666666], [492.0, 202.66666666666666], [483.0, 206.00000000000003], [482.0, 1656.857142857143], [491.0, 234.22222222222223], [488.0, 1153.2592592592598], [511.0, 221.0], [503.0, 239.26666666666665], [497.0, 247.0], [496.0, 206.42857142857142], [499.0, 649.75], [498.0, 234.4074074074074], [502.0, 877.3913043478261], [501.0, 1290.9285714285713], [500.0, 494.4736842105263], [506.0, 244.6], [508.0, 306.42857142857144], [509.0, 367.3333333333333], [510.0, 2187.0], [507.0, 2677.75], [505.0, 233.8], [504.0, 222.5], [517.0, 231.72727272727275], [516.0, 228.08333333333334], [515.0, 219.0], [514.0, 353.0277777777778], [513.0, 2057.5], [512.0, 228.33333333333334], [519.0, 210.8181818181818], [537.0, 216.0], [536.0, 193.0], [521.0, 284.57142857142856], [520.0, 223.75], [524.0, 1022.0], [523.0, 185.14285714285714], [522.0, 674.1], [526.0, 871.7142857142857], [525.0, 639.0952380952382], [527.0, 178.57142857142858], [530.0, 1244.8333333333333], [529.0, 166.0], [528.0, 850.0000000000001], [531.0, 187.875], [533.0, 191.55555555555554], [532.0, 170.99999999999997], [535.0, 192.15789473684208], [534.0, 275.3333333333333], [538.0, 352.20000000000005], [541.0, 440.3333333333333], [540.0, 203.0], [542.0, 225.44], [571.0, 332.7857142857143], [546.0, 469.3666666666667], [545.0, 435.99999999999994], [544.0, 525.2903225806451], [547.0, 1370.0400000000002], [548.0, 1000.8333333333333], [550.0, 257.25000000000006], [549.0, 1165.6], [568.0, 2475.5], [551.0, 262.8181818181818], [570.0, 245.0], [569.0, 907.1428571428571], [554.0, 640.1315789473683], [552.0, 443.44444444444446], [556.0, 271.0322580645161], [555.0, 249.8181818181818], [557.0, 375.48571428571427], [558.0, 334.40000000000003], [559.0, 333.5], [575.0, 283.77777777777777], [560.0, 274.6666666666667], [562.0, 1716.0], [561.0, 1034.8260869565217], [565.0, 1235.6666666666667], [564.0, 760.2222222222222], [567.0, 1244.5555555555557], [566.0, 282.0], [574.0, 279.0], [573.0, 287.27777777777777], [572.0, 281.18749999999994], [606.0, 373.77777777777777], [577.0, 365.3846153846153], [581.0, 395.25], [580.0, 284.6666666666667], [579.0, 268.5], [578.0, 283.6153846153846], [583.0, 290.8333333333333], [601.0, 310.52631578947376], [600.0, 283.0], [604.0, 290.14285714285717], [602.0, 289.75], [585.0, 337.5714285714286], [587.0, 851.8965517241378], [586.0, 266.0], [589.0, 1323.1666666666667], [588.0, 1328.0], [591.0, 291.5], [576.0, 266.57142857142867], [590.0, 305.0], [593.0, 1014.6666666666667], [594.0, 744.25], [595.0, 1157.8947368421052], [597.0, 292.2], [596.0, 297.0], [598.0, 312.83333333333337], [599.0, 525.5], [607.0, 311.74999999999994], [592.0, 831.375], [634.0, 332.0], [638.0, 304.625], [608.0, 373.77777777777777], [609.0, 305.25], [611.0, 317.04761904761904], [610.0, 319.875], [614.0, 1602.6666666666665], [613.0, 735.9999999999999], [623.0, 277.0], [622.0, 401.0], [621.0, 1244.25], [620.0, 286.8], [619.0, 2246.0], [618.0, 272.2], [616.0, 1491.2], [615.0, 729.0909090909091], [624.0, 889.1428571428571], [629.0, 369.0], [628.0, 271.0], [627.0, 1039.4375], [626.0, 290.0], [631.0, 536.9333333333332], [630.0, 787.0000000000001], [632.0, 322.4], [633.0, 580.8888888888888], [635.0, 285.3333333333333], [639.0, 413.4], [637.0, 289.3333333333333], [636.0, 324.0], [665.0, 875.8571428571429], [643.0, 489.59090909090895], [646.0, 451.0], [645.0, 1252.0], [644.0, 319.3333333333333], [664.0, 338.5], [647.0, 298.83333333333337], [649.0, 381.7142857142857], [651.0, 279.0], [650.0, 298.90909090909093], [653.0, 1317.0], [652.0, 413.0], [655.0, 317.37500000000006], [640.0, 262.0], [642.0, 287.28571428571433], [641.0, 311.3333333333333], [654.0, 790.625], [667.0, 680.6153846153846], [670.0, 2179.75], [656.0, 997.090909090909], [658.0, 1262.25], [657.0, 916.8333333333334], [660.0, 402.0], [659.0, 1589.3333333333335], [663.0, 325.3333333333333], [661.0, 784.375], [669.0, 839.5714285714286], [668.0, 281.5], [666.0, 287.25], [700.0, 701.3157894736842], [683.0, 887.4285714285714], [682.0, 354.0], [681.0, 307.3333333333333], [680.0, 277.6666666666667], [685.0, 1235.0], [684.0, 384.75], [686.0, 332.8888888888889], [688.0, 426.6666666666665], [695.0, 460.45714285714274], [694.0, 333.8], [693.0, 363.6], [692.0, 581.3095238095239], [691.0, 1182.375], [690.0, 767.875], [689.0, 715.3260869565221], [702.0, 432.8], [701.0, 316.0], [703.0, 352.0], [699.0, 321.0], [698.0, 1098.0], [697.0, 375.3333333333333], [696.0, 1015.4], [687.0, 428.5], [674.0, 297.73333333333335], [672.0, 956.1176470588238], [677.0, 279.75], [676.0, 343.5], [679.0, 318.3333333333333], [678.0, 368.6666666666667], [731.0, 376.3333333333333], [719.0, 383.75], [717.0, 389.2], [715.0, 345.42857142857144], [714.0, 736.3333333333333], [713.0, 774.8749999999999], [712.0, 365.0], [718.0, 368.5], [720.0, 414.0], [722.0, 381.0], [721.0, 379.1428571428571], [724.0, 378.75], [723.0, 3612.0], [727.0, 918.0], [725.0, 1180.75], [732.0, 380.0], [733.0, 419.44444444444446], [734.0, 413.33333333333337], [735.0, 367.5], [729.0, 912.8333333333334], [728.0, 379.0], [710.0, 339.6666666666667], [709.0, 371.66666666666663], [708.0, 350.6666666666667], [707.0, 346.0], [706.0, 328.5], [705.0, 661.2380952380953], [704.0, 328.0], [764.0, 1158.75], [742.0, 398.8888888888889], [751.0, 400.0], [736.0, 377.0], [739.0, 421.0], [737.0, 923.1666666666667], [741.0, 1039.4], [740.0, 1178.875], [749.0, 368.5], [748.0, 367.0], [745.0, 395.0], [754.0, 432.0], [753.0, 392.1666666666667], [755.0, 318.5], [767.0, 1429.6666666666665], [766.0, 388.0], [763.0, 384.6666666666667], [762.0, 395.5], [760.0, 343.0], [743.0, 382.14285714285717], [759.0, 388.2], [757.0, 389.0], [795.0, 357.0], [773.0, 395.2], [783.0, 424.3636363636363], [770.0, 1167.25], [769.0, 377.0], [772.0, 386.2857142857143], [771.0, 376.5], [782.0, 813.2857142857143], [780.0, 363.71428571428567], [778.0, 731.3333333333334], [776.0, 361.0], [792.0, 619.5714285714284], [775.0, 1152.875], [774.0, 392.5], [799.0, 373.0], [785.0, 1303.5], [784.0, 360.5], [787.0, 994.0], [786.0, 891.5], [790.0, 1158.375], [788.0, 724.2222222222222], [797.0, 384.8333333333333], [796.0, 1150.5], [794.0, 551.6470588235294], [793.0, 384.0], [807.0, 391.6666666666667], [829.0, 716.4999999999999], [800.0, 411.4], [811.0, 681.5454545454546], [810.0, 394.77777777777777], [809.0, 387.6666666666667], [808.0, 855.7692307692307], [813.0, 560.3432835820896], [812.0, 415.3333333333333], [815.0, 377.25], [814.0, 632.3913043478259], [818.0, 378.3181818181818], [817.0, 362.13043478260863], [816.0, 627.5652173913044], [820.0, 683.2222222222222], [819.0, 743.590909090909], [823.0, 373.25], [821.0, 349.25], [831.0, 445.6666666666667], [830.0, 377.2857142857143], [828.0, 368.5], [826.0, 726.4375], [825.0, 364.0], [806.0, 402.66666666666663], [805.0, 372.3333333333333], [804.0, 407.6666666666667], [802.0, 371.0], [857.0, 456.0], [833.0, 425.8888888888889], [836.0, 444.5], [835.0, 754.0], [834.0, 602.1538461538462], [838.0, 845.6666666666667], [837.0, 780.7142857142858], [856.0, 435.61538461538464], [839.0, 405.8333333333333], [841.0, 433.3333333333333], [840.0, 549.9166666666666], [842.0, 457.3333333333333], [844.0, 789.4666666666667], [843.0, 406.8], [847.0, 435.85714285714283], [832.0, 381.0], [845.0, 431.3333333333333], [851.0, 817.659574468085], [855.0, 437.2380952380953], [854.0, 511.54838709677404], [853.0, 476.0], [852.0, 464.2], [858.0, 450.2941176470588], [859.0, 459.0909090909091], [861.0, 457.14285714285717], [860.0, 480.75], [862.0, 484.7692307692307], [863.0, 1245.888888888889], [848.0, 457.0], [850.0, 739.875], [849.0, 438.0], [889.0, 401.27586206896564], [893.0, 436.1818181818182], [881.0, 414.0], [880.0, 805.5454545454545], [882.0, 409.2], [885.0, 392.25], [883.0, 631.6], [887.0, 421.0], [886.0, 412.6], [895.0, 612.714285714286], [894.0, 621.4347826086956], [892.0, 351.0], [891.0, 421.3333333333333], [890.0, 407.125], [888.0, 369.6666666666667], [871.0, 435.0], [870.0, 767.7142857142857], [869.0, 742.125], [868.0, 468.0], [867.0, 420.6666666666667], [866.0, 737.4444444444443], [865.0, 459.0], [864.0, 458.5714285714286], [879.0, 441.5], [878.0, 844.9090909090909], [877.0, 791.0833333333333], [876.0, 891.4], [875.0, 1075.9999999999998], [874.0, 386.6666666666667], [873.0, 419.5], [872.0, 446.8], [901.0, 606.0434782608695], [898.0, 434.8], [897.0, 385.75], [896.0, 427.3333333333333], [911.0, 460.0], [910.0, 521.888888888889], [909.0, 764.0909090909091], [908.0, 689.5999999999999], [907.0, 542.4705882352944], [906.0, 547.6776859504133], [905.0, 542.4404761904759], [904.0, 455.125], [899.0, 474.0], [900.0, 610.7727272727274], [912.0, 630.7894736842104], [927.0, 390.84615384615387], [926.0, 357.0], [925.0, 338.0], [924.0, 375.34375], [923.0, 392.7142857142857], [921.0, 443.1176470588237], [920.0, 437.11111111111114], [903.0, 474.2857142857143], [902.0, 445.9830508474578], [922.0, 444.90909090909093], [913.0, 483.0], [916.0, 453.7142857142857], [915.0, 622.9444444444443], [914.0, 477.78], [917.0, 693.3749999999999], [918.0, 549.2222222222222], [919.0, 457.875], [952.0, 413.4], [958.0, 739.5333333333332], [934.0, 415.375], [933.0, 604.0], [932.0, 526.9999999999999], [931.0, 289.0], [930.0, 486.9487179487179], [929.0, 328.5], [928.0, 336.3], [935.0, 575.1666666666667], [942.0, 369.8571428571429], [941.0, 422.5], [940.0, 561.6923076923075], [939.0, 796.3571428571428], [938.0, 608.1], [937.0, 682.9444444444445], [936.0, 355.875], [953.0, 402.75], [945.0, 376.91666666666663], [951.0, 415.9333333333334], [950.0, 393.0], [949.0, 417.7931034482759], [948.0, 466.7], [946.0, 492.26315789473676], [954.0, 528.9999999999999], [959.0, 403.5], [944.0, 387.33333333333337], [957.0, 647.5555555555555], [956.0, 468.11764705882354], [955.0, 412.71428571428567], [986.0, 570.9607843137255], [964.0, 485.8333333333333], [963.0, 635.1818181818181], [962.0, 563.6], [961.0, 570.6], [960.0, 438.0], [966.0, 463.8], [965.0, 650.5263157894736], [985.0, 554.020134228188], [967.0, 522.5], [971.0, 636.3333333333334], [970.0, 508.9375], [969.0, 600.8], [968.0, 555.0], [972.0, 444.6666666666667], [974.0, 471.75], [973.0, 687.0], [975.0, 658.5384615384615], [983.0, 505.99999999999994], [982.0, 388.5], [981.0, 415.5], [980.0, 319.0], [979.0, 398.5], [978.0, 497.65217391304355], [977.0, 409.0], [976.0, 568.4285714285713], [991.0, 715.0], [990.0, 628.0], [989.0, 655.75], [988.0, 518.5], [987.0, 863.6666666666666], [999.0, 603.90625], [998.0, 558.3617021276598], [997.0, 533.5999999999999], [996.0, 533.0], [995.0, 545.3529411764706], [994.0, 511.0], [993.0, 519.0], [992.0, 538.7021276595747], [1.0, 57.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[535.5350000000001, 566.2140999999987]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 999.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.6695621E12, "maxY": 50166.666666666664, "series": [{"data": [[1.6695621E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6695621E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695621E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 566.2140999999987, "minX": 1.6695621E12, "maxY": 566.2140999999987, "series": [{"data": [[1.6695621E12, 566.2140999999987]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695621E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 565.9464999999988, "minX": 1.6695621E12, "maxY": 565.9464999999988, "series": [{"data": [[1.6695621E12, 565.9464999999988]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695621E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9513999999999996, "minX": 1.6695621E12, "maxY": 0.9513999999999996, "series": [{"data": [[1.6695621E12, 0.9513999999999996]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695621E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6695621E12, "maxY": 7452.0, "series": [{"data": [[1.6695621E12, 7452.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6695621E12, 515.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6695621E12, 6967.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6695621E12, 2844.399999999987]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6695621E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6695621E12, 269.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695621E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 87.0, "minX": 439.0, "maxY": 447.0, "series": [{"data": [[1058.0, 229.0], [1239.0, 190.0], [779.0, 425.0], [818.0, 148.0], [895.0, 447.0], [439.0, 87.0], [909.0, 436.0], [946.0, 308.0], [945.0, 217.0], [965.0, 208.0], [1007.0, 398.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1239.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 87.0, "minX": 439.0, "maxY": 447.0, "series": [{"data": [[1058.0, 229.0], [1239.0, 190.0], [779.0, 425.0], [818.0, 148.0], [895.0, 447.0], [439.0, 87.0], [909.0, 436.0], [946.0, 308.0], [945.0, 217.0], [965.0, 208.0], [1007.0, 398.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1239.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695621E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695621E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695621E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695621E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695621E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6695621E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695621E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695621E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695621E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6695621E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6695621E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6695621E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

