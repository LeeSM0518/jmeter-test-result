/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8559.0, "series": [{"data": [[0.0, 1.0], [0.1, 7.0], [0.2, 9.0], [0.3, 10.0], [0.4, 11.0], [0.5, 13.0], [0.6, 14.0], [0.7, 15.0], [0.8, 16.0], [0.9, 18.0], [1.0, 20.0], [1.1, 22.0], [1.2, 23.0], [1.3, 24.0], [1.4, 25.0], [1.5, 27.0], [1.6, 28.0], [1.7, 29.0], [1.8, 31.0], [1.9, 31.0], [2.0, 32.0], [2.1, 33.0], [2.2, 34.0], [2.3, 36.0], [2.4, 38.0], [2.5, 39.0], [2.6, 40.0], [2.7, 41.0], [2.8, 42.0], [2.9, 44.0], [3.0, 46.0], [3.1, 48.0], [3.2, 49.0], [3.3, 50.0], [3.4, 51.0], [3.5, 52.0], [3.6, 54.0], [3.7, 55.0], [3.8, 56.0], [3.9, 57.0], [4.0, 58.0], [4.1, 60.0], [4.2, 62.0], [4.3, 64.0], [4.4, 65.0], [4.5, 67.0], [4.6, 68.0], [4.7, 70.0], [4.8, 71.0], [4.9, 72.0], [5.0, 73.0], [5.1, 75.0], [5.2, 76.0], [5.3, 76.0], [5.4, 77.0], [5.5, 79.0], [5.6, 81.0], [5.7, 84.0], [5.8, 87.0], [5.9, 88.0], [6.0, 89.0], [6.1, 91.0], [6.2, 93.0], [6.3, 96.0], [6.4, 97.0], [6.5, 98.0], [6.6, 100.0], [6.7, 101.0], [6.8, 103.0], [6.9, 104.0], [7.0, 105.0], [7.1, 107.0], [7.2, 109.0], [7.3, 110.0], [7.4, 111.0], [7.5, 112.0], [7.6, 113.0], [7.7, 114.0], [7.8, 116.0], [7.9, 117.0], [8.0, 117.0], [8.1, 118.0], [8.2, 120.0], [8.3, 120.0], [8.4, 121.0], [8.5, 122.0], [8.6, 124.0], [8.7, 125.0], [8.8, 126.0], [8.9, 127.0], [9.0, 128.0], [9.1, 129.0], [9.2, 130.0], [9.3, 131.0], [9.4, 132.0], [9.5, 134.0], [9.6, 135.0], [9.7, 135.0], [9.8, 136.0], [9.9, 137.0], [10.0, 138.0], [10.1, 140.0], [10.2, 141.0], [10.3, 142.0], [10.4, 143.0], [10.5, 144.0], [10.6, 144.0], [10.7, 145.0], [10.8, 146.0], [10.9, 147.0], [11.0, 148.0], [11.1, 149.0], [11.2, 150.0], [11.3, 151.0], [11.4, 151.0], [11.5, 152.0], [11.6, 152.0], [11.7, 153.0], [11.8, 153.0], [11.9, 155.0], [12.0, 156.0], [12.1, 156.0], [12.2, 157.0], [12.3, 158.0], [12.4, 159.0], [12.5, 159.0], [12.6, 160.0], [12.7, 160.0], [12.8, 161.0], [12.9, 161.0], [13.0, 162.0], [13.1, 162.0], [13.2, 163.0], [13.3, 164.0], [13.4, 164.0], [13.5, 165.0], [13.6, 165.0], [13.7, 166.0], [13.8, 167.0], [13.9, 167.0], [14.0, 168.0], [14.1, 168.0], [14.2, 168.0], [14.3, 169.0], [14.4, 169.0], [14.5, 169.0], [14.6, 170.0], [14.7, 171.0], [14.8, 171.0], [14.9, 172.0], [15.0, 172.0], [15.1, 173.0], [15.2, 173.0], [15.3, 174.0], [15.4, 174.0], [15.5, 175.0], [15.6, 175.0], [15.7, 175.0], [15.8, 176.0], [15.9, 176.0], [16.0, 176.0], [16.1, 177.0], [16.2, 177.0], [16.3, 177.0], [16.4, 178.0], [16.5, 179.0], [16.6, 179.0], [16.7, 179.0], [16.8, 180.0], [16.9, 180.0], [17.0, 181.0], [17.1, 182.0], [17.2, 183.0], [17.3, 183.0], [17.4, 184.0], [17.5, 184.0], [17.6, 185.0], [17.7, 185.0], [17.8, 185.0], [17.9, 186.0], [18.0, 187.0], [18.1, 187.0], [18.2, 187.0], [18.3, 188.0], [18.4, 188.0], [18.5, 188.0], [18.6, 189.0], [18.7, 189.0], [18.8, 190.0], [18.9, 191.0], [19.0, 191.0], [19.1, 192.0], [19.2, 192.0], [19.3, 193.0], [19.4, 193.0], [19.5, 194.0], [19.6, 194.0], [19.7, 195.0], [19.8, 195.0], [19.9, 195.0], [20.0, 196.0], [20.1, 197.0], [20.2, 197.0], [20.3, 198.0], [20.4, 198.0], [20.5, 199.0], [20.6, 199.0], [20.7, 200.0], [20.8, 200.0], [20.9, 200.0], [21.0, 201.0], [21.1, 201.0], [21.2, 202.0], [21.3, 202.0], [21.4, 202.0], [21.5, 203.0], [21.6, 203.0], [21.7, 204.0], [21.8, 204.0], [21.9, 205.0], [22.0, 205.0], [22.1, 205.0], [22.2, 206.0], [22.3, 206.0], [22.4, 207.0], [22.5, 207.0], [22.6, 207.0], [22.7, 208.0], [22.8, 208.0], [22.9, 208.0], [23.0, 208.0], [23.1, 209.0], [23.2, 209.0], [23.3, 209.0], [23.4, 210.0], [23.5, 210.0], [23.6, 211.0], [23.7, 211.0], [23.8, 211.0], [23.9, 211.0], [24.0, 212.0], [24.1, 212.0], [24.2, 212.0], [24.3, 212.0], [24.4, 213.0], [24.5, 213.0], [24.6, 213.0], [24.7, 214.0], [24.8, 214.0], [24.9, 215.0], [25.0, 215.0], [25.1, 215.0], [25.2, 216.0], [25.3, 216.0], [25.4, 216.0], [25.5, 216.0], [25.6, 216.0], [25.7, 217.0], [25.8, 217.0], [25.9, 217.0], [26.0, 217.0], [26.1, 218.0], [26.2, 219.0], [26.3, 219.0], [26.4, 219.0], [26.5, 219.0], [26.6, 220.0], [26.7, 220.0], [26.8, 220.0], [26.9, 221.0], [27.0, 221.0], [27.1, 221.0], [27.2, 222.0], [27.3, 222.0], [27.4, 223.0], [27.5, 223.0], [27.6, 223.0], [27.7, 224.0], [27.8, 224.0], [27.9, 224.0], [28.0, 225.0], [28.1, 225.0], [28.2, 225.0], [28.3, 225.0], [28.4, 226.0], [28.5, 226.0], [28.6, 227.0], [28.7, 227.0], [28.8, 227.0], [28.9, 228.0], [29.0, 228.0], [29.1, 228.0], [29.2, 228.0], [29.3, 229.0], [29.4, 229.0], [29.5, 229.0], [29.6, 230.0], [29.7, 230.0], [29.8, 231.0], [29.9, 231.0], [30.0, 231.0], [30.1, 232.0], [30.2, 232.0], [30.3, 232.0], [30.4, 233.0], [30.5, 233.0], [30.6, 233.0], [30.7, 234.0], [30.8, 234.0], [30.9, 235.0], [31.0, 235.0], [31.1, 236.0], [31.2, 236.0], [31.3, 236.0], [31.4, 236.0], [31.5, 237.0], [31.6, 237.0], [31.7, 237.0], [31.8, 238.0], [31.9, 239.0], [32.0, 239.0], [32.1, 240.0], [32.2, 240.0], [32.3, 240.0], [32.4, 240.0], [32.5, 241.0], [32.6, 241.0], [32.7, 242.0], [32.8, 242.0], [32.9, 243.0], [33.0, 243.0], [33.1, 244.0], [33.2, 244.0], [33.3, 245.0], [33.4, 245.0], [33.5, 246.0], [33.6, 246.0], [33.7, 247.0], [33.8, 247.0], [33.9, 247.0], [34.0, 248.0], [34.1, 248.0], [34.2, 248.0], [34.3, 248.0], [34.4, 248.0], [34.5, 249.0], [34.6, 249.0], [34.7, 249.0], [34.8, 250.0], [34.9, 250.0], [35.0, 251.0], [35.1, 251.0], [35.2, 252.0], [35.3, 252.0], [35.4, 252.0], [35.5, 253.0], [35.6, 254.0], [35.7, 254.0], [35.8, 255.0], [35.9, 255.0], [36.0, 255.0], [36.1, 256.0], [36.2, 256.0], [36.3, 256.0], [36.4, 256.0], [36.5, 257.0], [36.6, 257.0], [36.7, 258.0], [36.8, 259.0], [36.9, 259.0], [37.0, 260.0], [37.1, 260.0], [37.2, 261.0], [37.3, 261.0], [37.4, 262.0], [37.5, 262.0], [37.6, 263.0], [37.7, 264.0], [37.8, 264.0], [37.9, 264.0], [38.0, 264.0], [38.1, 265.0], [38.2, 265.0], [38.3, 266.0], [38.4, 266.0], [38.5, 266.0], [38.6, 267.0], [38.7, 267.0], [38.8, 268.0], [38.9, 268.0], [39.0, 268.0], [39.1, 269.0], [39.2, 270.0], [39.3, 271.0], [39.4, 271.0], [39.5, 271.0], [39.6, 272.0], [39.7, 272.0], [39.8, 272.0], [39.9, 273.0], [40.0, 273.0], [40.1, 273.0], [40.2, 274.0], [40.3, 275.0], [40.4, 275.0], [40.5, 276.0], [40.6, 276.0], [40.7, 276.0], [40.8, 277.0], [40.9, 278.0], [41.0, 278.0], [41.1, 279.0], [41.2, 279.0], [41.3, 280.0], [41.4, 280.0], [41.5, 280.0], [41.6, 281.0], [41.7, 281.0], [41.8, 281.0], [41.9, 282.0], [42.0, 283.0], [42.1, 283.0], [42.2, 283.0], [42.3, 283.0], [42.4, 284.0], [42.5, 284.0], [42.6, 284.0], [42.7, 285.0], [42.8, 286.0], [42.9, 287.0], [43.0, 287.0], [43.1, 288.0], [43.2, 288.0], [43.3, 288.0], [43.4, 289.0], [43.5, 289.0], [43.6, 290.0], [43.7, 290.0], [43.8, 291.0], [43.9, 292.0], [44.0, 292.0], [44.1, 293.0], [44.2, 293.0], [44.3, 294.0], [44.4, 294.0], [44.5, 295.0], [44.6, 295.0], [44.7, 295.0], [44.8, 296.0], [44.9, 296.0], [45.0, 296.0], [45.1, 297.0], [45.2, 298.0], [45.3, 298.0], [45.4, 300.0], [45.5, 301.0], [45.6, 302.0], [45.7, 303.0], [45.8, 303.0], [45.9, 304.0], [46.0, 304.0], [46.1, 304.0], [46.2, 305.0], [46.3, 305.0], [46.4, 306.0], [46.5, 307.0], [46.6, 308.0], [46.7, 309.0], [46.8, 309.0], [46.9, 311.0], [47.0, 311.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 313.0], [47.5, 313.0], [47.6, 314.0], [47.7, 315.0], [47.8, 316.0], [47.9, 317.0], [48.0, 317.0], [48.1, 319.0], [48.2, 319.0], [48.3, 319.0], [48.4, 320.0], [48.5, 320.0], [48.6, 320.0], [48.7, 321.0], [48.8, 321.0], [48.9, 322.0], [49.0, 323.0], [49.1, 324.0], [49.2, 324.0], [49.3, 326.0], [49.4, 327.0], [49.5, 327.0], [49.6, 328.0], [49.7, 328.0], [49.8, 329.0], [49.9, 331.0], [50.0, 332.0], [50.1, 334.0], [50.2, 335.0], [50.3, 336.0], [50.4, 336.0], [50.5, 339.0], [50.6, 340.0], [50.7, 342.0], [50.8, 344.0], [50.9, 344.0], [51.0, 345.0], [51.1, 347.0], [51.2, 348.0], [51.3, 350.0], [51.4, 352.0], [51.5, 353.0], [51.6, 354.0], [51.7, 355.0], [51.8, 356.0], [51.9, 359.0], [52.0, 360.0], [52.1, 362.0], [52.2, 363.0], [52.3, 365.0], [52.4, 366.0], [52.5, 367.0], [52.6, 367.0], [52.7, 368.0], [52.8, 370.0], [52.9, 371.0], [53.0, 372.0], [53.1, 373.0], [53.2, 374.0], [53.3, 375.0], [53.4, 376.0], [53.5, 376.0], [53.6, 378.0], [53.7, 379.0], [53.8, 379.0], [53.9, 380.0], [54.0, 381.0], [54.1, 382.0], [54.2, 383.0], [54.3, 385.0], [54.4, 386.0], [54.5, 387.0], [54.6, 387.0], [54.7, 388.0], [54.8, 389.0], [54.9, 389.0], [55.0, 391.0], [55.1, 391.0], [55.2, 392.0], [55.3, 393.0], [55.4, 394.0], [55.5, 395.0], [55.6, 396.0], [55.7, 397.0], [55.8, 399.0], [55.9, 400.0], [56.0, 402.0], [56.1, 403.0], [56.2, 404.0], [56.3, 404.0], [56.4, 405.0], [56.5, 406.0], [56.6, 407.0], [56.7, 409.0], [56.8, 411.0], [56.9, 411.0], [57.0, 412.0], [57.1, 413.0], [57.2, 413.0], [57.3, 414.0], [57.4, 415.0], [57.5, 416.0], [57.6, 418.0], [57.7, 420.0], [57.8, 420.0], [57.9, 421.0], [58.0, 422.0], [58.1, 423.0], [58.2, 423.0], [58.3, 425.0], [58.4, 427.0], [58.5, 427.0], [58.6, 428.0], [58.7, 429.0], [58.8, 430.0], [58.9, 430.0], [59.0, 431.0], [59.1, 432.0], [59.2, 434.0], [59.3, 435.0], [59.4, 436.0], [59.5, 436.0], [59.6, 437.0], [59.7, 437.0], [59.8, 438.0], [59.9, 439.0], [60.0, 440.0], [60.1, 441.0], [60.2, 441.0], [60.3, 442.0], [60.4, 443.0], [60.5, 444.0], [60.6, 444.0], [60.7, 445.0], [60.8, 446.0], [60.9, 447.0], [61.0, 448.0], [61.1, 449.0], [61.2, 449.0], [61.3, 450.0], [61.4, 451.0], [61.5, 451.0], [61.6, 452.0], [61.7, 452.0], [61.8, 453.0], [61.9, 454.0], [62.0, 455.0], [62.1, 455.0], [62.2, 456.0], [62.3, 457.0], [62.4, 457.0], [62.5, 458.0], [62.6, 458.0], [62.7, 458.0], [62.8, 459.0], [62.9, 459.0], [63.0, 460.0], [63.1, 460.0], [63.2, 461.0], [63.3, 461.0], [63.4, 462.0], [63.5, 463.0], [63.6, 464.0], [63.7, 464.0], [63.8, 465.0], [63.9, 465.0], [64.0, 465.0], [64.1, 466.0], [64.2, 467.0], [64.3, 467.0], [64.4, 468.0], [64.5, 468.0], [64.6, 469.0], [64.7, 469.0], [64.8, 469.0], [64.9, 470.0], [65.0, 470.0], [65.1, 471.0], [65.2, 471.0], [65.3, 472.0], [65.4, 473.0], [65.5, 473.0], [65.6, 474.0], [65.7, 474.0], [65.8, 475.0], [65.9, 475.0], [66.0, 475.0], [66.1, 476.0], [66.2, 477.0], [66.3, 477.0], [66.4, 478.0], [66.5, 479.0], [66.6, 479.0], [66.7, 480.0], [66.8, 480.0], [66.9, 480.0], [67.0, 481.0], [67.1, 481.0], [67.2, 482.0], [67.3, 482.0], [67.4, 483.0], [67.5, 483.0], [67.6, 484.0], [67.7, 484.0], [67.8, 484.0], [67.9, 485.0], [68.0, 485.0], [68.1, 485.0], [68.2, 486.0], [68.3, 487.0], [68.4, 487.0], [68.5, 487.0], [68.6, 487.0], [68.7, 488.0], [68.8, 488.0], [68.9, 489.0], [69.0, 489.0], [69.1, 490.0], [69.2, 490.0], [69.3, 491.0], [69.4, 492.0], [69.5, 492.0], [69.6, 492.0], [69.7, 493.0], [69.8, 493.0], [69.9, 493.0], [70.0, 494.0], [70.1, 494.0], [70.2, 495.0], [70.3, 495.0], [70.4, 496.0], [70.5, 496.0], [70.6, 496.0], [70.7, 497.0], [70.8, 497.0], [70.9, 498.0], [71.0, 498.0], [71.1, 498.0], [71.2, 499.0], [71.3, 499.0], [71.4, 499.0], [71.5, 500.0], [71.6, 500.0], [71.7, 500.0], [71.8, 501.0], [71.9, 501.0], [72.0, 501.0], [72.1, 502.0], [72.2, 502.0], [72.3, 503.0], [72.4, 503.0], [72.5, 504.0], [72.6, 504.0], [72.7, 504.0], [72.8, 504.0], [72.9, 505.0], [73.0, 505.0], [73.1, 506.0], [73.2, 507.0], [73.3, 507.0], [73.4, 508.0], [73.5, 508.0], [73.6, 508.0], [73.7, 509.0], [73.8, 509.0], [73.9, 509.0], [74.0, 510.0], [74.1, 510.0], [74.2, 511.0], [74.3, 511.0], [74.4, 511.0], [74.5, 511.0], [74.6, 512.0], [74.7, 512.0], [74.8, 512.0], [74.9, 512.0], [75.0, 513.0], [75.1, 513.0], [75.2, 514.0], [75.3, 514.0], [75.4, 515.0], [75.5, 515.0], [75.6, 516.0], [75.7, 516.0], [75.8, 516.0], [75.9, 517.0], [76.0, 517.0], [76.1, 518.0], [76.2, 518.0], [76.3, 519.0], [76.4, 519.0], [76.5, 520.0], [76.6, 520.0], [76.7, 520.0], [76.8, 521.0], [76.9, 521.0], [77.0, 522.0], [77.1, 522.0], [77.2, 523.0], [77.3, 523.0], [77.4, 524.0], [77.5, 524.0], [77.6, 524.0], [77.7, 525.0], [77.8, 525.0], [77.9, 526.0], [78.0, 526.0], [78.1, 527.0], [78.2, 527.0], [78.3, 527.0], [78.4, 528.0], [78.5, 528.0], [78.6, 528.0], [78.7, 528.0], [78.8, 529.0], [78.9, 529.0], [79.0, 529.0], [79.1, 530.0], [79.2, 530.0], [79.3, 531.0], [79.4, 531.0], [79.5, 531.0], [79.6, 532.0], [79.7, 532.0], [79.8, 532.0], [79.9, 532.0], [80.0, 533.0], [80.1, 533.0], [80.2, 534.0], [80.3, 534.0], [80.4, 534.0], [80.5, 535.0], [80.6, 535.0], [80.7, 535.0], [80.8, 535.0], [80.9, 535.0], [81.0, 536.0], [81.1, 536.0], [81.2, 536.0], [81.3, 536.0], [81.4, 537.0], [81.5, 537.0], [81.6, 537.0], [81.7, 538.0], [81.8, 538.0], [81.9, 539.0], [82.0, 539.0], [82.1, 539.0], [82.2, 540.0], [82.3, 540.0], [82.4, 540.0], [82.5, 541.0], [82.6, 541.0], [82.7, 541.0], [82.8, 541.0], [82.9, 542.0], [83.0, 542.0], [83.1, 543.0], [83.2, 543.0], [83.3, 544.0], [83.4, 544.0], [83.5, 544.0], [83.6, 545.0], [83.7, 545.0], [83.8, 545.0], [83.9, 546.0], [84.0, 547.0], [84.1, 547.0], [84.2, 547.0], [84.3, 547.0], [84.4, 548.0], [84.5, 548.0], [84.6, 549.0], [84.7, 549.0], [84.8, 550.0], [84.9, 550.0], [85.0, 551.0], [85.1, 551.0], [85.2, 552.0], [85.3, 552.0], [85.4, 552.0], [85.5, 553.0], [85.6, 553.0], [85.7, 554.0], [85.8, 554.0], [85.9, 555.0], [86.0, 555.0], [86.1, 556.0], [86.2, 557.0], [86.3, 557.0], [86.4, 558.0], [86.5, 558.0], [86.6, 559.0], [86.7, 559.0], [86.8, 559.0], [86.9, 560.0], [87.0, 560.0], [87.1, 561.0], [87.2, 561.0], [87.3, 562.0], [87.4, 563.0], [87.5, 563.0], [87.6, 564.0], [87.7, 564.0], [87.8, 565.0], [87.9, 566.0], [88.0, 566.0], [88.1, 567.0], [88.2, 567.0], [88.3, 568.0], [88.4, 568.0], [88.5, 569.0], [88.6, 571.0], [88.7, 571.0], [88.8, 572.0], [88.9, 572.0], [89.0, 573.0], [89.1, 574.0], [89.2, 575.0], [89.3, 576.0], [89.4, 577.0], [89.5, 577.0], [89.6, 579.0], [89.7, 579.0], [89.8, 580.0], [89.9, 581.0], [90.0, 582.0], [90.1, 584.0], [90.2, 585.0], [90.3, 586.0], [90.4, 588.0], [90.5, 589.0], [90.6, 590.0], [90.7, 592.0], [90.8, 595.0], [90.9, 597.0], [91.0, 599.0], [91.1, 600.0], [91.2, 602.0], [91.3, 604.0], [91.4, 606.0], [91.5, 610.0], [91.6, 613.0], [91.7, 617.0], [91.8, 623.0], [91.9, 625.0], [92.0, 631.0], [92.1, 647.0], [92.2, 681.0], [92.3, 705.0], [92.4, 719.0], [92.5, 727.0], [92.6, 738.0], [92.7, 745.0], [92.8, 753.0], [92.9, 767.0], [93.0, 785.0], [93.1, 793.0], [93.2, 798.0], [93.3, 804.0], [93.4, 815.0], [93.5, 822.0], [93.6, 847.0], [93.7, 855.0], [93.8, 863.0], [93.9, 871.0], [94.0, 886.0], [94.1, 900.0], [94.2, 940.0], [94.3, 978.0], [94.4, 1218.0], [94.5, 1344.0], [94.6, 1481.0], [94.7, 1586.0], [94.8, 1722.0], [94.9, 1851.0], [95.0, 2047.0], [95.1, 2198.0], [95.2, 2365.0], [95.3, 2527.0], [95.4, 2634.0], [95.5, 2871.0], [95.6, 2938.0], [95.7, 3351.0], [95.8, 3528.0], [95.9, 3847.0], [96.0, 4006.0], [96.1, 4157.0], [96.2, 4331.0], [96.3, 4546.0], [96.4, 4624.0], [96.5, 4805.0], [96.6, 4935.0], [96.7, 5060.0], [96.8, 5185.0], [96.9, 5267.0], [97.0, 5356.0], [97.1, 5448.0], [97.2, 5512.0], [97.3, 5622.0], [97.4, 5689.0], [97.5, 5745.0], [97.6, 5815.0], [97.7, 5978.0], [97.8, 6094.0], [97.9, 6230.0], [98.0, 6417.0], [98.1, 6428.0], [98.2, 6433.0], [98.3, 6440.0], [98.4, 6448.0], [98.5, 6479.0], [98.6, 6584.0], [98.7, 6670.0], [98.8, 6920.0], [98.9, 7032.0], [99.0, 7202.0], [99.1, 7410.0], [99.2, 7536.0], [99.3, 7673.0], [99.4, 7852.0], [99.5, 7960.0], [99.6, 8154.0], [99.7, 8283.0], [99.8, 8348.0], [99.9, 8405.0], [100.0, 8559.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2473.0, "series": [{"data": [[0.0, 658.0], [600.0, 121.0], [700.0, 99.0], [800.0, 87.0], [900.0, 23.0], [1100.0, 6.0], [1200.0, 8.0], [1300.0, 4.0], [1400.0, 12.0], [1500.0, 8.0], [1600.0, 6.0], [1700.0, 5.0], [1800.0, 12.0], [1900.0, 5.0], [2000.0, 5.0], [2100.0, 7.0], [2200.0, 6.0], [2300.0, 8.0], [2400.0, 4.0], [2500.0, 8.0], [2600.0, 6.0], [2700.0, 3.0], [2800.0, 9.0], [2900.0, 6.0], [3100.0, 3.0], [3200.0, 1.0], [3300.0, 8.0], [3400.0, 5.0], [3500.0, 3.0], [3600.0, 4.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 7.0], [4000.0, 9.0], [4100.0, 3.0], [4200.0, 3.0], [4300.0, 10.0], [4500.0, 10.0], [4600.0, 7.0], [4700.0, 6.0], [4800.0, 7.0], [4900.0, 10.0], [5000.0, 10.0], [5100.0, 6.0], [5200.0, 15.0], [5300.0, 7.0], [5400.0, 15.0], [5500.0, 6.0], [5600.0, 19.0], [5700.0, 14.0], [5800.0, 10.0], [5900.0, 6.0], [6000.0, 8.0], [6100.0, 4.0], [6200.0, 12.0], [6300.0, 2.0], [6400.0, 56.0], [6500.0, 8.0], [6600.0, 8.0], [6700.0, 6.0], [6800.0, 2.0], [6900.0, 9.0], [7000.0, 5.0], [7100.0, 6.0], [7200.0, 7.0], [7300.0, 3.0], [7400.0, 10.0], [7500.0, 4.0], [7600.0, 12.0], [7700.0, 4.0], [7800.0, 8.0], [7900.0, 8.0], [8000.0, 2.0], [8100.0, 7.0], [8200.0, 7.0], [8300.0, 16.0], [8400.0, 7.0], [8500.0, 7.0], [100.0, 1407.0], [200.0, 2473.0], [300.0, 1048.0], [400.0, 1559.0], [500.0, 1957.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 538.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7179.0, "series": [{"data": [[0.0, 7179.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2283.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 538.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 566.2881000000003, "minX": 1.66956126E12, "maxY": 566.2881000000003, "series": [{"data": [[1.66956126E12, 566.2881000000003]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956126E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 3919.3513513513512, "series": [{"data": [[2.0, 15.0], [3.0, 14.0], [4.0, 15.0], [5.0, 20.4], [6.0, 62.0], [7.0, 63.0], [8.0, 102.8], [9.0, 40.5], [10.0, 64.0], [12.0, 39.666666666666664], [13.0, 56.5], [14.0, 68.0], [15.0, 62.5], [16.0, 12.333333333333334], [17.0, 21.5], [18.0, 8.0], [19.0, 20.0], [20.0, 17.166666666666668], [21.0, 14.666666666666666], [22.0, 26.0], [23.0, 18.333333333333332], [24.0, 26.0], [25.0, 24.333333333333332], [27.0, 31.22222222222222], [28.0, 28.5], [29.0, 37.0], [30.0, 41.75], [31.0, 37.5], [33.0, 52.0], [32.0, 42.0], [35.0, 43.2], [34.0, 10.0], [37.0, 7.0], [36.0, 44.8], [39.0, 45.0], [38.0, 33.5], [41.0, 43.0], [40.0, 44.0], [43.0, 68.0], [42.0, 61.333333333333336], [45.0, 49.6], [44.0, 53.125], [47.0, 72.0], [46.0, 52.0], [49.0, 45.333333333333336], [48.0, 55.5], [51.0, 62.666666666666664], [50.0, 61.08333333333334], [53.0, 65.375], [55.0, 59.0], [54.0, 132.0], [56.0, 70.0], [59.0, 102.45454545454545], [58.0, 60.166666666666664], [61.0, 44.333333333333336], [60.0, 99.25], [62.0, 105.77777777777777], [67.0, 89.0], [66.0, 117.99999999999999], [65.0, 126.66666666666667], [64.0, 104.0], [71.0, 124.0], [70.0, 112.33333333333333], [68.0, 128.0], [75.0, 99.25], [74.0, 56.5], [73.0, 40.5], [72.0, 131.28571428571428], [79.0, 132.0], [78.0, 59.8], [76.0, 24.0], [83.0, 69.0], [82.0, 83.0], [81.0, 79.28571428571429], [80.0, 63.07142857142856], [87.0, 82.41666666666667], [86.0, 75.2], [85.0, 75.25], [84.0, 64.0], [89.0, 47.84615384615385], [90.0, 47.673469387755105], [91.0, 120.4], [88.0, 93.04761904761904], [93.0, 96.22222222222223], [94.0, 89.60000000000001], [95.0, 101.85714285714286], [92.0, 85.86666666666666], [96.0, 95.2], [97.0, 82.2], [98.0, 100.87500000000001], [99.0, 114.33333333333334], [100.0, 52.43373493975903], [103.0, 49.61363636363637], [102.0, 77.16666666666667], [101.0, 98.42857142857143], [106.0, 23.666666666666668], [107.0, 105.14285714285714], [104.0, 96.39999999999999], [105.0, 132.0], [108.0, 51.8], [109.0, 69.63157894736842], [110.0, 51.666666666666664], [115.0, 191.5], [114.0, 126.10000000000001], [113.0, 100.125], [116.0, 128.5], [119.0, 118.125], [118.0, 170.0], [117.0, 77.0], [123.0, 57.0], [122.0, 96.33333333333333], [121.0, 152.8], [120.0, 177.22222222222223], [127.0, 163.5], [125.0, 140.33333333333334], [124.0, 201.0], [128.0, 103.1], [131.0, 97.68421052631578], [133.0, 75.75], [135.0, 130.375], [134.0, 189.5], [132.0, 118.0], [130.0, 268.0], [129.0, 164.5], [136.0, 84.42857142857143], [142.0, 137.23076923076925], [143.0, 144.0], [141.0, 133.5], [140.0, 163.75], [139.0, 163.0], [138.0, 153.5], [137.0, 190.5], [144.0, 145.05882352941177], [148.0, 146.57142857142858], [149.0, 139.0], [150.0, 1353.1428571428573], [151.0, 131.8], [147.0, 2262.0], [146.0, 156.0], [145.0, 175.34615384615387], [154.0, 152.42857142857144], [156.0, 155.4], [157.0, 146.42857142857142], [158.0, 151.45454545454547], [159.0, 166.75], [155.0, 167.0], [153.0, 621.6111111111112], [152.0, 1674.4090909090912], [160.0, 149.6], [162.0, 150.88888888888889], [165.0, 138.83333333333334], [166.0, 165.33333333333334], [164.0, 141.33333333333334], [163.0, 169.33333333333334], [161.0, 191.0], [170.0, 788.3076923076924], [171.0, 1158.8181818181818], [175.0, 1278.6818181818182], [174.0, 175.75], [173.0, 288.0], [172.0, 1200.625], [169.0, 153.2], [168.0, 147.33333333333334], [176.0, 1609.8823529411766], [183.0, 217.03333333333336], [182.0, 209.24999999999997], [181.0, 1111.6666666666667], [180.0, 697.1874999999999], [179.0, 169.0], [178.0, 200.5], [177.0, 3442.8], [185.0, 213.94117647058823], [189.0, 204.22222222222223], [190.0, 1330.0], [191.0, 251.0], [188.0, 1062.3], [187.0, 235.5], [186.0, 296.5], [184.0, 2275.0], [194.0, 161.33333333333334], [199.0, 241.0], [197.0, 1993.888888888889], [196.0, 222.11111111111111], [195.0, 1220.25], [193.0, 2222.5], [192.0, 1130.3333333333335], [202.0, 159.81081081081078], [203.0, 209.0], [204.0, 2375.2727272727275], [205.0, 187.68965517241378], [206.0, 205.75], [207.0, 166.5], [201.0, 221.0], [200.0, 149.5], [208.0, 1551.0], [209.0, 201.2222222222222], [211.0, 214.33333333333334], [212.0, 189.26315789473682], [214.0, 220.125], [215.0, 588.475], [213.0, 209.69999999999996], [210.0, 205.0], [219.0, 197.18181818181816], [220.0, 533.3749999999999], [223.0, 1002.5], [222.0, 212.25000000000003], [221.0, 2139.75], [218.0, 198.4], [217.0, 207.0], [216.0, 287.0], [227.0, 220.4], [228.0, 227.75], [231.0, 225.0], [230.0, 213.5], [229.0, 1329.142857142857], [226.0, 2174.75], [225.0, 1522.8333333333333], [224.0, 249.5], [232.0, 220.5], [233.0, 221.31578947368416], [234.0, 194.14285714285714], [238.0, 254.25], [239.0, 714.4705882352941], [237.0, 264.6666666666667], [236.0, 222.57142857142858], [235.0, 299.0], [243.0, 192.45000000000002], [245.0, 198.75], [247.0, 223.8], [246.0, 240.5], [244.0, 228.0], [242.0, 803.4528301886792], [241.0, 246.38888888888889], [240.0, 2012.3846153846157], [249.0, 213.22222222222223], [250.0, 236.83333333333331], [255.0, 243.0], [254.0, 228.6], [253.0, 232.0], [252.0, 264.3333333333333], [251.0, 234.5], [271.0, 205.0], [256.0, 187.44444444444446], [263.0, 1757.4736842105267], [262.0, 210.5], [261.0, 184.0], [260.0, 194.25], [264.0, 2004.75], [266.0, 640.6875], [267.0, 192.72222222222226], [270.0, 212.88888888888889], [269.0, 165.0], [268.0, 198.375], [259.0, 2709.666666666667], [258.0, 1562.5384615384614], [257.0, 226.875], [286.0, 282.75], [272.0, 139.66666666666666], [275.0, 205.0], [274.0, 252.0], [273.0, 193.1111111111111], [279.0, 289.0], [277.0, 255.64285714285714], [278.0, 785.0714285714287], [280.0, 749.9999999999999], [281.0, 145.0], [282.0, 239.29999999999998], [283.0, 260.4], [287.0, 1052.111111111111], [285.0, 1162.6249999999998], [284.0, 571.4166666666669], [301.0, 207.4], [290.0, 1835.4444444444446], [289.0, 257.4545454545455], [288.0, 800.6923076923077], [295.0, 222.71428571428572], [294.0, 248.22222222222226], [291.0, 1889.6153846153845], [300.0, 1012.5555555555555], [292.0, 655.6470588235294], [293.0, 192.66666666666666], [296.0, 205.37500000000003], [297.0, 244.33333333333334], [299.0, 772.6153846153845], [298.0, 1124.6249999999998], [302.0, 755.0769230769231], [303.0, 208.66666666666666], [318.0, 248.625], [306.0, 1078.0], [305.0, 232.0], [304.0, 467.0384615384618], [307.0, 166.50000000000003], [311.0, 1058.0392156862742], [310.0, 216.99999999999997], [309.0, 209.875], [308.0, 215.5], [319.0, 228.0], [317.0, 244.25], [316.0, 291.75], [315.0, 241.75], [314.0, 265.6666666666667], [313.0, 236.25], [312.0, 645.2941176470588], [333.0, 240.3], [320.0, 252.16666666666666], [322.0, 793.923076923077], [321.0, 1134.875], [327.0, 310.85714285714283], [326.0, 290.2727272727273], [325.0, 296.85714285714283], [324.0, 295.48275862068965], [323.0, 246.83333333333331], [330.0, 234.5454545454545], [331.0, 260.235294117647], [332.0, 256.9090909090909], [335.0, 206.0], [334.0, 261.0], [329.0, 1225.857142857143], [328.0, 778.2686567164176], [350.0, 194.4166666666667], [336.0, 2081.4090909090914], [339.0, 245.83333333333331], [337.0, 245.8], [343.0, 190.0], [341.0, 229.0], [340.0, 2925.8], [342.0, 227.2413793103448], [344.0, 247.4], [345.0, 874.55], [347.0, 200.75], [346.0, 184.4], [351.0, 199.8], [349.0, 173.33333333333334], [348.0, 199.60714285714286], [366.0, 1303.9444444444443], [352.0, 680.4814814814814], [353.0, 198.45454545454547], [355.0, 871.3], [354.0, 210.8], [356.0, 876.5], [357.0, 174.5], [359.0, 230.75], [358.0, 228.33333333333334], [360.0, 481.5714285714285], [367.0, 562.2051282051283], [365.0, 221.5], [364.0, 1824.5000000000002], [363.0, 235.04166666666666], [362.0, 190.33333333333334], [381.0, 245.7], [368.0, 249.42857142857142], [369.0, 226.66666666666666], [370.0, 1049.5], [375.0, 253.6], [374.0, 885.25], [373.0, 462.4285714285714], [372.0, 259.6], [377.0, 952.5555555555555], [376.0, 294.0], [383.0, 218.33333333333334], [382.0, 283.5], [380.0, 770.5833333333333], [371.0, 1036.0000000000002], [379.0, 1299.6666666666663], [378.0, 258.3333333333333], [399.0, 220.375], [386.0, 574.6315789473682], [385.0, 247.63636363636363], [384.0, 871.9999999999998], [391.0, 185.0], [390.0, 3919.3513513513512], [389.0, 2543.052631578948], [388.0, 1023.0000000000002], [395.0, 232.88235294117644], [396.0, 225.875], [387.0, 778.1666666666667], [398.0, 195.0], [397.0, 231.83333333333331], [394.0, 253.0], [393.0, 230.875], [392.0, 849.2], [413.0, 753.4347826086957], [401.0, 215.0769230769231], [407.0, 266.5], [400.0, 221.2], [406.0, 1097.4285714285713], [405.0, 441.0666666666667], [404.0, 488.68085106382983], [412.0, 187.75], [403.0, 227.18750000000003], [402.0, 229.42857142857142], [414.0, 821.5999999999999], [415.0, 812.4999999999999], [410.0, 1242.8333333333335], [409.0, 224.66666666666666], [408.0, 1255.1666666666667], [430.0, 1437.7], [423.0, 260.75], [418.0, 769.5217391304348], [417.0, 1942.857142857143], [431.0, 285.25], [429.0, 278.5], [428.0, 857.8000000000001], [427.0, 276.0], [426.0, 273.75], [424.0, 263.6666666666667], [422.0, 260.5], [420.0, 261.5], [446.0, 206.2], [432.0, 262.1875], [433.0, 561.2105263157895], [434.0, 582.2777777777776], [435.0, 241.00000000000003], [439.0, 1067.4285714285713], [438.0, 862.0555555555554], [437.0, 983.3913043478259], [436.0, 817.4999999999997], [440.0, 1195.4166666666665], [443.0, 205.42857142857142], [442.0, 211.0], [441.0, 214.6], [447.0, 205.8], [445.0, 219.33333333333334], [444.0, 178.0], [463.0, 252.5], [454.0, 232.44444444444446], [453.0, 176.33333333333334], [452.0, 198.22222222222223], [461.0, 242.81818181818184], [462.0, 287.75], [460.0, 273.0], [451.0, 226.5], [450.0, 191.5], [449.0, 530.5294117647059], [448.0, 189.45454545454547], [455.0, 957.5999999999998], [459.0, 222.5], [458.0, 1210.0588235294117], [457.0, 680.6666666666666], [456.0, 775.4], [478.0, 985.5999999999999], [467.0, 677.4615384615383], [466.0, 654.888888888889], [465.0, 3028.0], [464.0, 1636.7499999999998], [471.0, 275.85714285714283], [470.0, 261.25], [469.0, 471.33333333333337], [468.0, 1574.5757575757575], [479.0, 1812.3571428571431], [477.0, 236.76923076923077], [476.0, 989.1333333333334], [475.0, 259.1666666666667], [474.0, 2939.5], [473.0, 1363.8], [472.0, 229.33333333333334], [493.0, 282.25], [485.0, 271.14285714285717], [484.0, 961.666666666667], [486.0, 210.8], [487.0, 535.5555555555555], [482.0, 284.5], [480.0, 2291.0], [488.0, 253.47368421052636], [489.0, 266.62499999999994], [495.0, 258.6], [492.0, 249.0], [483.0, 2945.5], [490.0, 250.33333333333331], [510.0, 280.0], [498.0, 334.375], [497.0, 278.25], [496.0, 229.2], [502.0, 2358.2], [501.0, 1112.1999999999998], [500.0, 797.4000000000002], [503.0, 1132.5], [511.0, 898.0000000000003], [508.0, 306.0], [499.0, 281.75], [507.0, 281.0], [506.0, 278.6666666666667], [505.0, 265.7142857142857], [504.0, 1342.1842105263158], [537.0, 286.7142857142857], [515.0, 712.0], [514.0, 331.6666666666667], [513.0, 1557.125], [516.0, 327.0], [518.0, 313.0], [517.0, 701.0769230769231], [536.0, 319.3333333333333], [519.0, 1294.0], [522.0, 293.42857142857144], [521.0, 301.5], [520.0, 302.0], [524.0, 311.33333333333337], [523.0, 307.7142857142857], [526.0, 288.0], [525.0, 840.8947368421053], [527.0, 1432.4444444444443], [533.0, 1014.7142857142859], [532.0, 887.2400000000002], [531.0, 1000.142857142857], [530.0, 1304.4], [529.0, 957.7333333333332], [528.0, 1311.4], [535.0, 299.5], [534.0, 865.730769230769], [541.0, 677.076923076923], [540.0, 249.0], [539.0, 246.0], [538.0, 285.54545454545456], [543.0, 888.375], [574.0, 957.9999999999999], [546.0, 317.0769230769231], [547.0, 640.7142857142857], [550.0, 329.0], [548.0, 215.0], [569.0, 233.0], [551.0, 764.6999999999999], [571.0, 753.2105263157895], [570.0, 278.5714285714286], [554.0, 483.6842105263157], [553.0, 1315.0277777777776], [552.0, 516.3333333333334], [555.0, 285.0833333333333], [559.0, 1863.3333333333335], [545.0, 278.7142857142857], [544.0, 278.75], [558.0, 274.25], [557.0, 170.0], [556.0, 251.0], [560.0, 319.625], [564.0, 482.6666666666667], [563.0, 1875.3333333333335], [562.0, 217.0], [567.0, 302.5714285714286], [566.0, 257.57142857142856], [575.0, 323.8333333333333], [602.0, 741.7272727272727], [576.0, 368.5], [582.0, 297.0], [581.0, 227.0], [580.0, 295.0], [578.0, 312.0], [577.0, 358.3333333333333], [588.0, 373.6666666666667], [587.0, 194.8], [585.0, 300.0], [586.0, 172.0], [589.0, 313.3333333333333], [591.0, 317.8571428571429], [590.0, 281.6666666666667], [605.0, 360.5], [592.0, 397.0], [594.0, 286.75], [593.0, 397.0], [604.0, 366.0], [603.0, 315.6666666666667], [601.0, 201.66666666666666], [583.0, 279.4], [609.0, 303.6666666666667], [608.0, 347.3333333333333], [623.0, 391.0], [610.0, 1095.5555555555554], [611.0, 363.0], [619.0, 395.6363636363636], [620.0, 279.5], [621.0, 390.59999999999997], [622.0, 470.66666666666663], [639.0, 368.0], [626.0, 369.8], [624.0, 1027.3076923076924], [629.0, 347.1666666666667], [627.0, 254.5], [638.0, 336.125], [637.0, 370.5], [636.0, 357.5714285714286], [632.0, 374.42857142857144], [615.0, 272.0], [614.0, 249.5], [612.0, 394.0], [666.0, 407.25], [641.0, 455.1333333333333], [646.0, 378.5], [642.0, 364.25], [665.0, 432.5], [664.0, 439.0], [651.0, 350.0], [649.0, 390.0526315789474], [650.0, 413.0], [652.0, 343.6111111111111], [653.0, 350.3333333333333], [655.0, 373.2], [640.0, 383.1666666666667], [654.0, 381.42857142857144], [656.0, 386.625], [659.0, 404.0], [663.0, 364.5], [660.0, 381.3333333333333], [669.0, 335.70000000000005], [667.0, 414.0], [698.0, 1313.0], [675.0, 354.0], [673.0, 415.5], [672.0, 1704.5714285714284], [674.0, 489.0], [687.0, 455.5], [685.0, 1525.0], [683.0, 408.3333333333333], [681.0, 405.3333333333333], [676.0, 315.55555555555554], [688.0, 316.0], [690.0, 1036.8000000000002], [693.0, 1927.6666666666665], [692.0, 460.6], [697.0, 1546.125], [696.0, 455.3333333333333], [679.0, 378.0], [678.0, 1910.6666666666665], [677.0, 446.125], [699.0, 447.4], [700.0, 460.6666666666667], [703.0, 449.00000000000006], [702.0, 472.6], [701.0, 464.5], [732.0, 1241.4], [704.0, 869.8421052631578], [707.0, 362.5], [706.0, 467.5], [705.0, 475.75], [708.0, 468.0], [731.0, 496.4], [728.0, 488.6666666666667], [713.0, 415.3333333333333], [712.0, 484.6666666666667], [715.0, 475.0], [714.0, 468.5], [717.0, 448.5], [716.0, 475.0], [718.0, 338.75], [719.0, 511.0], [721.0, 380.5], [720.0, 463.0], [722.0, 480.0], [725.0, 443.0], [724.0, 461.75], [727.0, 463.3333333333333], [726.0, 483.4], [733.0, 349.3333333333333], [735.0, 499.75], [734.0, 528.0], [764.0, 401.8333333333333], [746.0, 451.0], [744.0, 495.5], [747.0, 446.0], [758.0, 781.5], [757.0, 1662.4285714285713], [755.0, 1235.4545454545455], [754.0, 993.75], [752.0, 469.0], [759.0, 480.85714285714283], [767.0, 452.1428571428571], [765.0, 476.8], [762.0, 491.125], [761.0, 517.5], [760.0, 470.0], [743.0, 493.8333333333333], [741.0, 521.0], [739.0, 457.0], [738.0, 506.2], [737.0, 470.5], [736.0, 1863.0], [750.0, 473.0], [749.0, 500.85714285714283], [793.0, 626.731343283582], [768.0, 445.0], [772.0, 340.0], [771.0, 481.5], [769.0, 1006.6250000000001], [792.0, 517.111111111111], [773.0, 1183.3333333333335], [778.0, 368.0], [777.0, 1606.4545454545455], [776.0, 508.125], [779.0, 1316.0], [781.0, 948.5555555555555], [780.0, 1304.2666666666667], [783.0, 522.0253164556967], [782.0, 515.3333333333334], [787.0, 533.0], [788.0, 377.0], [789.0, 911.736842105263], [791.0, 1126.9591836734694], [790.0, 502.1111111111111], [794.0, 450.42857142857144], [795.0, 485.40000000000003], [798.0, 824.1666666666666], [797.0, 499.0], [796.0, 822.75], [799.0, 516.6666666666666], [786.0, 524.2857142857142], [826.0, 514.6923076923077], [800.0, 485.0], [801.0, 520.1818181818182], [802.0, 651.0357142857144], [806.0, 1296.3478260869565], [805.0, 539.125], [804.0, 532.0], [803.0, 532.5], [825.0, 489.5], [807.0, 888.8000000000001], [813.0, 719.2105263157896], [812.0, 493.78723404255317], [811.0, 1023.5555555555554], [810.0, 1095.888888888889], [809.0, 674.1304347826089], [808.0, 547.5454545454545], [814.0, 509.57142857142856], [815.0, 914.34375], [822.0, 517.4285714285714], [820.0, 497.0], [819.0, 472.6666666666667], [818.0, 476.6666666666667], [817.0, 501.85714285714295], [816.0, 471.14285714285717], [823.0, 468.0], [830.0, 540.9000000000001], [829.0, 499.1], [828.0, 1030.1666666666667], [827.0, 646.3684210526317], [859.0, 395.6666666666667], [835.0, 526.6190476190477], [847.0, 541.0], [832.0, 505.0], [834.0, 469.6666666666667], [833.0, 672.6874999999999], [846.0, 552.0], [845.0, 988.1666666666667], [844.0, 518.75], [843.0, 676.8627450980393], [842.0, 504.64285714285717], [841.0, 487.83333333333337], [840.0, 482.22222222222223], [860.0, 573.5555555555555], [863.0, 1221.5], [848.0, 484.7241379310345], [850.0, 781.7272727272727], [849.0, 487.6666666666667], [852.0, 525.625], [851.0, 699.5882352941177], [855.0, 519.3333333333334], [853.0, 469.5], [862.0, 827.6666666666666], [861.0, 514.7142857142857], [858.0, 504.8333333333333], [857.0, 809.6], [856.0, 920.9999999999999], [839.0, 480.5], [838.0, 664.3125], [837.0, 459.5], [836.0, 477.66666666666663], [870.0, 494.33333333333326], [891.0, 489.1538461538462], [877.0, 524.2222222222222], [876.0, 489.4], [875.0, 516.0], [874.0, 789.7777777777778], [873.0, 501.0], [872.0, 830.125], [878.0, 487.31249999999994], [890.0, 468.0967741935484], [894.0, 545.8965517241379], [895.0, 593.8131868131868], [881.0, 471.90909090909093], [880.0, 477.25], [884.0, 463.6666666666667], [883.0, 479.4], [887.0, 459.25], [886.0, 479.2], [893.0, 572.4901315789476], [892.0, 482.0], [889.0, 473.3125], [879.0, 483.5], [865.0, 469.2857142857143], [864.0, 638.2499999999998], [867.0, 461.0], [866.0, 464.44444444444446], [869.0, 492.8], [868.0, 743.4000000000001], [871.0, 483.5], [921.0, 522.0], [925.0, 681.3750000000001], [902.0, 634.0666666666666], [903.0, 503.25], [920.0, 525.0], [922.0, 556.0], [911.0, 774.8], [897.0, 479.7142857142857], [896.0, 690.6666666666666], [899.0, 496.85714285714283], [898.0, 587.2377622377624], [901.0, 623.6666666666667], [900.0, 508.5], [910.0, 489.44444444444446], [909.0, 497.85714285714283], [908.0, 538.6666666666666], [907.0, 524.0], [906.0, 883.4], [905.0, 713.2222222222222], [904.0, 499.4666666666667], [918.0, 555.0], [919.0, 586.2962962962961], [926.0, 523.6], [912.0, 722.2711864406779], [915.0, 535.4181818181818], [914.0, 503.2142857142857], [917.0, 595.7058823529409], [916.0, 716.9411764705884], [924.0, 537.1428571428571], [923.0, 474.0], [953.0, 555.7], [931.0, 713.0], [943.0, 470.5], [928.0, 475.0], [930.0, 497.3333333333333], [929.0, 491.2916666666667], [952.0, 563.0], [935.0, 477.3333333333333], [933.0, 478.5], [932.0, 500.0], [941.0, 654.625], [940.0, 514.625], [939.0, 691.4285714285714], [938.0, 705.2], [937.0, 494.0], [936.0, 484.5], [942.0, 723.5], [945.0, 727.0], [944.0, 558.1666666666666], [947.0, 808.7], [946.0, 1207.0], [949.0, 418.0], [948.0, 958.3333333333334], [951.0, 545.0], [950.0, 787.4], [959.0, 552.75], [958.0, 553.6], [957.0, 956.3333333333334], [956.0, 553.5], [955.0, 796.0], [954.0, 779.6190476190475], [966.0, 531.0], [986.0, 546.8333333333334], [961.0, 657.8148148148147], [960.0, 567.611111111111], [962.0, 572.2499999999999], [963.0, 695.0], [965.0, 748.9285714285714], [964.0, 623.6898734177213], [967.0, 539.0], [985.0, 474.0], [984.0, 648.0666666666666], [969.0, 617.3333333333335], [968.0, 1009.0], [970.0, 524.5], [972.0, 832.7777777777778], [971.0, 883.75], [973.0, 509.6], [988.0, 556.7058823529412], [989.0, 601.0], [990.0, 590.4615384615385], [991.0, 638.8906249999999], [983.0, 586.7850467289718], [981.0, 500.0], [987.0, 541.4666666666667], [993.0, 557.3783783783782], [994.0, 607.2592592592594], [998.0, 613.1428571428573], [999.0, 745.7185185185186], [997.0, 594.243243243243], [996.0, 587.7916666666667], [995.0, 577.9777777777778], [992.0, 535.5555555555553], [1.0, 4.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[566.2876999999992, 615.8997999999982]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 999.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9833.333333333334, "minX": 1.66956126E12, "maxY": 50166.666666666664, "series": [{"data": [[1.66956126E12, 9833.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956126E12, 50166.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956126E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 615.8997999999982, "minX": 1.66956126E12, "maxY": 615.8997999999982, "series": [{"data": [[1.66956126E12, 615.8997999999982]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956126E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 615.5186000000002, "minX": 1.66956126E12, "maxY": 615.5186000000002, "series": [{"data": [[1.66956126E12, 615.5186000000002]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956126E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.1120999999999965, "minX": 1.66956126E12, "maxY": 1.1120999999999965, "series": [{"data": [[1.66956126E12, 1.1120999999999965]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956126E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.66956126E12, "maxY": 8559.0, "series": [{"data": [[1.66956126E12, 8559.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956126E12, 582.8999999999996]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956126E12, 7204.969999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956126E12, 2056.499999999989]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956126E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956126E12, 332.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956126E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 105.0, "minX": 761.0, "maxY": 544.0, "series": [{"data": [[1055.0, 311.0], [761.0, 544.0], [799.0, 151.0], [840.0, 105.0], [875.0, 539.0], [891.0, 510.0], [915.0, 486.0], [905.0, 227.0], [972.0, 496.0], [988.0, 237.5], [999.0, 241.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1055.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 105.0, "minX": 761.0, "maxY": 544.0, "series": [{"data": [[1055.0, 311.0], [761.0, 544.0], [799.0, 149.0], [840.0, 105.0], [875.0, 539.0], [891.0, 509.0], [915.0, 486.0], [905.0, 227.0], [972.0, 496.0], [988.0, 237.0], [999.0, 240.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1055.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956126E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956126E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956126E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956126E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956126E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956126E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956126E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956126E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956126E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956126E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956126E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956126E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

