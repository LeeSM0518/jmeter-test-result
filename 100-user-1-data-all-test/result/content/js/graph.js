/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 176.0, "minX": 0.0, "maxY": 2121.0, "series": [{"data": [[0.0, 176.0], [0.1, 176.0], [0.2, 176.0], [0.3, 176.0], [0.4, 176.0], [0.5, 176.0], [0.6, 176.0], [0.7, 176.0], [0.8, 176.0], [0.9, 176.0], [1.0, 187.0], [1.1, 187.0], [1.2, 187.0], [1.3, 187.0], [1.4, 187.0], [1.5, 187.0], [1.6, 187.0], [1.7, 187.0], [1.8, 187.0], [1.9, 187.0], [2.0, 188.0], [2.1, 188.0], [2.2, 188.0], [2.3, 188.0], [2.4, 188.0], [2.5, 188.0], [2.6, 188.0], [2.7, 188.0], [2.8, 188.0], [2.9, 188.0], [3.0, 210.0], [3.1, 210.0], [3.2, 210.0], [3.3, 210.0], [3.4, 210.0], [3.5, 210.0], [3.6, 210.0], [3.7, 210.0], [3.8, 210.0], [3.9, 210.0], [4.0, 222.0], [4.1, 222.0], [4.2, 222.0], [4.3, 222.0], [4.4, 222.0], [4.5, 222.0], [4.6, 222.0], [4.7, 222.0], [4.8, 222.0], [4.9, 222.0], [5.0, 350.0], [5.1, 350.0], [5.2, 350.0], [5.3, 350.0], [5.4, 350.0], [5.5, 350.0], [5.6, 350.0], [5.7, 350.0], [5.8, 350.0], [5.9, 350.0], [6.0, 352.0], [6.1, 352.0], [6.2, 352.0], [6.3, 352.0], [6.4, 352.0], [6.5, 352.0], [6.6, 352.0], [6.7, 352.0], [6.8, 352.0], [6.9, 352.0], [7.0, 389.0], [7.1, 389.0], [7.2, 389.0], [7.3, 389.0], [7.4, 389.0], [7.5, 389.0], [7.6, 389.0], [7.7, 389.0], [7.8, 389.0], [7.9, 389.0], [8.0, 415.0], [8.1, 415.0], [8.2, 415.0], [8.3, 415.0], [8.4, 415.0], [8.5, 415.0], [8.6, 415.0], [8.7, 415.0], [8.8, 415.0], [8.9, 415.0], [9.0, 437.0], [9.1, 437.0], [9.2, 437.0], [9.3, 437.0], [9.4, 437.0], [9.5, 437.0], [9.6, 437.0], [9.7, 437.0], [9.8, 437.0], [9.9, 437.0], [10.0, 441.0], [10.1, 441.0], [10.2, 441.0], [10.3, 441.0], [10.4, 441.0], [10.5, 441.0], [10.6, 441.0], [10.7, 441.0], [10.8, 441.0], [10.9, 441.0], [11.0, 447.0], [11.1, 447.0], [11.2, 447.0], [11.3, 447.0], [11.4, 447.0], [11.5, 447.0], [11.6, 447.0], [11.7, 447.0], [11.8, 447.0], [11.9, 447.0], [12.0, 459.0], [12.1, 459.0], [12.2, 459.0], [12.3, 459.0], [12.4, 459.0], [12.5, 459.0], [12.6, 459.0], [12.7, 459.0], [12.8, 459.0], [12.9, 459.0], [13.0, 478.0], [13.1, 478.0], [13.2, 478.0], [13.3, 478.0], [13.4, 478.0], [13.5, 478.0], [13.6, 478.0], [13.7, 478.0], [13.8, 478.0], [13.9, 478.0], [14.0, 478.0], [14.1, 478.0], [14.2, 478.0], [14.3, 478.0], [14.4, 478.0], [14.5, 478.0], [14.6, 478.0], [14.7, 478.0], [14.8, 478.0], [14.9, 478.0], [15.0, 485.0], [15.1, 485.0], [15.2, 485.0], [15.3, 485.0], [15.4, 485.0], [15.5, 485.0], [15.6, 485.0], [15.7, 485.0], [15.8, 485.0], [15.9, 485.0], [16.0, 487.0], [16.1, 487.0], [16.2, 487.0], [16.3, 487.0], [16.4, 487.0], [16.5, 487.0], [16.6, 487.0], [16.7, 487.0], [16.8, 487.0], [16.9, 487.0], [17.0, 508.0], [17.1, 508.0], [17.2, 508.0], [17.3, 508.0], [17.4, 508.0], [17.5, 508.0], [17.6, 508.0], [17.7, 508.0], [17.8, 508.0], [17.9, 508.0], [18.0, 510.0], [18.1, 510.0], [18.2, 510.0], [18.3, 510.0], [18.4, 510.0], [18.5, 510.0], [18.6, 510.0], [18.7, 510.0], [18.8, 510.0], [18.9, 510.0], [19.0, 517.0], [19.1, 517.0], [19.2, 517.0], [19.3, 517.0], [19.4, 517.0], [19.5, 517.0], [19.6, 517.0], [19.7, 517.0], [19.8, 517.0], [19.9, 517.0], [20.0, 517.0], [20.1, 517.0], [20.2, 517.0], [20.3, 517.0], [20.4, 517.0], [20.5, 517.0], [20.6, 517.0], [20.7, 517.0], [20.8, 517.0], [20.9, 517.0], [21.0, 518.0], [21.1, 518.0], [21.2, 518.0], [21.3, 518.0], [21.4, 518.0], [21.5, 518.0], [21.6, 518.0], [21.7, 518.0], [21.8, 518.0], [21.9, 518.0], [22.0, 592.0], [22.1, 592.0], [22.2, 592.0], [22.3, 592.0], [22.4, 592.0], [22.5, 592.0], [22.6, 592.0], [22.7, 592.0], [22.8, 592.0], [22.9, 592.0], [23.0, 607.0], [23.1, 607.0], [23.2, 607.0], [23.3, 607.0], [23.4, 607.0], [23.5, 607.0], [23.6, 607.0], [23.7, 607.0], [23.8, 607.0], [23.9, 607.0], [24.0, 615.0], [24.1, 615.0], [24.2, 615.0], [24.3, 615.0], [24.4, 615.0], [24.5, 615.0], [24.6, 615.0], [24.7, 615.0], [24.8, 615.0], [24.9, 615.0], [25.0, 617.0], [25.1, 617.0], [25.2, 617.0], [25.3, 617.0], [25.4, 617.0], [25.5, 617.0], [25.6, 617.0], [25.7, 617.0], [25.8, 617.0], [25.9, 617.0], [26.0, 659.0], [26.1, 659.0], [26.2, 659.0], [26.3, 659.0], [26.4, 659.0], [26.5, 659.0], [26.6, 659.0], [26.7, 659.0], [26.8, 659.0], [26.9, 659.0], [27.0, 677.0], [27.1, 677.0], [27.2, 677.0], [27.3, 677.0], [27.4, 677.0], [27.5, 677.0], [27.6, 677.0], [27.7, 677.0], [27.8, 677.0], [27.9, 677.0], [28.0, 680.0], [28.1, 680.0], [28.2, 680.0], [28.3, 680.0], [28.4, 680.0], [28.5, 680.0], [28.6, 680.0], [28.7, 680.0], [28.8, 680.0], [28.9, 680.0], [29.0, 709.0], [29.1, 709.0], [29.2, 709.0], [29.3, 709.0], [29.4, 709.0], [29.5, 709.0], [29.6, 709.0], [29.7, 709.0], [29.8, 709.0], [29.9, 709.0], [30.0, 718.0], [30.1, 718.0], [30.2, 718.0], [30.3, 718.0], [30.4, 718.0], [30.5, 718.0], [30.6, 718.0], [30.7, 718.0], [30.8, 718.0], [30.9, 718.0], [31.0, 719.0], [31.1, 719.0], [31.2, 719.0], [31.3, 719.0], [31.4, 719.0], [31.5, 719.0], [31.6, 719.0], [31.7, 719.0], [31.8, 719.0], [31.9, 719.0], [32.0, 772.0], [32.1, 772.0], [32.2, 772.0], [32.3, 772.0], [32.4, 772.0], [32.5, 772.0], [32.6, 772.0], [32.7, 772.0], [32.8, 772.0], [32.9, 772.0], [33.0, 806.0], [33.1, 806.0], [33.2, 806.0], [33.3, 806.0], [33.4, 806.0], [33.5, 806.0], [33.6, 806.0], [33.7, 806.0], [33.8, 806.0], [33.9, 806.0], [34.0, 828.0], [34.1, 828.0], [34.2, 828.0], [34.3, 828.0], [34.4, 828.0], [34.5, 828.0], [34.6, 828.0], [34.7, 828.0], [34.8, 828.0], [34.9, 828.0], [35.0, 855.0], [35.1, 855.0], [35.2, 855.0], [35.3, 855.0], [35.4, 855.0], [35.5, 855.0], [35.6, 855.0], [35.7, 855.0], [35.8, 855.0], [35.9, 855.0], [36.0, 869.0], [36.1, 869.0], [36.2, 869.0], [36.3, 869.0], [36.4, 869.0], [36.5, 869.0], [36.6, 869.0], [36.7, 869.0], [36.8, 869.0], [36.9, 869.0], [37.0, 879.0], [37.1, 879.0], [37.2, 879.0], [37.3, 879.0], [37.4, 879.0], [37.5, 879.0], [37.6, 879.0], [37.7, 879.0], [37.8, 879.0], [37.9, 879.0], [38.0, 890.0], [38.1, 890.0], [38.2, 890.0], [38.3, 890.0], [38.4, 890.0], [38.5, 890.0], [38.6, 890.0], [38.7, 890.0], [38.8, 890.0], [38.9, 890.0], [39.0, 897.0], [39.1, 897.0], [39.2, 897.0], [39.3, 897.0], [39.4, 897.0], [39.5, 897.0], [39.6, 897.0], [39.7, 897.0], [39.8, 897.0], [39.9, 897.0], [40.0, 900.0], [40.1, 900.0], [40.2, 900.0], [40.3, 900.0], [40.4, 900.0], [40.5, 900.0], [40.6, 900.0], [40.7, 900.0], [40.8, 900.0], [40.9, 900.0], [41.0, 902.0], [41.1, 902.0], [41.2, 902.0], [41.3, 902.0], [41.4, 902.0], [41.5, 902.0], [41.6, 902.0], [41.7, 902.0], [41.8, 902.0], [41.9, 902.0], [42.0, 904.0], [42.1, 904.0], [42.2, 904.0], [42.3, 904.0], [42.4, 904.0], [42.5, 904.0], [42.6, 904.0], [42.7, 904.0], [42.8, 904.0], [42.9, 904.0], [43.0, 941.0], [43.1, 941.0], [43.2, 941.0], [43.3, 941.0], [43.4, 941.0], [43.5, 941.0], [43.6, 941.0], [43.7, 941.0], [43.8, 941.0], [43.9, 941.0], [44.0, 943.0], [44.1, 943.0], [44.2, 943.0], [44.3, 943.0], [44.4, 943.0], [44.5, 943.0], [44.6, 943.0], [44.7, 943.0], [44.8, 943.0], [44.9, 943.0], [45.0, 953.0], [45.1, 953.0], [45.2, 953.0], [45.3, 953.0], [45.4, 953.0], [45.5, 953.0], [45.6, 953.0], [45.7, 953.0], [45.8, 953.0], [45.9, 953.0], [46.0, 998.0], [46.1, 998.0], [46.2, 998.0], [46.3, 998.0], [46.4, 998.0], [46.5, 998.0], [46.6, 998.0], [46.7, 998.0], [46.8, 998.0], [46.9, 998.0], [47.0, 1015.0], [47.1, 1015.0], [47.2, 1015.0], [47.3, 1015.0], [47.4, 1015.0], [47.5, 1015.0], [47.6, 1015.0], [47.7, 1015.0], [47.8, 1015.0], [47.9, 1015.0], [48.0, 1016.0], [48.1, 1016.0], [48.2, 1016.0], [48.3, 1016.0], [48.4, 1016.0], [48.5, 1016.0], [48.6, 1016.0], [48.7, 1016.0], [48.8, 1016.0], [48.9, 1016.0], [49.0, 1054.0], [49.1, 1054.0], [49.2, 1054.0], [49.3, 1054.0], [49.4, 1054.0], [49.5, 1054.0], [49.6, 1054.0], [49.7, 1054.0], [49.8, 1054.0], [49.9, 1054.0], [50.0, 1077.0], [50.1, 1077.0], [50.2, 1077.0], [50.3, 1077.0], [50.4, 1077.0], [50.5, 1077.0], [50.6, 1077.0], [50.7, 1077.0], [50.8, 1077.0], [50.9, 1077.0], [51.0, 1078.0], [51.1, 1078.0], [51.2, 1078.0], [51.3, 1078.0], [51.4, 1078.0], [51.5, 1078.0], [51.6, 1078.0], [51.7, 1078.0], [51.8, 1078.0], [51.9, 1078.0], [52.0, 1087.0], [52.1, 1087.0], [52.2, 1087.0], [52.3, 1087.0], [52.4, 1087.0], [52.5, 1087.0], [52.6, 1087.0], [52.7, 1087.0], [52.8, 1087.0], [52.9, 1087.0], [53.0, 1099.0], [53.1, 1099.0], [53.2, 1099.0], [53.3, 1099.0], [53.4, 1099.0], [53.5, 1099.0], [53.6, 1099.0], [53.7, 1099.0], [53.8, 1099.0], [53.9, 1099.0], [54.0, 1104.0], [54.1, 1104.0], [54.2, 1104.0], [54.3, 1104.0], [54.4, 1104.0], [54.5, 1104.0], [54.6, 1104.0], [54.7, 1104.0], [54.8, 1104.0], [54.9, 1104.0], [55.0, 1107.0], [55.1, 1107.0], [55.2, 1107.0], [55.3, 1107.0], [55.4, 1107.0], [55.5, 1107.0], [55.6, 1107.0], [55.7, 1107.0], [55.8, 1107.0], [55.9, 1107.0], [56.0, 1169.0], [56.1, 1169.0], [56.2, 1169.0], [56.3, 1169.0], [56.4, 1169.0], [56.5, 1169.0], [56.6, 1169.0], [56.7, 1169.0], [56.8, 1169.0], [56.9, 1169.0], [57.0, 1173.0], [57.1, 1173.0], [57.2, 1173.0], [57.3, 1173.0], [57.4, 1173.0], [57.5, 1173.0], [57.6, 1173.0], [57.7, 1173.0], [57.8, 1173.0], [57.9, 1173.0], [58.0, 1230.0], [58.1, 1230.0], [58.2, 1230.0], [58.3, 1230.0], [58.4, 1230.0], [58.5, 1230.0], [58.6, 1230.0], [58.7, 1230.0], [58.8, 1230.0], [58.9, 1230.0], [59.0, 1261.0], [59.1, 1261.0], [59.2, 1261.0], [59.3, 1261.0], [59.4, 1261.0], [59.5, 1261.0], [59.6, 1261.0], [59.7, 1261.0], [59.8, 1261.0], [59.9, 1261.0], [60.0, 1267.0], [60.1, 1267.0], [60.2, 1267.0], [60.3, 1267.0], [60.4, 1267.0], [60.5, 1267.0], [60.6, 1267.0], [60.7, 1267.0], [60.8, 1267.0], [60.9, 1267.0], [61.0, 1268.0], [61.1, 1268.0], [61.2, 1268.0], [61.3, 1268.0], [61.4, 1268.0], [61.5, 1268.0], [61.6, 1268.0], [61.7, 1268.0], [61.8, 1268.0], [61.9, 1268.0], [62.0, 1271.0], [62.1, 1271.0], [62.2, 1271.0], [62.3, 1271.0], [62.4, 1271.0], [62.5, 1271.0], [62.6, 1271.0], [62.7, 1271.0], [62.8, 1271.0], [62.9, 1271.0], [63.0, 1309.0], [63.1, 1309.0], [63.2, 1309.0], [63.3, 1309.0], [63.4, 1309.0], [63.5, 1309.0], [63.6, 1309.0], [63.7, 1309.0], [63.8, 1309.0], [63.9, 1309.0], [64.0, 1315.0], [64.1, 1315.0], [64.2, 1315.0], [64.3, 1315.0], [64.4, 1315.0], [64.5, 1315.0], [64.6, 1315.0], [64.7, 1315.0], [64.8, 1315.0], [64.9, 1315.0], [65.0, 1319.0], [65.1, 1319.0], [65.2, 1319.0], [65.3, 1319.0], [65.4, 1319.0], [65.5, 1319.0], [65.6, 1319.0], [65.7, 1319.0], [65.8, 1319.0], [65.9, 1319.0], [66.0, 1324.0], [66.1, 1324.0], [66.2, 1324.0], [66.3, 1324.0], [66.4, 1324.0], [66.5, 1324.0], [66.6, 1324.0], [66.7, 1324.0], [66.8, 1324.0], [66.9, 1324.0], [67.0, 1343.0], [67.1, 1343.0], [67.2, 1343.0], [67.3, 1343.0], [67.4, 1343.0], [67.5, 1343.0], [67.6, 1343.0], [67.7, 1343.0], [67.8, 1343.0], [67.9, 1343.0], [68.0, 1348.0], [68.1, 1348.0], [68.2, 1348.0], [68.3, 1348.0], [68.4, 1348.0], [68.5, 1348.0], [68.6, 1348.0], [68.7, 1348.0], [68.8, 1348.0], [68.9, 1348.0], [69.0, 1372.0], [69.1, 1372.0], [69.2, 1372.0], [69.3, 1372.0], [69.4, 1372.0], [69.5, 1372.0], [69.6, 1372.0], [69.7, 1372.0], [69.8, 1372.0], [69.9, 1372.0], [70.0, 1384.0], [70.1, 1384.0], [70.2, 1384.0], [70.3, 1384.0], [70.4, 1384.0], [70.5, 1384.0], [70.6, 1384.0], [70.7, 1384.0], [70.8, 1384.0], [70.9, 1384.0], [71.0, 1389.0], [71.1, 1389.0], [71.2, 1389.0], [71.3, 1389.0], [71.4, 1389.0], [71.5, 1389.0], [71.6, 1389.0], [71.7, 1389.0], [71.8, 1389.0], [71.9, 1389.0], [72.0, 1391.0], [72.1, 1391.0], [72.2, 1391.0], [72.3, 1391.0], [72.4, 1391.0], [72.5, 1391.0], [72.6, 1391.0], [72.7, 1391.0], [72.8, 1391.0], [72.9, 1391.0], [73.0, 1416.0], [73.1, 1416.0], [73.2, 1416.0], [73.3, 1416.0], [73.4, 1416.0], [73.5, 1416.0], [73.6, 1416.0], [73.7, 1416.0], [73.8, 1416.0], [73.9, 1416.0], [74.0, 1432.0], [74.1, 1432.0], [74.2, 1432.0], [74.3, 1432.0], [74.4, 1432.0], [74.5, 1432.0], [74.6, 1432.0], [74.7, 1432.0], [74.8, 1432.0], [74.9, 1432.0], [75.0, 1438.0], [75.1, 1438.0], [75.2, 1438.0], [75.3, 1438.0], [75.4, 1438.0], [75.5, 1438.0], [75.6, 1438.0], [75.7, 1438.0], [75.8, 1438.0], [75.9, 1438.0], [76.0, 1453.0], [76.1, 1453.0], [76.2, 1453.0], [76.3, 1453.0], [76.4, 1453.0], [76.5, 1453.0], [76.6, 1453.0], [76.7, 1453.0], [76.8, 1453.0], [76.9, 1453.0], [77.0, 1505.0], [77.1, 1505.0], [77.2, 1505.0], [77.3, 1505.0], [77.4, 1505.0], [77.5, 1505.0], [77.6, 1505.0], [77.7, 1505.0], [77.8, 1505.0], [77.9, 1505.0], [78.0, 1538.0], [78.1, 1538.0], [78.2, 1538.0], [78.3, 1538.0], [78.4, 1538.0], [78.5, 1538.0], [78.6, 1538.0], [78.7, 1538.0], [78.8, 1538.0], [78.9, 1538.0], [79.0, 1627.0], [79.1, 1627.0], [79.2, 1627.0], [79.3, 1627.0], [79.4, 1627.0], [79.5, 1627.0], [79.6, 1627.0], [79.7, 1627.0], [79.8, 1627.0], [79.9, 1627.0], [80.0, 1629.0], [80.1, 1629.0], [80.2, 1629.0], [80.3, 1629.0], [80.4, 1629.0], [80.5, 1629.0], [80.6, 1629.0], [80.7, 1629.0], [80.8, 1629.0], [80.9, 1629.0], [81.0, 1632.0], [81.1, 1632.0], [81.2, 1632.0], [81.3, 1632.0], [81.4, 1632.0], [81.5, 1632.0], [81.6, 1632.0], [81.7, 1632.0], [81.8, 1632.0], [81.9, 1632.0], [82.0, 1648.0], [82.1, 1648.0], [82.2, 1648.0], [82.3, 1648.0], [82.4, 1648.0], [82.5, 1648.0], [82.6, 1648.0], [82.7, 1648.0], [82.8, 1648.0], [82.9, 1648.0], [83.0, 1655.0], [83.1, 1655.0], [83.2, 1655.0], [83.3, 1655.0], [83.4, 1655.0], [83.5, 1655.0], [83.6, 1655.0], [83.7, 1655.0], [83.8, 1655.0], [83.9, 1655.0], [84.0, 1659.0], [84.1, 1659.0], [84.2, 1659.0], [84.3, 1659.0], [84.4, 1659.0], [84.5, 1659.0], [84.6, 1659.0], [84.7, 1659.0], [84.8, 1659.0], [84.9, 1659.0], [85.0, 1659.0], [85.1, 1659.0], [85.2, 1659.0], [85.3, 1659.0], [85.4, 1659.0], [85.5, 1659.0], [85.6, 1659.0], [85.7, 1659.0], [85.8, 1659.0], [85.9, 1659.0], [86.0, 1666.0], [86.1, 1666.0], [86.2, 1666.0], [86.3, 1666.0], [86.4, 1666.0], [86.5, 1666.0], [86.6, 1666.0], [86.7, 1666.0], [86.8, 1666.0], [86.9, 1666.0], [87.0, 1668.0], [87.1, 1668.0], [87.2, 1668.0], [87.3, 1668.0], [87.4, 1668.0], [87.5, 1668.0], [87.6, 1668.0], [87.7, 1668.0], [87.8, 1668.0], [87.9, 1668.0], [88.0, 1678.0], [88.1, 1678.0], [88.2, 1678.0], [88.3, 1678.0], [88.4, 1678.0], [88.5, 1678.0], [88.6, 1678.0], [88.7, 1678.0], [88.8, 1678.0], [88.9, 1678.0], [89.0, 1679.0], [89.1, 1679.0], [89.2, 1679.0], [89.3, 1679.0], [89.4, 1679.0], [89.5, 1679.0], [89.6, 1679.0], [89.7, 1679.0], [89.8, 1679.0], [89.9, 1679.0], [90.0, 1681.0], [90.1, 1681.0], [90.2, 1681.0], [90.3, 1681.0], [90.4, 1681.0], [90.5, 1681.0], [90.6, 1681.0], [90.7, 1681.0], [90.8, 1681.0], [90.9, 1681.0], [91.0, 1691.0], [91.1, 1691.0], [91.2, 1691.0], [91.3, 1691.0], [91.4, 1691.0], [91.5, 1691.0], [91.6, 1691.0], [91.7, 1691.0], [91.8, 1691.0], [91.9, 1691.0], [92.0, 1693.0], [92.1, 1693.0], [92.2, 1693.0], [92.3, 1693.0], [92.4, 1693.0], [92.5, 1693.0], [92.6, 1693.0], [92.7, 1693.0], [92.8, 1693.0], [92.9, 1693.0], [93.0, 1694.0], [93.1, 1694.0], [93.2, 1694.0], [93.3, 1694.0], [93.4, 1694.0], [93.5, 1694.0], [93.6, 1694.0], [93.7, 1694.0], [93.8, 1694.0], [93.9, 1694.0], [94.0, 1703.0], [94.1, 1703.0], [94.2, 1703.0], [94.3, 1703.0], [94.4, 1703.0], [94.5, 1703.0], [94.6, 1703.0], [94.7, 1703.0], [94.8, 1703.0], [94.9, 1703.0], [95.0, 1705.0], [95.1, 1705.0], [95.2, 1705.0], [95.3, 1705.0], [95.4, 1705.0], [95.5, 1705.0], [95.6, 1705.0], [95.7, 1705.0], [95.8, 1705.0], [95.9, 1705.0], [96.0, 1730.0], [96.1, 1730.0], [96.2, 1730.0], [96.3, 1730.0], [96.4, 1730.0], [96.5, 1730.0], [96.6, 1730.0], [96.7, 1730.0], [96.8, 1730.0], [96.9, 1730.0], [97.0, 1740.0], [97.1, 1740.0], [97.2, 1740.0], [97.3, 1740.0], [97.4, 1740.0], [97.5, 1740.0], [97.6, 1740.0], [97.7, 1740.0], [97.8, 1740.0], [97.9, 1740.0], [98.0, 1743.0], [98.1, 1743.0], [98.2, 1743.0], [98.3, 1743.0], [98.4, 1743.0], [98.5, 1743.0], [98.6, 1743.0], [98.7, 1743.0], [98.8, 1743.0], [98.9, 1743.0], [99.0, 1836.0], [99.1, 1836.0], [99.2, 1836.0], [99.3, 1836.0], [99.4, 1836.0], [99.5, 1836.0], [99.6, 1836.0], [99.7, 1836.0], [99.8, 1836.0], [99.9, 1836.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 209.0], [0.1, 209.0], [0.2, 209.0], [0.3, 209.0], [0.4, 209.0], [0.5, 209.0], [0.6, 209.0], [0.7, 209.0], [0.8, 209.0], [0.9, 209.0], [1.0, 248.0], [1.1, 248.0], [1.2, 248.0], [1.3, 248.0], [1.4, 248.0], [1.5, 248.0], [1.6, 248.0], [1.7, 248.0], [1.8, 248.0], [1.9, 248.0], [2.0, 248.0], [2.1, 248.0], [2.2, 248.0], [2.3, 248.0], [2.4, 248.0], [2.5, 248.0], [2.6, 248.0], [2.7, 248.0], [2.8, 248.0], [2.9, 248.0], [3.0, 261.0], [3.1, 261.0], [3.2, 261.0], [3.3, 261.0], [3.4, 261.0], [3.5, 261.0], [3.6, 261.0], [3.7, 261.0], [3.8, 261.0], [3.9, 261.0], [4.0, 283.0], [4.1, 283.0], [4.2, 283.0], [4.3, 283.0], [4.4, 283.0], [4.5, 283.0], [4.6, 283.0], [4.7, 283.0], [4.8, 283.0], [4.9, 283.0], [5.0, 294.0], [5.1, 294.0], [5.2, 294.0], [5.3, 294.0], [5.4, 294.0], [5.5, 294.0], [5.6, 294.0], [5.7, 294.0], [5.8, 294.0], [5.9, 294.0], [6.0, 298.0], [6.1, 298.0], [6.2, 298.0], [6.3, 298.0], [6.4, 298.0], [6.5, 298.0], [6.6, 298.0], [6.7, 298.0], [6.8, 298.0], [6.9, 298.0], [7.0, 301.0], [7.1, 301.0], [7.2, 301.0], [7.3, 301.0], [7.4, 301.0], [7.5, 301.0], [7.6, 301.0], [7.7, 301.0], [7.8, 301.0], [7.9, 301.0], [8.0, 304.0], [8.1, 304.0], [8.2, 304.0], [8.3, 304.0], [8.4, 304.0], [8.5, 304.0], [8.6, 304.0], [8.7, 304.0], [8.8, 304.0], [8.9, 304.0], [9.0, 328.0], [9.1, 328.0], [9.2, 328.0], [9.3, 328.0], [9.4, 328.0], [9.5, 328.0], [9.6, 328.0], [9.7, 328.0], [9.8, 328.0], [9.9, 328.0], [10.0, 335.0], [10.1, 335.0], [10.2, 335.0], [10.3, 335.0], [10.4, 335.0], [10.5, 335.0], [10.6, 335.0], [10.7, 335.0], [10.8, 335.0], [10.9, 335.0], [11.0, 364.0], [11.1, 364.0], [11.2, 364.0], [11.3, 364.0], [11.4, 364.0], [11.5, 364.0], [11.6, 364.0], [11.7, 364.0], [11.8, 364.0], [11.9, 364.0], [12.0, 368.0], [12.1, 368.0], [12.2, 368.0], [12.3, 368.0], [12.4, 368.0], [12.5, 368.0], [12.6, 368.0], [12.7, 368.0], [12.8, 368.0], [12.9, 368.0], [13.0, 371.0], [13.1, 371.0], [13.2, 371.0], [13.3, 371.0], [13.4, 371.0], [13.5, 371.0], [13.6, 371.0], [13.7, 371.0], [13.8, 371.0], [13.9, 371.0], [14.0, 371.0], [14.1, 371.0], [14.2, 371.0], [14.3, 371.0], [14.4, 371.0], [14.5, 371.0], [14.6, 371.0], [14.7, 371.0], [14.8, 371.0], [14.9, 371.0], [15.0, 383.0], [15.1, 383.0], [15.2, 383.0], [15.3, 383.0], [15.4, 383.0], [15.5, 383.0], [15.6, 383.0], [15.7, 383.0], [15.8, 383.0], [15.9, 383.0], [16.0, 1575.0], [16.1, 1575.0], [16.2, 1575.0], [16.3, 1575.0], [16.4, 1575.0], [16.5, 1575.0], [16.6, 1575.0], [16.7, 1575.0], [16.8, 1575.0], [16.9, 1575.0], [17.0, 1587.0], [17.1, 1587.0], [17.2, 1587.0], [17.3, 1587.0], [17.4, 1587.0], [17.5, 1587.0], [17.6, 1587.0], [17.7, 1587.0], [17.8, 1587.0], [17.9, 1587.0], [18.0, 1589.0], [18.1, 1589.0], [18.2, 1589.0], [18.3, 1589.0], [18.4, 1589.0], [18.5, 1589.0], [18.6, 1589.0], [18.7, 1589.0], [18.8, 1589.0], [18.9, 1589.0], [19.0, 1596.0], [19.1, 1596.0], [19.2, 1596.0], [19.3, 1596.0], [19.4, 1596.0], [19.5, 1596.0], [19.6, 1596.0], [19.7, 1596.0], [19.8, 1596.0], [19.9, 1596.0], [20.0, 1596.0], [20.1, 1596.0], [20.2, 1596.0], [20.3, 1596.0], [20.4, 1596.0], [20.5, 1596.0], [20.6, 1596.0], [20.7, 1596.0], [20.8, 1596.0], [20.9, 1596.0], [21.0, 1601.0], [21.1, 1601.0], [21.2, 1601.0], [21.3, 1601.0], [21.4, 1601.0], [21.5, 1601.0], [21.6, 1601.0], [21.7, 1601.0], [21.8, 1601.0], [21.9, 1601.0], [22.0, 1605.0], [22.1, 1605.0], [22.2, 1605.0], [22.3, 1605.0], [22.4, 1605.0], [22.5, 1605.0], [22.6, 1605.0], [22.7, 1605.0], [22.8, 1605.0], [22.9, 1605.0], [23.0, 1609.0], [23.1, 1609.0], [23.2, 1609.0], [23.3, 1609.0], [23.4, 1609.0], [23.5, 1609.0], [23.6, 1609.0], [23.7, 1609.0], [23.8, 1609.0], [23.9, 1609.0], [24.0, 1610.0], [24.1, 1610.0], [24.2, 1610.0], [24.3, 1610.0], [24.4, 1610.0], [24.5, 1610.0], [24.6, 1610.0], [24.7, 1610.0], [24.8, 1610.0], [24.9, 1610.0], [25.0, 1614.0], [25.1, 1614.0], [25.2, 1614.0], [25.3, 1614.0], [25.4, 1614.0], [25.5, 1614.0], [25.6, 1614.0], [25.7, 1614.0], [25.8, 1614.0], [25.9, 1614.0], [26.0, 1615.0], [26.1, 1615.0], [26.2, 1615.0], [26.3, 1615.0], [26.4, 1615.0], [26.5, 1615.0], [26.6, 1615.0], [26.7, 1615.0], [26.8, 1615.0], [26.9, 1615.0], [27.0, 1617.0], [27.1, 1617.0], [27.2, 1617.0], [27.3, 1617.0], [27.4, 1617.0], [27.5, 1617.0], [27.6, 1617.0], [27.7, 1617.0], [27.8, 1617.0], [27.9, 1617.0], [28.0, 1621.0], [28.1, 1621.0], [28.2, 1621.0], [28.3, 1621.0], [28.4, 1621.0], [28.5, 1621.0], [28.6, 1621.0], [28.7, 1621.0], [28.8, 1621.0], [28.9, 1621.0], [29.0, 1624.0], [29.1, 1624.0], [29.2, 1624.0], [29.3, 1624.0], [29.4, 1624.0], [29.5, 1624.0], [29.6, 1624.0], [29.7, 1624.0], [29.8, 1624.0], [29.9, 1624.0], [30.0, 1631.0], [30.1, 1631.0], [30.2, 1631.0], [30.3, 1631.0], [30.4, 1631.0], [30.5, 1631.0], [30.6, 1631.0], [30.7, 1631.0], [30.8, 1631.0], [30.9, 1631.0], [31.0, 1632.0], [31.1, 1632.0], [31.2, 1632.0], [31.3, 1632.0], [31.4, 1632.0], [31.5, 1632.0], [31.6, 1632.0], [31.7, 1632.0], [31.8, 1632.0], [31.9, 1632.0], [32.0, 1635.0], [32.1, 1635.0], [32.2, 1635.0], [32.3, 1635.0], [32.4, 1635.0], [32.5, 1635.0], [32.6, 1635.0], [32.7, 1635.0], [32.8, 1635.0], [32.9, 1635.0], [33.0, 1641.0], [33.1, 1641.0], [33.2, 1641.0], [33.3, 1641.0], [33.4, 1641.0], [33.5, 1641.0], [33.6, 1641.0], [33.7, 1641.0], [33.8, 1641.0], [33.9, 1641.0], [34.0, 1643.0], [34.1, 1643.0], [34.2, 1643.0], [34.3, 1643.0], [34.4, 1643.0], [34.5, 1643.0], [34.6, 1643.0], [34.7, 1643.0], [34.8, 1643.0], [34.9, 1643.0], [35.0, 1656.0], [35.1, 1656.0], [35.2, 1656.0], [35.3, 1656.0], [35.4, 1656.0], [35.5, 1656.0], [35.6, 1656.0], [35.7, 1656.0], [35.8, 1656.0], [35.9, 1656.0], [36.0, 1660.0], [36.1, 1660.0], [36.2, 1660.0], [36.3, 1660.0], [36.4, 1660.0], [36.5, 1660.0], [36.6, 1660.0], [36.7, 1660.0], [36.8, 1660.0], [36.9, 1660.0], [37.0, 1663.0], [37.1, 1663.0], [37.2, 1663.0], [37.3, 1663.0], [37.4, 1663.0], [37.5, 1663.0], [37.6, 1663.0], [37.7, 1663.0], [37.8, 1663.0], [37.9, 1663.0], [38.0, 1666.0], [38.1, 1666.0], [38.2, 1666.0], [38.3, 1666.0], [38.4, 1666.0], [38.5, 1666.0], [38.6, 1666.0], [38.7, 1666.0], [38.8, 1666.0], [38.9, 1666.0], [39.0, 1666.0], [39.1, 1666.0], [39.2, 1666.0], [39.3, 1666.0], [39.4, 1666.0], [39.5, 1666.0], [39.6, 1666.0], [39.7, 1666.0], [39.8, 1666.0], [39.9, 1666.0], [40.0, 1678.0], [40.1, 1678.0], [40.2, 1678.0], [40.3, 1678.0], [40.4, 1678.0], [40.5, 1678.0], [40.6, 1678.0], [40.7, 1678.0], [40.8, 1678.0], [40.9, 1678.0], [41.0, 1679.0], [41.1, 1679.0], [41.2, 1679.0], [41.3, 1679.0], [41.4, 1679.0], [41.5, 1679.0], [41.6, 1679.0], [41.7, 1679.0], [41.8, 1679.0], [41.9, 1679.0], [42.0, 1682.0], [42.1, 1682.0], [42.2, 1682.0], [42.3, 1682.0], [42.4, 1682.0], [42.5, 1682.0], [42.6, 1682.0], [42.7, 1682.0], [42.8, 1682.0], [42.9, 1682.0], [43.0, 1688.0], [43.1, 1688.0], [43.2, 1688.0], [43.3, 1688.0], [43.4, 1688.0], [43.5, 1688.0], [43.6, 1688.0], [43.7, 1688.0], [43.8, 1688.0], [43.9, 1688.0], [44.0, 1690.0], [44.1, 1690.0], [44.2, 1690.0], [44.3, 1690.0], [44.4, 1690.0], [44.5, 1690.0], [44.6, 1690.0], [44.7, 1690.0], [44.8, 1690.0], [44.9, 1690.0], [45.0, 1696.0], [45.1, 1696.0], [45.2, 1696.0], [45.3, 1696.0], [45.4, 1696.0], [45.5, 1696.0], [45.6, 1696.0], [45.7, 1696.0], [45.8, 1696.0], [45.9, 1696.0], [46.0, 1696.0], [46.1, 1696.0], [46.2, 1696.0], [46.3, 1696.0], [46.4, 1696.0], [46.5, 1696.0], [46.6, 1696.0], [46.7, 1696.0], [46.8, 1696.0], [46.9, 1696.0], [47.0, 1700.0], [47.1, 1700.0], [47.2, 1700.0], [47.3, 1700.0], [47.4, 1700.0], [47.5, 1700.0], [47.6, 1700.0], [47.7, 1700.0], [47.8, 1700.0], [47.9, 1700.0], [48.0, 1702.0], [48.1, 1702.0], [48.2, 1702.0], [48.3, 1702.0], [48.4, 1702.0], [48.5, 1702.0], [48.6, 1702.0], [48.7, 1702.0], [48.8, 1702.0], [48.9, 1702.0], [49.0, 1702.0], [49.1, 1702.0], [49.2, 1702.0], [49.3, 1702.0], [49.4, 1702.0], [49.5, 1702.0], [49.6, 1702.0], [49.7, 1702.0], [49.8, 1702.0], [49.9, 1702.0], [50.0, 1710.0], [50.1, 1710.0], [50.2, 1710.0], [50.3, 1710.0], [50.4, 1710.0], [50.5, 1710.0], [50.6, 1710.0], [50.7, 1710.0], [50.8, 1710.0], [50.9, 1710.0], [51.0, 1711.0], [51.1, 1711.0], [51.2, 1711.0], [51.3, 1711.0], [51.4, 1711.0], [51.5, 1711.0], [51.6, 1711.0], [51.7, 1711.0], [51.8, 1711.0], [51.9, 1711.0], [52.0, 1713.0], [52.1, 1713.0], [52.2, 1713.0], [52.3, 1713.0], [52.4, 1713.0], [52.5, 1713.0], [52.6, 1713.0], [52.7, 1713.0], [52.8, 1713.0], [52.9, 1713.0], [53.0, 1714.0], [53.1, 1714.0], [53.2, 1714.0], [53.3, 1714.0], [53.4, 1714.0], [53.5, 1714.0], [53.6, 1714.0], [53.7, 1714.0], [53.8, 1714.0], [53.9, 1714.0], [54.0, 1719.0], [54.1, 1719.0], [54.2, 1719.0], [54.3, 1719.0], [54.4, 1719.0], [54.5, 1719.0], [54.6, 1719.0], [54.7, 1719.0], [54.8, 1719.0], [54.9, 1719.0], [55.0, 1720.0], [55.1, 1720.0], [55.2, 1720.0], [55.3, 1720.0], [55.4, 1720.0], [55.5, 1720.0], [55.6, 1720.0], [55.7, 1720.0], [55.8, 1720.0], [55.9, 1720.0], [56.0, 1720.0], [56.1, 1720.0], [56.2, 1720.0], [56.3, 1720.0], [56.4, 1720.0], [56.5, 1720.0], [56.6, 1720.0], [56.7, 1720.0], [56.8, 1720.0], [56.9, 1720.0], [57.0, 1726.0], [57.1, 1726.0], [57.2, 1726.0], [57.3, 1726.0], [57.4, 1726.0], [57.5, 1726.0], [57.6, 1726.0], [57.7, 1726.0], [57.8, 1726.0], [57.9, 1726.0], [58.0, 1731.0], [58.1, 1731.0], [58.2, 1731.0], [58.3, 1731.0], [58.4, 1731.0], [58.5, 1731.0], [58.6, 1731.0], [58.7, 1731.0], [58.8, 1731.0], [58.9, 1731.0], [59.0, 1734.0], [59.1, 1734.0], [59.2, 1734.0], [59.3, 1734.0], [59.4, 1734.0], [59.5, 1734.0], [59.6, 1734.0], [59.7, 1734.0], [59.8, 1734.0], [59.9, 1734.0], [60.0, 1737.0], [60.1, 1737.0], [60.2, 1737.0], [60.3, 1737.0], [60.4, 1737.0], [60.5, 1737.0], [60.6, 1737.0], [60.7, 1737.0], [60.8, 1737.0], [60.9, 1737.0], [61.0, 1742.0], [61.1, 1742.0], [61.2, 1742.0], [61.3, 1742.0], [61.4, 1742.0], [61.5, 1742.0], [61.6, 1742.0], [61.7, 1742.0], [61.8, 1742.0], [61.9, 1742.0], [62.0, 1742.0], [62.1, 1742.0], [62.2, 1742.0], [62.3, 1742.0], [62.4, 1742.0], [62.5, 1742.0], [62.6, 1742.0], [62.7, 1742.0], [62.8, 1742.0], [62.9, 1742.0], [63.0, 1743.0], [63.1, 1743.0], [63.2, 1743.0], [63.3, 1743.0], [63.4, 1743.0], [63.5, 1743.0], [63.6, 1743.0], [63.7, 1743.0], [63.8, 1743.0], [63.9, 1743.0], [64.0, 1747.0], [64.1, 1747.0], [64.2, 1747.0], [64.3, 1747.0], [64.4, 1747.0], [64.5, 1747.0], [64.6, 1747.0], [64.7, 1747.0], [64.8, 1747.0], [64.9, 1747.0], [65.0, 1750.0], [65.1, 1750.0], [65.2, 1750.0], [65.3, 1750.0], [65.4, 1750.0], [65.5, 1750.0], [65.6, 1750.0], [65.7, 1750.0], [65.8, 1750.0], [65.9, 1750.0], [66.0, 1754.0], [66.1, 1754.0], [66.2, 1754.0], [66.3, 1754.0], [66.4, 1754.0], [66.5, 1754.0], [66.6, 1754.0], [66.7, 1754.0], [66.8, 1754.0], [66.9, 1754.0], [67.0, 1754.0], [67.1, 1754.0], [67.2, 1754.0], [67.3, 1754.0], [67.4, 1754.0], [67.5, 1754.0], [67.6, 1754.0], [67.7, 1754.0], [67.8, 1754.0], [67.9, 1754.0], [68.0, 1754.0], [68.1, 1754.0], [68.2, 1754.0], [68.3, 1754.0], [68.4, 1754.0], [68.5, 1754.0], [68.6, 1754.0], [68.7, 1754.0], [68.8, 1754.0], [68.9, 1754.0], [69.0, 1757.0], [69.1, 1757.0], [69.2, 1757.0], [69.3, 1757.0], [69.4, 1757.0], [69.5, 1757.0], [69.6, 1757.0], [69.7, 1757.0], [69.8, 1757.0], [69.9, 1757.0], [70.0, 1767.0], [70.1, 1767.0], [70.2, 1767.0], [70.3, 1767.0], [70.4, 1767.0], [70.5, 1767.0], [70.6, 1767.0], [70.7, 1767.0], [70.8, 1767.0], [70.9, 1767.0], [71.0, 1767.0], [71.1, 1767.0], [71.2, 1767.0], [71.3, 1767.0], [71.4, 1767.0], [71.5, 1767.0], [71.6, 1767.0], [71.7, 1767.0], [71.8, 1767.0], [71.9, 1767.0], [72.0, 1767.0], [72.1, 1767.0], [72.2, 1767.0], [72.3, 1767.0], [72.4, 1767.0], [72.5, 1767.0], [72.6, 1767.0], [72.7, 1767.0], [72.8, 1767.0], [72.9, 1767.0], [73.0, 1769.0], [73.1, 1769.0], [73.2, 1769.0], [73.3, 1769.0], [73.4, 1769.0], [73.5, 1769.0], [73.6, 1769.0], [73.7, 1769.0], [73.8, 1769.0], [73.9, 1769.0], [74.0, 1772.0], [74.1, 1772.0], [74.2, 1772.0], [74.3, 1772.0], [74.4, 1772.0], [74.5, 1772.0], [74.6, 1772.0], [74.7, 1772.0], [74.8, 1772.0], [74.9, 1772.0], [75.0, 1772.0], [75.1, 1772.0], [75.2, 1772.0], [75.3, 1772.0], [75.4, 1772.0], [75.5, 1772.0], [75.6, 1772.0], [75.7, 1772.0], [75.8, 1772.0], [75.9, 1772.0], [76.0, 1772.0], [76.1, 1772.0], [76.2, 1772.0], [76.3, 1772.0], [76.4, 1772.0], [76.5, 1772.0], [76.6, 1772.0], [76.7, 1772.0], [76.8, 1772.0], [76.9, 1772.0], [77.0, 1773.0], [77.1, 1773.0], [77.2, 1773.0], [77.3, 1773.0], [77.4, 1773.0], [77.5, 1773.0], [77.6, 1773.0], [77.7, 1773.0], [77.8, 1773.0], [77.9, 1773.0], [78.0, 1778.0], [78.1, 1778.0], [78.2, 1778.0], [78.3, 1778.0], [78.4, 1778.0], [78.5, 1778.0], [78.6, 1778.0], [78.7, 1778.0], [78.8, 1778.0], [78.9, 1778.0], [79.0, 1780.0], [79.1, 1780.0], [79.2, 1780.0], [79.3, 1780.0], [79.4, 1780.0], [79.5, 1780.0], [79.6, 1780.0], [79.7, 1780.0], [79.8, 1780.0], [79.9, 1780.0], [80.0, 1781.0], [80.1, 1781.0], [80.2, 1781.0], [80.3, 1781.0], [80.4, 1781.0], [80.5, 1781.0], [80.6, 1781.0], [80.7, 1781.0], [80.8, 1781.0], [80.9, 1781.0], [81.0, 1787.0], [81.1, 1787.0], [81.2, 1787.0], [81.3, 1787.0], [81.4, 1787.0], [81.5, 1787.0], [81.6, 1787.0], [81.7, 1787.0], [81.8, 1787.0], [81.9, 1787.0], [82.0, 1789.0], [82.1, 1789.0], [82.2, 1789.0], [82.3, 1789.0], [82.4, 1789.0], [82.5, 1789.0], [82.6, 1789.0], [82.7, 1789.0], [82.8, 1789.0], [82.9, 1789.0], [83.0, 1791.0], [83.1, 1791.0], [83.2, 1791.0], [83.3, 1791.0], [83.4, 1791.0], [83.5, 1791.0], [83.6, 1791.0], [83.7, 1791.0], [83.8, 1791.0], [83.9, 1791.0], [84.0, 1795.0], [84.1, 1795.0], [84.2, 1795.0], [84.3, 1795.0], [84.4, 1795.0], [84.5, 1795.0], [84.6, 1795.0], [84.7, 1795.0], [84.8, 1795.0], [84.9, 1795.0], [85.0, 1798.0], [85.1, 1798.0], [85.2, 1798.0], [85.3, 1798.0], [85.4, 1798.0], [85.5, 1798.0], [85.6, 1798.0], [85.7, 1798.0], [85.8, 1798.0], [85.9, 1798.0], [86.0, 1798.0], [86.1, 1798.0], [86.2, 1798.0], [86.3, 1798.0], [86.4, 1798.0], [86.5, 1798.0], [86.6, 1798.0], [86.7, 1798.0], [86.8, 1798.0], [86.9, 1798.0], [87.0, 1798.0], [87.1, 1798.0], [87.2, 1798.0], [87.3, 1798.0], [87.4, 1798.0], [87.5, 1798.0], [87.6, 1798.0], [87.7, 1798.0], [87.8, 1798.0], [87.9, 1798.0], [88.0, 1805.0], [88.1, 1805.0], [88.2, 1805.0], [88.3, 1805.0], [88.4, 1805.0], [88.5, 1805.0], [88.6, 1805.0], [88.7, 1805.0], [88.8, 1805.0], [88.9, 1805.0], [89.0, 1810.0], [89.1, 1810.0], [89.2, 1810.0], [89.3, 1810.0], [89.4, 1810.0], [89.5, 1810.0], [89.6, 1810.0], [89.7, 1810.0], [89.8, 1810.0], [89.9, 1810.0], [90.0, 1814.0], [90.1, 1814.0], [90.2, 1814.0], [90.3, 1814.0], [90.4, 1814.0], [90.5, 1814.0], [90.6, 1814.0], [90.7, 1814.0], [90.8, 1814.0], [90.9, 1814.0], [91.0, 1815.0], [91.1, 1815.0], [91.2, 1815.0], [91.3, 1815.0], [91.4, 1815.0], [91.5, 1815.0], [91.6, 1815.0], [91.7, 1815.0], [91.8, 1815.0], [91.9, 1815.0], [92.0, 1816.0], [92.1, 1816.0], [92.2, 1816.0], [92.3, 1816.0], [92.4, 1816.0], [92.5, 1816.0], [92.6, 1816.0], [92.7, 1816.0], [92.8, 1816.0], [92.9, 1816.0], [93.0, 1821.0], [93.1, 1821.0], [93.2, 1821.0], [93.3, 1821.0], [93.4, 1821.0], [93.5, 1821.0], [93.6, 1821.0], [93.7, 1821.0], [93.8, 1821.0], [93.9, 1821.0], [94.0, 1822.0], [94.1, 1822.0], [94.2, 1822.0], [94.3, 1822.0], [94.4, 1822.0], [94.5, 1822.0], [94.6, 1822.0], [94.7, 1822.0], [94.8, 1822.0], [94.9, 1822.0], [95.0, 1832.0], [95.1, 1832.0], [95.2, 1832.0], [95.3, 1832.0], [95.4, 1832.0], [95.5, 1832.0], [95.6, 1832.0], [95.7, 1832.0], [95.8, 1832.0], [95.9, 1832.0], [96.0, 1836.0], [96.1, 1836.0], [96.2, 1836.0], [96.3, 1836.0], [96.4, 1836.0], [96.5, 1836.0], [96.6, 1836.0], [96.7, 1836.0], [96.8, 1836.0], [96.9, 1836.0], [97.0, 1841.0], [97.1, 1841.0], [97.2, 1841.0], [97.3, 1841.0], [97.4, 1841.0], [97.5, 1841.0], [97.6, 1841.0], [97.7, 1841.0], [97.8, 1841.0], [97.9, 1841.0], [98.0, 1842.0], [98.1, 1842.0], [98.2, 1842.0], [98.3, 1842.0], [98.4, 1842.0], [98.5, 1842.0], [98.6, 1842.0], [98.7, 1842.0], [98.8, 1842.0], [98.9, 1842.0], [99.0, 1852.0], [99.1, 1852.0], [99.2, 1852.0], [99.3, 1852.0], [99.4, 1852.0], [99.5, 1852.0], [99.6, 1852.0], [99.7, 1852.0], [99.8, 1852.0], [99.9, 1852.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 215.0], [0.1, 215.0], [0.2, 215.0], [0.3, 215.0], [0.4, 215.0], [0.5, 215.0], [0.6, 215.0], [0.7, 215.0], [0.8, 215.0], [0.9, 215.0], [1.0, 260.0], [1.1, 260.0], [1.2, 260.0], [1.3, 260.0], [1.4, 260.0], [1.5, 260.0], [1.6, 260.0], [1.7, 260.0], [1.8, 260.0], [1.9, 260.0], [2.0, 272.0], [2.1, 272.0], [2.2, 272.0], [2.3, 272.0], [2.4, 272.0], [2.5, 272.0], [2.6, 272.0], [2.7, 272.0], [2.8, 272.0], [2.9, 272.0], [3.0, 272.0], [3.1, 272.0], [3.2, 272.0], [3.3, 272.0], [3.4, 272.0], [3.5, 272.0], [3.6, 272.0], [3.7, 272.0], [3.8, 272.0], [3.9, 272.0], [4.0, 300.0], [4.1, 300.0], [4.2, 300.0], [4.3, 300.0], [4.4, 300.0], [4.5, 300.0], [4.6, 300.0], [4.7, 300.0], [4.8, 300.0], [4.9, 300.0], [5.0, 325.0], [5.1, 325.0], [5.2, 325.0], [5.3, 325.0], [5.4, 325.0], [5.5, 325.0], [5.6, 325.0], [5.7, 325.0], [5.8, 325.0], [5.9, 325.0], [6.0, 354.0], [6.1, 354.0], [6.2, 354.0], [6.3, 354.0], [6.4, 354.0], [6.5, 354.0], [6.6, 354.0], [6.7, 354.0], [6.8, 354.0], [6.9, 354.0], [7.0, 355.0], [7.1, 355.0], [7.2, 355.0], [7.3, 355.0], [7.4, 355.0], [7.5, 355.0], [7.6, 355.0], [7.7, 355.0], [7.8, 355.0], [7.9, 355.0], [8.0, 385.0], [8.1, 385.0], [8.2, 385.0], [8.3, 385.0], [8.4, 385.0], [8.5, 385.0], [8.6, 385.0], [8.7, 385.0], [8.8, 385.0], [8.9, 385.0], [9.0, 387.0], [9.1, 387.0], [9.2, 387.0], [9.3, 387.0], [9.4, 387.0], [9.5, 387.0], [9.6, 387.0], [9.7, 387.0], [9.8, 387.0], [9.9, 387.0], [10.0, 400.0], [10.1, 400.0], [10.2, 400.0], [10.3, 400.0], [10.4, 400.0], [10.5, 400.0], [10.6, 400.0], [10.7, 400.0], [10.8, 400.0], [10.9, 400.0], [11.0, 429.0], [11.1, 429.0], [11.2, 429.0], [11.3, 429.0], [11.4, 429.0], [11.5, 429.0], [11.6, 429.0], [11.7, 429.0], [11.8, 429.0], [11.9, 429.0], [12.0, 455.0], [12.1, 455.0], [12.2, 455.0], [12.3, 455.0], [12.4, 455.0], [12.5, 455.0], [12.6, 455.0], [12.7, 455.0], [12.8, 455.0], [12.9, 455.0], [13.0, 459.0], [13.1, 459.0], [13.2, 459.0], [13.3, 459.0], [13.4, 459.0], [13.5, 459.0], [13.6, 459.0], [13.7, 459.0], [13.8, 459.0], [13.9, 459.0], [14.0, 476.0], [14.1, 476.0], [14.2, 476.0], [14.3, 476.0], [14.4, 476.0], [14.5, 476.0], [14.6, 476.0], [14.7, 476.0], [14.8, 476.0], [14.9, 476.0], [15.0, 481.0], [15.1, 481.0], [15.2, 481.0], [15.3, 481.0], [15.4, 481.0], [15.5, 481.0], [15.6, 481.0], [15.7, 481.0], [15.8, 481.0], [15.9, 481.0], [16.0, 490.0], [16.1, 490.0], [16.2, 490.0], [16.3, 490.0], [16.4, 490.0], [16.5, 490.0], [16.6, 490.0], [16.7, 490.0], [16.8, 490.0], [16.9, 490.0], [17.0, 496.0], [17.1, 496.0], [17.2, 496.0], [17.3, 496.0], [17.4, 496.0], [17.5, 496.0], [17.6, 496.0], [17.7, 496.0], [17.8, 496.0], [17.9, 496.0], [18.0, 507.0], [18.1, 507.0], [18.2, 507.0], [18.3, 507.0], [18.4, 507.0], [18.5, 507.0], [18.6, 507.0], [18.7, 507.0], [18.8, 507.0], [18.9, 507.0], [19.0, 531.0], [19.1, 531.0], [19.2, 531.0], [19.3, 531.0], [19.4, 531.0], [19.5, 531.0], [19.6, 531.0], [19.7, 531.0], [19.8, 531.0], [19.9, 531.0], [20.0, 540.0], [20.1, 540.0], [20.2, 540.0], [20.3, 540.0], [20.4, 540.0], [20.5, 540.0], [20.6, 540.0], [20.7, 540.0], [20.8, 540.0], [20.9, 540.0], [21.0, 554.0], [21.1, 554.0], [21.2, 554.0], [21.3, 554.0], [21.4, 554.0], [21.5, 554.0], [21.6, 554.0], [21.7, 554.0], [21.8, 554.0], [21.9, 554.0], [22.0, 604.0], [22.1, 604.0], [22.2, 604.0], [22.3, 604.0], [22.4, 604.0], [22.5, 604.0], [22.6, 604.0], [22.7, 604.0], [22.8, 604.0], [22.9, 604.0], [23.0, 605.0], [23.1, 605.0], [23.2, 605.0], [23.3, 605.0], [23.4, 605.0], [23.5, 605.0], [23.6, 605.0], [23.7, 605.0], [23.8, 605.0], [23.9, 605.0], [24.0, 648.0], [24.1, 648.0], [24.2, 648.0], [24.3, 648.0], [24.4, 648.0], [24.5, 648.0], [24.6, 648.0], [24.7, 648.0], [24.8, 648.0], [24.9, 648.0], [25.0, 690.0], [25.1, 690.0], [25.2, 690.0], [25.3, 690.0], [25.4, 690.0], [25.5, 690.0], [25.6, 690.0], [25.7, 690.0], [25.8, 690.0], [25.9, 690.0], [26.0, 718.0], [26.1, 718.0], [26.2, 718.0], [26.3, 718.0], [26.4, 718.0], [26.5, 718.0], [26.6, 718.0], [26.7, 718.0], [26.8, 718.0], [26.9, 718.0], [27.0, 723.0], [27.1, 723.0], [27.2, 723.0], [27.3, 723.0], [27.4, 723.0], [27.5, 723.0], [27.6, 723.0], [27.7, 723.0], [27.8, 723.0], [27.9, 723.0], [28.0, 734.0], [28.1, 734.0], [28.2, 734.0], [28.3, 734.0], [28.4, 734.0], [28.5, 734.0], [28.6, 734.0], [28.7, 734.0], [28.8, 734.0], [28.9, 734.0], [29.0, 747.0], [29.1, 747.0], [29.2, 747.0], [29.3, 747.0], [29.4, 747.0], [29.5, 747.0], [29.6, 747.0], [29.7, 747.0], [29.8, 747.0], [29.9, 747.0], [30.0, 825.0], [30.1, 825.0], [30.2, 825.0], [30.3, 825.0], [30.4, 825.0], [30.5, 825.0], [30.6, 825.0], [30.7, 825.0], [30.8, 825.0], [30.9, 825.0], [31.0, 845.0], [31.1, 845.0], [31.2, 845.0], [31.3, 845.0], [31.4, 845.0], [31.5, 845.0], [31.6, 845.0], [31.7, 845.0], [31.8, 845.0], [31.9, 845.0], [32.0, 852.0], [32.1, 852.0], [32.2, 852.0], [32.3, 852.0], [32.4, 852.0], [32.5, 852.0], [32.6, 852.0], [32.7, 852.0], [32.8, 852.0], [32.9, 852.0], [33.0, 954.0], [33.1, 954.0], [33.2, 954.0], [33.3, 954.0], [33.4, 954.0], [33.5, 954.0], [33.6, 954.0], [33.7, 954.0], [33.8, 954.0], [33.9, 954.0], [34.0, 1020.0], [34.1, 1020.0], [34.2, 1020.0], [34.3, 1020.0], [34.4, 1020.0], [34.5, 1020.0], [34.6, 1020.0], [34.7, 1020.0], [34.8, 1020.0], [34.9, 1020.0], [35.0, 1057.0], [35.1, 1057.0], [35.2, 1057.0], [35.3, 1057.0], [35.4, 1057.0], [35.5, 1057.0], [35.6, 1057.0], [35.7, 1057.0], [35.8, 1057.0], [35.9, 1057.0], [36.0, 1219.0], [36.1, 1219.0], [36.2, 1219.0], [36.3, 1219.0], [36.4, 1219.0], [36.5, 1219.0], [36.6, 1219.0], [36.7, 1219.0], [36.8, 1219.0], [36.9, 1219.0], [37.0, 1410.0], [37.1, 1410.0], [37.2, 1410.0], [37.3, 1410.0], [37.4, 1410.0], [37.5, 1410.0], [37.6, 1410.0], [37.7, 1410.0], [37.8, 1410.0], [37.9, 1410.0], [38.0, 1424.0], [38.1, 1424.0], [38.2, 1424.0], [38.3, 1424.0], [38.4, 1424.0], [38.5, 1424.0], [38.6, 1424.0], [38.7, 1424.0], [38.8, 1424.0], [38.9, 1424.0], [39.0, 1432.0], [39.1, 1432.0], [39.2, 1432.0], [39.3, 1432.0], [39.4, 1432.0], [39.5, 1432.0], [39.6, 1432.0], [39.7, 1432.0], [39.8, 1432.0], [39.9, 1432.0], [40.0, 1503.0], [40.1, 1503.0], [40.2, 1503.0], [40.3, 1503.0], [40.4, 1503.0], [40.5, 1503.0], [40.6, 1503.0], [40.7, 1503.0], [40.8, 1503.0], [40.9, 1503.0], [41.0, 1512.0], [41.1, 1512.0], [41.2, 1512.0], [41.3, 1512.0], [41.4, 1512.0], [41.5, 1512.0], [41.6, 1512.0], [41.7, 1512.0], [41.8, 1512.0], [41.9, 1512.0], [42.0, 1631.0], [42.1, 1631.0], [42.2, 1631.0], [42.3, 1631.0], [42.4, 1631.0], [42.5, 1631.0], [42.6, 1631.0], [42.7, 1631.0], [42.8, 1631.0], [42.9, 1631.0], [43.0, 1655.0], [43.1, 1655.0], [43.2, 1655.0], [43.3, 1655.0], [43.4, 1655.0], [43.5, 1655.0], [43.6, 1655.0], [43.7, 1655.0], [43.8, 1655.0], [43.9, 1655.0], [44.0, 1676.0], [44.1, 1676.0], [44.2, 1676.0], [44.3, 1676.0], [44.4, 1676.0], [44.5, 1676.0], [44.6, 1676.0], [44.7, 1676.0], [44.8, 1676.0], [44.9, 1676.0], [45.0, 1698.0], [45.1, 1698.0], [45.2, 1698.0], [45.3, 1698.0], [45.4, 1698.0], [45.5, 1698.0], [45.6, 1698.0], [45.7, 1698.0], [45.8, 1698.0], [45.9, 1698.0], [46.0, 1706.0], [46.1, 1706.0], [46.2, 1706.0], [46.3, 1706.0], [46.4, 1706.0], [46.5, 1706.0], [46.6, 1706.0], [46.7, 1706.0], [46.8, 1706.0], [46.9, 1706.0], [47.0, 1720.0], [47.1, 1720.0], [47.2, 1720.0], [47.3, 1720.0], [47.4, 1720.0], [47.5, 1720.0], [47.6, 1720.0], [47.7, 1720.0], [47.8, 1720.0], [47.9, 1720.0], [48.0, 1738.0], [48.1, 1738.0], [48.2, 1738.0], [48.3, 1738.0], [48.4, 1738.0], [48.5, 1738.0], [48.6, 1738.0], [48.7, 1738.0], [48.8, 1738.0], [48.9, 1738.0], [49.0, 1755.0], [49.1, 1755.0], [49.2, 1755.0], [49.3, 1755.0], [49.4, 1755.0], [49.5, 1755.0], [49.6, 1755.0], [49.7, 1755.0], [49.8, 1755.0], [49.9, 1755.0], [50.0, 1787.0], [50.1, 1787.0], [50.2, 1787.0], [50.3, 1787.0], [50.4, 1787.0], [50.5, 1787.0], [50.6, 1787.0], [50.7, 1787.0], [50.8, 1787.0], [50.9, 1787.0], [51.0, 1788.0], [51.1, 1788.0], [51.2, 1788.0], [51.3, 1788.0], [51.4, 1788.0], [51.5, 1788.0], [51.6, 1788.0], [51.7, 1788.0], [51.8, 1788.0], [51.9, 1788.0], [52.0, 1803.0], [52.1, 1803.0], [52.2, 1803.0], [52.3, 1803.0], [52.4, 1803.0], [52.5, 1803.0], [52.6, 1803.0], [52.7, 1803.0], [52.8, 1803.0], [52.9, 1803.0], [53.0, 1808.0], [53.1, 1808.0], [53.2, 1808.0], [53.3, 1808.0], [53.4, 1808.0], [53.5, 1808.0], [53.6, 1808.0], [53.7, 1808.0], [53.8, 1808.0], [53.9, 1808.0], [54.0, 1808.0], [54.1, 1808.0], [54.2, 1808.0], [54.3, 1808.0], [54.4, 1808.0], [54.5, 1808.0], [54.6, 1808.0], [54.7, 1808.0], [54.8, 1808.0], [54.9, 1808.0], [55.0, 1817.0], [55.1, 1817.0], [55.2, 1817.0], [55.3, 1817.0], [55.4, 1817.0], [55.5, 1817.0], [55.6, 1817.0], [55.7, 1817.0], [55.8, 1817.0], [55.9, 1817.0], [56.0, 1877.0], [56.1, 1877.0], [56.2, 1877.0], [56.3, 1877.0], [56.4, 1877.0], [56.5, 1877.0], [56.6, 1877.0], [56.7, 1877.0], [56.8, 1877.0], [56.9, 1877.0], [57.0, 1891.0], [57.1, 1891.0], [57.2, 1891.0], [57.3, 1891.0], [57.4, 1891.0], [57.5, 1891.0], [57.6, 1891.0], [57.7, 1891.0], [57.8, 1891.0], [57.9, 1891.0], [58.0, 1899.0], [58.1, 1899.0], [58.2, 1899.0], [58.3, 1899.0], [58.4, 1899.0], [58.5, 1899.0], [58.6, 1899.0], [58.7, 1899.0], [58.8, 1899.0], [58.9, 1899.0], [59.0, 1900.0], [59.1, 1900.0], [59.2, 1900.0], [59.3, 1900.0], [59.4, 1900.0], [59.5, 1900.0], [59.6, 1900.0], [59.7, 1900.0], [59.8, 1900.0], [59.9, 1900.0], [60.0, 1922.0], [60.1, 1922.0], [60.2, 1922.0], [60.3, 1922.0], [60.4, 1922.0], [60.5, 1922.0], [60.6, 1922.0], [60.7, 1922.0], [60.8, 1922.0], [60.9, 1922.0], [61.0, 1929.0], [61.1, 1929.0], [61.2, 1929.0], [61.3, 1929.0], [61.4, 1929.0], [61.5, 1929.0], [61.6, 1929.0], [61.7, 1929.0], [61.8, 1929.0], [61.9, 1929.0], [62.0, 1958.0], [62.1, 1958.0], [62.2, 1958.0], [62.3, 1958.0], [62.4, 1958.0], [62.5, 1958.0], [62.6, 1958.0], [62.7, 1958.0], [62.8, 1958.0], [62.9, 1958.0], [63.0, 1959.0], [63.1, 1959.0], [63.2, 1959.0], [63.3, 1959.0], [63.4, 1959.0], [63.5, 1959.0], [63.6, 1959.0], [63.7, 1959.0], [63.8, 1959.0], [63.9, 1959.0], [64.0, 1966.0], [64.1, 1966.0], [64.2, 1966.0], [64.3, 1966.0], [64.4, 1966.0], [64.5, 1966.0], [64.6, 1966.0], [64.7, 1966.0], [64.8, 1966.0], [64.9, 1966.0], [65.0, 1973.0], [65.1, 1973.0], [65.2, 1973.0], [65.3, 1973.0], [65.4, 1973.0], [65.5, 1973.0], [65.6, 1973.0], [65.7, 1973.0], [65.8, 1973.0], [65.9, 1973.0], [66.0, 1986.0], [66.1, 1986.0], [66.2, 1986.0], [66.3, 1986.0], [66.4, 1986.0], [66.5, 1986.0], [66.6, 1986.0], [66.7, 1986.0], [66.8, 1986.0], [66.9, 1986.0], [67.0, 1987.0], [67.1, 1987.0], [67.2, 1987.0], [67.3, 1987.0], [67.4, 1987.0], [67.5, 1987.0], [67.6, 1987.0], [67.7, 1987.0], [67.8, 1987.0], [67.9, 1987.0], [68.0, 1988.0], [68.1, 1988.0], [68.2, 1988.0], [68.3, 1988.0], [68.4, 1988.0], [68.5, 1988.0], [68.6, 1988.0], [68.7, 1988.0], [68.8, 1988.0], [68.9, 1988.0], [69.0, 1993.0], [69.1, 1993.0], [69.2, 1993.0], [69.3, 1993.0], [69.4, 1993.0], [69.5, 1993.0], [69.6, 1993.0], [69.7, 1993.0], [69.8, 1993.0], [69.9, 1993.0], [70.0, 2000.0], [70.1, 2000.0], [70.2, 2000.0], [70.3, 2000.0], [70.4, 2000.0], [70.5, 2000.0], [70.6, 2000.0], [70.7, 2000.0], [70.8, 2000.0], [70.9, 2000.0], [71.0, 2006.0], [71.1, 2006.0], [71.2, 2006.0], [71.3, 2006.0], [71.4, 2006.0], [71.5, 2006.0], [71.6, 2006.0], [71.7, 2006.0], [71.8, 2006.0], [71.9, 2006.0], [72.0, 2020.0], [72.1, 2020.0], [72.2, 2020.0], [72.3, 2020.0], [72.4, 2020.0], [72.5, 2020.0], [72.6, 2020.0], [72.7, 2020.0], [72.8, 2020.0], [72.9, 2020.0], [73.0, 2021.0], [73.1, 2021.0], [73.2, 2021.0], [73.3, 2021.0], [73.4, 2021.0], [73.5, 2021.0], [73.6, 2021.0], [73.7, 2021.0], [73.8, 2021.0], [73.9, 2021.0], [74.0, 2027.0], [74.1, 2027.0], [74.2, 2027.0], [74.3, 2027.0], [74.4, 2027.0], [74.5, 2027.0], [74.6, 2027.0], [74.7, 2027.0], [74.8, 2027.0], [74.9, 2027.0], [75.0, 2034.0], [75.1, 2034.0], [75.2, 2034.0], [75.3, 2034.0], [75.4, 2034.0], [75.5, 2034.0], [75.6, 2034.0], [75.7, 2034.0], [75.8, 2034.0], [75.9, 2034.0], [76.0, 2047.0], [76.1, 2047.0], [76.2, 2047.0], [76.3, 2047.0], [76.4, 2047.0], [76.5, 2047.0], [76.6, 2047.0], [76.7, 2047.0], [76.8, 2047.0], [76.9, 2047.0], [77.0, 2049.0], [77.1, 2049.0], [77.2, 2049.0], [77.3, 2049.0], [77.4, 2049.0], [77.5, 2049.0], [77.6, 2049.0], [77.7, 2049.0], [77.8, 2049.0], [77.9, 2049.0], [78.0, 2050.0], [78.1, 2050.0], [78.2, 2050.0], [78.3, 2050.0], [78.4, 2050.0], [78.5, 2050.0], [78.6, 2050.0], [78.7, 2050.0], [78.8, 2050.0], [78.9, 2050.0], [79.0, 2055.0], [79.1, 2055.0], [79.2, 2055.0], [79.3, 2055.0], [79.4, 2055.0], [79.5, 2055.0], [79.6, 2055.0], [79.7, 2055.0], [79.8, 2055.0], [79.9, 2055.0], [80.0, 2056.0], [80.1, 2056.0], [80.2, 2056.0], [80.3, 2056.0], [80.4, 2056.0], [80.5, 2056.0], [80.6, 2056.0], [80.7, 2056.0], [80.8, 2056.0], [80.9, 2056.0], [81.0, 2056.0], [81.1, 2056.0], [81.2, 2056.0], [81.3, 2056.0], [81.4, 2056.0], [81.5, 2056.0], [81.6, 2056.0], [81.7, 2056.0], [81.8, 2056.0], [81.9, 2056.0], [82.0, 2061.0], [82.1, 2061.0], [82.2, 2061.0], [82.3, 2061.0], [82.4, 2061.0], [82.5, 2061.0], [82.6, 2061.0], [82.7, 2061.0], [82.8, 2061.0], [82.9, 2061.0], [83.0, 2061.0], [83.1, 2061.0], [83.2, 2061.0], [83.3, 2061.0], [83.4, 2061.0], [83.5, 2061.0], [83.6, 2061.0], [83.7, 2061.0], [83.8, 2061.0], [83.9, 2061.0], [84.0, 2061.0], [84.1, 2061.0], [84.2, 2061.0], [84.3, 2061.0], [84.4, 2061.0], [84.5, 2061.0], [84.6, 2061.0], [84.7, 2061.0], [84.8, 2061.0], [84.9, 2061.0], [85.0, 2070.0], [85.1, 2070.0], [85.2, 2070.0], [85.3, 2070.0], [85.4, 2070.0], [85.5, 2070.0], [85.6, 2070.0], [85.7, 2070.0], [85.8, 2070.0], [85.9, 2070.0], [86.0, 2073.0], [86.1, 2073.0], [86.2, 2073.0], [86.3, 2073.0], [86.4, 2073.0], [86.5, 2073.0], [86.6, 2073.0], [86.7, 2073.0], [86.8, 2073.0], [86.9, 2073.0], [87.0, 2079.0], [87.1, 2079.0], [87.2, 2079.0], [87.3, 2079.0], [87.4, 2079.0], [87.5, 2079.0], [87.6, 2079.0], [87.7, 2079.0], [87.8, 2079.0], [87.9, 2079.0], [88.0, 2080.0], [88.1, 2080.0], [88.2, 2080.0], [88.3, 2080.0], [88.4, 2080.0], [88.5, 2080.0], [88.6, 2080.0], [88.7, 2080.0], [88.8, 2080.0], [88.9, 2080.0], [89.0, 2082.0], [89.1, 2082.0], [89.2, 2082.0], [89.3, 2082.0], [89.4, 2082.0], [89.5, 2082.0], [89.6, 2082.0], [89.7, 2082.0], [89.8, 2082.0], [89.9, 2082.0], [90.0, 2085.0], [90.1, 2085.0], [90.2, 2085.0], [90.3, 2085.0], [90.4, 2085.0], [90.5, 2085.0], [90.6, 2085.0], [90.7, 2085.0], [90.8, 2085.0], [90.9, 2085.0], [91.0, 2086.0], [91.1, 2086.0], [91.2, 2086.0], [91.3, 2086.0], [91.4, 2086.0], [91.5, 2086.0], [91.6, 2086.0], [91.7, 2086.0], [91.8, 2086.0], [91.9, 2086.0], [92.0, 2088.0], [92.1, 2088.0], [92.2, 2088.0], [92.3, 2088.0], [92.4, 2088.0], [92.5, 2088.0], [92.6, 2088.0], [92.7, 2088.0], [92.8, 2088.0], [92.9, 2088.0], [93.0, 2091.0], [93.1, 2091.0], [93.2, 2091.0], [93.3, 2091.0], [93.4, 2091.0], [93.5, 2091.0], [93.6, 2091.0], [93.7, 2091.0], [93.8, 2091.0], [93.9, 2091.0], [94.0, 2092.0], [94.1, 2092.0], [94.2, 2092.0], [94.3, 2092.0], [94.4, 2092.0], [94.5, 2092.0], [94.6, 2092.0], [94.7, 2092.0], [94.8, 2092.0], [94.9, 2092.0], [95.0, 2093.0], [95.1, 2093.0], [95.2, 2093.0], [95.3, 2093.0], [95.4, 2093.0], [95.5, 2093.0], [95.6, 2093.0], [95.7, 2093.0], [95.8, 2093.0], [95.9, 2093.0], [96.0, 2094.0], [96.1, 2094.0], [96.2, 2094.0], [96.3, 2094.0], [96.4, 2094.0], [96.5, 2094.0], [96.6, 2094.0], [96.7, 2094.0], [96.8, 2094.0], [96.9, 2094.0], [97.0, 2098.0], [97.1, 2098.0], [97.2, 2098.0], [97.3, 2098.0], [97.4, 2098.0], [97.5, 2098.0], [97.6, 2098.0], [97.7, 2098.0], [97.8, 2098.0], [97.9, 2098.0], [98.0, 2108.0], [98.1, 2108.0], [98.2, 2108.0], [98.3, 2108.0], [98.4, 2108.0], [98.5, 2108.0], [98.6, 2108.0], [98.7, 2108.0], [98.8, 2108.0], [98.9, 2108.0], [99.0, 2121.0], [99.1, 2121.0], [99.2, 2121.0], [99.3, 2121.0], [99.4, 2121.0], [99.5, 2121.0], [99.6, 2121.0], [99.7, 2121.0], [99.8, 2121.0], [99.9, 2121.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 41.0, "series": [{"data": [[600.0, 6.0], [700.0, 4.0], [200.0, 2.0], [800.0, 7.0], [900.0, 7.0], [1000.0, 7.0], [1100.0, 4.0], [300.0, 3.0], [1200.0, 5.0], [1300.0, 10.0], [1400.0, 4.0], [1500.0, 2.0], [100.0, 3.0], [400.0, 9.0], [1600.0, 15.0], [1700.0, 5.0], [1800.0, 1.0], [500.0, 6.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[300.0, 9.0], [1500.0, 5.0], [200.0, 7.0], [1600.0, 26.0], [1700.0, 41.0], [1800.0, 12.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[2100.0, 2.0], [600.0, 4.0], [700.0, 4.0], [200.0, 4.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 2.0], [300.0, 6.0], [1200.0, 1.0], [1400.0, 3.0], [1500.0, 2.0], [400.0, 8.0], [1600.0, 4.0], [1700.0, 6.0], [1800.0, 7.0], [1900.0, 11.0], [500.0, 4.0], [2000.0, 28.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 167.0, "series": [{"data": [[0.0, 51.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 82.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 167.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 50.54999999999999, "minX": 1.66891992E12, "maxY": 50.740000000000016, "series": [{"data": [[1.66891992E12, 50.54999999999999]], "isOverall": false, "label": "client-to-gateway-non-caching (GET)", "isController": false}, {"data": [[1.66891992E12, 50.63999999999999]], "isOverall": false, "label": "client-to-application (GET)", "isController": false}, {"data": [[1.66891992E12, 50.740000000000016]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66891992E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 176.0, "minX": 1.0, "maxY": 2121.0, "series": [{"data": [[2.0, 1705.0], [3.0, 1703.0], [4.0, 1679.0], [6.0, 1685.5], [7.0, 1694.0], [9.0, 1712.0], [10.0, 1691.0], [11.0, 1668.0], [12.0, 1740.0], [13.0, 1730.0], [14.0, 1659.0], [15.0, 1648.0], [16.0, 1666.0], [17.0, 1659.0], [18.0, 1655.0], [20.0, 1629.5], [21.0, 1629.0], [22.0, 1538.0], [23.0, 1505.0], [24.0, 1438.0], [25.0, 1416.0], [26.0, 1432.0], [27.0, 1453.0], [28.0, 1389.0], [29.0, 1384.0], [30.0, 1391.0], [31.0, 1348.0], [33.0, 1343.0], [32.0, 1372.0], [35.0, 1324.0], [34.0, 1319.0], [37.0, 1309.0], [36.0, 1315.0], [39.0, 1271.0], [38.0, 1261.0], [41.0, 1267.0], [40.0, 1268.0], [43.0, 1173.0], [42.0, 1230.0], [45.0, 1078.0], [44.0, 1169.0], [47.0, 1099.0], [46.0, 1107.0], [49.0, 1104.0], [48.0, 1087.0], [51.0, 1054.0], [50.0, 1077.0], [53.0, 1016.0], [52.0, 1015.0], [55.0, 953.0], [54.0, 998.0], [57.0, 941.0], [56.0, 943.0], [59.0, 890.0], [58.0, 904.0], [61.0, 902.0], [60.0, 897.0], [63.0, 879.0], [62.0, 900.0], [67.0, 772.0], [66.0, 828.0], [65.0, 869.0], [64.0, 855.0], [71.0, 718.0], [70.0, 709.0], [69.0, 719.0], [68.0, 806.0], [75.0, 617.0], [74.0, 680.0], [73.0, 659.0], [72.0, 677.0], [78.0, 592.0], [77.0, 607.0], [76.0, 615.0], [83.0, 509.0], [81.0, 517.0], [80.0, 517.5], [87.0, 478.0], [86.0, 487.0], [85.0, 478.0], [84.0, 485.0], [91.0, 441.0], [90.0, 447.0], [89.0, 350.0], [88.0, 459.0], [95.0, 352.0], [94.0, 389.0], [93.0, 415.0], [92.0, 437.0], [99.0, 188.0], [98.0, 187.0], [97.0, 210.0], [96.0, 222.0], [100.0, 176.0], [1.0, 1836.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[50.54999999999999, 1046.69]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 1815.0], [3.0, 1821.0], [5.0, 1792.0], [6.0, 1832.0], [8.0, 1838.5], [9.0, 1822.0], [10.0, 1810.0], [11.0, 1842.0], [12.0, 1852.0], [13.0, 1778.0], [14.0, 1772.0], [15.0, 1781.0], [17.0, 1791.5], [18.0, 1780.0], [20.0, 1794.5], [23.0, 1802.6666666666667], [25.0, 1770.0], [26.0, 1743.0], [27.0, 1767.0], [29.0, 1763.0], [31.0, 1785.0], [33.0, 1742.0], [32.0, 1754.0], [34.0, 1750.0], [37.0, 1726.0], [36.0, 1737.0], [39.0, 1744.0], [41.0, 1767.0], [40.0, 1696.0], [43.0, 1713.0], [42.0, 1742.0], [45.0, 1747.0], [44.0, 1700.0], [47.0, 1679.0], [46.0, 1719.0], [49.0, 1711.0], [48.0, 1734.0], [51.0, 1725.5], [53.0, 1702.0], [52.0, 1720.0], [55.0, 1686.0], [57.0, 1666.0], [56.0, 1666.0], [61.0, 1688.0], [60.0, 1696.6666666666667], [63.0, 1663.0], [62.0, 1696.0], [67.0, 1656.0], [66.0, 1609.0], [65.0, 1617.0], [64.0, 1643.0], [71.0, 1635.0], [70.0, 1641.0], [69.0, 1660.0], [68.0, 1632.0], [75.0, 1601.0], [74.0, 1621.0], [73.0, 1615.0], [72.0, 1596.0], [78.0, 1587.0], [77.0, 1624.0], [83.0, 1631.0], [82.0, 1596.0], [81.0, 1575.0], [80.0, 1609.6666666666667], [86.0, 371.0], [85.0, 383.0], [84.0, 1589.0], [91.0, 328.0], [90.0, 335.0], [89.0, 364.0], [88.0, 369.5], [95.0, 294.0], [94.0, 304.0], [93.0, 298.0], [92.0, 301.0], [99.0, 248.0], [98.0, 248.0], [97.0, 261.0], [96.0, 283.0], [100.0, 209.0], [1.0, 1798.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[50.72999999999999, 1494.6900000000005]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[2.0, 2108.0], [3.0, 2086.0], [4.0, 2098.0], [5.0, 2094.0], [6.0, 2073.0], [7.0, 2093.0], [8.0, 2070.0], [9.0, 2091.0], [10.0, 2092.0], [12.0, 2086.5], [13.0, 2056.0], [14.0, 2082.0], [15.0, 2061.0], [17.0, 2070.5], [18.0, 2079.0], [19.0, 2055.0], [20.0, 2061.0], [21.0, 2056.0], [22.0, 2034.0], [23.0, 2050.0], [24.0, 2049.0], [26.0, 2037.0], [27.0, 2006.0], [28.0, 2020.0], [29.0, 1993.0], [31.0, 2010.5], [33.0, 1988.0], [32.0, 1973.0], [35.0, 1986.5], [37.0, 1966.0], [36.0, 1922.0], [39.0, 1958.5], [41.0, 1899.0], [40.0, 1929.0], [43.0, 1891.0], [42.0, 1900.0], [45.0, 1817.0], [44.0, 1877.0], [46.0, 1803.0], [51.0, 1755.0], [50.0, 1797.75], [52.0, 1738.0], [55.0, 1706.0], [54.0, 1709.0], [57.0, 1655.0], [56.0, 1676.0], [59.0, 1503.0], [58.0, 1631.0], [61.0, 1432.0], [60.0, 1512.0], [63.0, 1410.0], [62.0, 1424.0], [67.0, 954.0], [66.0, 1020.0], [65.0, 1057.0], [64.0, 1219.0], [71.0, 747.0], [70.0, 845.0], [69.0, 825.0], [68.0, 852.0], [75.0, 690.0], [74.0, 718.0], [73.0, 723.0], [72.0, 734.0], [79.0, 540.0], [78.0, 604.0], [77.0, 605.0], [76.0, 648.0], [83.0, 496.0], [82.0, 519.0], [80.0, 554.0], [87.0, 476.0], [86.0, 481.0], [85.0, 459.0], [84.0, 490.0], [91.0, 387.0], [90.0, 429.0], [89.0, 400.0], [88.0, 455.0], [95.0, 325.0], [94.0, 354.0], [93.0, 355.0], [92.0, 385.0], [99.0, 260.0], [98.0, 272.0], [97.0, 272.0], [96.0, 300.0], [100.0, 215.0], [1.0, 2121.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[50.63999999999999, 1420.2700000000007]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 741.6666666666666, "minX": 1.66891992E12, "maxY": 5664875.25, "series": [{"data": [[1.66891992E12, 5664875.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66891992E12, 741.6666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66891992E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1046.69, "minX": 1.66891992E12, "maxY": 1494.6900000000005, "series": [{"data": [[1.66891992E12, 1046.69]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66891992E12, 1494.6900000000005]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66891992E12, 1420.2700000000007]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66891992E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 800.5400000000003, "minX": 1.66891992E12, "maxY": 890.5700000000002, "series": [{"data": [[1.66891992E12, 800.5400000000003]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66891992E12, 890.5700000000002]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66891992E12, 815.82]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66891992E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.6200000000000006, "minX": 1.66891992E12, "maxY": 53.55, "series": [{"data": [[1.66891992E12, 1.6200000000000006]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66891992E12, 3.4800000000000004]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66891992E12, 53.55]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66891992E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 176.0, "minX": 1.66891992E12, "maxY": 2121.0, "series": [{"data": [[1.66891992E12, 2121.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66891992E12, 1999.3000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66891992E12, 2097.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66891992E12, 2069.5499999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66891992E12, 176.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66891992E12, 1622.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66891992E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 455.0, "minX": 9.0, "maxY": 1772.0, "series": [{"data": [[17.0, 954.0], [75.0, 1772.0], [9.0, 1605.0], [39.0, 1629.0], [25.0, 455.0], [60.0, 1006.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 365.0, "minX": 9.0, "maxY": 1195.0, "series": [{"data": [[17.0, 633.0], [75.0, 999.5], [9.0, 917.0], [39.0, 1195.0], [25.0, 365.0], [60.0, 741.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.66891992E12, "maxY": 5.0, "series": [{"data": [[1.66891992E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66891992E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.66891992E12, "maxY": 5.0, "series": [{"data": [[1.66891992E12, 5.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66891992E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.66891992E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66891992E12, 1.6666666666666667]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.66891992E12, 1.6666666666666667]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.66891992E12, 1.6666666666666667]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66891992E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.66891992E12, "maxY": 5.0, "series": [{"data": [[1.66891992E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66891992E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

