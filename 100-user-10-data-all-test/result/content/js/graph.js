/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 454.0, "minX": 0.0, "maxY": 69483.0, "series": [{"data": [[0.0, 4360.0], [0.1, 4360.0], [0.2, 4360.0], [0.3, 4360.0], [0.4, 4360.0], [0.5, 4360.0], [0.6, 4360.0], [0.7, 4360.0], [0.8, 4360.0], [0.9, 4360.0], [1.0, 6099.0], [1.1, 6099.0], [1.2, 6099.0], [1.3, 6099.0], [1.4, 6099.0], [1.5, 6099.0], [1.6, 6099.0], [1.7, 6099.0], [1.8, 6099.0], [1.9, 6099.0], [2.0, 6491.0], [2.1, 6491.0], [2.2, 6491.0], [2.3, 6491.0], [2.4, 6491.0], [2.5, 6491.0], [2.6, 6491.0], [2.7, 6491.0], [2.8, 6491.0], [2.9, 6491.0], [3.0, 6503.0], [3.1, 6503.0], [3.2, 6503.0], [3.3, 6503.0], [3.4, 6503.0], [3.5, 6503.0], [3.6, 6503.0], [3.7, 6503.0], [3.8, 6503.0], [3.9, 6503.0], [4.0, 6734.0], [4.1, 6734.0], [4.2, 6734.0], [4.3, 6734.0], [4.4, 6734.0], [4.5, 6734.0], [4.6, 6734.0], [4.7, 6734.0], [4.8, 6734.0], [4.9, 6734.0], [5.0, 6929.0], [5.1, 6929.0], [5.2, 6929.0], [5.3, 6929.0], [5.4, 6929.0], [5.5, 6929.0], [5.6, 6929.0], [5.7, 6929.0], [5.8, 6929.0], [5.9, 6929.0], [6.0, 7217.0], [6.1, 7217.0], [6.2, 7217.0], [6.3, 7217.0], [6.4, 7217.0], [6.5, 7217.0], [6.6, 7217.0], [6.7, 7217.0], [6.8, 7217.0], [6.9, 7217.0], [7.0, 7317.0], [7.1, 7317.0], [7.2, 7317.0], [7.3, 7317.0], [7.4, 7317.0], [7.5, 7317.0], [7.6, 7317.0], [7.7, 7317.0], [7.8, 7317.0], [7.9, 7317.0], [8.0, 7413.0], [8.1, 7413.0], [8.2, 7413.0], [8.3, 7413.0], [8.4, 7413.0], [8.5, 7413.0], [8.6, 7413.0], [8.7, 7413.0], [8.8, 7413.0], [8.9, 7413.0], [9.0, 7440.0], [9.1, 7440.0], [9.2, 7440.0], [9.3, 7440.0], [9.4, 7440.0], [9.5, 7440.0], [9.6, 7440.0], [9.7, 7440.0], [9.8, 7440.0], [9.9, 7440.0], [10.0, 9626.0], [10.1, 9626.0], [10.2, 9626.0], [10.3, 9626.0], [10.4, 9626.0], [10.5, 9626.0], [10.6, 9626.0], [10.7, 9626.0], [10.8, 9626.0], [10.9, 9626.0], [11.0, 12138.0], [11.1, 12138.0], [11.2, 12138.0], [11.3, 12138.0], [11.4, 12138.0], [11.5, 12138.0], [11.6, 12138.0], [11.7, 12138.0], [11.8, 12138.0], [11.9, 12138.0], [12.0, 12322.0], [12.1, 12322.0], [12.2, 12322.0], [12.3, 12322.0], [12.4, 12322.0], [12.5, 12322.0], [12.6, 12322.0], [12.7, 12322.0], [12.8, 12322.0], [12.9, 12322.0], [13.0, 12451.0], [13.1, 12451.0], [13.2, 12451.0], [13.3, 12451.0], [13.4, 12451.0], [13.5, 12451.0], [13.6, 12451.0], [13.7, 12451.0], [13.8, 12451.0], [13.9, 12451.0], [14.0, 12486.0], [14.1, 12486.0], [14.2, 12486.0], [14.3, 12486.0], [14.4, 12486.0], [14.5, 12486.0], [14.6, 12486.0], [14.7, 12486.0], [14.8, 12486.0], [14.9, 12486.0], [15.0, 12747.0], [15.1, 12747.0], [15.2, 12747.0], [15.3, 12747.0], [15.4, 12747.0], [15.5, 12747.0], [15.6, 12747.0], [15.7, 12747.0], [15.8, 12747.0], [15.9, 12747.0], [16.0, 12825.0], [16.1, 12825.0], [16.2, 12825.0], [16.3, 12825.0], [16.4, 12825.0], [16.5, 12825.0], [16.6, 12825.0], [16.7, 12825.0], [16.8, 12825.0], [16.9, 12825.0], [17.0, 13014.0], [17.1, 13014.0], [17.2, 13014.0], [17.3, 13014.0], [17.4, 13014.0], [17.5, 13014.0], [17.6, 13014.0], [17.7, 13014.0], [17.8, 13014.0], [17.9, 13014.0], [18.0, 13311.0], [18.1, 13311.0], [18.2, 13311.0], [18.3, 13311.0], [18.4, 13311.0], [18.5, 13311.0], [18.6, 13311.0], [18.7, 13311.0], [18.8, 13311.0], [18.9, 13311.0], [19.0, 13729.0], [19.1, 13729.0], [19.2, 13729.0], [19.3, 13729.0], [19.4, 13729.0], [19.5, 13729.0], [19.6, 13729.0], [19.7, 13729.0], [19.8, 13729.0], [19.9, 13729.0], [20.0, 14750.0], [20.1, 14750.0], [20.2, 14750.0], [20.3, 14750.0], [20.4, 14750.0], [20.5, 14750.0], [20.6, 14750.0], [20.7, 14750.0], [20.8, 14750.0], [20.9, 14750.0], [21.0, 17097.0], [21.1, 17097.0], [21.2, 17097.0], [21.3, 17097.0], [21.4, 17097.0], [21.5, 17097.0], [21.6, 17097.0], [21.7, 17097.0], [21.8, 17097.0], [21.9, 17097.0], [22.0, 17201.0], [22.1, 17201.0], [22.2, 17201.0], [22.3, 17201.0], [22.4, 17201.0], [22.5, 17201.0], [22.6, 17201.0], [22.7, 17201.0], [22.8, 17201.0], [22.9, 17201.0], [23.0, 17242.0], [23.1, 17242.0], [23.2, 17242.0], [23.3, 17242.0], [23.4, 17242.0], [23.5, 17242.0], [23.6, 17242.0], [23.7, 17242.0], [23.8, 17242.0], [23.9, 17242.0], [24.0, 18622.0], [24.1, 18622.0], [24.2, 18622.0], [24.3, 18622.0], [24.4, 18622.0], [24.5, 18622.0], [24.6, 18622.0], [24.7, 18622.0], [24.8, 18622.0], [24.9, 18622.0], [25.0, 18930.0], [25.1, 18930.0], [25.2, 18930.0], [25.3, 18930.0], [25.4, 18930.0], [25.5, 18930.0], [25.6, 18930.0], [25.7, 18930.0], [25.8, 18930.0], [25.9, 18930.0], [26.0, 19288.0], [26.1, 19288.0], [26.2, 19288.0], [26.3, 19288.0], [26.4, 19288.0], [26.5, 19288.0], [26.6, 19288.0], [26.7, 19288.0], [26.8, 19288.0], [26.9, 19288.0], [27.0, 19461.0], [27.1, 19461.0], [27.2, 19461.0], [27.3, 19461.0], [27.4, 19461.0], [27.5, 19461.0], [27.6, 19461.0], [27.7, 19461.0], [27.8, 19461.0], [27.9, 19461.0], [28.0, 19476.0], [28.1, 19476.0], [28.2, 19476.0], [28.3, 19476.0], [28.4, 19476.0], [28.5, 19476.0], [28.6, 19476.0], [28.7, 19476.0], [28.8, 19476.0], [28.9, 19476.0], [29.0, 19835.0], [29.1, 19835.0], [29.2, 19835.0], [29.3, 19835.0], [29.4, 19835.0], [29.5, 19835.0], [29.6, 19835.0], [29.7, 19835.0], [29.8, 19835.0], [29.9, 19835.0], [30.0, 20713.0], [30.1, 20713.0], [30.2, 20713.0], [30.3, 20713.0], [30.4, 20713.0], [30.5, 20713.0], [30.6, 20713.0], [30.7, 20713.0], [30.8, 20713.0], [30.9, 20713.0], [31.0, 23788.0], [31.1, 23788.0], [31.2, 23788.0], [31.3, 23788.0], [31.4, 23788.0], [31.5, 23788.0], [31.6, 23788.0], [31.7, 23788.0], [31.8, 23788.0], [31.9, 23788.0], [32.0, 24308.0], [32.1, 24308.0], [32.2, 24308.0], [32.3, 24308.0], [32.4, 24308.0], [32.5, 24308.0], [32.6, 24308.0], [32.7, 24308.0], [32.8, 24308.0], [32.9, 24308.0], [33.0, 25273.0], [33.1, 25273.0], [33.2, 25273.0], [33.3, 25273.0], [33.4, 25273.0], [33.5, 25273.0], [33.6, 25273.0], [33.7, 25273.0], [33.8, 25273.0], [33.9, 25273.0], [34.0, 25589.0], [34.1, 25589.0], [34.2, 25589.0], [34.3, 25589.0], [34.4, 25589.0], [34.5, 25589.0], [34.6, 25589.0], [34.7, 25589.0], [34.8, 25589.0], [34.9, 25589.0], [35.0, 25864.0], [35.1, 25864.0], [35.2, 25864.0], [35.3, 25864.0], [35.4, 25864.0], [35.5, 25864.0], [35.6, 25864.0], [35.7, 25864.0], [35.8, 25864.0], [35.9, 25864.0], [36.0, 26206.0], [36.1, 26206.0], [36.2, 26206.0], [36.3, 26206.0], [36.4, 26206.0], [36.5, 26206.0], [36.6, 26206.0], [36.7, 26206.0], [36.8, 26206.0], [36.9, 26206.0], [37.0, 26499.0], [37.1, 26499.0], [37.2, 26499.0], [37.3, 26499.0], [37.4, 26499.0], [37.5, 26499.0], [37.6, 26499.0], [37.7, 26499.0], [37.8, 26499.0], [37.9, 26499.0], [38.0, 26521.0], [38.1, 26521.0], [38.2, 26521.0], [38.3, 26521.0], [38.4, 26521.0], [38.5, 26521.0], [38.6, 26521.0], [38.7, 26521.0], [38.8, 26521.0], [38.9, 26521.0], [39.0, 26542.0], [39.1, 26542.0], [39.2, 26542.0], [39.3, 26542.0], [39.4, 26542.0], [39.5, 26542.0], [39.6, 26542.0], [39.7, 26542.0], [39.8, 26542.0], [39.9, 26542.0], [40.0, 27746.0], [40.1, 27746.0], [40.2, 27746.0], [40.3, 27746.0], [40.4, 27746.0], [40.5, 27746.0], [40.6, 27746.0], [40.7, 27746.0], [40.8, 27746.0], [40.9, 27746.0], [41.0, 29199.0], [41.1, 29199.0], [41.2, 29199.0], [41.3, 29199.0], [41.4, 29199.0], [41.5, 29199.0], [41.6, 29199.0], [41.7, 29199.0], [41.8, 29199.0], [41.9, 29199.0], [42.0, 29411.0], [42.1, 29411.0], [42.2, 29411.0], [42.3, 29411.0], [42.4, 29411.0], [42.5, 29411.0], [42.6, 29411.0], [42.7, 29411.0], [42.8, 29411.0], [42.9, 29411.0], [43.0, 30213.0], [43.1, 30213.0], [43.2, 30213.0], [43.3, 30213.0], [43.4, 30213.0], [43.5, 30213.0], [43.6, 30213.0], [43.7, 30213.0], [43.8, 30213.0], [43.9, 30213.0], [44.0, 30787.0], [44.1, 30787.0], [44.2, 30787.0], [44.3, 30787.0], [44.4, 30787.0], [44.5, 30787.0], [44.6, 30787.0], [44.7, 30787.0], [44.8, 30787.0], [44.9, 30787.0], [45.0, 30942.0], [45.1, 30942.0], [45.2, 30942.0], [45.3, 30942.0], [45.4, 30942.0], [45.5, 30942.0], [45.6, 30942.0], [45.7, 30942.0], [45.8, 30942.0], [45.9, 30942.0], [46.0, 31359.0], [46.1, 31359.0], [46.2, 31359.0], [46.3, 31359.0], [46.4, 31359.0], [46.5, 31359.0], [46.6, 31359.0], [46.7, 31359.0], [46.8, 31359.0], [46.9, 31359.0], [47.0, 31537.0], [47.1, 31537.0], [47.2, 31537.0], [47.3, 31537.0], [47.4, 31537.0], [47.5, 31537.0], [47.6, 31537.0], [47.7, 31537.0], [47.8, 31537.0], [47.9, 31537.0], [48.0, 31568.0], [48.1, 31568.0], [48.2, 31568.0], [48.3, 31568.0], [48.4, 31568.0], [48.5, 31568.0], [48.6, 31568.0], [48.7, 31568.0], [48.8, 31568.0], [48.9, 31568.0], [49.0, 31956.0], [49.1, 31956.0], [49.2, 31956.0], [49.3, 31956.0], [49.4, 31956.0], [49.5, 31956.0], [49.6, 31956.0], [49.7, 31956.0], [49.8, 31956.0], [49.9, 31956.0], [50.0, 33183.0], [50.1, 33183.0], [50.2, 33183.0], [50.3, 33183.0], [50.4, 33183.0], [50.5, 33183.0], [50.6, 33183.0], [50.7, 33183.0], [50.8, 33183.0], [50.9, 33183.0], [51.0, 34500.0], [51.1, 34500.0], [51.2, 34500.0], [51.3, 34500.0], [51.4, 34500.0], [51.5, 34500.0], [51.6, 34500.0], [51.7, 34500.0], [51.8, 34500.0], [51.9, 34500.0], [52.0, 34776.0], [52.1, 34776.0], [52.2, 34776.0], [52.3, 34776.0], [52.4, 34776.0], [52.5, 34776.0], [52.6, 34776.0], [52.7, 34776.0], [52.8, 34776.0], [52.9, 34776.0], [53.0, 36879.0], [53.1, 36879.0], [53.2, 36879.0], [53.3, 36879.0], [53.4, 36879.0], [53.5, 36879.0], [53.6, 36879.0], [53.7, 36879.0], [53.8, 36879.0], [53.9, 36879.0], [54.0, 37556.0], [54.1, 37556.0], [54.2, 37556.0], [54.3, 37556.0], [54.4, 37556.0], [54.5, 37556.0], [54.6, 37556.0], [54.7, 37556.0], [54.8, 37556.0], [54.9, 37556.0], [55.0, 37642.0], [55.1, 37642.0], [55.2, 37642.0], [55.3, 37642.0], [55.4, 37642.0], [55.5, 37642.0], [55.6, 37642.0], [55.7, 37642.0], [55.8, 37642.0], [55.9, 37642.0], [56.0, 38160.0], [56.1, 38160.0], [56.2, 38160.0], [56.3, 38160.0], [56.4, 38160.0], [56.5, 38160.0], [56.6, 38160.0], [56.7, 38160.0], [56.8, 38160.0], [56.9, 38160.0], [57.0, 38215.0], [57.1, 38215.0], [57.2, 38215.0], [57.3, 38215.0], [57.4, 38215.0], [57.5, 38215.0], [57.6, 38215.0], [57.7, 38215.0], [57.8, 38215.0], [57.9, 38215.0], [58.0, 38765.0], [58.1, 38765.0], [58.2, 38765.0], [58.3, 38765.0], [58.4, 38765.0], [58.5, 38765.0], [58.6, 38765.0], [58.7, 38765.0], [58.8, 38765.0], [58.9, 38765.0], [59.0, 38970.0], [59.1, 38970.0], [59.2, 38970.0], [59.3, 38970.0], [59.4, 38970.0], [59.5, 38970.0], [59.6, 38970.0], [59.7, 38970.0], [59.8, 38970.0], [59.9, 38970.0], [60.0, 39705.0], [60.1, 39705.0], [60.2, 39705.0], [60.3, 39705.0], [60.4, 39705.0], [60.5, 39705.0], [60.6, 39705.0], [60.7, 39705.0], [60.8, 39705.0], [60.9, 39705.0], [61.0, 41009.0], [61.1, 41009.0], [61.2, 41009.0], [61.3, 41009.0], [61.4, 41009.0], [61.5, 41009.0], [61.6, 41009.0], [61.7, 41009.0], [61.8, 41009.0], [61.9, 41009.0], [62.0, 41370.0], [62.1, 41370.0], [62.2, 41370.0], [62.3, 41370.0], [62.4, 41370.0], [62.5, 41370.0], [62.6, 41370.0], [62.7, 41370.0], [62.8, 41370.0], [62.9, 41370.0], [63.0, 42918.0], [63.1, 42918.0], [63.2, 42918.0], [63.3, 42918.0], [63.4, 42918.0], [63.5, 42918.0], [63.6, 42918.0], [63.7, 42918.0], [63.8, 42918.0], [63.9, 42918.0], [64.0, 43357.0], [64.1, 43357.0], [64.2, 43357.0], [64.3, 43357.0], [64.4, 43357.0], [64.5, 43357.0], [64.6, 43357.0], [64.7, 43357.0], [64.8, 43357.0], [64.9, 43357.0], [65.0, 44439.0], [65.1, 44439.0], [65.2, 44439.0], [65.3, 44439.0], [65.4, 44439.0], [65.5, 44439.0], [65.6, 44439.0], [65.7, 44439.0], [65.8, 44439.0], [65.9, 44439.0], [66.0, 45051.0], [66.1, 45051.0], [66.2, 45051.0], [66.3, 45051.0], [66.4, 45051.0], [66.5, 45051.0], [66.6, 45051.0], [66.7, 45051.0], [66.8, 45051.0], [66.9, 45051.0], [67.0, 45482.0], [67.1, 45482.0], [67.2, 45482.0], [67.3, 45482.0], [67.4, 45482.0], [67.5, 45482.0], [67.6, 45482.0], [67.7, 45482.0], [67.8, 45482.0], [67.9, 45482.0], [68.0, 45698.0], [68.1, 45698.0], [68.2, 45698.0], [68.3, 45698.0], [68.4, 45698.0], [68.5, 45698.0], [68.6, 45698.0], [68.7, 45698.0], [68.8, 45698.0], [68.9, 45698.0], [69.0, 46097.0], [69.1, 46097.0], [69.2, 46097.0], [69.3, 46097.0], [69.4, 46097.0], [69.5, 46097.0], [69.6, 46097.0], [69.7, 46097.0], [69.8, 46097.0], [69.9, 46097.0], [70.0, 46537.0], [70.1, 46537.0], [70.2, 46537.0], [70.3, 46537.0], [70.4, 46537.0], [70.5, 46537.0], [70.6, 46537.0], [70.7, 46537.0], [70.8, 46537.0], [70.9, 46537.0], [71.0, 46970.0], [71.1, 46970.0], [71.2, 46970.0], [71.3, 46970.0], [71.4, 46970.0], [71.5, 46970.0], [71.6, 46970.0], [71.7, 46970.0], [71.8, 46970.0], [71.9, 46970.0], [72.0, 47292.0], [72.1, 47292.0], [72.2, 47292.0], [72.3, 47292.0], [72.4, 47292.0], [72.5, 47292.0], [72.6, 47292.0], [72.7, 47292.0], [72.8, 47292.0], [72.9, 47292.0], [73.0, 48849.0], [73.1, 48849.0], [73.2, 48849.0], [73.3, 48849.0], [73.4, 48849.0], [73.5, 48849.0], [73.6, 48849.0], [73.7, 48849.0], [73.8, 48849.0], [73.9, 48849.0], [74.0, 48977.0], [74.1, 48977.0], [74.2, 48977.0], [74.3, 48977.0], [74.4, 48977.0], [74.5, 48977.0], [74.6, 48977.0], [74.7, 48977.0], [74.8, 48977.0], [74.9, 48977.0], [75.0, 50430.0], [75.1, 50430.0], [75.2, 50430.0], [75.3, 50430.0], [75.4, 50430.0], [75.5, 50430.0], [75.6, 50430.0], [75.7, 50430.0], [75.8, 50430.0], [75.9, 50430.0], [76.0, 51060.0], [76.1, 51060.0], [76.2, 51060.0], [76.3, 51060.0], [76.4, 51060.0], [76.5, 51060.0], [76.6, 51060.0], [76.7, 51060.0], [76.8, 51060.0], [76.9, 51060.0], [77.0, 52070.0], [77.1, 52070.0], [77.2, 52070.0], [77.3, 52070.0], [77.4, 52070.0], [77.5, 52070.0], [77.6, 52070.0], [77.7, 52070.0], [77.8, 52070.0], [77.9, 52070.0], [78.0, 52157.0], [78.1, 52157.0], [78.2, 52157.0], [78.3, 52157.0], [78.4, 52157.0], [78.5, 52157.0], [78.6, 52157.0], [78.7, 52157.0], [78.8, 52157.0], [78.9, 52157.0], [79.0, 52439.0], [79.1, 52439.0], [79.2, 52439.0], [79.3, 52439.0], [79.4, 52439.0], [79.5, 52439.0], [79.6, 52439.0], [79.7, 52439.0], [79.8, 52439.0], [79.9, 52439.0], [80.0, 53063.0], [80.1, 53063.0], [80.2, 53063.0], [80.3, 53063.0], [80.4, 53063.0], [80.5, 53063.0], [80.6, 53063.0], [80.7, 53063.0], [80.8, 53063.0], [80.9, 53063.0], [81.0, 53108.0], [81.1, 53108.0], [81.2, 53108.0], [81.3, 53108.0], [81.4, 53108.0], [81.5, 53108.0], [81.6, 53108.0], [81.7, 53108.0], [81.8, 53108.0], [81.9, 53108.0], [82.0, 53241.0], [82.1, 53241.0], [82.2, 53241.0], [82.3, 53241.0], [82.4, 53241.0], [82.5, 53241.0], [82.6, 53241.0], [82.7, 53241.0], [82.8, 53241.0], [82.9, 53241.0], [83.0, 54121.0], [83.1, 54121.0], [83.2, 54121.0], [83.3, 54121.0], [83.4, 54121.0], [83.5, 54121.0], [83.6, 54121.0], [83.7, 54121.0], [83.8, 54121.0], [83.9, 54121.0], [84.0, 54145.0], [84.1, 54145.0], [84.2, 54145.0], [84.3, 54145.0], [84.4, 54145.0], [84.5, 54145.0], [84.6, 54145.0], [84.7, 54145.0], [84.8, 54145.0], [84.9, 54145.0], [85.0, 56035.0], [85.1, 56035.0], [85.2, 56035.0], [85.3, 56035.0], [85.4, 56035.0], [85.5, 56035.0], [85.6, 56035.0], [85.7, 56035.0], [85.8, 56035.0], [85.9, 56035.0], [86.0, 57150.0], [86.1, 57150.0], [86.2, 57150.0], [86.3, 57150.0], [86.4, 57150.0], [86.5, 57150.0], [86.6, 57150.0], [86.7, 57150.0], [86.8, 57150.0], [86.9, 57150.0], [87.0, 58249.0], [87.1, 58249.0], [87.2, 58249.0], [87.3, 58249.0], [87.4, 58249.0], [87.5, 58249.0], [87.6, 58249.0], [87.7, 58249.0], [87.8, 58249.0], [87.9, 58249.0], [88.0, 58596.0], [88.1, 58596.0], [88.2, 58596.0], [88.3, 58596.0], [88.4, 58596.0], [88.5, 58596.0], [88.6, 58596.0], [88.7, 58596.0], [88.8, 58596.0], [88.9, 58596.0], [89.0, 58906.0], [89.1, 58906.0], [89.2, 58906.0], [89.3, 58906.0], [89.4, 58906.0], [89.5, 58906.0], [89.6, 58906.0], [89.7, 58906.0], [89.8, 58906.0], [89.9, 58906.0], [90.0, 58975.0], [90.1, 58975.0], [90.2, 58975.0], [90.3, 58975.0], [90.4, 58975.0], [90.5, 58975.0], [90.6, 58975.0], [90.7, 58975.0], [90.8, 58975.0], [90.9, 58975.0], [91.0, 59159.0], [91.1, 59159.0], [91.2, 59159.0], [91.3, 59159.0], [91.4, 59159.0], [91.5, 59159.0], [91.6, 59159.0], [91.7, 59159.0], [91.8, 59159.0], [91.9, 59159.0], [92.0, 59349.0], [92.1, 59349.0], [92.2, 59349.0], [92.3, 59349.0], [92.4, 59349.0], [92.5, 59349.0], [92.6, 59349.0], [92.7, 59349.0], [92.8, 59349.0], [92.9, 59349.0], [93.0, 59648.0], [93.1, 59648.0], [93.2, 59648.0], [93.3, 59648.0], [93.4, 59648.0], [93.5, 59648.0], [93.6, 59648.0], [93.7, 59648.0], [93.8, 59648.0], [93.9, 59648.0], [94.0, 59933.0], [94.1, 59933.0], [94.2, 59933.0], [94.3, 59933.0], [94.4, 59933.0], [94.5, 59933.0], [94.6, 59933.0], [94.7, 59933.0], [94.8, 59933.0], [94.9, 59933.0], [95.0, 60582.0], [95.1, 60582.0], [95.2, 60582.0], [95.3, 60582.0], [95.4, 60582.0], [95.5, 60582.0], [95.6, 60582.0], [95.7, 60582.0], [95.8, 60582.0], [95.9, 60582.0], [96.0, 60947.0], [96.1, 60947.0], [96.2, 60947.0], [96.3, 60947.0], [96.4, 60947.0], [96.5, 60947.0], [96.6, 60947.0], [96.7, 60947.0], [96.8, 60947.0], [96.9, 60947.0], [97.0, 61138.0], [97.1, 61138.0], [97.2, 61138.0], [97.3, 61138.0], [97.4, 61138.0], [97.5, 61138.0], [97.6, 61138.0], [97.7, 61138.0], [97.8, 61138.0], [97.9, 61138.0], [98.0, 61142.0], [98.1, 61142.0], [98.2, 61142.0], [98.3, 61142.0], [98.4, 61142.0], [98.5, 61142.0], [98.6, 61142.0], [98.7, 61142.0], [98.8, 61142.0], [98.9, 61142.0], [99.0, 61205.0], [99.1, 61205.0], [99.2, 61205.0], [99.3, 61205.0], [99.4, 61205.0], [99.5, 61205.0], [99.6, 61205.0], [99.7, 61205.0], [99.8, 61205.0], [99.9, 61205.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 454.0], [0.1, 454.0], [0.2, 454.0], [0.3, 454.0], [0.4, 454.0], [0.5, 454.0], [0.6, 454.0], [0.7, 454.0], [0.8, 454.0], [0.9, 454.0], [1.0, 473.0], [1.1, 473.0], [1.2, 473.0], [1.3, 473.0], [1.4, 473.0], [1.5, 473.0], [1.6, 473.0], [1.7, 473.0], [1.8, 473.0], [1.9, 473.0], [2.0, 492.0], [2.1, 492.0], [2.2, 492.0], [2.3, 492.0], [2.4, 492.0], [2.5, 492.0], [2.6, 492.0], [2.7, 492.0], [2.8, 492.0], [2.9, 492.0], [3.0, 494.0], [3.1, 494.0], [3.2, 494.0], [3.3, 494.0], [3.4, 494.0], [3.5, 494.0], [3.6, 494.0], [3.7, 494.0], [3.8, 494.0], [3.9, 494.0], [4.0, 520.0], [4.1, 520.0], [4.2, 520.0], [4.3, 520.0], [4.4, 520.0], [4.5, 520.0], [4.6, 520.0], [4.7, 520.0], [4.8, 520.0], [4.9, 520.0], [5.0, 525.0], [5.1, 525.0], [5.2, 525.0], [5.3, 525.0], [5.4, 525.0], [5.5, 525.0], [5.6, 525.0], [5.7, 525.0], [5.8, 525.0], [5.9, 525.0], [6.0, 526.0], [6.1, 526.0], [6.2, 526.0], [6.3, 526.0], [6.4, 526.0], [6.5, 526.0], [6.6, 526.0], [6.7, 526.0], [6.8, 526.0], [6.9, 526.0], [7.0, 538.0], [7.1, 538.0], [7.2, 538.0], [7.3, 538.0], [7.4, 538.0], [7.5, 538.0], [7.6, 538.0], [7.7, 538.0], [7.8, 538.0], [7.9, 538.0], [8.0, 541.0], [8.1, 541.0], [8.2, 541.0], [8.3, 541.0], [8.4, 541.0], [8.5, 541.0], [8.6, 541.0], [8.7, 541.0], [8.8, 541.0], [8.9, 541.0], [9.0, 551.0], [9.1, 551.0], [9.2, 551.0], [9.3, 551.0], [9.4, 551.0], [9.5, 551.0], [9.6, 551.0], [9.7, 551.0], [9.8, 551.0], [9.9, 551.0], [10.0, 559.0], [10.1, 559.0], [10.2, 559.0], [10.3, 559.0], [10.4, 559.0], [10.5, 559.0], [10.6, 559.0], [10.7, 559.0], [10.8, 559.0], [10.9, 559.0], [11.0, 561.0], [11.1, 561.0], [11.2, 561.0], [11.3, 561.0], [11.4, 561.0], [11.5, 561.0], [11.6, 561.0], [11.7, 561.0], [11.8, 561.0], [11.9, 561.0], [12.0, 564.0], [12.1, 564.0], [12.2, 564.0], [12.3, 564.0], [12.4, 564.0], [12.5, 564.0], [12.6, 564.0], [12.7, 564.0], [12.8, 564.0], [12.9, 564.0], [13.0, 581.0], [13.1, 581.0], [13.2, 581.0], [13.3, 581.0], [13.4, 581.0], [13.5, 581.0], [13.6, 581.0], [13.7, 581.0], [13.8, 581.0], [13.9, 581.0], [14.0, 583.0], [14.1, 583.0], [14.2, 583.0], [14.3, 583.0], [14.4, 583.0], [14.5, 583.0], [14.6, 583.0], [14.7, 583.0], [14.8, 583.0], [14.9, 583.0], [15.0, 590.0], [15.1, 590.0], [15.2, 590.0], [15.3, 590.0], [15.4, 590.0], [15.5, 590.0], [15.6, 590.0], [15.7, 590.0], [15.8, 590.0], [15.9, 590.0], [16.0, 601.0], [16.1, 601.0], [16.2, 601.0], [16.3, 601.0], [16.4, 601.0], [16.5, 601.0], [16.6, 601.0], [16.7, 601.0], [16.8, 601.0], [16.9, 601.0], [17.0, 602.0], [17.1, 602.0], [17.2, 602.0], [17.3, 602.0], [17.4, 602.0], [17.5, 602.0], [17.6, 602.0], [17.7, 602.0], [17.8, 602.0], [17.9, 602.0], [18.0, 611.0], [18.1, 611.0], [18.2, 611.0], [18.3, 611.0], [18.4, 611.0], [18.5, 611.0], [18.6, 611.0], [18.7, 611.0], [18.8, 611.0], [18.9, 611.0], [19.0, 621.0], [19.1, 621.0], [19.2, 621.0], [19.3, 621.0], [19.4, 621.0], [19.5, 621.0], [19.6, 621.0], [19.7, 621.0], [19.8, 621.0], [19.9, 621.0], [20.0, 625.0], [20.1, 625.0], [20.2, 625.0], [20.3, 625.0], [20.4, 625.0], [20.5, 625.0], [20.6, 625.0], [20.7, 625.0], [20.8, 625.0], [20.9, 625.0], [21.0, 628.0], [21.1, 628.0], [21.2, 628.0], [21.3, 628.0], [21.4, 628.0], [21.5, 628.0], [21.6, 628.0], [21.7, 628.0], [21.8, 628.0], [21.9, 628.0], [22.0, 642.0], [22.1, 642.0], [22.2, 642.0], [22.3, 642.0], [22.4, 642.0], [22.5, 642.0], [22.6, 642.0], [22.7, 642.0], [22.8, 642.0], [22.9, 642.0], [23.0, 648.0], [23.1, 648.0], [23.2, 648.0], [23.3, 648.0], [23.4, 648.0], [23.5, 648.0], [23.6, 648.0], [23.7, 648.0], [23.8, 648.0], [23.9, 648.0], [24.0, 650.0], [24.1, 650.0], [24.2, 650.0], [24.3, 650.0], [24.4, 650.0], [24.5, 650.0], [24.6, 650.0], [24.7, 650.0], [24.8, 650.0], [24.9, 650.0], [25.0, 658.0], [25.1, 658.0], [25.2, 658.0], [25.3, 658.0], [25.4, 658.0], [25.5, 658.0], [25.6, 658.0], [25.7, 658.0], [25.8, 658.0], [25.9, 658.0], [26.0, 660.0], [26.1, 660.0], [26.2, 660.0], [26.3, 660.0], [26.4, 660.0], [26.5, 660.0], [26.6, 660.0], [26.7, 660.0], [26.8, 660.0], [26.9, 660.0], [27.0, 666.0], [27.1, 666.0], [27.2, 666.0], [27.3, 666.0], [27.4, 666.0], [27.5, 666.0], [27.6, 666.0], [27.7, 666.0], [27.8, 666.0], [27.9, 666.0], [28.0, 668.0], [28.1, 668.0], [28.2, 668.0], [28.3, 668.0], [28.4, 668.0], [28.5, 668.0], [28.6, 668.0], [28.7, 668.0], [28.8, 668.0], [28.9, 668.0], [29.0, 673.0], [29.1, 673.0], [29.2, 673.0], [29.3, 673.0], [29.4, 673.0], [29.5, 673.0], [29.6, 673.0], [29.7, 673.0], [29.8, 673.0], [29.9, 673.0], [30.0, 683.0], [30.1, 683.0], [30.2, 683.0], [30.3, 683.0], [30.4, 683.0], [30.5, 683.0], [30.6, 683.0], [30.7, 683.0], [30.8, 683.0], [30.9, 683.0], [31.0, 689.0], [31.1, 689.0], [31.2, 689.0], [31.3, 689.0], [31.4, 689.0], [31.5, 689.0], [31.6, 689.0], [31.7, 689.0], [31.8, 689.0], [31.9, 689.0], [32.0, 693.0], [32.1, 693.0], [32.2, 693.0], [32.3, 693.0], [32.4, 693.0], [32.5, 693.0], [32.6, 693.0], [32.7, 693.0], [32.8, 693.0], [32.9, 693.0], [33.0, 694.0], [33.1, 694.0], [33.2, 694.0], [33.3, 694.0], [33.4, 694.0], [33.5, 694.0], [33.6, 694.0], [33.7, 694.0], [33.8, 694.0], [33.9, 694.0], [34.0, 701.0], [34.1, 701.0], [34.2, 701.0], [34.3, 701.0], [34.4, 701.0], [34.5, 701.0], [34.6, 701.0], [34.7, 701.0], [34.8, 701.0], [34.9, 701.0], [35.0, 718.0], [35.1, 718.0], [35.2, 718.0], [35.3, 718.0], [35.4, 718.0], [35.5, 718.0], [35.6, 718.0], [35.7, 718.0], [35.8, 718.0], [35.9, 718.0], [36.0, 730.0], [36.1, 730.0], [36.2, 730.0], [36.3, 730.0], [36.4, 730.0], [36.5, 730.0], [36.6, 730.0], [36.7, 730.0], [36.8, 730.0], [36.9, 730.0], [37.0, 731.0], [37.1, 731.0], [37.2, 731.0], [37.3, 731.0], [37.4, 731.0], [37.5, 731.0], [37.6, 731.0], [37.7, 731.0], [37.8, 731.0], [37.9, 731.0], [38.0, 733.0], [38.1, 733.0], [38.2, 733.0], [38.3, 733.0], [38.4, 733.0], [38.5, 733.0], [38.6, 733.0], [38.7, 733.0], [38.8, 733.0], [38.9, 733.0], [39.0, 744.0], [39.1, 744.0], [39.2, 744.0], [39.3, 744.0], [39.4, 744.0], [39.5, 744.0], [39.6, 744.0], [39.7, 744.0], [39.8, 744.0], [39.9, 744.0], [40.0, 745.0], [40.1, 745.0], [40.2, 745.0], [40.3, 745.0], [40.4, 745.0], [40.5, 745.0], [40.6, 745.0], [40.7, 745.0], [40.8, 745.0], [40.9, 745.0], [41.0, 758.0], [41.1, 758.0], [41.2, 758.0], [41.3, 758.0], [41.4, 758.0], [41.5, 758.0], [41.6, 758.0], [41.7, 758.0], [41.8, 758.0], [41.9, 758.0], [42.0, 760.0], [42.1, 760.0], [42.2, 760.0], [42.3, 760.0], [42.4, 760.0], [42.5, 760.0], [42.6, 760.0], [42.7, 760.0], [42.8, 760.0], [42.9, 760.0], [43.0, 768.0], [43.1, 768.0], [43.2, 768.0], [43.3, 768.0], [43.4, 768.0], [43.5, 768.0], [43.6, 768.0], [43.7, 768.0], [43.8, 768.0], [43.9, 768.0], [44.0, 775.0], [44.1, 775.0], [44.2, 775.0], [44.3, 775.0], [44.4, 775.0], [44.5, 775.0], [44.6, 775.0], [44.7, 775.0], [44.8, 775.0], [44.9, 775.0], [45.0, 799.0], [45.1, 799.0], [45.2, 799.0], [45.3, 799.0], [45.4, 799.0], [45.5, 799.0], [45.6, 799.0], [45.7, 799.0], [45.8, 799.0], [45.9, 799.0], [46.0, 811.0], [46.1, 811.0], [46.2, 811.0], [46.3, 811.0], [46.4, 811.0], [46.5, 811.0], [46.6, 811.0], [46.7, 811.0], [46.8, 811.0], [46.9, 811.0], [47.0, 813.0], [47.1, 813.0], [47.2, 813.0], [47.3, 813.0], [47.4, 813.0], [47.5, 813.0], [47.6, 813.0], [47.7, 813.0], [47.8, 813.0], [47.9, 813.0], [48.0, 818.0], [48.1, 818.0], [48.2, 818.0], [48.3, 818.0], [48.4, 818.0], [48.5, 818.0], [48.6, 818.0], [48.7, 818.0], [48.8, 818.0], [48.9, 818.0], [49.0, 821.0], [49.1, 821.0], [49.2, 821.0], [49.3, 821.0], [49.4, 821.0], [49.5, 821.0], [49.6, 821.0], [49.7, 821.0], [49.8, 821.0], [49.9, 821.0], [50.0, 830.0], [50.1, 830.0], [50.2, 830.0], [50.3, 830.0], [50.4, 830.0], [50.5, 830.0], [50.6, 830.0], [50.7, 830.0], [50.8, 830.0], [50.9, 830.0], [51.0, 833.0], [51.1, 833.0], [51.2, 833.0], [51.3, 833.0], [51.4, 833.0], [51.5, 833.0], [51.6, 833.0], [51.7, 833.0], [51.8, 833.0], [51.9, 833.0], [52.0, 837.0], [52.1, 837.0], [52.2, 837.0], [52.3, 837.0], [52.4, 837.0], [52.5, 837.0], [52.6, 837.0], [52.7, 837.0], [52.8, 837.0], [52.9, 837.0], [53.0, 840.0], [53.1, 840.0], [53.2, 840.0], [53.3, 840.0], [53.4, 840.0], [53.5, 840.0], [53.6, 840.0], [53.7, 840.0], [53.8, 840.0], [53.9, 840.0], [54.0, 841.0], [54.1, 841.0], [54.2, 841.0], [54.3, 841.0], [54.4, 841.0], [54.5, 841.0], [54.6, 841.0], [54.7, 841.0], [54.8, 841.0], [54.9, 841.0], [55.0, 850.0], [55.1, 850.0], [55.2, 850.0], [55.3, 850.0], [55.4, 850.0], [55.5, 850.0], [55.6, 850.0], [55.7, 850.0], [55.8, 850.0], [55.9, 850.0], [56.0, 855.0], [56.1, 855.0], [56.2, 855.0], [56.3, 855.0], [56.4, 855.0], [56.5, 855.0], [56.6, 855.0], [56.7, 855.0], [56.8, 855.0], [56.9, 855.0], [57.0, 857.0], [57.1, 857.0], [57.2, 857.0], [57.3, 857.0], [57.4, 857.0], [57.5, 857.0], [57.6, 857.0], [57.7, 857.0], [57.8, 857.0], [57.9, 857.0], [58.0, 857.0], [58.1, 857.0], [58.2, 857.0], [58.3, 857.0], [58.4, 857.0], [58.5, 857.0], [58.6, 857.0], [58.7, 857.0], [58.8, 857.0], [58.9, 857.0], [59.0, 863.0], [59.1, 863.0], [59.2, 863.0], [59.3, 863.0], [59.4, 863.0], [59.5, 863.0], [59.6, 863.0], [59.7, 863.0], [59.8, 863.0], [59.9, 863.0], [60.0, 869.0], [60.1, 869.0], [60.2, 869.0], [60.3, 869.0], [60.4, 869.0], [60.5, 869.0], [60.6, 869.0], [60.7, 869.0], [60.8, 869.0], [60.9, 869.0], [61.0, 876.0], [61.1, 876.0], [61.2, 876.0], [61.3, 876.0], [61.4, 876.0], [61.5, 876.0], [61.6, 876.0], [61.7, 876.0], [61.8, 876.0], [61.9, 876.0], [62.0, 882.0], [62.1, 882.0], [62.2, 882.0], [62.3, 882.0], [62.4, 882.0], [62.5, 882.0], [62.6, 882.0], [62.7, 882.0], [62.8, 882.0], [62.9, 882.0], [63.0, 885.0], [63.1, 885.0], [63.2, 885.0], [63.3, 885.0], [63.4, 885.0], [63.5, 885.0], [63.6, 885.0], [63.7, 885.0], [63.8, 885.0], [63.9, 885.0], [64.0, 887.0], [64.1, 887.0], [64.2, 887.0], [64.3, 887.0], [64.4, 887.0], [64.5, 887.0], [64.6, 887.0], [64.7, 887.0], [64.8, 887.0], [64.9, 887.0], [65.0, 890.0], [65.1, 890.0], [65.2, 890.0], [65.3, 890.0], [65.4, 890.0], [65.5, 890.0], [65.6, 890.0], [65.7, 890.0], [65.8, 890.0], [65.9, 890.0], [66.0, 891.0], [66.1, 891.0], [66.2, 891.0], [66.3, 891.0], [66.4, 891.0], [66.5, 891.0], [66.6, 891.0], [66.7, 891.0], [66.8, 891.0], [66.9, 891.0], [67.0, 894.0], [67.1, 894.0], [67.2, 894.0], [67.3, 894.0], [67.4, 894.0], [67.5, 894.0], [67.6, 894.0], [67.7, 894.0], [67.8, 894.0], [67.9, 894.0], [68.0, 897.0], [68.1, 897.0], [68.2, 897.0], [68.3, 897.0], [68.4, 897.0], [68.5, 897.0], [68.6, 897.0], [68.7, 897.0], [68.8, 897.0], [68.9, 897.0], [69.0, 901.0], [69.1, 901.0], [69.2, 901.0], [69.3, 901.0], [69.4, 901.0], [69.5, 901.0], [69.6, 901.0], [69.7, 901.0], [69.8, 901.0], [69.9, 901.0], [70.0, 902.0], [70.1, 902.0], [70.2, 902.0], [70.3, 902.0], [70.4, 902.0], [70.5, 902.0], [70.6, 902.0], [70.7, 902.0], [70.8, 902.0], [70.9, 902.0], [71.0, 907.0], [71.1, 907.0], [71.2, 907.0], [71.3, 907.0], [71.4, 907.0], [71.5, 907.0], [71.6, 907.0], [71.7, 907.0], [71.8, 907.0], [71.9, 907.0], [72.0, 910.0], [72.1, 910.0], [72.2, 910.0], [72.3, 910.0], [72.4, 910.0], [72.5, 910.0], [72.6, 910.0], [72.7, 910.0], [72.8, 910.0], [72.9, 910.0], [73.0, 922.0], [73.1, 922.0], [73.2, 922.0], [73.3, 922.0], [73.4, 922.0], [73.5, 922.0], [73.6, 922.0], [73.7, 922.0], [73.8, 922.0], [73.9, 922.0], [74.0, 932.0], [74.1, 932.0], [74.2, 932.0], [74.3, 932.0], [74.4, 932.0], [74.5, 932.0], [74.6, 932.0], [74.7, 932.0], [74.8, 932.0], [74.9, 932.0], [75.0, 932.0], [75.1, 932.0], [75.2, 932.0], [75.3, 932.0], [75.4, 932.0], [75.5, 932.0], [75.6, 932.0], [75.7, 932.0], [75.8, 932.0], [75.9, 932.0], [76.0, 935.0], [76.1, 935.0], [76.2, 935.0], [76.3, 935.0], [76.4, 935.0], [76.5, 935.0], [76.6, 935.0], [76.7, 935.0], [76.8, 935.0], [76.9, 935.0], [77.0, 936.0], [77.1, 936.0], [77.2, 936.0], [77.3, 936.0], [77.4, 936.0], [77.5, 936.0], [77.6, 936.0], [77.7, 936.0], [77.8, 936.0], [77.9, 936.0], [78.0, 944.0], [78.1, 944.0], [78.2, 944.0], [78.3, 944.0], [78.4, 944.0], [78.5, 944.0], [78.6, 944.0], [78.7, 944.0], [78.8, 944.0], [78.9, 944.0], [79.0, 948.0], [79.1, 948.0], [79.2, 948.0], [79.3, 948.0], [79.4, 948.0], [79.5, 948.0], [79.6, 948.0], [79.7, 948.0], [79.8, 948.0], [79.9, 948.0], [80.0, 958.0], [80.1, 958.0], [80.2, 958.0], [80.3, 958.0], [80.4, 958.0], [80.5, 958.0], [80.6, 958.0], [80.7, 958.0], [80.8, 958.0], [80.9, 958.0], [81.0, 960.0], [81.1, 960.0], [81.2, 960.0], [81.3, 960.0], [81.4, 960.0], [81.5, 960.0], [81.6, 960.0], [81.7, 960.0], [81.8, 960.0], [81.9, 960.0], [82.0, 962.0], [82.1, 962.0], [82.2, 962.0], [82.3, 962.0], [82.4, 962.0], [82.5, 962.0], [82.6, 962.0], [82.7, 962.0], [82.8, 962.0], [82.9, 962.0], [83.0, 974.0], [83.1, 974.0], [83.2, 974.0], [83.3, 974.0], [83.4, 974.0], [83.5, 974.0], [83.6, 974.0], [83.7, 974.0], [83.8, 974.0], [83.9, 974.0], [84.0, 974.0], [84.1, 974.0], [84.2, 974.0], [84.3, 974.0], [84.4, 974.0], [84.5, 974.0], [84.6, 974.0], [84.7, 974.0], [84.8, 974.0], [84.9, 974.0], [85.0, 985.0], [85.1, 985.0], [85.2, 985.0], [85.3, 985.0], [85.4, 985.0], [85.5, 985.0], [85.6, 985.0], [85.7, 985.0], [85.8, 985.0], [85.9, 985.0], [86.0, 988.0], [86.1, 988.0], [86.2, 988.0], [86.3, 988.0], [86.4, 988.0], [86.5, 988.0], [86.6, 988.0], [86.7, 988.0], [86.8, 988.0], [86.9, 988.0], [87.0, 994.0], [87.1, 994.0], [87.2, 994.0], [87.3, 994.0], [87.4, 994.0], [87.5, 994.0], [87.6, 994.0], [87.7, 994.0], [87.8, 994.0], [87.9, 994.0], [88.0, 1001.0], [88.1, 1001.0], [88.2, 1001.0], [88.3, 1001.0], [88.4, 1001.0], [88.5, 1001.0], [88.6, 1001.0], [88.7, 1001.0], [88.8, 1001.0], [88.9, 1001.0], [89.0, 1004.0], [89.1, 1004.0], [89.2, 1004.0], [89.3, 1004.0], [89.4, 1004.0], [89.5, 1004.0], [89.6, 1004.0], [89.7, 1004.0], [89.8, 1004.0], [89.9, 1004.0], [90.0, 1006.0], [90.1, 1006.0], [90.2, 1006.0], [90.3, 1006.0], [90.4, 1006.0], [90.5, 1006.0], [90.6, 1006.0], [90.7, 1006.0], [90.8, 1006.0], [90.9, 1006.0], [91.0, 1011.0], [91.1, 1011.0], [91.2, 1011.0], [91.3, 1011.0], [91.4, 1011.0], [91.5, 1011.0], [91.6, 1011.0], [91.7, 1011.0], [91.8, 1011.0], [91.9, 1011.0], [92.0, 1019.0], [92.1, 1019.0], [92.2, 1019.0], [92.3, 1019.0], [92.4, 1019.0], [92.5, 1019.0], [92.6, 1019.0], [92.7, 1019.0], [92.8, 1019.0], [92.9, 1019.0], [93.0, 1023.0], [93.1, 1023.0], [93.2, 1023.0], [93.3, 1023.0], [93.4, 1023.0], [93.5, 1023.0], [93.6, 1023.0], [93.7, 1023.0], [93.8, 1023.0], [93.9, 1023.0], [94.0, 1030.0], [94.1, 1030.0], [94.2, 1030.0], [94.3, 1030.0], [94.4, 1030.0], [94.5, 1030.0], [94.6, 1030.0], [94.7, 1030.0], [94.8, 1030.0], [94.9, 1030.0], [95.0, 1042.0], [95.1, 1042.0], [95.2, 1042.0], [95.3, 1042.0], [95.4, 1042.0], [95.5, 1042.0], [95.6, 1042.0], [95.7, 1042.0], [95.8, 1042.0], [95.9, 1042.0], [96.0, 1044.0], [96.1, 1044.0], [96.2, 1044.0], [96.3, 1044.0], [96.4, 1044.0], [96.5, 1044.0], [96.6, 1044.0], [96.7, 1044.0], [96.8, 1044.0], [96.9, 1044.0], [97.0, 1045.0], [97.1, 1045.0], [97.2, 1045.0], [97.3, 1045.0], [97.4, 1045.0], [97.5, 1045.0], [97.6, 1045.0], [97.7, 1045.0], [97.8, 1045.0], [97.9, 1045.0], [98.0, 1052.0], [98.1, 1052.0], [98.2, 1052.0], [98.3, 1052.0], [98.4, 1052.0], [98.5, 1052.0], [98.6, 1052.0], [98.7, 1052.0], [98.8, 1052.0], [98.9, 1052.0], [99.0, 1054.0], [99.1, 1054.0], [99.2, 1054.0], [99.3, 1054.0], [99.4, 1054.0], [99.5, 1054.0], [99.6, 1054.0], [99.7, 1054.0], [99.8, 1054.0], [99.9, 1054.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 8103.0], [0.1, 8103.0], [0.2, 8103.0], [0.3, 8103.0], [0.4, 8103.0], [0.5, 8103.0], [0.6, 8103.0], [0.7, 8103.0], [0.8, 8103.0], [0.9, 8103.0], [1.0, 8953.0], [1.1, 8953.0], [1.2, 8953.0], [1.3, 8953.0], [1.4, 8953.0], [1.5, 8953.0], [1.6, 8953.0], [1.7, 8953.0], [1.8, 8953.0], [1.9, 8953.0], [2.0, 9119.0], [2.1, 9119.0], [2.2, 9119.0], [2.3, 9119.0], [2.4, 9119.0], [2.5, 9119.0], [2.6, 9119.0], [2.7, 9119.0], [2.8, 9119.0], [2.9, 9119.0], [3.0, 9375.0], [3.1, 9375.0], [3.2, 9375.0], [3.3, 9375.0], [3.4, 9375.0], [3.5, 9375.0], [3.6, 9375.0], [3.7, 9375.0], [3.8, 9375.0], [3.9, 9375.0], [4.0, 9395.0], [4.1, 9395.0], [4.2, 9395.0], [4.3, 9395.0], [4.4, 9395.0], [4.5, 9395.0], [4.6, 9395.0], [4.7, 9395.0], [4.8, 9395.0], [4.9, 9395.0], [5.0, 9432.0], [5.1, 9432.0], [5.2, 9432.0], [5.3, 9432.0], [5.4, 9432.0], [5.5, 9432.0], [5.6, 9432.0], [5.7, 9432.0], [5.8, 9432.0], [5.9, 9432.0], [6.0, 9524.0], [6.1, 9524.0], [6.2, 9524.0], [6.3, 9524.0], [6.4, 9524.0], [6.5, 9524.0], [6.6, 9524.0], [6.7, 9524.0], [6.8, 9524.0], [6.9, 9524.0], [7.0, 9736.0], [7.1, 9736.0], [7.2, 9736.0], [7.3, 9736.0], [7.4, 9736.0], [7.5, 9736.0], [7.6, 9736.0], [7.7, 9736.0], [7.8, 9736.0], [7.9, 9736.0], [8.0, 9889.0], [8.1, 9889.0], [8.2, 9889.0], [8.3, 9889.0], [8.4, 9889.0], [8.5, 9889.0], [8.6, 9889.0], [8.7, 9889.0], [8.8, 9889.0], [8.9, 9889.0], [9.0, 10246.0], [9.1, 10246.0], [9.2, 10246.0], [9.3, 10246.0], [9.4, 10246.0], [9.5, 10246.0], [9.6, 10246.0], [9.7, 10246.0], [9.8, 10246.0], [9.9, 10246.0], [10.0, 13874.0], [10.1, 13874.0], [10.2, 13874.0], [10.3, 13874.0], [10.4, 13874.0], [10.5, 13874.0], [10.6, 13874.0], [10.7, 13874.0], [10.8, 13874.0], [10.9, 13874.0], [11.0, 16929.0], [11.1, 16929.0], [11.2, 16929.0], [11.3, 16929.0], [11.4, 16929.0], [11.5, 16929.0], [11.6, 16929.0], [11.7, 16929.0], [11.8, 16929.0], [11.9, 16929.0], [12.0, 16946.0], [12.1, 16946.0], [12.2, 16946.0], [12.3, 16946.0], [12.4, 16946.0], [12.5, 16946.0], [12.6, 16946.0], [12.7, 16946.0], [12.8, 16946.0], [12.9, 16946.0], [13.0, 16947.0], [13.1, 16947.0], [13.2, 16947.0], [13.3, 16947.0], [13.4, 16947.0], [13.5, 16947.0], [13.6, 16947.0], [13.7, 16947.0], [13.8, 16947.0], [13.9, 16947.0], [14.0, 16996.0], [14.1, 16996.0], [14.2, 16996.0], [14.3, 16996.0], [14.4, 16996.0], [14.5, 16996.0], [14.6, 16996.0], [14.7, 16996.0], [14.8, 16996.0], [14.9, 16996.0], [15.0, 17096.0], [15.1, 17096.0], [15.2, 17096.0], [15.3, 17096.0], [15.4, 17096.0], [15.5, 17096.0], [15.6, 17096.0], [15.7, 17096.0], [15.8, 17096.0], [15.9, 17096.0], [16.0, 17397.0], [16.1, 17397.0], [16.2, 17397.0], [16.3, 17397.0], [16.4, 17397.0], [16.5, 17397.0], [16.6, 17397.0], [16.7, 17397.0], [16.8, 17397.0], [16.9, 17397.0], [17.0, 17480.0], [17.1, 17480.0], [17.2, 17480.0], [17.3, 17480.0], [17.4, 17480.0], [17.5, 17480.0], [17.6, 17480.0], [17.7, 17480.0], [17.8, 17480.0], [17.9, 17480.0], [18.0, 17779.0], [18.1, 17779.0], [18.2, 17779.0], [18.3, 17779.0], [18.4, 17779.0], [18.5, 17779.0], [18.6, 17779.0], [18.7, 17779.0], [18.8, 17779.0], [18.9, 17779.0], [19.0, 18257.0], [19.1, 18257.0], [19.2, 18257.0], [19.3, 18257.0], [19.4, 18257.0], [19.5, 18257.0], [19.6, 18257.0], [19.7, 18257.0], [19.8, 18257.0], [19.9, 18257.0], [20.0, 20794.0], [20.1, 20794.0], [20.2, 20794.0], [20.3, 20794.0], [20.4, 20794.0], [20.5, 20794.0], [20.6, 20794.0], [20.7, 20794.0], [20.8, 20794.0], [20.9, 20794.0], [21.0, 23465.0], [21.1, 23465.0], [21.2, 23465.0], [21.3, 23465.0], [21.4, 23465.0], [21.5, 23465.0], [21.6, 23465.0], [21.7, 23465.0], [21.8, 23465.0], [21.9, 23465.0], [22.0, 23750.0], [22.1, 23750.0], [22.2, 23750.0], [22.3, 23750.0], [22.4, 23750.0], [22.5, 23750.0], [22.6, 23750.0], [22.7, 23750.0], [22.8, 23750.0], [22.9, 23750.0], [23.0, 24326.0], [23.1, 24326.0], [23.2, 24326.0], [23.3, 24326.0], [23.4, 24326.0], [23.5, 24326.0], [23.6, 24326.0], [23.7, 24326.0], [23.8, 24326.0], [23.9, 24326.0], [24.0, 24337.0], [24.1, 24337.0], [24.2, 24337.0], [24.3, 24337.0], [24.4, 24337.0], [24.5, 24337.0], [24.6, 24337.0], [24.7, 24337.0], [24.8, 24337.0], [24.9, 24337.0], [25.0, 24577.0], [25.1, 24577.0], [25.2, 24577.0], [25.3, 24577.0], [25.4, 24577.0], [25.5, 24577.0], [25.6, 24577.0], [25.7, 24577.0], [25.8, 24577.0], [25.9, 24577.0], [26.0, 24584.0], [26.1, 24584.0], [26.2, 24584.0], [26.3, 24584.0], [26.4, 24584.0], [26.5, 24584.0], [26.6, 24584.0], [26.7, 24584.0], [26.8, 24584.0], [26.9, 24584.0], [27.0, 25039.0], [27.1, 25039.0], [27.2, 25039.0], [27.3, 25039.0], [27.4, 25039.0], [27.5, 25039.0], [27.6, 25039.0], [27.7, 25039.0], [27.8, 25039.0], [27.9, 25039.0], [28.0, 25283.0], [28.1, 25283.0], [28.2, 25283.0], [28.3, 25283.0], [28.4, 25283.0], [28.5, 25283.0], [28.6, 25283.0], [28.7, 25283.0], [28.8, 25283.0], [28.9, 25283.0], [29.0, 27536.0], [29.1, 27536.0], [29.2, 27536.0], [29.3, 27536.0], [29.4, 27536.0], [29.5, 27536.0], [29.6, 27536.0], [29.7, 27536.0], [29.8, 27536.0], [29.9, 27536.0], [30.0, 28163.0], [30.1, 28163.0], [30.2, 28163.0], [30.3, 28163.0], [30.4, 28163.0], [30.5, 28163.0], [30.6, 28163.0], [30.7, 28163.0], [30.8, 28163.0], [30.9, 28163.0], [31.0, 30691.0], [31.1, 30691.0], [31.2, 30691.0], [31.3, 30691.0], [31.4, 30691.0], [31.5, 30691.0], [31.6, 30691.0], [31.7, 30691.0], [31.8, 30691.0], [31.9, 30691.0], [32.0, 31216.0], [32.1, 31216.0], [32.2, 31216.0], [32.3, 31216.0], [32.4, 31216.0], [32.5, 31216.0], [32.6, 31216.0], [32.7, 31216.0], [32.8, 31216.0], [32.9, 31216.0], [33.0, 31954.0], [33.1, 31954.0], [33.2, 31954.0], [33.3, 31954.0], [33.4, 31954.0], [33.5, 31954.0], [33.6, 31954.0], [33.7, 31954.0], [33.8, 31954.0], [33.9, 31954.0], [34.0, 32214.0], [34.1, 32214.0], [34.2, 32214.0], [34.3, 32214.0], [34.4, 32214.0], [34.5, 32214.0], [34.6, 32214.0], [34.7, 32214.0], [34.8, 32214.0], [34.9, 32214.0], [35.0, 32396.0], [35.1, 32396.0], [35.2, 32396.0], [35.3, 32396.0], [35.4, 32396.0], [35.5, 32396.0], [35.6, 32396.0], [35.7, 32396.0], [35.8, 32396.0], [35.9, 32396.0], [36.0, 32429.0], [36.1, 32429.0], [36.2, 32429.0], [36.3, 32429.0], [36.4, 32429.0], [36.5, 32429.0], [36.6, 32429.0], [36.7, 32429.0], [36.8, 32429.0], [36.9, 32429.0], [37.0, 32815.0], [37.1, 32815.0], [37.2, 32815.0], [37.3, 32815.0], [37.4, 32815.0], [37.5, 32815.0], [37.6, 32815.0], [37.7, 32815.0], [37.8, 32815.0], [37.9, 32815.0], [38.0, 33373.0], [38.1, 33373.0], [38.2, 33373.0], [38.3, 33373.0], [38.4, 33373.0], [38.5, 33373.0], [38.6, 33373.0], [38.7, 33373.0], [38.8, 33373.0], [38.9, 33373.0], [39.0, 35078.0], [39.1, 35078.0], [39.2, 35078.0], [39.3, 35078.0], [39.4, 35078.0], [39.5, 35078.0], [39.6, 35078.0], [39.7, 35078.0], [39.8, 35078.0], [39.9, 35078.0], [40.0, 35141.0], [40.1, 35141.0], [40.2, 35141.0], [40.3, 35141.0], [40.4, 35141.0], [40.5, 35141.0], [40.6, 35141.0], [40.7, 35141.0], [40.8, 35141.0], [40.9, 35141.0], [41.0, 37802.0], [41.1, 37802.0], [41.2, 37802.0], [41.3, 37802.0], [41.4, 37802.0], [41.5, 37802.0], [41.6, 37802.0], [41.7, 37802.0], [41.8, 37802.0], [41.9, 37802.0], [42.0, 38461.0], [42.1, 38461.0], [42.2, 38461.0], [42.3, 38461.0], [42.4, 38461.0], [42.5, 38461.0], [42.6, 38461.0], [42.7, 38461.0], [42.8, 38461.0], [42.9, 38461.0], [43.0, 39782.0], [43.1, 39782.0], [43.2, 39782.0], [43.3, 39782.0], [43.4, 39782.0], [43.5, 39782.0], [43.6, 39782.0], [43.7, 39782.0], [43.8, 39782.0], [43.9, 39782.0], [44.0, 39889.0], [44.1, 39889.0], [44.2, 39889.0], [44.3, 39889.0], [44.4, 39889.0], [44.5, 39889.0], [44.6, 39889.0], [44.7, 39889.0], [44.8, 39889.0], [44.9, 39889.0], [45.0, 39922.0], [45.1, 39922.0], [45.2, 39922.0], [45.3, 39922.0], [45.4, 39922.0], [45.5, 39922.0], [45.6, 39922.0], [45.7, 39922.0], [45.8, 39922.0], [45.9, 39922.0], [46.0, 40756.0], [46.1, 40756.0], [46.2, 40756.0], [46.3, 40756.0], [46.4, 40756.0], [46.5, 40756.0], [46.6, 40756.0], [46.7, 40756.0], [46.8, 40756.0], [46.9, 40756.0], [47.0, 40931.0], [47.1, 40931.0], [47.2, 40931.0], [47.3, 40931.0], [47.4, 40931.0], [47.5, 40931.0], [47.6, 40931.0], [47.7, 40931.0], [47.8, 40931.0], [47.9, 40931.0], [48.0, 41165.0], [48.1, 41165.0], [48.2, 41165.0], [48.3, 41165.0], [48.4, 41165.0], [48.5, 41165.0], [48.6, 41165.0], [48.7, 41165.0], [48.8, 41165.0], [48.9, 41165.0], [49.0, 41293.0], [49.1, 41293.0], [49.2, 41293.0], [49.3, 41293.0], [49.4, 41293.0], [49.5, 41293.0], [49.6, 41293.0], [49.7, 41293.0], [49.8, 41293.0], [49.9, 41293.0], [50.0, 43045.0], [50.1, 43045.0], [50.2, 43045.0], [50.3, 43045.0], [50.4, 43045.0], [50.5, 43045.0], [50.6, 43045.0], [50.7, 43045.0], [50.8, 43045.0], [50.9, 43045.0], [51.0, 43371.0], [51.1, 43371.0], [51.2, 43371.0], [51.3, 43371.0], [51.4, 43371.0], [51.5, 43371.0], [51.6, 43371.0], [51.7, 43371.0], [51.8, 43371.0], [51.9, 43371.0], [52.0, 43460.0], [52.1, 43460.0], [52.2, 43460.0], [52.3, 43460.0], [52.4, 43460.0], [52.5, 43460.0], [52.6, 43460.0], [52.7, 43460.0], [52.8, 43460.0], [52.9, 43460.0], [53.0, 44848.0], [53.1, 44848.0], [53.2, 44848.0], [53.3, 44848.0], [53.4, 44848.0], [53.5, 44848.0], [53.6, 44848.0], [53.7, 44848.0], [53.8, 44848.0], [53.9, 44848.0], [54.0, 45033.0], [54.1, 45033.0], [54.2, 45033.0], [54.3, 45033.0], [54.4, 45033.0], [54.5, 45033.0], [54.6, 45033.0], [54.7, 45033.0], [54.8, 45033.0], [54.9, 45033.0], [55.0, 45289.0], [55.1, 45289.0], [55.2, 45289.0], [55.3, 45289.0], [55.4, 45289.0], [55.5, 45289.0], [55.6, 45289.0], [55.7, 45289.0], [55.8, 45289.0], [55.9, 45289.0], [56.0, 46120.0], [56.1, 46120.0], [56.2, 46120.0], [56.3, 46120.0], [56.4, 46120.0], [56.5, 46120.0], [56.6, 46120.0], [56.7, 46120.0], [56.8, 46120.0], [56.9, 46120.0], [57.0, 46289.0], [57.1, 46289.0], [57.2, 46289.0], [57.3, 46289.0], [57.4, 46289.0], [57.5, 46289.0], [57.6, 46289.0], [57.7, 46289.0], [57.8, 46289.0], [57.9, 46289.0], [58.0, 46642.0], [58.1, 46642.0], [58.2, 46642.0], [58.3, 46642.0], [58.4, 46642.0], [58.5, 46642.0], [58.6, 46642.0], [58.7, 46642.0], [58.8, 46642.0], [58.9, 46642.0], [59.0, 48087.0], [59.1, 48087.0], [59.2, 48087.0], [59.3, 48087.0], [59.4, 48087.0], [59.5, 48087.0], [59.6, 48087.0], [59.7, 48087.0], [59.8, 48087.0], [59.9, 48087.0], [60.0, 48897.0], [60.1, 48897.0], [60.2, 48897.0], [60.3, 48897.0], [60.4, 48897.0], [60.5, 48897.0], [60.6, 48897.0], [60.7, 48897.0], [60.8, 48897.0], [60.9, 48897.0], [61.0, 49435.0], [61.1, 49435.0], [61.2, 49435.0], [61.3, 49435.0], [61.4, 49435.0], [61.5, 49435.0], [61.6, 49435.0], [61.7, 49435.0], [61.8, 49435.0], [61.9, 49435.0], [62.0, 49874.0], [62.1, 49874.0], [62.2, 49874.0], [62.3, 49874.0], [62.4, 49874.0], [62.5, 49874.0], [62.6, 49874.0], [62.7, 49874.0], [62.8, 49874.0], [62.9, 49874.0], [63.0, 51253.0], [63.1, 51253.0], [63.2, 51253.0], [63.3, 51253.0], [63.4, 51253.0], [63.5, 51253.0], [63.6, 51253.0], [63.7, 51253.0], [63.8, 51253.0], [63.9, 51253.0], [64.0, 51313.0], [64.1, 51313.0], [64.2, 51313.0], [64.3, 51313.0], [64.4, 51313.0], [64.5, 51313.0], [64.6, 51313.0], [64.7, 51313.0], [64.8, 51313.0], [64.9, 51313.0], [65.0, 51859.0], [65.1, 51859.0], [65.2, 51859.0], [65.3, 51859.0], [65.4, 51859.0], [65.5, 51859.0], [65.6, 51859.0], [65.7, 51859.0], [65.8, 51859.0], [65.9, 51859.0], [66.0, 52035.0], [66.1, 52035.0], [66.2, 52035.0], [66.3, 52035.0], [66.4, 52035.0], [66.5, 52035.0], [66.6, 52035.0], [66.7, 52035.0], [66.8, 52035.0], [66.9, 52035.0], [67.0, 52666.0], [67.1, 52666.0], [67.2, 52666.0], [67.3, 52666.0], [67.4, 52666.0], [67.5, 52666.0], [67.6, 52666.0], [67.7, 52666.0], [67.8, 52666.0], [67.9, 52666.0], [68.0, 53134.0], [68.1, 53134.0], [68.2, 53134.0], [68.3, 53134.0], [68.4, 53134.0], [68.5, 53134.0], [68.6, 53134.0], [68.7, 53134.0], [68.8, 53134.0], [68.9, 53134.0], [69.0, 53388.0], [69.1, 53388.0], [69.2, 53388.0], [69.3, 53388.0], [69.4, 53388.0], [69.5, 53388.0], [69.6, 53388.0], [69.7, 53388.0], [69.8, 53388.0], [69.9, 53388.0], [70.0, 55276.0], [70.1, 55276.0], [70.2, 55276.0], [70.3, 55276.0], [70.4, 55276.0], [70.5, 55276.0], [70.6, 55276.0], [70.7, 55276.0], [70.8, 55276.0], [70.9, 55276.0], [71.0, 55442.0], [71.1, 55442.0], [71.2, 55442.0], [71.3, 55442.0], [71.4, 55442.0], [71.5, 55442.0], [71.6, 55442.0], [71.7, 55442.0], [71.8, 55442.0], [71.9, 55442.0], [72.0, 56544.0], [72.1, 56544.0], [72.2, 56544.0], [72.3, 56544.0], [72.4, 56544.0], [72.5, 56544.0], [72.6, 56544.0], [72.7, 56544.0], [72.8, 56544.0], [72.9, 56544.0], [73.0, 57781.0], [73.1, 57781.0], [73.2, 57781.0], [73.3, 57781.0], [73.4, 57781.0], [73.5, 57781.0], [73.6, 57781.0], [73.7, 57781.0], [73.8, 57781.0], [73.9, 57781.0], [74.0, 58695.0], [74.1, 58695.0], [74.2, 58695.0], [74.3, 58695.0], [74.4, 58695.0], [74.5, 58695.0], [74.6, 58695.0], [74.7, 58695.0], [74.8, 58695.0], [74.9, 58695.0], [75.0, 58709.0], [75.1, 58709.0], [75.2, 58709.0], [75.3, 58709.0], [75.4, 58709.0], [75.5, 58709.0], [75.6, 58709.0], [75.7, 58709.0], [75.8, 58709.0], [75.9, 58709.0], [76.0, 59031.0], [76.1, 59031.0], [76.2, 59031.0], [76.3, 59031.0], [76.4, 59031.0], [76.5, 59031.0], [76.6, 59031.0], [76.7, 59031.0], [76.8, 59031.0], [76.9, 59031.0], [77.0, 59158.0], [77.1, 59158.0], [77.2, 59158.0], [77.3, 59158.0], [77.4, 59158.0], [77.5, 59158.0], [77.6, 59158.0], [77.7, 59158.0], [77.8, 59158.0], [77.9, 59158.0], [78.0, 59686.0], [78.1, 59686.0], [78.2, 59686.0], [78.3, 59686.0], [78.4, 59686.0], [78.5, 59686.0], [78.6, 59686.0], [78.7, 59686.0], [78.8, 59686.0], [78.9, 59686.0], [79.0, 59780.0], [79.1, 59780.0], [79.2, 59780.0], [79.3, 59780.0], [79.4, 59780.0], [79.5, 59780.0], [79.6, 59780.0], [79.7, 59780.0], [79.8, 59780.0], [79.9, 59780.0], [80.0, 61445.0], [80.1, 61445.0], [80.2, 61445.0], [80.3, 61445.0], [80.4, 61445.0], [80.5, 61445.0], [80.6, 61445.0], [80.7, 61445.0], [80.8, 61445.0], [80.9, 61445.0], [81.0, 61655.0], [81.1, 61655.0], [81.2, 61655.0], [81.3, 61655.0], [81.4, 61655.0], [81.5, 61655.0], [81.6, 61655.0], [81.7, 61655.0], [81.8, 61655.0], [81.9, 61655.0], [82.0, 62355.0], [82.1, 62355.0], [82.2, 62355.0], [82.3, 62355.0], [82.4, 62355.0], [82.5, 62355.0], [82.6, 62355.0], [82.7, 62355.0], [82.8, 62355.0], [82.9, 62355.0], [83.0, 64049.0], [83.1, 64049.0], [83.2, 64049.0], [83.3, 64049.0], [83.4, 64049.0], [83.5, 64049.0], [83.6, 64049.0], [83.7, 64049.0], [83.8, 64049.0], [83.9, 64049.0], [84.0, 64704.0], [84.1, 64704.0], [84.2, 64704.0], [84.3, 64704.0], [84.4, 64704.0], [84.5, 64704.0], [84.6, 64704.0], [84.7, 64704.0], [84.8, 64704.0], [84.9, 64704.0], [85.0, 64957.0], [85.1, 64957.0], [85.2, 64957.0], [85.3, 64957.0], [85.4, 64957.0], [85.5, 64957.0], [85.6, 64957.0], [85.7, 64957.0], [85.8, 64957.0], [85.9, 64957.0], [86.0, 65272.0], [86.1, 65272.0], [86.2, 65272.0], [86.3, 65272.0], [86.4, 65272.0], [86.5, 65272.0], [86.6, 65272.0], [86.7, 65272.0], [86.8, 65272.0], [86.9, 65272.0], [87.0, 65316.0], [87.1, 65316.0], [87.2, 65316.0], [87.3, 65316.0], [87.4, 65316.0], [87.5, 65316.0], [87.6, 65316.0], [87.7, 65316.0], [87.8, 65316.0], [87.9, 65316.0], [88.0, 65614.0], [88.1, 65614.0], [88.2, 65614.0], [88.3, 65614.0], [88.4, 65614.0], [88.5, 65614.0], [88.6, 65614.0], [88.7, 65614.0], [88.8, 65614.0], [88.9, 65614.0], [89.0, 65775.0], [89.1, 65775.0], [89.2, 65775.0], [89.3, 65775.0], [89.4, 65775.0], [89.5, 65775.0], [89.6, 65775.0], [89.7, 65775.0], [89.8, 65775.0], [89.9, 65775.0], [90.0, 66442.0], [90.1, 66442.0], [90.2, 66442.0], [90.3, 66442.0], [90.4, 66442.0], [90.5, 66442.0], [90.6, 66442.0], [90.7, 66442.0], [90.8, 66442.0], [90.9, 66442.0], [91.0, 66581.0], [91.1, 66581.0], [91.2, 66581.0], [91.3, 66581.0], [91.4, 66581.0], [91.5, 66581.0], [91.6, 66581.0], [91.7, 66581.0], [91.8, 66581.0], [91.9, 66581.0], [92.0, 67923.0], [92.1, 67923.0], [92.2, 67923.0], [92.3, 67923.0], [92.4, 67923.0], [92.5, 67923.0], [92.6, 67923.0], [92.7, 67923.0], [92.8, 67923.0], [92.9, 67923.0], [93.0, 68779.0], [93.1, 68779.0], [93.2, 68779.0], [93.3, 68779.0], [93.4, 68779.0], [93.5, 68779.0], [93.6, 68779.0], [93.7, 68779.0], [93.8, 68779.0], [93.9, 68779.0], [94.0, 69258.0], [94.1, 69258.0], [94.2, 69258.0], [94.3, 69258.0], [94.4, 69258.0], [94.5, 69258.0], [94.6, 69258.0], [94.7, 69258.0], [94.8, 69258.0], [94.9, 69258.0], [95.0, 69323.0], [95.1, 69323.0], [95.2, 69323.0], [95.3, 69323.0], [95.4, 69323.0], [95.5, 69323.0], [95.6, 69323.0], [95.7, 69323.0], [95.8, 69323.0], [95.9, 69323.0], [96.0, 69429.0], [96.1, 69429.0], [96.2, 69429.0], [96.3, 69429.0], [96.4, 69429.0], [96.5, 69429.0], [96.6, 69429.0], [96.7, 69429.0], [96.8, 69429.0], [96.9, 69429.0], [97.0, 69475.0], [97.1, 69475.0], [97.2, 69475.0], [97.3, 69475.0], [97.4, 69475.0], [97.5, 69475.0], [97.6, 69475.0], [97.7, 69475.0], [97.8, 69475.0], [97.9, 69475.0], [98.0, 69477.0], [98.1, 69477.0], [98.2, 69477.0], [98.3, 69477.0], [98.4, 69477.0], [98.5, 69477.0], [98.6, 69477.0], [98.7, 69477.0], [98.8, 69477.0], [98.9, 69477.0], [99.0, 69483.0], [99.1, 69483.0], [99.2, 69483.0], [99.3, 69483.0], [99.4, 69483.0], [99.5, 69483.0], [99.6, 69483.0], [99.7, 69483.0], [99.8, 69483.0], [99.9, 69483.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 23.0, "series": [{"data": [[4300.0, 1.0], [6000.0, 1.0], [6500.0, 1.0], [6400.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7400.0, 2.0], [9600.0, 1.0], [12100.0, 1.0], [12300.0, 1.0], [12400.0, 2.0], [12700.0, 1.0], [12800.0, 1.0], [13000.0, 1.0], [13300.0, 1.0], [13700.0, 1.0], [14700.0, 1.0], [17000.0, 1.0], [17200.0, 2.0], [18600.0, 1.0], [18900.0, 1.0], [19200.0, 1.0], [19400.0, 2.0], [19800.0, 1.0], [20700.0, 1.0], [23700.0, 1.0], [24300.0, 1.0], [25200.0, 1.0], [25500.0, 1.0], [25800.0, 1.0], [26200.0, 1.0], [26400.0, 1.0], [26500.0, 2.0], [27700.0, 1.0], [29100.0, 1.0], [29400.0, 1.0], [30200.0, 1.0], [30700.0, 1.0], [30900.0, 1.0], [31300.0, 1.0], [31500.0, 2.0], [31900.0, 1.0], [33100.0, 1.0], [34500.0, 1.0], [34700.0, 1.0], [36800.0, 1.0], [37500.0, 1.0], [37600.0, 1.0], [38100.0, 1.0], [38200.0, 1.0], [38700.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [41000.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [43300.0, 1.0], [44400.0, 1.0], [45000.0, 1.0], [45400.0, 1.0], [45600.0, 1.0], [46000.0, 1.0], [46500.0, 1.0], [46900.0, 1.0], [47200.0, 1.0], [48800.0, 1.0], [48900.0, 1.0], [50400.0, 1.0], [51000.0, 1.0], [52000.0, 1.0], [52100.0, 1.0], [52400.0, 1.0], [53000.0, 1.0], [53100.0, 1.0], [53200.0, 1.0], [54100.0, 2.0], [56000.0, 1.0], [57100.0, 1.0], [58200.0, 1.0], [58500.0, 1.0], [58900.0, 2.0], [59100.0, 1.0], [59300.0, 1.0], [59600.0, 1.0], [59900.0, 1.0], [60500.0, 1.0], [60900.0, 1.0], [61200.0, 1.0], [61100.0, 2.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[600.0, 18.0], [700.0, 12.0], [400.0, 4.0], [800.0, 23.0], [900.0, 19.0], [500.0, 12.0], [1000.0, 12.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[65700.0, 1.0], [66500.0, 1.0], [67900.0, 1.0], [68700.0, 1.0], [69300.0, 1.0], [8100.0, 1.0], [8900.0, 1.0], [9100.0, 1.0], [9300.0, 2.0], [9400.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9800.0, 1.0], [10200.0, 1.0], [13800.0, 1.0], [16900.0, 4.0], [17000.0, 1.0], [17300.0, 1.0], [17400.0, 1.0], [17700.0, 1.0], [18200.0, 1.0], [20700.0, 1.0], [23400.0, 1.0], [23700.0, 1.0], [24300.0, 2.0], [24500.0, 2.0], [25000.0, 1.0], [25200.0, 1.0], [27500.0, 1.0], [28100.0, 1.0], [30600.0, 1.0], [31200.0, 1.0], [31900.0, 1.0], [32200.0, 1.0], [32300.0, 1.0], [32400.0, 1.0], [32800.0, 1.0], [33300.0, 1.0], [35000.0, 1.0], [35100.0, 1.0], [37800.0, 1.0], [38400.0, 1.0], [39700.0, 1.0], [39800.0, 1.0], [39900.0, 1.0], [40700.0, 1.0], [40900.0, 1.0], [41100.0, 1.0], [41200.0, 1.0], [43000.0, 1.0], [43300.0, 1.0], [43400.0, 1.0], [44800.0, 1.0], [45000.0, 1.0], [45200.0, 1.0], [46100.0, 1.0], [46200.0, 1.0], [46600.0, 1.0], [48000.0, 1.0], [48800.0, 1.0], [49400.0, 1.0], [49800.0, 1.0], [51200.0, 1.0], [51300.0, 1.0], [51800.0, 1.0], [52000.0, 1.0], [52600.0, 1.0], [53100.0, 1.0], [53300.0, 1.0], [55200.0, 1.0], [55400.0, 1.0], [56500.0, 1.0], [57700.0, 1.0], [58600.0, 1.0], [58700.0, 1.0], [59000.0, 1.0], [59100.0, 1.0], [59600.0, 1.0], [59700.0, 1.0], [61400.0, 1.0], [61600.0, 1.0], [62300.0, 1.0], [64000.0, 1.0], [64700.0, 1.0], [64900.0, 1.0], [65200.0, 1.0], [65300.0, 1.0], [65600.0, 1.0], [66400.0, 1.0], [69200.0, 1.0], [69400.0, 4.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 69400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 200.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 200.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 100.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 29.017543859649123, "minX": 1.66885746E12, "maxY": 79.0, "series": [{"data": [[1.66885746E12, 79.0], [1.66885752E12, 29.035087719298247]], "isOverall": false, "label": "client-to-application", "isController": false}, {"data": [[1.66885752E12, 79.0], [1.66885758E12, 29.017543859649123]], "isOverall": false, "label": "client-to-gateway-non-caching", "isController": false}, {"data": [[1.66885758E12, 50.5]], "isOverall": false, "label": "client-to-gateway-caching", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66885758E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 454.0, "minX": 1.0, "maxY": 69483.0, "series": [{"data": [[2.0, 61140.0], [3.0, 61205.0], [4.0, 60947.0], [5.0, 60582.0], [6.0, 59933.0], [7.0, 59648.0], [8.0, 59349.0], [9.0, 59159.0], [10.0, 58975.0], [11.0, 58906.0], [12.0, 58596.0], [13.0, 58249.0], [14.0, 57150.0], [15.0, 56035.0], [16.0, 54145.0], [17.0, 54121.0], [18.0, 53241.0], [19.0, 53108.0], [20.0, 53063.0], [21.0, 52439.0], [22.0, 52157.0], [23.0, 52070.0], [24.0, 51060.0], [25.0, 50430.0], [26.0, 48977.0], [27.0, 48849.0], [28.0, 47292.0], [29.0, 46970.0], [30.0, 46537.0], [31.0, 46097.0], [33.0, 45482.0], [32.0, 45698.0], [35.0, 44439.0], [34.0, 45051.0], [37.0, 42918.0], [36.0, 43357.0], [39.0, 41009.0], [38.0, 41370.0], [41.0, 38970.0], [40.0, 39705.0], [43.0, 38215.0], [42.0, 38765.0], [45.0, 37642.0], [44.0, 38160.0], [47.0, 36879.0], [46.0, 37556.0], [49.0, 34500.0], [48.0, 34776.0], [51.0, 31956.0], [50.0, 33183.0], [53.0, 31537.0], [52.0, 31568.0], [55.0, 30942.0], [54.0, 31359.0], [57.0, 30213.0], [56.0, 30787.0], [59.0, 29199.0], [58.0, 29411.0], [61.0, 26542.0], [60.0, 27746.0], [63.0, 26499.0], [62.0, 26521.0], [67.0, 25273.0], [66.0, 25589.0], [65.0, 25864.0], [64.0, 26206.0], [71.0, 19835.0], [70.0, 20713.0], [69.0, 23788.0], [68.0, 24308.0], [75.0, 18930.0], [74.0, 19288.0], [73.0, 19461.0], [72.0, 19476.0], [79.0, 17097.0], [78.0, 17201.0], [77.0, 17242.0], [76.0, 18622.0], [83.0, 13014.0], [82.0, 13311.0], [81.0, 13729.0], [80.0, 14750.0], [87.0, 12451.0], [86.0, 12486.0], [85.0, 12747.0], [84.0, 12825.0], [91.0, 7413.0], [90.0, 9626.0], [89.0, 12138.0], [88.0, 12322.0], [95.0, 6929.0], [94.0, 7217.0], [93.0, 7317.0], [92.0, 7440.0], [99.0, 6099.0], [98.0, 6503.0], [97.0, 6491.0], [96.0, 6734.0], [100.0, 4360.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[50.51, 33883.2]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 1052.0], [3.0, 1045.0], [4.0, 1044.0], [5.0, 1042.0], [6.0, 1030.0], [7.0, 1011.0], [8.0, 1019.0], [9.0, 1023.0], [10.0, 1001.0], [11.0, 1006.0], [12.0, 985.0], [13.0, 1004.0], [14.0, 988.0], [15.0, 994.0], [16.0, 962.0], [17.0, 974.0], [18.0, 958.0], [19.0, 974.0], [20.0, 960.0], [21.0, 948.0], [22.0, 932.0], [23.0, 935.0], [24.0, 936.0], [25.0, 944.0], [26.0, 932.0], [27.0, 902.0], [28.0, 910.0], [29.0, 897.0], [30.0, 922.0], [31.0, 891.0], [33.0, 887.0], [32.0, 907.0], [35.0, 894.0], [34.0, 901.0], [37.0, 876.0], [36.0, 869.0], [39.0, 857.0], [38.0, 890.0], [41.0, 885.0], [40.0, 882.0], [43.0, 855.0], [42.0, 850.0], [45.0, 840.0], [44.0, 863.0], [47.0, 830.0], [46.0, 857.0], [49.0, 841.0], [48.0, 837.0], [51.0, 833.0], [50.0, 811.0], [53.0, 818.0], [52.0, 813.0], [55.0, 821.0], [54.0, 799.0], [57.0, 775.0], [56.0, 758.0], [59.0, 768.0], [58.0, 760.0], [61.0, 744.0], [60.0, 731.0], [63.0, 718.0], [62.0, 730.0], [67.0, 694.0], [66.0, 701.0], [65.0, 733.0], [64.0, 745.0], [71.0, 668.0], [70.0, 693.0], [69.0, 689.0], [68.0, 683.0], [75.0, 673.0], [74.0, 658.0], [73.0, 666.0], [72.0, 660.0], [79.0, 628.0], [78.0, 650.0], [77.0, 642.0], [76.0, 648.0], [83.0, 601.0], [82.0, 611.0], [81.0, 625.0], [80.0, 621.0], [87.0, 583.0], [86.0, 581.0], [85.0, 590.0], [84.0, 602.0], [91.0, 551.0], [90.0, 561.0], [89.0, 559.0], [88.0, 564.0], [95.0, 525.0], [94.0, 526.0], [93.0, 538.0], [92.0, 541.0], [99.0, 473.0], [98.0, 492.0], [97.0, 494.0], [96.0, 520.0], [100.0, 454.0], [1.0, 1054.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[50.5, 792.1800000000001]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[2.0, 69483.0], [3.0, 69476.0], [4.0, 69429.0], [5.0, 69323.0], [6.0, 69258.0], [7.0, 68779.0], [8.0, 67923.0], [9.0, 66581.0], [10.0, 66442.0], [11.0, 65775.0], [12.0, 65614.0], [13.0, 65316.0], [14.0, 65272.0], [15.0, 64957.0], [16.0, 64704.0], [17.0, 64049.0], [18.0, 62355.0], [19.0, 61655.0], [20.0, 61445.0], [21.0, 59780.0], [22.0, 59686.0], [23.0, 59158.0], [24.0, 59031.0], [25.0, 58709.0], [26.0, 58695.0], [27.0, 57781.0], [28.0, 56544.0], [29.0, 55442.0], [30.0, 55276.0], [31.0, 53388.0], [33.0, 52666.0], [32.0, 53134.0], [35.0, 51859.0], [34.0, 52035.0], [37.0, 51253.0], [36.0, 51313.0], [39.0, 49435.0], [38.0, 49874.0], [41.0, 48087.0], [40.0, 48897.0], [43.0, 46289.0], [42.0, 46642.0], [45.0, 45289.0], [44.0, 46120.0], [47.0, 44848.0], [46.0, 45033.0], [49.0, 43371.0], [48.0, 43460.0], [51.0, 41293.0], [50.0, 43045.0], [53.0, 40931.0], [52.0, 41165.0], [55.0, 39922.0], [54.0, 40756.0], [57.0, 39782.0], [56.0, 39889.0], [59.0, 37802.0], [58.0, 38461.0], [61.0, 35078.0], [60.0, 35141.0], [63.0, 32815.0], [62.0, 33373.0], [67.0, 31954.0], [66.0, 32214.0], [65.0, 32396.0], [64.0, 32429.0], [71.0, 27536.0], [70.0, 28163.0], [69.0, 30691.0], [68.0, 31216.0], [75.0, 24577.0], [74.0, 24584.0], [73.0, 25039.0], [72.0, 25283.0], [79.0, 23465.0], [78.0, 23750.0], [77.0, 24326.0], [76.0, 24337.0], [83.0, 17480.0], [82.0, 17779.0], [81.0, 18257.0], [80.0, 20794.0], [87.0, 16947.0], [86.0, 16996.0], [85.0, 17096.0], [84.0, 17397.0], [91.0, 10246.0], [90.0, 13874.0], [89.0, 16929.0], [88.0, 16946.0], [95.0, 9432.0], [94.0, 9524.0], [93.0, 9736.0], [92.0, 9889.0], [99.0, 8953.0], [98.0, 9119.0], [97.0, 9375.0], [96.0, 9395.0], [100.0, 8103.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[50.52, 40960.87]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 91.73333333333333, "minX": 1.66885746E12, "maxY": 1.8887622983333334E7, "series": [{"data": [[1.66885746E12, 8119454.216666667], [1.66885752E12, 1.8887622983333334E7], [1.66885758E12, 1.077057405E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66885746E12, 91.73333333333333], [1.66885752E12, 213.33333333333334], [1.66885758E12, 441.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66885758E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 792.1800000000001, "minX": 1.66885746E12, "maxY": 55389.29824561403, "series": [{"data": [[1.66885752E12, 16528.20930232558], [1.66885758E12, 46975.56140350878]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66885758E12, 792.1800000000001]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66885746E12, 21834.81395348837], [1.66885752E12, 55389.29824561403]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66885758E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 792.1400000000002, "minX": 1.66885746E12, "maxY": 52986.17543859648, "series": [{"data": [[1.66885752E12, 14200.720930232557], [1.66885758E12, 44584.999999999985]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66885758E12, 792.1400000000002]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66885746E12, 19378.418604651168], [1.66885752E12, 52986.17543859648]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66885758E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.1899999999999997, "minX": 1.66885746E12, "maxY": 54.79069767441862, "series": [{"data": [[1.66885752E12, 1.5581395348837217], [1.66885758E12, 4.105263157894736]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66885758E12, 1.1899999999999997]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66885746E12, 54.79069767441862], [1.66885752E12, 52.859649122807014]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66885758E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4360.0, "minX": 1.66885746E12, "maxY": 69483.0, "series": [{"data": [[1.66885746E12, 38461.0], [1.66885752E12, 69483.0], [1.66885758E12, 61205.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66885746E12, 34396.0], [1.66885752E12, 66375.3], [1.66885758E12, 60062.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66885746E12, 38461.0], [1.66885752E12, 69482.94], [1.66885758E12, 61205.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66885746E12, 37269.799999999996], [1.66885752E12, 69319.75], [1.66885758E12, 61138.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66885746E12, 8103.0], [1.66885752E12, 4360.0], [1.66885758E12, 30213.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66885746E12, 23465.0], [1.66885752E12, 42169.0], [1.66885758E12, 46970.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66885758E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 825.5, "minX": 1.0, "maxY": 43415.5, "series": [{"data": [[2.0, 43415.5], [1.0, 36879.0], [4.0, 32412.5], [5.0, 41817.5], [3.0, 35869.0], [6.0, 38349.0], [7.0, 9432.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[100.0, 825.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 825.5, "minX": 1.0, "maxY": 40889.0, "series": [{"data": [[2.0, 40889.0], [1.0, 32991.0], [4.0, 29882.5], [5.0, 39249.5], [3.0, 33181.5], [6.0, 36715.5], [7.0, 7322.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[100.0, 825.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.66885746E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66885746E12, 1.6666666666666667], [1.66885752E12, 1.6666666666666667], [1.66885758E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66885758E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.66885746E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66885746E12, 0.7166666666666667], [1.66885752E12, 1.6666666666666667], [1.66885758E12, 0.95]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66885758E12, 1.6666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66885758E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.66885746E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66885746E12, 0.7166666666666667], [1.66885752E12, 0.95]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.66885758E12, 1.6666666666666667]], "isOverall": false, "label": "Microservice-based client with caching-failure", "isController": false}, {"data": [[1.66885752E12, 0.7166666666666667], [1.66885758E12, 0.95]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66885758E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.66885746E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66885746E12, 0.7166666666666667], [1.66885752E12, 1.6666666666666667], [1.66885758E12, 0.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66885758E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66885758E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

