/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 3750.0, "series": [{"data": [[0.0, 8.0], [0.1, 8.0], [0.2, 10.0], [0.3, 10.0], [0.4, 10.0], [0.5, 11.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 12.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 13.0], [2.4, 13.0], [2.5, 14.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 15.0], [3.3, 15.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 16.0], [4.1, 16.0], [4.2, 16.0], [4.3, 16.0], [4.4, 16.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 18.0], [5.6, 18.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 22.0], [7.3, 22.0], [7.4, 22.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 23.0], [8.3, 23.0], [8.4, 23.0], [8.5, 23.0], [8.6, 23.0], [8.7, 23.0], [8.8, 23.0], [8.9, 23.0], [9.0, 24.0], [9.1, 24.0], [9.2, 24.0], [9.3, 24.0], [9.4, 25.0], [9.5, 25.0], [9.6, 25.0], [9.7, 25.0], [9.8, 25.0], [9.9, 25.0], [10.0, 25.0], [10.1, 25.0], [10.2, 25.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 26.0], [11.0, 26.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 27.0], [11.5, 27.0], [11.6, 27.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 28.0], [12.3, 28.0], [12.4, 28.0], [12.5, 28.0], [12.6, 28.0], [12.7, 28.0], [12.8, 29.0], [12.9, 29.0], [13.0, 29.0], [13.1, 29.0], [13.2, 29.0], [13.3, 29.0], [13.4, 30.0], [13.5, 30.0], [13.6, 30.0], [13.7, 30.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 31.0], [14.2, 31.0], [14.3, 32.0], [14.4, 32.0], [14.5, 32.0], [14.6, 32.0], [14.7, 32.0], [14.8, 32.0], [14.9, 32.0], [15.0, 32.0], [15.1, 32.0], [15.2, 33.0], [15.3, 33.0], [15.4, 33.0], [15.5, 33.0], [15.6, 33.0], [15.7, 34.0], [15.8, 34.0], [15.9, 34.0], [16.0, 34.0], [16.1, 35.0], [16.2, 35.0], [16.3, 35.0], [16.4, 35.0], [16.5, 36.0], [16.6, 36.0], [16.7, 36.0], [16.8, 36.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 38.0], [17.4, 38.0], [17.5, 38.0], [17.6, 38.0], [17.7, 38.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 39.0], [18.2, 39.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 41.0], [18.7, 41.0], [18.8, 41.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 43.0], [19.5, 44.0], [19.6, 44.0], [19.7, 44.0], [19.8, 44.0], [19.9, 44.0], [20.0, 45.0], [20.1, 46.0], [20.2, 46.0], [20.3, 46.0], [20.4, 46.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 47.0], [20.9, 47.0], [21.0, 48.0], [21.1, 49.0], [21.2, 49.0], [21.3, 49.0], [21.4, 49.0], [21.5, 50.0], [21.6, 50.0], [21.7, 50.0], [21.8, 51.0], [21.9, 51.0], [22.0, 52.0], [22.1, 53.0], [22.2, 53.0], [22.3, 53.0], [22.4, 55.0], [22.5, 56.0], [22.6, 59.0], [22.7, 60.0], [22.8, 60.0], [22.9, 61.0], [23.0, 61.0], [23.1, 61.0], [23.2, 62.0], [23.3, 63.0], [23.4, 64.0], [23.5, 64.0], [23.6, 65.0], [23.7, 66.0], [23.8, 67.0], [23.9, 69.0], [24.0, 69.0], [24.1, 70.0], [24.2, 70.0], [24.3, 70.0], [24.4, 70.0], [24.5, 70.0], [24.6, 72.0], [24.7, 72.0], [24.8, 76.0], [24.9, 76.0], [25.0, 78.0], [25.1, 80.0], [25.2, 85.0], [25.3, 85.0], [25.4, 86.0], [25.5, 90.0], [25.6, 92.0], [25.7, 102.0], [25.8, 103.0], [25.9, 103.0], [26.0, 109.0], [26.1, 110.0], [26.2, 114.0], [26.3, 119.0], [26.4, 120.0], [26.5, 120.0], [26.6, 122.0], [26.7, 122.0], [26.8, 123.0], [26.9, 123.0], [27.0, 126.0], [27.1, 128.0], [27.2, 129.0], [27.3, 138.0], [27.4, 139.0], [27.5, 140.0], [27.6, 141.0], [27.7, 142.0], [27.8, 143.0], [27.9, 147.0], [28.0, 152.0], [28.1, 154.0], [28.2, 162.0], [28.3, 165.0], [28.4, 169.0], [28.5, 171.0], [28.6, 174.0], [28.7, 178.0], [28.8, 180.0], [28.9, 183.0], [29.0, 183.0], [29.1, 191.0], [29.2, 192.0], [29.3, 195.0], [29.4, 197.0], [29.5, 202.0], [29.6, 205.0], [29.7, 209.0], [29.8, 209.0], [29.9, 211.0], [30.0, 219.0], [30.1, 221.0], [30.2, 225.0], [30.3, 225.0], [30.4, 228.0], [30.5, 231.0], [30.6, 238.0], [30.7, 240.0], [30.8, 240.0], [30.9, 240.0], [31.0, 240.0], [31.1, 242.0], [31.2, 243.0], [31.3, 244.0], [31.4, 245.0], [31.5, 245.0], [31.6, 247.0], [31.7, 249.0], [31.8, 252.0], [31.9, 253.0], [32.0, 255.0], [32.1, 257.0], [32.2, 258.0], [32.3, 259.0], [32.4, 260.0], [32.5, 260.0], [32.6, 260.0], [32.7, 261.0], [32.8, 262.0], [32.9, 263.0], [33.0, 263.0], [33.1, 266.0], [33.2, 267.0], [33.3, 267.0], [33.4, 268.0], [33.5, 269.0], [33.6, 270.0], [33.7, 271.0], [33.8, 272.0], [33.9, 273.0], [34.0, 278.0], [34.1, 280.0], [34.2, 280.0], [34.3, 281.0], [34.4, 284.0], [34.5, 285.0], [34.6, 287.0], [34.7, 287.0], [34.8, 289.0], [34.9, 289.0], [35.0, 289.0], [35.1, 289.0], [35.2, 289.0], [35.3, 290.0], [35.4, 292.0], [35.5, 292.0], [35.6, 292.0], [35.7, 293.0], [35.8, 293.0], [35.9, 293.0], [36.0, 294.0], [36.1, 294.0], [36.2, 294.0], [36.3, 295.0], [36.4, 296.0], [36.5, 296.0], [36.6, 297.0], [36.7, 297.0], [36.8, 297.0], [36.9, 298.0], [37.0, 300.0], [37.1, 300.0], [37.2, 300.0], [37.3, 301.0], [37.4, 301.0], [37.5, 302.0], [37.6, 303.0], [37.7, 304.0], [37.8, 305.0], [37.9, 305.0], [38.0, 306.0], [38.1, 307.0], [38.2, 307.0], [38.3, 308.0], [38.4, 308.0], [38.5, 308.0], [38.6, 309.0], [38.7, 310.0], [38.8, 310.0], [38.9, 310.0], [39.0, 311.0], [39.1, 311.0], [39.2, 311.0], [39.3, 312.0], [39.4, 312.0], [39.5, 313.0], [39.6, 314.0], [39.7, 315.0], [39.8, 316.0], [39.9, 316.0], [40.0, 316.0], [40.1, 316.0], [40.2, 318.0], [40.3, 318.0], [40.4, 318.0], [40.5, 318.0], [40.6, 319.0], [40.7, 320.0], [40.8, 321.0], [40.9, 321.0], [41.0, 321.0], [41.1, 322.0], [41.2, 322.0], [41.3, 323.0], [41.4, 323.0], [41.5, 324.0], [41.6, 324.0], [41.7, 325.0], [41.8, 326.0], [41.9, 327.0], [42.0, 327.0], [42.1, 327.0], [42.2, 327.0], [42.3, 328.0], [42.4, 329.0], [42.5, 329.0], [42.6, 329.0], [42.7, 329.0], [42.8, 330.0], [42.9, 331.0], [43.0, 332.0], [43.1, 332.0], [43.2, 333.0], [43.3, 333.0], [43.4, 335.0], [43.5, 335.0], [43.6, 336.0], [43.7, 336.0], [43.8, 336.0], [43.9, 336.0], [44.0, 337.0], [44.1, 337.0], [44.2, 338.0], [44.3, 338.0], [44.4, 338.0], [44.5, 338.0], [44.6, 338.0], [44.7, 339.0], [44.8, 340.0], [44.9, 340.0], [45.0, 341.0], [45.1, 344.0], [45.2, 344.0], [45.3, 344.0], [45.4, 344.0], [45.5, 344.0], [45.6, 345.0], [45.7, 345.0], [45.8, 345.0], [45.9, 346.0], [46.0, 346.0], [46.1, 346.0], [46.2, 347.0], [46.3, 348.0], [46.4, 348.0], [46.5, 348.0], [46.6, 349.0], [46.7, 349.0], [46.8, 349.0], [46.9, 350.0], [47.0, 350.0], [47.1, 350.0], [47.2, 350.0], [47.3, 351.0], [47.4, 352.0], [47.5, 352.0], [47.6, 353.0], [47.7, 353.0], [47.8, 354.0], [47.9, 354.0], [48.0, 354.0], [48.1, 354.0], [48.2, 355.0], [48.3, 355.0], [48.4, 355.0], [48.5, 356.0], [48.6, 356.0], [48.7, 356.0], [48.8, 356.0], [48.9, 357.0], [49.0, 358.0], [49.1, 358.0], [49.2, 359.0], [49.3, 359.0], [49.4, 360.0], [49.5, 361.0], [49.6, 361.0], [49.7, 361.0], [49.8, 361.0], [49.9, 362.0], [50.0, 362.0], [50.1, 362.0], [50.2, 363.0], [50.3, 364.0], [50.4, 364.0], [50.5, 364.0], [50.6, 364.0], [50.7, 365.0], [50.8, 365.0], [50.9, 365.0], [51.0, 366.0], [51.1, 367.0], [51.2, 367.0], [51.3, 367.0], [51.4, 367.0], [51.5, 368.0], [51.6, 368.0], [51.7, 368.0], [51.8, 368.0], [51.9, 369.0], [52.0, 370.0], [52.1, 370.0], [52.2, 370.0], [52.3, 371.0], [52.4, 371.0], [52.5, 371.0], [52.6, 371.0], [52.7, 373.0], [52.8, 374.0], [52.9, 374.0], [53.0, 374.0], [53.1, 374.0], [53.2, 374.0], [53.3, 374.0], [53.4, 374.0], [53.5, 375.0], [53.6, 375.0], [53.7, 376.0], [53.8, 376.0], [53.9, 376.0], [54.0, 376.0], [54.1, 377.0], [54.2, 378.0], [54.3, 378.0], [54.4, 378.0], [54.5, 378.0], [54.6, 379.0], [54.7, 379.0], [54.8, 379.0], [54.9, 379.0], [55.0, 380.0], [55.1, 380.0], [55.2, 381.0], [55.3, 381.0], [55.4, 381.0], [55.5, 382.0], [55.6, 382.0], [55.7, 383.0], [55.8, 383.0], [55.9, 384.0], [56.0, 384.0], [56.1, 385.0], [56.2, 386.0], [56.3, 387.0], [56.4, 389.0], [56.5, 389.0], [56.6, 389.0], [56.7, 389.0], [56.8, 390.0], [56.9, 390.0], [57.0, 390.0], [57.1, 391.0], [57.2, 391.0], [57.3, 392.0], [57.4, 393.0], [57.5, 393.0], [57.6, 394.0], [57.7, 395.0], [57.8, 395.0], [57.9, 396.0], [58.0, 397.0], [58.1, 398.0], [58.2, 398.0], [58.3, 399.0], [58.4, 399.0], [58.5, 399.0], [58.6, 399.0], [58.7, 400.0], [58.8, 400.0], [58.9, 400.0], [59.0, 401.0], [59.1, 401.0], [59.2, 402.0], [59.3, 402.0], [59.4, 402.0], [59.5, 404.0], [59.6, 404.0], [59.7, 404.0], [59.8, 405.0], [59.9, 405.0], [60.0, 406.0], [60.1, 406.0], [60.2, 408.0], [60.3, 408.0], [60.4, 408.0], [60.5, 408.0], [60.6, 409.0], [60.7, 409.0], [60.8, 409.0], [60.9, 410.0], [61.0, 410.0], [61.1, 410.0], [61.2, 410.0], [61.3, 411.0], [61.4, 411.0], [61.5, 412.0], [61.6, 413.0], [61.7, 413.0], [61.8, 413.0], [61.9, 413.0], [62.0, 413.0], [62.1, 414.0], [62.2, 414.0], [62.3, 414.0], [62.4, 415.0], [62.5, 415.0], [62.6, 416.0], [62.7, 416.0], [62.8, 416.0], [62.9, 416.0], [63.0, 418.0], [63.1, 418.0], [63.2, 418.0], [63.3, 418.0], [63.4, 418.0], [63.5, 419.0], [63.6, 421.0], [63.7, 422.0], [63.8, 422.0], [63.9, 423.0], [64.0, 424.0], [64.1, 424.0], [64.2, 424.0], [64.3, 424.0], [64.4, 424.0], [64.5, 425.0], [64.6, 425.0], [64.7, 425.0], [64.8, 426.0], [64.9, 426.0], [65.0, 426.0], [65.1, 426.0], [65.2, 428.0], [65.3, 428.0], [65.4, 428.0], [65.5, 428.0], [65.6, 428.0], [65.7, 428.0], [65.8, 429.0], [65.9, 429.0], [66.0, 430.0], [66.1, 430.0], [66.2, 430.0], [66.3, 430.0], [66.4, 430.0], [66.5, 431.0], [66.6, 431.0], [66.7, 431.0], [66.8, 431.0], [66.9, 432.0], [67.0, 432.0], [67.1, 432.0], [67.2, 432.0], [67.3, 432.0], [67.4, 433.0], [67.5, 434.0], [67.6, 435.0], [67.7, 435.0], [67.8, 435.0], [67.9, 435.0], [68.0, 437.0], [68.1, 437.0], [68.2, 437.0], [68.3, 438.0], [68.4, 438.0], [68.5, 438.0], [68.6, 438.0], [68.7, 439.0], [68.8, 439.0], [68.9, 439.0], [69.0, 440.0], [69.1, 440.0], [69.2, 440.0], [69.3, 441.0], [69.4, 441.0], [69.5, 442.0], [69.6, 442.0], [69.7, 442.0], [69.8, 442.0], [69.9, 443.0], [70.0, 443.0], [70.1, 444.0], [70.2, 444.0], [70.3, 444.0], [70.4, 445.0], [70.5, 446.0], [70.6, 446.0], [70.7, 447.0], [70.8, 447.0], [70.9, 447.0], [71.0, 447.0], [71.1, 448.0], [71.2, 448.0], [71.3, 449.0], [71.4, 449.0], [71.5, 450.0], [71.6, 450.0], [71.7, 450.0], [71.8, 451.0], [71.9, 452.0], [72.0, 452.0], [72.1, 452.0], [72.2, 452.0], [72.3, 453.0], [72.4, 453.0], [72.5, 453.0], [72.6, 455.0], [72.7, 455.0], [72.8, 455.0], [72.9, 455.0], [73.0, 456.0], [73.1, 456.0], [73.2, 456.0], [73.3, 457.0], [73.4, 458.0], [73.5, 459.0], [73.6, 459.0], [73.7, 459.0], [73.8, 459.0], [73.9, 459.0], [74.0, 460.0], [74.1, 460.0], [74.2, 460.0], [74.3, 460.0], [74.4, 461.0], [74.5, 461.0], [74.6, 461.0], [74.7, 462.0], [74.8, 462.0], [74.9, 462.0], [75.0, 462.0], [75.1, 462.0], [75.2, 463.0], [75.3, 464.0], [75.4, 464.0], [75.5, 465.0], [75.6, 466.0], [75.7, 466.0], [75.8, 467.0], [75.9, 468.0], [76.0, 468.0], [76.1, 468.0], [76.2, 468.0], [76.3, 468.0], [76.4, 468.0], [76.5, 469.0], [76.6, 469.0], [76.7, 469.0], [76.8, 469.0], [76.9, 470.0], [77.0, 470.0], [77.1, 470.0], [77.2, 472.0], [77.3, 472.0], [77.4, 472.0], [77.5, 473.0], [77.6, 473.0], [77.7, 473.0], [77.8, 475.0], [77.9, 475.0], [78.0, 475.0], [78.1, 475.0], [78.2, 475.0], [78.3, 475.0], [78.4, 476.0], [78.5, 476.0], [78.6, 477.0], [78.7, 477.0], [78.8, 477.0], [78.9, 478.0], [79.0, 478.0], [79.1, 478.0], [79.2, 478.0], [79.3, 479.0], [79.4, 480.0], [79.5, 480.0], [79.6, 481.0], [79.7, 481.0], [79.8, 483.0], [79.9, 483.0], [80.0, 483.0], [80.1, 483.0], [80.2, 484.0], [80.3, 484.0], [80.4, 486.0], [80.5, 486.0], [80.6, 486.0], [80.7, 487.0], [80.8, 487.0], [80.9, 488.0], [81.0, 488.0], [81.1, 489.0], [81.2, 490.0], [81.3, 491.0], [81.4, 492.0], [81.5, 493.0], [81.6, 494.0], [81.7, 494.0], [81.8, 496.0], [81.9, 496.0], [82.0, 496.0], [82.1, 497.0], [82.2, 497.0], [82.3, 497.0], [82.4, 498.0], [82.5, 500.0], [82.6, 500.0], [82.7, 500.0], [82.8, 500.0], [82.9, 501.0], [83.0, 502.0], [83.1, 502.0], [83.2, 504.0], [83.3, 504.0], [83.4, 504.0], [83.5, 504.0], [83.6, 504.0], [83.7, 505.0], [83.8, 506.0], [83.9, 507.0], [84.0, 508.0], [84.1, 508.0], [84.2, 508.0], [84.3, 508.0], [84.4, 509.0], [84.5, 510.0], [84.6, 510.0], [84.7, 511.0], [84.8, 511.0], [84.9, 512.0], [85.0, 512.0], [85.1, 514.0], [85.2, 514.0], [85.3, 516.0], [85.4, 516.0], [85.5, 518.0], [85.6, 518.0], [85.7, 519.0], [85.8, 519.0], [85.9, 522.0], [86.0, 523.0], [86.1, 524.0], [86.2, 524.0], [86.3, 526.0], [86.4, 528.0], [86.5, 528.0], [86.6, 528.0], [86.7, 528.0], [86.8, 529.0], [86.9, 529.0], [87.0, 530.0], [87.1, 531.0], [87.2, 532.0], [87.3, 533.0], [87.4, 534.0], [87.5, 535.0], [87.6, 537.0], [87.7, 539.0], [87.8, 539.0], [87.9, 541.0], [88.0, 541.0], [88.1, 541.0], [88.2, 545.0], [88.3, 545.0], [88.4, 545.0], [88.5, 546.0], [88.6, 549.0], [88.7, 550.0], [88.8, 552.0], [88.9, 552.0], [89.0, 554.0], [89.1, 554.0], [89.2, 556.0], [89.3, 558.0], [89.4, 558.0], [89.5, 559.0], [89.6, 559.0], [89.7, 561.0], [89.8, 562.0], [89.9, 562.0], [90.0, 563.0], [90.1, 563.0], [90.2, 567.0], [90.3, 567.0], [90.4, 569.0], [90.5, 570.0], [90.6, 570.0], [90.7, 571.0], [90.8, 573.0], [90.9, 574.0], [91.0, 575.0], [91.1, 577.0], [91.2, 578.0], [91.3, 579.0], [91.4, 580.0], [91.5, 580.0], [91.6, 581.0], [91.7, 581.0], [91.8, 583.0], [91.9, 591.0], [92.0, 592.0], [92.1, 593.0], [92.2, 594.0], [92.3, 594.0], [92.4, 594.0], [92.5, 595.0], [92.6, 596.0], [92.7, 596.0], [92.8, 597.0], [92.9, 599.0], [93.0, 599.0], [93.1, 600.0], [93.2, 600.0], [93.3, 602.0], [93.4, 602.0], [93.5, 603.0], [93.6, 604.0], [93.7, 605.0], [93.8, 609.0], [93.9, 611.0], [94.0, 613.0], [94.1, 614.0], [94.2, 615.0], [94.3, 616.0], [94.4, 616.0], [94.5, 619.0], [94.6, 619.0], [94.7, 622.0], [94.8, 624.0], [94.9, 626.0], [95.0, 626.0], [95.1, 628.0], [95.2, 628.0], [95.3, 629.0], [95.4, 629.0], [95.5, 629.0], [95.6, 630.0], [95.7, 631.0], [95.8, 634.0], [95.9, 638.0], [96.0, 638.0], [96.1, 639.0], [96.2, 640.0], [96.3, 642.0], [96.4, 648.0], [96.5, 650.0], [96.6, 650.0], [96.7, 652.0], [96.8, 653.0], [96.9, 657.0], [97.0, 659.0], [97.1, 661.0], [97.2, 665.0], [97.3, 665.0], [97.4, 667.0], [97.5, 669.0], [97.6, 669.0], [97.7, 671.0], [97.8, 674.0], [97.9, 676.0], [98.0, 677.0], [98.1, 679.0], [98.2, 681.0], [98.3, 686.0], [98.4, 692.0], [98.5, 695.0], [98.6, 701.0], [98.7, 703.0], [98.8, 707.0], [98.9, 709.0], [99.0, 711.0], [99.1, 712.0], [99.2, 713.0], [99.3, 721.0], [99.4, 729.0], [99.5, 749.0], [99.6, 761.0], [99.7, 814.0], [99.8, 825.0], [99.9, 828.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 173.0], [0.1, 205.0], [0.2, 212.0], [0.3, 212.0], [0.4, 219.0], [0.5, 221.0], [0.6, 225.0], [0.7, 225.0], [0.8, 238.0], [0.9, 240.0], [1.0, 243.0], [1.1, 243.0], [1.2, 244.0], [1.3, 246.0], [1.4, 246.0], [1.5, 250.0], [1.6, 251.0], [1.7, 251.0], [1.8, 253.0], [1.9, 256.0], [2.0, 259.0], [2.1, 260.0], [2.2, 261.0], [2.3, 261.0], [2.4, 264.0], [2.5, 269.0], [2.6, 270.0], [2.7, 270.0], [2.8, 271.0], [2.9, 272.0], [3.0, 273.0], [3.1, 274.0], [3.2, 274.0], [3.3, 275.0], [3.4, 276.0], [3.5, 276.0], [3.6, 276.0], [3.7, 278.0], [3.8, 279.0], [3.9, 280.0], [4.0, 280.0], [4.1, 280.0], [4.2, 281.0], [4.3, 281.0], [4.4, 281.0], [4.5, 281.0], [4.6, 282.0], [4.7, 283.0], [4.8, 283.0], [4.9, 283.0], [5.0, 284.0], [5.1, 284.0], [5.2, 285.0], [5.3, 285.0], [5.4, 285.0], [5.5, 287.0], [5.6, 287.0], [5.7, 288.0], [5.8, 288.0], [5.9, 288.0], [6.0, 289.0], [6.1, 289.0], [6.2, 291.0], [6.3, 292.0], [6.4, 292.0], [6.5, 292.0], [6.6, 292.0], [6.7, 293.0], [6.8, 294.0], [6.9, 295.0], [7.0, 295.0], [7.1, 297.0], [7.2, 299.0], [7.3, 299.0], [7.4, 300.0], [7.5, 300.0], [7.6, 300.0], [7.7, 300.0], [7.8, 301.0], [7.9, 303.0], [8.0, 304.0], [8.1, 305.0], [8.2, 305.0], [8.3, 306.0], [8.4, 306.0], [8.5, 306.0], [8.6, 307.0], [8.7, 307.0], [8.8, 308.0], [8.9, 308.0], [9.0, 309.0], [9.1, 310.0], [9.2, 312.0], [9.3, 312.0], [9.4, 312.0], [9.5, 313.0], [9.6, 313.0], [9.7, 313.0], [9.8, 314.0], [9.9, 315.0], [10.0, 316.0], [10.1, 317.0], [10.2, 317.0], [10.3, 317.0], [10.4, 318.0], [10.5, 319.0], [10.6, 319.0], [10.7, 319.0], [10.8, 319.0], [10.9, 320.0], [11.0, 320.0], [11.1, 320.0], [11.2, 322.0], [11.3, 322.0], [11.4, 322.0], [11.5, 323.0], [11.6, 323.0], [11.7, 326.0], [11.8, 327.0], [11.9, 327.0], [12.0, 328.0], [12.1, 328.0], [12.2, 329.0], [12.3, 330.0], [12.4, 330.0], [12.5, 330.0], [12.6, 331.0], [12.7, 333.0], [12.8, 333.0], [12.9, 334.0], [13.0, 335.0], [13.1, 335.0], [13.2, 335.0], [13.3, 336.0], [13.4, 336.0], [13.5, 337.0], [13.6, 338.0], [13.7, 340.0], [13.8, 341.0], [13.9, 341.0], [14.0, 341.0], [14.1, 342.0], [14.2, 343.0], [14.3, 343.0], [14.4, 343.0], [14.5, 343.0], [14.6, 345.0], [14.7, 345.0], [14.8, 347.0], [14.9, 347.0], [15.0, 348.0], [15.1, 348.0], [15.2, 348.0], [15.3, 349.0], [15.4, 349.0], [15.5, 350.0], [15.6, 350.0], [15.7, 351.0], [15.8, 351.0], [15.9, 352.0], [16.0, 353.0], [16.1, 354.0], [16.2, 354.0], [16.3, 354.0], [16.4, 355.0], [16.5, 355.0], [16.6, 356.0], [16.7, 356.0], [16.8, 357.0], [16.9, 357.0], [17.0, 357.0], [17.1, 358.0], [17.2, 358.0], [17.3, 360.0], [17.4, 360.0], [17.5, 362.0], [17.6, 362.0], [17.7, 362.0], [17.8, 362.0], [17.9, 362.0], [18.0, 362.0], [18.1, 364.0], [18.2, 364.0], [18.3, 364.0], [18.4, 365.0], [18.5, 366.0], [18.6, 366.0], [18.7, 368.0], [18.8, 368.0], [18.9, 368.0], [19.0, 369.0], [19.1, 370.0], [19.2, 371.0], [19.3, 371.0], [19.4, 373.0], [19.5, 375.0], [19.6, 375.0], [19.7, 376.0], [19.8, 376.0], [19.9, 376.0], [20.0, 378.0], [20.1, 378.0], [20.2, 380.0], [20.3, 381.0], [20.4, 381.0], [20.5, 383.0], [20.6, 384.0], [20.7, 386.0], [20.8, 386.0], [20.9, 390.0], [21.0, 390.0], [21.1, 391.0], [21.2, 394.0], [21.3, 394.0], [21.4, 396.0], [21.5, 397.0], [21.6, 399.0], [21.7, 400.0], [21.8, 400.0], [21.9, 400.0], [22.0, 401.0], [22.1, 401.0], [22.2, 402.0], [22.3, 402.0], [22.4, 403.0], [22.5, 403.0], [22.6, 403.0], [22.7, 403.0], [22.8, 404.0], [22.9, 405.0], [23.0, 405.0], [23.1, 408.0], [23.2, 408.0], [23.3, 408.0], [23.4, 409.0], [23.5, 409.0], [23.6, 410.0], [23.7, 411.0], [23.8, 411.0], [23.9, 412.0], [24.0, 412.0], [24.1, 414.0], [24.2, 414.0], [24.3, 416.0], [24.4, 417.0], [24.5, 418.0], [24.6, 418.0], [24.7, 419.0], [24.8, 419.0], [24.9, 419.0], [25.0, 420.0], [25.1, 422.0], [25.2, 422.0], [25.3, 423.0], [25.4, 423.0], [25.5, 424.0], [25.6, 424.0], [25.7, 424.0], [25.8, 424.0], [25.9, 424.0], [26.0, 425.0], [26.1, 425.0], [26.2, 426.0], [26.3, 429.0], [26.4, 429.0], [26.5, 431.0], [26.6, 431.0], [26.7, 432.0], [26.8, 436.0], [26.9, 436.0], [27.0, 438.0], [27.1, 439.0], [27.2, 442.0], [27.3, 442.0], [27.4, 443.0], [27.5, 443.0], [27.6, 444.0], [27.7, 445.0], [27.8, 446.0], [27.9, 446.0], [28.0, 447.0], [28.1, 447.0], [28.2, 448.0], [28.3, 448.0], [28.4, 449.0], [28.5, 449.0], [28.6, 450.0], [28.7, 450.0], [28.8, 451.0], [28.9, 451.0], [29.0, 451.0], [29.1, 451.0], [29.2, 452.0], [29.3, 453.0], [29.4, 454.0], [29.5, 455.0], [29.6, 455.0], [29.7, 456.0], [29.8, 459.0], [29.9, 459.0], [30.0, 459.0], [30.1, 461.0], [30.2, 462.0], [30.3, 462.0], [30.4, 463.0], [30.5, 464.0], [30.6, 464.0], [30.7, 465.0], [30.8, 465.0], [30.9, 465.0], [31.0, 466.0], [31.1, 466.0], [31.2, 467.0], [31.3, 467.0], [31.4, 468.0], [31.5, 468.0], [31.6, 468.0], [31.7, 471.0], [31.8, 471.0], [31.9, 471.0], [32.0, 471.0], [32.1, 476.0], [32.2, 476.0], [32.3, 477.0], [32.4, 478.0], [32.5, 478.0], [32.6, 479.0], [32.7, 479.0], [32.8, 480.0], [32.9, 480.0], [33.0, 481.0], [33.1, 481.0], [33.2, 482.0], [33.3, 482.0], [33.4, 483.0], [33.5, 483.0], [33.6, 484.0], [33.7, 484.0], [33.8, 485.0], [33.9, 486.0], [34.0, 486.0], [34.1, 487.0], [34.2, 489.0], [34.3, 491.0], [34.4, 491.0], [34.5, 491.0], [34.6, 492.0], [34.7, 494.0], [34.8, 494.0], [34.9, 494.0], [35.0, 495.0], [35.1, 495.0], [35.2, 496.0], [35.3, 496.0], [35.4, 497.0], [35.5, 497.0], [35.6, 497.0], [35.7, 497.0], [35.8, 498.0], [35.9, 498.0], [36.0, 498.0], [36.1, 499.0], [36.2, 499.0], [36.3, 499.0], [36.4, 500.0], [36.5, 500.0], [36.6, 500.0], [36.7, 501.0], [36.8, 501.0], [36.9, 501.0], [37.0, 502.0], [37.1, 502.0], [37.2, 502.0], [37.3, 502.0], [37.4, 503.0], [37.5, 503.0], [37.6, 504.0], [37.7, 505.0], [37.8, 505.0], [37.9, 505.0], [38.0, 506.0], [38.1, 506.0], [38.2, 506.0], [38.3, 507.0], [38.4, 508.0], [38.5, 509.0], [38.6, 509.0], [38.7, 510.0], [38.8, 510.0], [38.9, 510.0], [39.0, 511.0], [39.1, 513.0], [39.2, 513.0], [39.3, 514.0], [39.4, 514.0], [39.5, 514.0], [39.6, 516.0], [39.7, 516.0], [39.8, 516.0], [39.9, 517.0], [40.0, 517.0], [40.1, 518.0], [40.2, 518.0], [40.3, 518.0], [40.4, 518.0], [40.5, 519.0], [40.6, 519.0], [40.7, 520.0], [40.8, 522.0], [40.9, 522.0], [41.0, 522.0], [41.1, 523.0], [41.2, 523.0], [41.3, 523.0], [41.4, 523.0], [41.5, 523.0], [41.6, 523.0], [41.7, 523.0], [41.8, 524.0], [41.9, 524.0], [42.0, 524.0], [42.1, 525.0], [42.2, 525.0], [42.3, 525.0], [42.4, 525.0], [42.5, 526.0], [42.6, 526.0], [42.7, 527.0], [42.8, 527.0], [42.9, 528.0], [43.0, 528.0], [43.1, 528.0], [43.2, 529.0], [43.3, 529.0], [43.4, 529.0], [43.5, 529.0], [43.6, 530.0], [43.7, 530.0], [43.8, 530.0], [43.9, 531.0], [44.0, 531.0], [44.1, 531.0], [44.2, 532.0], [44.3, 532.0], [44.4, 533.0], [44.5, 533.0], [44.6, 534.0], [44.7, 534.0], [44.8, 534.0], [44.9, 535.0], [45.0, 536.0], [45.1, 536.0], [45.2, 536.0], [45.3, 537.0], [45.4, 538.0], [45.5, 538.0], [45.6, 538.0], [45.7, 539.0], [45.8, 539.0], [45.9, 539.0], [46.0, 540.0], [46.1, 541.0], [46.2, 541.0], [46.3, 541.0], [46.4, 541.0], [46.5, 542.0], [46.6, 543.0], [46.7, 543.0], [46.8, 543.0], [46.9, 544.0], [47.0, 544.0], [47.1, 545.0], [47.2, 545.0], [47.3, 545.0], [47.4, 545.0], [47.5, 546.0], [47.6, 546.0], [47.7, 547.0], [47.8, 547.0], [47.9, 547.0], [48.0, 549.0], [48.1, 549.0], [48.2, 549.0], [48.3, 550.0], [48.4, 551.0], [48.5, 551.0], [48.6, 552.0], [48.7, 552.0], [48.8, 552.0], [48.9, 553.0], [49.0, 554.0], [49.1, 554.0], [49.2, 554.0], [49.3, 554.0], [49.4, 555.0], [49.5, 555.0], [49.6, 555.0], [49.7, 556.0], [49.8, 556.0], [49.9, 557.0], [50.0, 558.0], [50.1, 558.0], [50.2, 558.0], [50.3, 559.0], [50.4, 559.0], [50.5, 559.0], [50.6, 559.0], [50.7, 561.0], [50.8, 561.0], [50.9, 561.0], [51.0, 562.0], [51.1, 562.0], [51.2, 562.0], [51.3, 562.0], [51.4, 562.0], [51.5, 562.0], [51.6, 563.0], [51.7, 563.0], [51.8, 563.0], [51.9, 564.0], [52.0, 564.0], [52.1, 564.0], [52.2, 565.0], [52.3, 566.0], [52.4, 566.0], [52.5, 567.0], [52.6, 568.0], [52.7, 568.0], [52.8, 568.0], [52.9, 569.0], [53.0, 570.0], [53.1, 570.0], [53.2, 570.0], [53.3, 572.0], [53.4, 572.0], [53.5, 572.0], [53.6, 572.0], [53.7, 573.0], [53.8, 573.0], [53.9, 573.0], [54.0, 573.0], [54.1, 574.0], [54.2, 575.0], [54.3, 575.0], [54.4, 575.0], [54.5, 575.0], [54.6, 576.0], [54.7, 576.0], [54.8, 576.0], [54.9, 576.0], [55.0, 577.0], [55.1, 578.0], [55.2, 578.0], [55.3, 578.0], [55.4, 578.0], [55.5, 578.0], [55.6, 578.0], [55.7, 578.0], [55.8, 579.0], [55.9, 579.0], [56.0, 580.0], [56.1, 580.0], [56.2, 581.0], [56.3, 581.0], [56.4, 581.0], [56.5, 581.0], [56.6, 581.0], [56.7, 582.0], [56.8, 583.0], [56.9, 583.0], [57.0, 584.0], [57.1, 584.0], [57.2, 584.0], [57.3, 584.0], [57.4, 585.0], [57.5, 585.0], [57.6, 585.0], [57.7, 586.0], [57.8, 586.0], [57.9, 587.0], [58.0, 587.0], [58.1, 587.0], [58.2, 587.0], [58.3, 588.0], [58.4, 588.0], [58.5, 588.0], [58.6, 588.0], [58.7, 589.0], [58.8, 589.0], [58.9, 589.0], [59.0, 589.0], [59.1, 590.0], [59.2, 591.0], [59.3, 591.0], [59.4, 592.0], [59.5, 592.0], [59.6, 593.0], [59.7, 593.0], [59.8, 593.0], [59.9, 593.0], [60.0, 594.0], [60.1, 594.0], [60.2, 594.0], [60.3, 594.0], [60.4, 596.0], [60.5, 596.0], [60.6, 597.0], [60.7, 600.0], [60.8, 600.0], [60.9, 600.0], [61.0, 601.0], [61.1, 602.0], [61.2, 603.0], [61.3, 603.0], [61.4, 604.0], [61.5, 604.0], [61.6, 604.0], [61.7, 604.0], [61.8, 605.0], [61.9, 605.0], [62.0, 606.0], [62.1, 608.0], [62.2, 608.0], [62.3, 608.0], [62.4, 608.0], [62.5, 608.0], [62.6, 609.0], [62.7, 609.0], [62.8, 609.0], [62.9, 610.0], [63.0, 610.0], [63.1, 611.0], [63.2, 612.0], [63.3, 612.0], [63.4, 612.0], [63.5, 613.0], [63.6, 613.0], [63.7, 614.0], [63.8, 614.0], [63.9, 615.0], [64.0, 615.0], [64.1, 615.0], [64.2, 616.0], [64.3, 616.0], [64.4, 616.0], [64.5, 618.0], [64.6, 618.0], [64.7, 618.0], [64.8, 619.0], [64.9, 620.0], [65.0, 620.0], [65.1, 620.0], [65.2, 621.0], [65.3, 621.0], [65.4, 622.0], [65.5, 622.0], [65.6, 623.0], [65.7, 623.0], [65.8, 624.0], [65.9, 624.0], [66.0, 624.0], [66.1, 624.0], [66.2, 625.0], [66.3, 626.0], [66.4, 626.0], [66.5, 626.0], [66.6, 626.0], [66.7, 628.0], [66.8, 628.0], [66.9, 628.0], [67.0, 629.0], [67.1, 629.0], [67.2, 630.0], [67.3, 630.0], [67.4, 631.0], [67.5, 631.0], [67.6, 632.0], [67.7, 632.0], [67.8, 633.0], [67.9, 633.0], [68.0, 634.0], [68.1, 635.0], [68.2, 636.0], [68.3, 637.0], [68.4, 639.0], [68.5, 639.0], [68.6, 640.0], [68.7, 640.0], [68.8, 640.0], [68.9, 641.0], [69.0, 642.0], [69.1, 642.0], [69.2, 642.0], [69.3, 644.0], [69.4, 645.0], [69.5, 645.0], [69.6, 645.0], [69.7, 645.0], [69.8, 645.0], [69.9, 646.0], [70.0, 646.0], [70.1, 646.0], [70.2, 648.0], [70.3, 649.0], [70.4, 650.0], [70.5, 651.0], [70.6, 651.0], [70.7, 652.0], [70.8, 654.0], [70.9, 654.0], [71.0, 654.0], [71.1, 655.0], [71.2, 655.0], [71.3, 656.0], [71.4, 656.0], [71.5, 658.0], [71.6, 658.0], [71.7, 659.0], [71.8, 660.0], [71.9, 660.0], [72.0, 660.0], [72.1, 661.0], [72.2, 661.0], [72.3, 662.0], [72.4, 662.0], [72.5, 663.0], [72.6, 663.0], [72.7, 663.0], [72.8, 664.0], [72.9, 665.0], [73.0, 665.0], [73.1, 666.0], [73.2, 666.0], [73.3, 667.0], [73.4, 670.0], [73.5, 670.0], [73.6, 671.0], [73.7, 672.0], [73.8, 672.0], [73.9, 674.0], [74.0, 674.0], [74.1, 675.0], [74.2, 676.0], [74.3, 678.0], [74.4, 678.0], [74.5, 680.0], [74.6, 681.0], [74.7, 681.0], [74.8, 682.0], [74.9, 682.0], [75.0, 683.0], [75.1, 685.0], [75.2, 687.0], [75.3, 687.0], [75.4, 690.0], [75.5, 691.0], [75.6, 693.0], [75.7, 696.0], [75.8, 698.0], [75.9, 699.0], [76.0, 699.0], [76.1, 700.0], [76.2, 701.0], [76.3, 702.0], [76.4, 702.0], [76.5, 702.0], [76.6, 703.0], [76.7, 704.0], [76.8, 707.0], [76.9, 707.0], [77.0, 707.0], [77.1, 709.0], [77.2, 709.0], [77.3, 711.0], [77.4, 712.0], [77.5, 713.0], [77.6, 714.0], [77.7, 715.0], [77.8, 716.0], [77.9, 717.0], [78.0, 718.0], [78.1, 722.0], [78.2, 722.0], [78.3, 723.0], [78.4, 724.0], [78.5, 725.0], [78.6, 725.0], [78.7, 727.0], [78.8, 728.0], [78.9, 730.0], [79.0, 732.0], [79.1, 732.0], [79.2, 734.0], [79.3, 735.0], [79.4, 736.0], [79.5, 739.0], [79.6, 739.0], [79.7, 740.0], [79.8, 742.0], [79.9, 743.0], [80.0, 743.0], [80.1, 747.0], [80.2, 749.0], [80.3, 749.0], [80.4, 749.0], [80.5, 751.0], [80.6, 751.0], [80.7, 751.0], [80.8, 755.0], [80.9, 763.0], [81.0, 764.0], [81.1, 767.0], [81.2, 767.0], [81.3, 775.0], [81.4, 779.0], [81.5, 785.0], [81.6, 787.0], [81.7, 789.0], [81.8, 797.0], [81.9, 798.0], [82.0, 802.0], [82.1, 802.0], [82.2, 807.0], [82.3, 808.0], [82.4, 816.0], [82.5, 820.0], [82.6, 825.0], [82.7, 837.0], [82.8, 844.0], [82.9, 844.0], [83.0, 845.0], [83.1, 847.0], [83.2, 848.0], [83.3, 848.0], [83.4, 851.0], [83.5, 856.0], [83.6, 865.0], [83.7, 866.0], [83.8, 869.0], [83.9, 870.0], [84.0, 870.0], [84.1, 873.0], [84.2, 878.0], [84.3, 879.0], [84.4, 881.0], [84.5, 886.0], [84.6, 888.0], [84.7, 897.0], [84.8, 900.0], [84.9, 901.0], [85.0, 908.0], [85.1, 908.0], [85.2, 924.0], [85.3, 924.0], [85.4, 925.0], [85.5, 926.0], [85.6, 928.0], [85.7, 930.0], [85.8, 931.0], [85.9, 942.0], [86.0, 944.0], [86.1, 947.0], [86.2, 947.0], [86.3, 951.0], [86.4, 953.0], [86.5, 953.0], [86.6, 960.0], [86.7, 964.0], [86.8, 966.0], [86.9, 967.0], [87.0, 968.0], [87.1, 970.0], [87.2, 971.0], [87.3, 974.0], [87.4, 975.0], [87.5, 978.0], [87.6, 985.0], [87.7, 987.0], [87.8, 989.0], [87.9, 991.0], [88.0, 994.0], [88.1, 998.0], [88.2, 998.0], [88.3, 998.0], [88.4, 999.0], [88.5, 1001.0], [88.6, 1002.0], [88.7, 1007.0], [88.8, 1011.0], [88.9, 1011.0], [89.0, 1012.0], [89.1, 1013.0], [89.2, 1015.0], [89.3, 1016.0], [89.4, 1018.0], [89.5, 1018.0], [89.6, 1023.0], [89.7, 1025.0], [89.8, 1025.0], [89.9, 1026.0], [90.0, 1027.0], [90.1, 1028.0], [90.2, 1028.0], [90.3, 1029.0], [90.4, 1029.0], [90.5, 1031.0], [90.6, 1031.0], [90.7, 1033.0], [90.8, 1041.0], [90.9, 1041.0], [91.0, 1042.0], [91.1, 1042.0], [91.2, 1043.0], [91.3, 1045.0], [91.4, 1047.0], [91.5, 1049.0], [91.6, 1052.0], [91.7, 1053.0], [91.8, 1055.0], [91.9, 1057.0], [92.0, 1059.0], [92.1, 1060.0], [92.2, 1064.0], [92.3, 1067.0], [92.4, 1071.0], [92.5, 1076.0], [92.6, 1077.0], [92.7, 1080.0], [92.8, 1085.0], [92.9, 1085.0], [93.0, 1086.0], [93.1, 1090.0], [93.2, 1094.0], [93.3, 1096.0], [93.4, 1097.0], [93.5, 1098.0], [93.6, 1099.0], [93.7, 1102.0], [93.8, 1103.0], [93.9, 1106.0], [94.0, 1108.0], [94.1, 1109.0], [94.2, 1111.0], [94.3, 1114.0], [94.4, 1114.0], [94.5, 1115.0], [94.6, 1115.0], [94.7, 1116.0], [94.8, 1120.0], [94.9, 1121.0], [95.0, 1121.0], [95.1, 1122.0], [95.2, 1123.0], [95.3, 1128.0], [95.4, 1132.0], [95.5, 1134.0], [95.6, 1135.0], [95.7, 1136.0], [95.8, 1139.0], [95.9, 1141.0], [96.0, 1143.0], [96.1, 1145.0], [96.2, 1150.0], [96.3, 1156.0], [96.4, 1158.0], [96.5, 1160.0], [96.6, 1160.0], [96.7, 1161.0], [96.8, 1165.0], [96.9, 1168.0], [97.0, 1169.0], [97.1, 1170.0], [97.2, 1171.0], [97.3, 1173.0], [97.4, 1175.0], [97.5, 1176.0], [97.6, 1178.0], [97.7, 1178.0], [97.8, 1180.0], [97.9, 1183.0], [98.0, 1183.0], [98.1, 1184.0], [98.2, 1191.0], [98.3, 1196.0], [98.4, 1198.0], [98.5, 1200.0], [98.6, 1205.0], [98.7, 1209.0], [98.8, 1210.0], [98.9, 1214.0], [99.0, 1223.0], [99.1, 1224.0], [99.2, 1229.0], [99.3, 1234.0], [99.4, 1240.0], [99.5, 1249.0], [99.6, 1284.0], [99.7, 1314.0], [99.8, 1320.0], [99.9, 1381.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 1945.0], [0.1, 1950.0], [0.2, 1955.0], [0.3, 1955.0], [0.4, 1971.0], [0.5, 1999.0], [0.6, 2000.0], [0.7, 2008.0], [0.8, 2037.0], [0.9, 2039.0], [1.0, 2042.0], [1.1, 2050.0], [1.2, 2053.0], [1.3, 2054.0], [1.4, 2054.0], [1.5, 2062.0], [1.6, 2068.0], [1.7, 2068.0], [1.8, 2070.0], [1.9, 2072.0], [2.0, 2073.0], [2.1, 2075.0], [2.2, 2078.0], [2.3, 2082.0], [2.4, 2083.0], [2.5, 2096.0], [2.6, 2107.0], [2.7, 2127.0], [2.8, 2144.0], [2.9, 2155.0], [3.0, 2164.0], [3.1, 2164.0], [3.2, 2164.0], [3.3, 2168.0], [3.4, 2169.0], [3.5, 2180.0], [3.6, 2181.0], [3.7, 2181.0], [3.8, 2188.0], [3.9, 2191.0], [4.0, 2192.0], [4.1, 2193.0], [4.2, 2193.0], [4.3, 2194.0], [4.4, 2196.0], [4.5, 2197.0], [4.6, 2198.0], [4.7, 2208.0], [4.8, 2211.0], [4.9, 2221.0], [5.0, 2221.0], [5.1, 2223.0], [5.2, 2227.0], [5.3, 2230.0], [5.4, 2230.0], [5.5, 2230.0], [5.6, 2231.0], [5.7, 2232.0], [5.8, 2232.0], [5.9, 2236.0], [6.0, 2239.0], [6.1, 2242.0], [6.2, 2243.0], [6.3, 2243.0], [6.4, 2246.0], [6.5, 2247.0], [6.6, 2247.0], [6.7, 2247.0], [6.8, 2247.0], [6.9, 2248.0], [7.0, 2249.0], [7.1, 2250.0], [7.2, 2252.0], [7.3, 2255.0], [7.4, 2258.0], [7.5, 2258.0], [7.6, 2258.0], [7.7, 2259.0], [7.8, 2260.0], [7.9, 2260.0], [8.0, 2263.0], [8.1, 2263.0], [8.2, 2264.0], [8.3, 2264.0], [8.4, 2264.0], [8.5, 2264.0], [8.6, 2266.0], [8.7, 2266.0], [8.8, 2270.0], [8.9, 2271.0], [9.0, 2271.0], [9.1, 2272.0], [9.2, 2276.0], [9.3, 2276.0], [9.4, 2282.0], [9.5, 2290.0], [9.6, 2290.0], [9.7, 2291.0], [9.8, 2293.0], [9.9, 2294.0], [10.0, 2294.0], [10.1, 2294.0], [10.2, 2297.0], [10.3, 2297.0], [10.4, 2301.0], [10.5, 2302.0], [10.6, 2308.0], [10.7, 2310.0], [10.8, 2311.0], [10.9, 2315.0], [11.0, 2315.0], [11.1, 2320.0], [11.2, 2321.0], [11.3, 2322.0], [11.4, 2323.0], [11.5, 2325.0], [11.6, 2326.0], [11.7, 2328.0], [11.8, 2333.0], [11.9, 2334.0], [12.0, 2335.0], [12.1, 2335.0], [12.2, 2336.0], [12.3, 2337.0], [12.4, 2339.0], [12.5, 2341.0], [12.6, 2343.0], [12.7, 2345.0], [12.8, 2349.0], [12.9, 2354.0], [13.0, 2355.0], [13.1, 2357.0], [13.2, 2357.0], [13.3, 2357.0], [13.4, 2358.0], [13.5, 2363.0], [13.6, 2364.0], [13.7, 2366.0], [13.8, 2366.0], [13.9, 2366.0], [14.0, 2367.0], [14.1, 2369.0], [14.2, 2369.0], [14.3, 2370.0], [14.4, 2371.0], [14.5, 2372.0], [14.6, 2372.0], [14.7, 2373.0], [14.8, 2375.0], [14.9, 2375.0], [15.0, 2377.0], [15.1, 2377.0], [15.2, 2378.0], [15.3, 2380.0], [15.4, 2381.0], [15.5, 2381.0], [15.6, 2383.0], [15.7, 2385.0], [15.8, 2385.0], [15.9, 2388.0], [16.0, 2388.0], [16.1, 2390.0], [16.2, 2393.0], [16.3, 2393.0], [16.4, 2396.0], [16.5, 2396.0], [16.6, 2396.0], [16.7, 2397.0], [16.8, 2398.0], [16.9, 2399.0], [17.0, 2400.0], [17.1, 2404.0], [17.2, 2405.0], [17.3, 2406.0], [17.4, 2407.0], [17.5, 2407.0], [17.6, 2408.0], [17.7, 2408.0], [17.8, 2412.0], [17.9, 2414.0], [18.0, 2420.0], [18.1, 2421.0], [18.2, 2425.0], [18.3, 2427.0], [18.4, 2429.0], [18.5, 2430.0], [18.6, 2430.0], [18.7, 2431.0], [18.8, 2434.0], [18.9, 2434.0], [19.0, 2435.0], [19.1, 2436.0], [19.2, 2437.0], [19.3, 2440.0], [19.4, 2440.0], [19.5, 2441.0], [19.6, 2444.0], [19.7, 2444.0], [19.8, 2445.0], [19.9, 2445.0], [20.0, 2447.0], [20.1, 2449.0], [20.2, 2449.0], [20.3, 2451.0], [20.4, 2451.0], [20.5, 2459.0], [20.6, 2463.0], [20.7, 2466.0], [20.8, 2466.0], [20.9, 2469.0], [21.0, 2469.0], [21.1, 2477.0], [21.2, 2479.0], [21.3, 2482.0], [21.4, 2483.0], [21.5, 2484.0], [21.6, 2484.0], [21.7, 2488.0], [21.8, 2489.0], [21.9, 2489.0], [22.0, 2492.0], [22.1, 2494.0], [22.2, 2495.0], [22.3, 2496.0], [22.4, 2496.0], [22.5, 2500.0], [22.6, 2501.0], [22.7, 2501.0], [22.8, 2502.0], [22.9, 2506.0], [23.0, 2507.0], [23.1, 2509.0], [23.2, 2509.0], [23.3, 2510.0], [23.4, 2513.0], [23.5, 2522.0], [23.6, 2522.0], [23.7, 2526.0], [23.8, 2530.0], [23.9, 2530.0], [24.0, 2536.0], [24.1, 2537.0], [24.2, 2543.0], [24.3, 2543.0], [24.4, 2543.0], [24.5, 2544.0], [24.6, 2545.0], [24.7, 2546.0], [24.8, 2549.0], [24.9, 2550.0], [25.0, 2551.0], [25.1, 2555.0], [25.2, 2562.0], [25.3, 2566.0], [25.4, 2567.0], [25.5, 2568.0], [25.6, 2572.0], [25.7, 2576.0], [25.8, 2576.0], [25.9, 2581.0], [26.0, 2581.0], [26.1, 2582.0], [26.2, 2584.0], [26.3, 2584.0], [26.4, 2586.0], [26.5, 2586.0], [26.6, 2590.0], [26.7, 2592.0], [26.8, 2593.0], [26.9, 2597.0], [27.0, 2599.0], [27.1, 2605.0], [27.2, 2607.0], [27.3, 2608.0], [27.4, 2609.0], [27.5, 2611.0], [27.6, 2613.0], [27.7, 2614.0], [27.8, 2616.0], [27.9, 2617.0], [28.0, 2621.0], [28.1, 2622.0], [28.2, 2622.0], [28.3, 2624.0], [28.4, 2625.0], [28.5, 2626.0], [28.6, 2626.0], [28.7, 2628.0], [28.8, 2628.0], [28.9, 2631.0], [29.0, 2633.0], [29.1, 2634.0], [29.2, 2635.0], [29.3, 2637.0], [29.4, 2640.0], [29.5, 2642.0], [29.6, 2644.0], [29.7, 2645.0], [29.8, 2647.0], [29.9, 2648.0], [30.0, 2648.0], [30.1, 2649.0], [30.2, 2649.0], [30.3, 2650.0], [30.4, 2650.0], [30.5, 2650.0], [30.6, 2650.0], [30.7, 2655.0], [30.8, 2656.0], [30.9, 2656.0], [31.0, 2657.0], [31.1, 2657.0], [31.2, 2660.0], [31.3, 2660.0], [31.4, 2661.0], [31.5, 2662.0], [31.6, 2662.0], [31.7, 2663.0], [31.8, 2663.0], [31.9, 2664.0], [32.0, 2665.0], [32.1, 2665.0], [32.2, 2667.0], [32.3, 2669.0], [32.4, 2669.0], [32.5, 2672.0], [32.6, 2675.0], [32.7, 2676.0], [32.8, 2677.0], [32.9, 2681.0], [33.0, 2681.0], [33.1, 2681.0], [33.2, 2682.0], [33.3, 2682.0], [33.4, 2684.0], [33.5, 2686.0], [33.6, 2688.0], [33.7, 2689.0], [33.8, 2692.0], [33.9, 2693.0], [34.0, 2694.0], [34.1, 2694.0], [34.2, 2694.0], [34.3, 2695.0], [34.4, 2695.0], [34.5, 2697.0], [34.6, 2697.0], [34.7, 2702.0], [34.8, 2703.0], [34.9, 2705.0], [35.0, 2705.0], [35.1, 2706.0], [35.2, 2708.0], [35.3, 2709.0], [35.4, 2711.0], [35.5, 2712.0], [35.6, 2713.0], [35.7, 2713.0], [35.8, 2714.0], [35.9, 2714.0], [36.0, 2715.0], [36.1, 2716.0], [36.2, 2716.0], [36.3, 2717.0], [36.4, 2719.0], [36.5, 2725.0], [36.6, 2725.0], [36.7, 2727.0], [36.8, 2730.0], [36.9, 2731.0], [37.0, 2731.0], [37.1, 2733.0], [37.2, 2733.0], [37.3, 2734.0], [37.4, 2735.0], [37.5, 2736.0], [37.6, 2740.0], [37.7, 2740.0], [37.8, 2741.0], [37.9, 2742.0], [38.0, 2743.0], [38.1, 2744.0], [38.2, 2745.0], [38.3, 2747.0], [38.4, 2748.0], [38.5, 2749.0], [38.6, 2751.0], [38.7, 2753.0], [38.8, 2754.0], [38.9, 2757.0], [39.0, 2757.0], [39.1, 2758.0], [39.2, 2759.0], [39.3, 2761.0], [39.4, 2764.0], [39.5, 2767.0], [39.6, 2769.0], [39.7, 2773.0], [39.8, 2777.0], [39.9, 2777.0], [40.0, 2781.0], [40.1, 2783.0], [40.2, 2786.0], [40.3, 2788.0], [40.4, 2789.0], [40.5, 2790.0], [40.6, 2793.0], [40.7, 2793.0], [40.8, 2794.0], [40.9, 2794.0], [41.0, 2795.0], [41.1, 2796.0], [41.2, 2796.0], [41.3, 2797.0], [41.4, 2798.0], [41.5, 2800.0], [41.6, 2800.0], [41.7, 2802.0], [41.8, 2803.0], [41.9, 2806.0], [42.0, 2808.0], [42.1, 2808.0], [42.2, 2808.0], [42.3, 2812.0], [42.4, 2816.0], [42.5, 2818.0], [42.6, 2818.0], [42.7, 2820.0], [42.8, 2822.0], [42.9, 2822.0], [43.0, 2824.0], [43.1, 2825.0], [43.2, 2825.0], [43.3, 2827.0], [43.4, 2829.0], [43.5, 2830.0], [43.6, 2834.0], [43.7, 2834.0], [43.8, 2834.0], [43.9, 2837.0], [44.0, 2837.0], [44.1, 2844.0], [44.2, 2844.0], [44.3, 2848.0], [44.4, 2848.0], [44.5, 2849.0], [44.6, 2849.0], [44.7, 2849.0], [44.8, 2849.0], [44.9, 2851.0], [45.0, 2852.0], [45.1, 2854.0], [45.2, 2854.0], [45.3, 2855.0], [45.4, 2857.0], [45.5, 2858.0], [45.6, 2858.0], [45.7, 2858.0], [45.8, 2859.0], [45.9, 2860.0], [46.0, 2861.0], [46.1, 2862.0], [46.2, 2862.0], [46.3, 2866.0], [46.4, 2872.0], [46.5, 2873.0], [46.6, 2873.0], [46.7, 2876.0], [46.8, 2876.0], [46.9, 2876.0], [47.0, 2877.0], [47.1, 2878.0], [47.2, 2878.0], [47.3, 2878.0], [47.4, 2878.0], [47.5, 2880.0], [47.6, 2881.0], [47.7, 2882.0], [47.8, 2882.0], [47.9, 2885.0], [48.0, 2885.0], [48.1, 2887.0], [48.2, 2888.0], [48.3, 2888.0], [48.4, 2890.0], [48.5, 2891.0], [48.6, 2898.0], [48.7, 2906.0], [48.8, 2907.0], [48.9, 2908.0], [49.0, 2908.0], [49.1, 2911.0], [49.2, 2911.0], [49.3, 2912.0], [49.4, 2913.0], [49.5, 2913.0], [49.6, 2914.0], [49.7, 2921.0], [49.8, 2921.0], [49.9, 2923.0], [50.0, 2925.0], [50.1, 2925.0], [50.2, 2926.0], [50.3, 2926.0], [50.4, 2927.0], [50.5, 2929.0], [50.6, 2931.0], [50.7, 2935.0], [50.8, 2935.0], [50.9, 2937.0], [51.0, 2938.0], [51.1, 2938.0], [51.2, 2940.0], [51.3, 2941.0], [51.4, 2946.0], [51.5, 2947.0], [51.6, 2952.0], [51.7, 2956.0], [51.8, 2957.0], [51.9, 2960.0], [52.0, 2960.0], [52.1, 2963.0], [52.2, 2968.0], [52.3, 2971.0], [52.4, 2973.0], [52.5, 2973.0], [52.6, 2974.0], [52.7, 2975.0], [52.8, 2978.0], [52.9, 2980.0], [53.0, 2981.0], [53.1, 2981.0], [53.2, 2982.0], [53.3, 2983.0], [53.4, 2988.0], [53.5, 2992.0], [53.6, 2994.0], [53.7, 2994.0], [53.8, 2996.0], [53.9, 2998.0], [54.0, 2999.0], [54.1, 3000.0], [54.2, 3000.0], [54.3, 3000.0], [54.4, 3000.0], [54.5, 3001.0], [54.6, 3006.0], [54.7, 3007.0], [54.8, 3009.0], [54.9, 3017.0], [55.0, 3019.0], [55.1, 3020.0], [55.2, 3022.0], [55.3, 3022.0], [55.4, 3025.0], [55.5, 3025.0], [55.6, 3025.0], [55.7, 3026.0], [55.8, 3027.0], [55.9, 3029.0], [56.0, 3029.0], [56.1, 3030.0], [56.2, 3030.0], [56.3, 3031.0], [56.4, 3031.0], [56.5, 3032.0], [56.6, 3033.0], [56.7, 3035.0], [56.8, 3039.0], [56.9, 3039.0], [57.0, 3040.0], [57.1, 3040.0], [57.2, 3040.0], [57.3, 3040.0], [57.4, 3042.0], [57.5, 3042.0], [57.6, 3045.0], [57.7, 3045.0], [57.8, 3045.0], [57.9, 3047.0], [58.0, 3047.0], [58.1, 3047.0], [58.2, 3048.0], [58.3, 3050.0], [58.4, 3050.0], [58.5, 3050.0], [58.6, 3051.0], [58.7, 3053.0], [58.8, 3053.0], [58.9, 3054.0], [59.0, 3055.0], [59.1, 3056.0], [59.2, 3056.0], [59.3, 3058.0], [59.4, 3058.0], [59.5, 3059.0], [59.6, 3062.0], [59.7, 3062.0], [59.8, 3063.0], [59.9, 3064.0], [60.0, 3066.0], [60.1, 3067.0], [60.2, 3069.0], [60.3, 3070.0], [60.4, 3077.0], [60.5, 3080.0], [60.6, 3083.0], [60.7, 3084.0], [60.8, 3084.0], [60.9, 3084.0], [61.0, 3084.0], [61.1, 3093.0], [61.2, 3093.0], [61.3, 3094.0], [61.4, 3095.0], [61.5, 3097.0], [61.6, 3099.0], [61.7, 3101.0], [61.8, 3104.0], [61.9, 3105.0], [62.0, 3105.0], [62.1, 3107.0], [62.2, 3110.0], [62.3, 3111.0], [62.4, 3112.0], [62.5, 3113.0], [62.6, 3114.0], [62.7, 3115.0], [62.8, 3115.0], [62.9, 3115.0], [63.0, 3120.0], [63.1, 3121.0], [63.2, 3124.0], [63.3, 3125.0], [63.4, 3128.0], [63.5, 3128.0], [63.6, 3129.0], [63.7, 3129.0], [63.8, 3129.0], [63.9, 3131.0], [64.0, 3131.0], [64.1, 3139.0], [64.2, 3140.0], [64.3, 3141.0], [64.4, 3141.0], [64.5, 3141.0], [64.6, 3142.0], [64.7, 3142.0], [64.8, 3142.0], [64.9, 3143.0], [65.0, 3144.0], [65.1, 3144.0], [65.2, 3144.0], [65.3, 3144.0], [65.4, 3145.0], [65.5, 3145.0], [65.6, 3145.0], [65.7, 3146.0], [65.8, 3146.0], [65.9, 3148.0], [66.0, 3148.0], [66.1, 3150.0], [66.2, 3151.0], [66.3, 3153.0], [66.4, 3154.0], [66.5, 3160.0], [66.6, 3162.0], [66.7, 3162.0], [66.8, 3164.0], [66.9, 3165.0], [67.0, 3165.0], [67.1, 3166.0], [67.2, 3173.0], [67.3, 3176.0], [67.4, 3177.0], [67.5, 3179.0], [67.6, 3183.0], [67.7, 3188.0], [67.8, 3190.0], [67.9, 3200.0], [68.0, 3202.0], [68.1, 3206.0], [68.2, 3211.0], [68.3, 3213.0], [68.4, 3224.0], [68.5, 3226.0], [68.6, 3230.0], [68.7, 3233.0], [68.8, 3235.0], [68.9, 3242.0], [69.0, 3244.0], [69.1, 3245.0], [69.2, 3245.0], [69.3, 3245.0], [69.4, 3248.0], [69.5, 3249.0], [69.6, 3250.0], [69.7, 3251.0], [69.8, 3252.0], [69.9, 3254.0], [70.0, 3256.0], [70.1, 3258.0], [70.2, 3260.0], [70.3, 3260.0], [70.4, 3262.0], [70.5, 3266.0], [70.6, 3268.0], [70.7, 3269.0], [70.8, 3270.0], [70.9, 3271.0], [71.0, 3273.0], [71.1, 3273.0], [71.2, 3275.0], [71.3, 3276.0], [71.4, 3276.0], [71.5, 3280.0], [71.6, 3281.0], [71.7, 3282.0], [71.8, 3285.0], [71.9, 3287.0], [72.0, 3287.0], [72.1, 3287.0], [72.2, 3287.0], [72.3, 3288.0], [72.4, 3290.0], [72.5, 3290.0], [72.6, 3294.0], [72.7, 3295.0], [72.8, 3295.0], [72.9, 3296.0], [73.0, 3296.0], [73.1, 3297.0], [73.2, 3298.0], [73.3, 3300.0], [73.4, 3301.0], [73.5, 3302.0], [73.6, 3303.0], [73.7, 3304.0], [73.8, 3306.0], [73.9, 3306.0], [74.0, 3306.0], [74.1, 3307.0], [74.2, 3307.0], [74.3, 3307.0], [74.4, 3308.0], [74.5, 3308.0], [74.6, 3308.0], [74.7, 3309.0], [74.8, 3309.0], [74.9, 3310.0], [75.0, 3310.0], [75.1, 3312.0], [75.2, 3313.0], [75.3, 3314.0], [75.4, 3315.0], [75.5, 3317.0], [75.6, 3318.0], [75.7, 3319.0], [75.8, 3319.0], [75.9, 3319.0], [76.0, 3321.0], [76.1, 3322.0], [76.2, 3322.0], [76.3, 3322.0], [76.4, 3325.0], [76.5, 3326.0], [76.6, 3328.0], [76.7, 3328.0], [76.8, 3329.0], [76.9, 3329.0], [77.0, 3330.0], [77.1, 3331.0], [77.2, 3331.0], [77.3, 3331.0], [77.4, 3331.0], [77.5, 3332.0], [77.6, 3333.0], [77.7, 3333.0], [77.8, 3334.0], [77.9, 3334.0], [78.0, 3335.0], [78.1, 3335.0], [78.2, 3336.0], [78.3, 3336.0], [78.4, 3337.0], [78.5, 3337.0], [78.6, 3338.0], [78.7, 3341.0], [78.8, 3341.0], [78.9, 3341.0], [79.0, 3342.0], [79.1, 3342.0], [79.2, 3343.0], [79.3, 3344.0], [79.4, 3346.0], [79.5, 3346.0], [79.6, 3346.0], [79.7, 3347.0], [79.8, 3348.0], [79.9, 3348.0], [80.0, 3348.0], [80.1, 3349.0], [80.2, 3353.0], [80.3, 3354.0], [80.4, 3355.0], [80.5, 3355.0], [80.6, 3356.0], [80.7, 3356.0], [80.8, 3357.0], [80.9, 3357.0], [81.0, 3359.0], [81.1, 3359.0], [81.2, 3361.0], [81.3, 3362.0], [81.4, 3362.0], [81.5, 3362.0], [81.6, 3363.0], [81.7, 3363.0], [81.8, 3364.0], [81.9, 3368.0], [82.0, 3369.0], [82.1, 3370.0], [82.2, 3371.0], [82.3, 3372.0], [82.4, 3373.0], [82.5, 3373.0], [82.6, 3374.0], [82.7, 3374.0], [82.8, 3375.0], [82.9, 3375.0], [83.0, 3375.0], [83.1, 3376.0], [83.2, 3376.0], [83.3, 3381.0], [83.4, 3381.0], [83.5, 3382.0], [83.6, 3383.0], [83.7, 3383.0], [83.8, 3383.0], [83.9, 3390.0], [84.0, 3390.0], [84.1, 3391.0], [84.2, 3397.0], [84.3, 3400.0], [84.4, 3416.0], [84.5, 3420.0], [84.6, 3426.0], [84.7, 3434.0], [84.8, 3435.0], [84.9, 3440.0], [85.0, 3443.0], [85.1, 3451.0], [85.2, 3455.0], [85.3, 3460.0], [85.4, 3461.0], [85.5, 3472.0], [85.6, 3477.0], [85.7, 3478.0], [85.8, 3484.0], [85.9, 3492.0], [86.0, 3492.0], [86.1, 3504.0], [86.2, 3512.0], [86.3, 3512.0], [86.4, 3512.0], [86.5, 3514.0], [86.6, 3515.0], [86.7, 3515.0], [86.8, 3520.0], [86.9, 3525.0], [87.0, 3528.0], [87.1, 3528.0], [87.2, 3563.0], [87.3, 3568.0], [87.4, 3599.0], [87.5, 3604.0], [87.6, 3607.0], [87.7, 3610.0], [87.8, 3611.0], [87.9, 3614.0], [88.0, 3616.0], [88.1, 3628.0], [88.2, 3632.0], [88.3, 3633.0], [88.4, 3634.0], [88.5, 3635.0], [88.6, 3638.0], [88.7, 3640.0], [88.8, 3641.0], [88.9, 3642.0], [89.0, 3642.0], [89.1, 3643.0], [89.2, 3645.0], [89.3, 3648.0], [89.4, 3649.0], [89.5, 3650.0], [89.6, 3652.0], [89.7, 3654.0], [89.8, 3654.0], [89.9, 3655.0], [90.0, 3655.0], [90.1, 3657.0], [90.2, 3657.0], [90.3, 3658.0], [90.4, 3658.0], [90.5, 3659.0], [90.6, 3659.0], [90.7, 3660.0], [90.8, 3661.0], [90.9, 3661.0], [91.0, 3662.0], [91.1, 3663.0], [91.2, 3663.0], [91.3, 3664.0], [91.4, 3666.0], [91.5, 3666.0], [91.6, 3667.0], [91.7, 3668.0], [91.8, 3668.0], [91.9, 3668.0], [92.0, 3670.0], [92.1, 3670.0], [92.2, 3672.0], [92.3, 3673.0], [92.4, 3674.0], [92.5, 3675.0], [92.6, 3675.0], [92.7, 3675.0], [92.8, 3676.0], [92.9, 3677.0], [93.0, 3677.0], [93.1, 3678.0], [93.2, 3678.0], [93.3, 3678.0], [93.4, 3678.0], [93.5, 3679.0], [93.6, 3680.0], [93.7, 3680.0], [93.8, 3680.0], [93.9, 3680.0], [94.0, 3681.0], [94.1, 3681.0], [94.2, 3681.0], [94.3, 3681.0], [94.4, 3682.0], [94.5, 3683.0], [94.6, 3683.0], [94.7, 3686.0], [94.8, 3686.0], [94.9, 3686.0], [95.0, 3687.0], [95.1, 3688.0], [95.2, 3688.0], [95.3, 3690.0], [95.4, 3691.0], [95.5, 3691.0], [95.6, 3692.0], [95.7, 3692.0], [95.8, 3695.0], [95.9, 3696.0], [96.0, 3698.0], [96.1, 3699.0], [96.2, 3700.0], [96.3, 3701.0], [96.4, 3701.0], [96.5, 3702.0], [96.6, 3702.0], [96.7, 3703.0], [96.8, 3703.0], [96.9, 3703.0], [97.0, 3704.0], [97.1, 3704.0], [97.2, 3705.0], [97.3, 3705.0], [97.4, 3705.0], [97.5, 3706.0], [97.6, 3707.0], [97.7, 3708.0], [97.8, 3709.0], [97.9, 3709.0], [98.0, 3710.0], [98.1, 3714.0], [98.2, 3715.0], [98.3, 3716.0], [98.4, 3716.0], [98.5, 3718.0], [98.6, 3719.0], [98.7, 3719.0], [98.8, 3720.0], [98.9, 3721.0], [99.0, 3722.0], [99.1, 3723.0], [99.2, 3726.0], [99.3, 3728.0], [99.4, 3731.0], [99.5, 3739.0], [99.6, 3739.0], [99.7, 3745.0], [99.8, 3745.0], [99.9, 3750.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 256.0, "series": [{"data": [[0.0, 256.0], [300.0, 217.0], [600.0, 55.0], [700.0, 11.0], [400.0, 238.0], [200.0, 75.0], [800.0, 3.0], [100.0, 38.0], [500.0, 107.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[600.0, 155.0], [700.0, 59.0], [200.0, 72.0], [800.0, 28.0], [900.0, 37.0], [1000.0, 52.0], [1100.0, 48.0], [300.0, 143.0], [1200.0, 12.0], [1300.0, 3.0], [400.0, 147.0], [100.0, 1.0], [500.0, 243.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[2100.0, 21.0], [2200.0, 58.0], [2300.0, 66.0], [2400.0, 54.0], [2500.0, 46.0], [2600.0, 76.0], [2800.0, 72.0], [2700.0, 68.0], [2900.0, 54.0], [3000.0, 76.0], [3100.0, 62.0], [3200.0, 54.0], [3300.0, 111.0], [3400.0, 18.0], [3500.0, 14.0], [3600.0, 87.0], [3700.0, 38.0], [1900.0, 6.0], [2000.0, 19.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 267.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1153.0, "series": [{"data": [[0.0, 1153.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 580.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 267.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 247.7489999999993, "minX": 1.6690041E12, "maxY": 590.1070000000001, "series": [{"data": [[1.6690041E12, 443.8640000000001]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}, {"data": [[1.6690041E12, 247.7489999999993]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}, {"data": [[1.6690041E12, 590.1070000000001]], "isOverall": false, "label": "client-to-application (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6690041E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.5, "minX": 1.0, "maxY": 3716.0, "series": [{"data": [[2.0, 13.666666666666666], [3.0, 11.5], [4.0, 20.0], [5.0, 18.5], [6.0, 19.666666666666668], [7.0, 18.0], [8.0, 25.57142857142857], [9.0, 24.0], [10.0, 23.666666666666668], [11.0, 23.454545454545453], [12.0, 16.25], [13.0, 24.461538461538463], [14.0, 22.125], [15.0, 28.2], [16.0, 21.666666666666668], [17.0, 30.888888888888882], [18.0, 32.333333333333336], [19.0, 44.5], [20.0, 45.28571428571428], [21.0, 50.666666666666664], [22.0, 37.0], [23.0, 34.71428571428571], [24.0, 33.285714285714285], [25.0, 32.2], [26.0, 34.0], [27.0, 32.857142857142854], [28.0, 35.6], [29.0, 29.0], [30.0, 38.0], [31.0, 31.833333333333336], [32.0, 33.5], [33.0, 27.0], [34.0, 28.25], [35.0, 25.0], [37.0, 29.666666666666668], [36.0, 29.666666666666668], [38.0, 29.5], [39.0, 31.333333333333332], [40.0, 119.7142857142857], [41.0, 32.0], [42.0, 61.0], [43.0, 30.0], [45.0, 65.8], [44.0, 34.0], [46.0, 56.4], [47.0, 26.0], [49.0, 85.0], [48.0, 83.0], [50.0, 88.0], [58.0, 195.16666666666663], [63.0, 66.0], [62.0, 154.66666666666666], [67.0, 178.0], [66.0, 374.0], [65.0, 377.5], [64.0, 207.0], [71.0, 209.0], [70.0, 122.0], [69.0, 183.0], [68.0, 141.0], [75.0, 302.0], [74.0, 369.0], [73.0, 123.0], [72.0, 142.0], [79.0, 304.0], [77.0, 387.0], [83.0, 353.0], [81.0, 239.5], [87.0, 110.0], [86.0, 216.5], [85.0, 259.0], [110.0, 365.57142857142856], [115.0, 359.5], [113.0, 340.0], [112.0, 308.0], [118.0, 281.6666666666667], [117.0, 577.0], [116.0, 293.0], [123.0, 350.0], [122.0, 217.5], [121.0, 154.0], [127.0, 350.0], [126.0, 180.0], [125.0, 106.5], [135.0, 476.0], [134.0, 409.0], [133.0, 235.0], [131.0, 299.5], [129.0, 174.0], [128.0, 337.5], [143.0, 439.5], [142.0, 258.0], [141.0, 401.3333333333333], [138.0, 442.3333333333333], [136.0, 361.0], [151.0, 289.0], [150.0, 266.0], [149.0, 252.0], [148.0, 354.0], [147.0, 399.0], [146.0, 563.0], [145.0, 410.0], [144.0, 289.0], [157.0, 307.0], [156.0, 300.0], [155.0, 378.0], [154.0, 361.0], [152.0, 329.0], [167.0, 300.0], [166.0, 342.0], [165.0, 143.0], [164.0, 320.0], [163.0, 299.0], [161.0, 349.0], [160.0, 415.5], [175.0, 367.0], [172.0, 344.0], [171.0, 228.0], [170.0, 256.0], [169.0, 317.0], [183.0, 304.5], [181.0, 363.3333333333333], [179.0, 332.0], [178.0, 368.0], [177.0, 325.0], [176.0, 328.0], [188.0, 381.3333333333333], [186.0, 337.3333333333333], [199.0, 192.0], [198.0, 271.5], [196.0, 327.0], [195.0, 402.0], [194.0, 559.0], [193.0, 292.0], [192.0, 313.0], [207.0, 280.0], [206.0, 456.3333333333333], [205.0, 274.0], [204.0, 262.5], [203.0, 592.0], [201.0, 365.6666666666667], [200.0, 399.0], [215.0, 352.0], [214.0, 350.5], [213.0, 384.0], [210.0, 321.0], [209.0, 382.0], [208.0, 287.0], [223.0, 371.0], [222.0, 315.0], [220.0, 346.5], [219.0, 336.5], [217.0, 292.0], [216.0, 312.0], [231.0, 311.0], [230.0, 356.0], [229.0, 378.0], [228.0, 359.0], [227.0, 346.0], [226.0, 318.0], [225.0, 338.0], [224.0, 311.0], [239.0, 266.0], [238.0, 344.0], [237.0, 310.0], [236.0, 316.0], [234.0, 356.0], [233.0, 333.0], [232.0, 260.0], [246.0, 373.8], [244.0, 438.3333333333333], [245.0, 332.4], [247.0, 305.8], [243.0, 288.0], [241.0, 263.0], [240.0, 402.5], [242.0, 315.75], [255.0, 345.0], [253.0, 465.0], [251.0, 470.5], [250.0, 390.5], [248.0, 427.75], [249.0, 355.0], [271.0, 353.0], [270.0, 376.5], [267.0, 489.0], [265.0, 355.0], [264.0, 308.0], [263.0, 514.0], [261.0, 296.0], [258.0, 600.0], [257.0, 532.0], [286.0, 451.0], [287.0, 353.0], [285.0, 273.0], [284.0, 825.0], [283.0, 711.0], [282.0, 360.0], [280.0, 317.0], [278.0, 761.0], [272.0, 455.3333333333333], [275.0, 721.0], [273.0, 441.5], [277.0, 814.0], [276.0, 502.0], [291.0, 356.0], [302.0, 556.0], [303.0, 498.0], [300.0, 518.3333333333334], [297.0, 559.0], [296.0, 483.5], [295.0, 338.0], [293.0, 470.0], [292.0, 437.0], [290.0, 390.0], [289.0, 368.0], [288.0, 392.0], [313.0, 363.6666666666667], [312.0, 473.5], [311.0, 412.0], [310.0, 437.0], [308.0, 437.5], [306.0, 293.0], [304.0, 433.0], [334.0, 456.0], [335.0, 291.0], [333.0, 374.0], [323.0, 526.0], [322.0, 452.0], [321.0, 114.0], [320.0, 511.0], [331.0, 407.0], [330.0, 508.0], [329.0, 351.0], [328.0, 448.5], [327.0, 478.0], [325.0, 431.0], [324.0, 435.5], [344.0, 349.0], [343.0, 353.3333333333333], [342.0, 243.0], [340.0, 350.6666666666667], [338.0, 361.0], [337.0, 410.3333333333333], [354.0, 459.3333333333333], [367.0, 449.5], [365.0, 371.0], [355.0, 468.0], [362.0, 459.5], [360.0, 408.5], [359.0, 323.0], [358.0, 322.6666666666667], [356.0, 451.0], [352.0, 428.2307692307692], [353.0, 477.0], [382.0, 358.3333333333333], [375.0, 468.0], [369.0, 451.0], [368.0, 479.0], [374.0, 346.0], [373.0, 441.6], [372.0, 439.5], [383.0, 441.2], [381.0, 433.0], [380.0, 386.3333333333333], [379.0, 453.3333333333333], [378.0, 390.0], [377.0, 431.75], [376.0, 429.8], [397.0, 492.5], [393.0, 357.16666666666663], [395.0, 493.5], [394.0, 483.0], [392.0, 432.5], [391.0, 389.5714285714286], [390.0, 381.4], [396.0, 439.6666666666667], [399.0, 470.0], [389.0, 459.0], [388.0, 593.5], [387.0, 444.5], [386.0, 444.2], [385.0, 404.0], [384.0, 447.0], [414.0, 459.5], [413.0, 587.8], [415.0, 416.0], [412.0, 425.0], [410.0, 533.5], [409.0, 608.5], [408.0, 449.0], [407.0, 596.5], [401.0, 508.33333333333337], [400.0, 496.14285714285717], [403.0, 543.6666666666666], [402.0, 474.75], [406.0, 607.5], [405.0, 463.0], [404.0, 550.6666666666666], [428.0, 361.0], [417.0, 448.8], [416.0, 404.0], [427.0, 440.0], [426.0, 396.75], [425.0, 416.0], [424.0, 386.75], [431.0, 528.5], [430.0, 552.0], [429.0, 438.0], [423.0, 466.0], [422.0, 318.3333333333333], [421.0, 425.6666666666667], [420.0, 435.5], [419.0, 426.3333333333333], [418.0, 373.0], [446.0, 539.0], [443.0, 596.6666666666666], [441.0, 554.0], [440.0, 452.5], [438.0, 652.0], [432.0, 497.0], [437.0, 483.0], [436.0, 541.0], [435.0, 518.5], [433.0, 569.0], [451.0, 453.0], [463.0, 380.0], [462.0, 439.0], [459.0, 378.3333333333333], [456.0, 497.0], [455.0, 443.0], [454.0, 432.0], [453.0, 638.0], [450.0, 498.0], [449.0, 624.5], [448.0, 540.5], [478.0, 459.0], [479.0, 546.0], [477.0, 540.0], [476.0, 416.0], [475.0, 442.0], [474.0, 435.0], [473.0, 508.5], [471.0, 444.0], [464.0, 376.0], [467.0, 418.0], [465.0, 447.0], [470.0, 455.0], [469.0, 549.0], [468.0, 413.0], [493.0, 399.0], [494.0, 541.0], [492.0, 583.0], [483.0, 416.0], [482.0, 505.0], [481.0, 629.0], [480.0, 593.0], [491.0, 537.2], [490.0, 657.0], [489.0, 599.5], [488.0, 665.0], [486.0, 650.0], [485.0, 599.0], [484.0, 442.5], [510.0, 695.0], [511.0, 674.0], [509.0, 545.0], [508.0, 631.0], [507.0, 642.0], [506.0, 640.0], [505.0, 634.0], [504.0, 628.0], [503.0, 564.0], [496.0, 708.0], [499.0, 562.0], [498.0, 465.0], [502.0, 563.0], [500.0, 492.5], [501.0, 562.0], [537.0, 350.0], [530.0, 518.0], [541.0, 532.0], [543.0, 362.0], [529.0, 516.5], [528.0, 518.0], [539.0, 479.5], [536.0, 602.0], [518.0, 617.5], [517.0, 600.0], [516.0, 616.0], [514.0, 649.5], [513.0, 514.0], [512.0, 413.0], [527.0, 594.0], [526.0, 608.6666666666666], [523.0, 521.0], [522.0, 439.0], [521.0, 565.6666666666666], [534.0, 475.5], [532.0, 614.0], [531.0, 541.0], [558.0, 561.0], [545.0, 434.0], [544.0, 482.0], [560.0, 476.0], [551.0, 443.5], [550.0, 574.5], [548.0, 575.0], [547.0, 484.3333333333333], [561.0, 414.0], [557.0, 502.0], [556.0, 425.5], [555.0, 599.5], [554.0, 408.0], [553.0, 428.0], [552.0, 603.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[247.7489999999993, 319.9880000000002]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 338.0], [3.0, 368.0], [4.0, 405.0], [5.0, 373.0], [6.0, 323.0], [7.0, 327.0], [8.0, 281.0], [9.0, 327.0], [10.0, 330.0], [23.0, 298.0], [24.0, 312.0], [30.0, 320.3333333333333], [31.0, 331.72727272727275], [55.0, 416.0], [54.0, 797.25], [57.0, 632.1], [56.0, 435.6], [58.0, 918.0], [61.0, 885.5], [60.0, 471.0], [63.0, 672.0], [62.0, 588.0], [67.0, 341.0], [66.0, 300.0], [65.0, 303.0], [64.0, 300.0], [71.0, 295.0], [70.0, 368.0], [69.0, 305.0], [68.0, 317.0], [74.0, 243.0], [73.0, 281.0], [72.0, 294.0], [79.0, 288.3333333333333], [76.0, 287.0], [83.0, 315.6666666666667], [80.0, 264.0], [87.0, 1284.0], [86.0, 355.0], [85.0, 566.0], [91.0, 565.0], [90.0, 523.0], [89.0, 378.0], [88.0, 444.0], [95.0, 611.0], [94.0, 471.0], [93.0, 403.0], [92.0, 419.0], [97.0, 578.0], [96.0, 541.0], [102.0, 623.0], [100.0, 832.0], [107.0, 243.0], [106.0, 240.0], [105.0, 343.0], [104.0, 662.5], [111.0, 259.0], [110.0, 246.0], [109.0, 522.0], [108.0, 250.0], [115.0, 403.0], [114.0, 502.0], [113.0, 442.0], [112.0, 251.0], [118.0, 412.0], [117.0, 463.0], [116.0, 225.0], [123.0, 283.0], [122.0, 1258.0], [120.0, 457.5], [133.0, 548.1428571428571], [130.0, 555.0], [129.0, 620.0], [197.0, 326.3333333333333], [193.0, 271.3333333333333], [196.0, 396.8], [199.0, 583.5], [200.0, 439.1], [214.0, 750.0], [211.0, 1210.0], [213.0, 1097.0], [223.0, 914.5], [222.0, 1104.6666666666667], [219.0, 753.6190476190476], [216.0, 560.4444444444445], [217.0, 707.7272727272727], [218.0, 1169.0], [231.0, 260.0], [230.0, 1175.0], [229.0, 256.0], [228.0, 1249.0], [227.0, 821.5], [226.0, 1173.0], [225.0, 581.0], [232.0, 1224.0], [254.0, 449.0], [255.0, 454.0], [268.0, 567.0], [267.0, 483.0], [266.0, 356.0], [265.0, 1150.0], [263.0, 1140.0], [261.0, 1100.5], [259.0, 998.0], [262.0, 1121.0], [257.0, 744.2727272727274], [284.0, 1024.6666666666667], [281.0, 1120.0], [280.0, 1003.625], [276.0, 1118.0], [277.0, 1033.5], [297.0, 652.5], [299.0, 953.0], [317.0, 912.25], [318.0, 601.0], [316.0, 954.5], [312.0, 598.0000000000001], [309.0, 490.0], [313.0, 1033.0], [307.0, 760.5], [308.0, 371.0], [306.0, 439.3333333333333], [335.0, 1124.0], [334.0, 1127.0], [328.0, 859.125], [326.0, 928.0], [329.0, 994.0], [350.0, 581.0], [351.0, 924.0], [349.0, 584.0], [348.0, 589.0], [347.0, 1094.0], [346.0, 574.0], [345.0, 579.0], [344.0, 576.0], [343.0, 947.0], [339.0, 1084.6666666666667], [336.0, 989.0], [342.0, 924.0], [341.0, 991.0], [340.0, 1001.0], [364.0, 582.0], [366.0, 626.0], [367.0, 926.0], [365.0, 609.0], [362.0, 531.0], [361.0, 852.0], [359.0, 1047.5], [352.0, 971.0], [355.0, 1134.0], [353.0, 1178.0], [358.0, 1077.5], [356.0, 966.0], [389.0, 1090.0], [395.0, 977.5], [412.0, 652.0], [429.0, 689.0], [431.0, 745.5], [428.0, 639.0], [427.0, 631.0], [426.0, 580.0], [424.0, 755.0], [422.0, 869.6875000000001], [419.0, 723.3043478260869], [418.0, 624.6], [417.0, 734.0], [445.0, 751.0], [444.0, 869.0], [446.0, 809.0], [437.0, 908.0], [451.0, 872.75], [453.0, 869.0], [450.0, 717.0], [477.0, 627.0], [476.0, 693.5], [478.0, 483.5], [474.0, 844.0], [470.0, 1115.0], [467.0, 1136.0], [494.0, 612.4166666666667], [495.0, 703.3333333333334], [492.0, 622.76], [490.0, 664.5], [489.0, 629.25], [491.0, 633.0], [493.0, 611.4], [488.0, 802.5], [486.0, 610.0], [484.0, 562.0], [487.0, 621.0], [480.0, 509.0], [482.0, 556.0], [481.0, 509.3333333333333], [508.0, 729.0], [506.0, 688.3333333333334], [503.0, 670.6666666666666], [500.0, 703.0], [497.0, 636.8], [499.0, 711.6666666666667], [498.0, 678.0], [539.0, 517.5555555555555], [538.0, 618.0], [537.0, 426.0], [541.0, 487.5], [542.0, 467.0], [536.0, 675.3333333333334], [543.0, 614.75], [534.0, 829.0], [563.0, 797.0], [571.0, 528.0], [570.0, 493.3333333333333], [550.0, 611.5], [548.0, 514.25], [547.0, 409.0], [546.0, 405.0], [545.0, 658.0], [544.0, 580.5833333333333], [559.0, 597.3333333333334], [558.0, 865.0], [557.0, 751.0], [554.0, 664.5], [552.0, 625.0], [566.0, 403.0], [565.0, 402.0], [564.0, 789.0], [562.0, 400.0], [561.0, 1029.0], [560.0, 404.0], [605.0, 640.6666666666666], [607.0, 673.0], [594.0, 577.5], [593.0, 562.5], [604.0, 622.6666666666666], [602.0, 612.0], [601.0, 614.0], [600.0, 606.5], [591.0, 555.0], [578.0, 503.7142857142857], [582.0, 556.0], [580.0, 563.5], [589.0, 575.0], [588.0, 492.0], [587.0, 534.0], [586.0, 448.0], [585.0, 403.0], [599.0, 600.0], [598.0, 592.5], [596.0, 605.0], [595.0, 585.0], [639.0, 500.0], [632.0, 370.0], [630.0, 505.4], [615.0, 759.0], [635.0, 364.0], [613.0, 937.5], [646.0, 442.40000000000003], [658.0, 350.5], [670.0, 517.1428571428571], [668.0, 515.3333333333334], [669.0, 578.25], [667.0, 275.5], [665.0, 271.0], [666.0, 570.0], [647.0, 554.0], [664.0, 587.0], [644.0, 457.6], [645.0, 538.1999999999999], [643.0, 485.0], [642.0, 562.0], [640.0, 431.0], [641.0, 466.0], [663.0, 292.0], [662.0, 382.3333333333333], [660.0, 284.0], [659.0, 573.0], [661.0, 472.5], [657.0, 329.5], [655.0, 312.0], [653.0, 469.0], [654.0, 564.0], [652.0, 423.8], [651.0, 520.8], [650.0, 450.77777777777777], [649.0, 487.5], [648.0, 464.6666666666667], [677.0, 283.5], [687.0, 325.25], [688.0, 289.0], [691.0, 456.6666666666667], [695.0, 538.0], [693.0, 505.29411764705895], [702.0, 561.0], [701.0, 559.0], [700.0, 553.0], [698.0, 551.0], [697.0, 547.0], [685.0, 491.90000000000003], [686.0, 529.0], [684.0, 427.16666666666663], [683.0, 315.42857142857144], [682.0, 343.49999999999994], [681.0, 270.0], [680.0, 281.0], [679.0, 292.0], [678.0, 279.0], [676.0, 270.0], [675.0, 281.0], [673.0, 321.0], [674.0, 808.0], [672.0, 574.875], [731.0, 577.0], [734.0, 483.16666666666663], [733.0, 454.0], [735.0, 499.99999999999994], [730.0, 637.25], [732.0, 375.0], [714.0, 650.0], [713.0, 627.5], [711.0, 606.5], [710.0, 593.0], [709.0, 578.0], [707.0, 576.0], [706.0, 572.0], [705.0, 568.0], [704.0, 564.0], [744.0, 608.0], [743.0, 591.0], [741.0, 570.0], [740.0, 553.0], [738.0, 511.5], [737.0, 530.0], [736.0, 513.5], [739.0, 500.0], [1.0, 335.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[443.8640000000001, 598.5960000000003]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[90.0, 3344.0], [88.0, 2746.3333333333335], [95.0, 3243.0], [98.0, 2849.0], [97.0, 3073.2222222222217], [134.0, 3309.0], [135.0, 2872.0], [140.0, 3705.0], [139.0, 3678.0], [151.0, 3291.0], [149.0, 3716.0], [150.0, 3425.5], [157.0, 3179.0], [161.0, 3331.2666666666664], [189.0, 3220.5], [187.0, 3369.0], [199.0, 3106.6], [198.0, 2867.4], [205.0, 3228.0], [200.0, 3216.0], [211.0, 3662.0], [210.0, 3709.0], [223.0, 3704.0], [216.0, 3124.0], [228.0, 3201.2941176470595], [231.0, 3213.4285714285716], [230.0, 3397.0], [232.0, 3168.75], [234.0, 3434.285714285714], [233.0, 3702.0], [244.0, 3438.4], [243.0, 2759.0], [242.0, 3679.0], [240.0, 3655.0], [249.0, 3709.0], [252.0, 3642.4], [248.0, 2781.5], [251.0, 3489.5], [263.0, 2855.0], [270.0, 3348.6666666666665], [264.0, 3472.0], [266.0, 3388.6666666666665], [265.0, 3451.0], [284.0, 3208.5], [285.0, 3310.1666666666665], [274.0, 3561.0], [283.0, 3703.0], [275.0, 3296.5], [286.0, 2936.0], [276.0, 3257.75], [272.0, 2716.0], [281.0, 2747.0], [282.0, 3363.0], [302.0, 3066.9772727272734], [300.0, 2796.0], [297.0, 3213.75], [294.0, 3371.0], [296.0, 3663.0], [303.0, 2808.0], [299.0, 3242.5], [301.0, 3292.75], [293.0, 3298.25], [292.0, 3686.0], [313.0, 3064.0], [311.0, 3129.0], [304.0, 3426.9999999999995], [305.0, 3134.3333333333335], [307.0, 3506.5], [308.0, 3090.0], [312.0, 2822.0], [310.0, 2796.0], [332.0, 3174.0], [333.0, 3683.0], [327.0, 2956.0], [331.0, 3680.0], [320.0, 3460.0], [330.0, 3165.5], [326.0, 3213.0], [322.0, 2697.0], [321.0, 2811.0], [351.0, 2681.0], [346.0, 3113.8], [342.0, 2963.0], [345.0, 2988.0], [339.0, 3680.0], [350.0, 2686.0], [349.0, 3319.0], [338.0, 2885.0], [337.0, 3012.6666666666665], [344.0, 2985.25], [367.0, 3058.6666666666665], [363.0, 2647.0], [362.0, 3610.0], [364.0, 2849.0], [360.0, 2878.0000000000005], [358.0, 3024.0], [353.0, 3179.4285714285716], [356.0, 2677.0], [380.0, 2937.0], [378.0, 3476.0], [376.0, 3480.0], [379.0, 3245.0], [375.0, 3528.0], [372.0, 3664.0], [374.0, 3055.6666666666665], [371.0, 3624.5], [599.0, 2440.0], [600.0, 3381.0], [580.0, 3390.0], [635.0, 2855.2], [619.0, 3177.0], [617.0, 2723.5], [618.0, 2622.0], [622.0, 3364.0], [621.0, 3390.0], [626.0, 3101.5], [637.0, 3375.0], [639.0, 3370.0], [613.0, 2396.0], [638.0, 3374.0], [657.0, 3024.0], [652.0, 2819.0], [651.0, 3122.6666666666665], [650.0, 2992.0], [653.0, 3186.5], [658.0, 2421.0], [668.0, 3326.0], [670.0, 2667.0], [665.0, 2857.0], [642.0, 2510.0], [644.0, 2365.5], [662.0, 2315.0], [663.0, 3240.0], [659.0, 3195.0], [660.0, 2369.0], [686.0, 2588.375], [677.0, 2904.875], [695.0, 3062.0], [703.0, 2258.0], [678.0, 2912.0], [699.0, 2849.0], [696.0, 3017.0], [700.0, 2900.0], [685.0, 2827.6666666666665], [676.0, 2906.2941176470595], [682.0, 2738.1666666666665], [680.0, 2447.0], [684.0, 3301.0], [687.0, 2567.0], [674.0, 3260.0], [675.0, 2905.0], [729.0, 3334.333333333333], [734.0, 2692.4166666666674], [727.0, 2727.1428571428564], [726.0, 2569.75], [714.0, 2648.230769230769], [720.0, 3278.6666666666665], [713.0, 2869.8888888888887], [712.0, 2494.5], [725.0, 2797.76], [717.0, 2407.0], [718.0, 2991.0], [709.0, 2673.5], [708.0, 2749.3333333333335], [711.0, 2813.0], [707.0, 2972.6666666666665], [706.0, 2909.3333333333335], [705.0, 2909.0], [719.0, 3354.0], [733.0, 2951.962962962963], [746.0, 3270.0], [761.0, 3306.0], [738.0, 3296.0], [792.0, 2644.0], [781.0, 2854.6666666666665], [794.0, 2683.0], [788.0, 2754.8], [777.0, 3262.0], [773.0, 2766.8648648648646], [768.0, 2684.1578947368425], [769.0, 2392.5], [778.0, 3301.0], [784.0, 2456.3333333333335], [787.0, 2221.0], [820.0, 3313.0], [827.0, 3147.8], [822.0, 2968.0], [823.0, 2385.0], [821.0, 2642.0], [817.0, 3295.0], [815.0, 2735.3333333333335], [801.0, 2467.25], [803.0, 2797.777777777778], [804.0, 2580.0], [807.0, 2887.0], [814.0, 2722.4444444444443], [813.0, 2790.0], [808.0, 3019.8333333333335], [809.0, 2883.2], [810.0, 2646.3333333333335], [811.0, 2841.0], [861.0, 2735.0], [895.0, 2039.0], [886.0, 2647.0], [889.0, 2663.8333333333335], [876.0, 2270.5], [891.0, 2829.0], [864.0, 2197.0], [875.0, 2982.0], [921.0, 2243.0], [922.0, 2471.0], [920.0, 2266.0], [903.0, 2560.0666666666666], [901.0, 2164.0], [899.0, 2198.0], [898.0, 3114.0], [902.0, 2654.9047619047615], [916.0, 2750.0], [917.0, 2078.0], [918.0, 3112.0], [911.0, 3141.0], [910.0, 3115.0], [907.0, 2993.0], [905.0, 2335.0], [904.0, 2852.923076923077], [914.0, 2648.5], [950.0, 2000.0], [952.0, 3029.0], [987.0, 2325.3333333333335], [984.0, 2330.25], [982.0, 2640.0], [979.0, 2328.0], [976.0, 2201.0], [974.0, 2766.5], [970.0, 2923.5], [969.0, 2574.0000000000005], [1000.0, 2658.1071428571427], [998.0, 2796.0], [996.0, 2531.5], [992.0, 3038.5]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[590.1049999999993, 2930.311]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8865.866666666667, "minX": 1.6690041E12, "maxY": 13083.333333333334, "series": [{"data": [[1.6690041E12, 8865.866666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6690041E12, 13083.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6690041E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 319.9880000000002, "minX": 1.6690041E12, "maxY": 2930.311, "series": [{"data": [[1.6690041E12, 319.9880000000002]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.6690041E12, 598.5960000000003]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.6690041E12, 2930.311]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6690041E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 319.975, "minX": 1.6690041E12, "maxY": 2930.011000000003, "series": [{"data": [[1.6690041E12, 319.975]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.6690041E12, 597.7739999999999]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.6690041E12, 2930.011000000003]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6690041E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.917999999999996, "minX": 1.6690041E12, "maxY": 42.12300000000005, "series": [{"data": [[1.6690041E12, 2.917999999999996]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.6690041E12, 3.9590000000000023]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.6690041E12, 42.12300000000005]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6690041E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6690041E12, "maxY": 3750.0, "series": [{"data": [[1.6690041E12, 3750.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6690041E12, 3295.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6690041E12, 3705.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6690041E12, 3512.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6690041E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6690041E12, 564.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6690041E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 312.0, "minX": 64.0, "maxY": 2791.5, "series": [{"data": [[64.0, 338.0], [605.0, 2745.0], [620.0, 2791.5], [775.0, 312.0], [936.0, 528.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 1161.0], [936.0, 952.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 936.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 312.0, "minX": 64.0, "maxY": 2791.5, "series": [{"data": [[64.0, 338.0], [605.0, 2745.0], [620.0, 2791.5], [775.0, 312.0], [936.0, 528.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 1161.0], [936.0, 951.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 936.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.6690041E12, "maxY": 50.0, "series": [{"data": [[1.6690041E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6690041E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.6690041E12, "maxY": 45.55, "series": [{"data": [[1.6690041E12, 45.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6690041E12, 4.45]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6690041E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.6690041E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6690041E12, 16.666666666666668]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.6690041E12, 12.216666666666667]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.6690041E12, 4.45]], "isOverall": false, "label": "Microservice-based client with caching-failure", "isController": false}, {"data": [[1.6690041E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6690041E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.45, "minX": 1.6690041E12, "maxY": 45.55, "series": [{"data": [[1.6690041E12, 45.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6690041E12, 4.45]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6690041E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

