/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1449.0, "series": [{"data": [[0.0, 219.0], [0.1, 220.0], [0.2, 223.0], [0.3, 223.0], [0.4, 235.0], [0.5, 241.0], [0.6, 244.0], [0.7, 247.0], [0.8, 247.0], [0.9, 249.0], [1.0, 250.0], [1.1, 250.0], [1.2, 251.0], [1.3, 251.0], [1.4, 252.0], [1.5, 254.0], [1.6, 255.0], [1.7, 255.0], [1.8, 256.0], [1.9, 256.0], [2.0, 260.0], [2.1, 261.0], [2.2, 262.0], [2.3, 262.0], [2.4, 264.0], [2.5, 264.0], [2.6, 265.0], [2.7, 266.0], [2.8, 267.0], [2.9, 269.0], [3.0, 270.0], [3.1, 270.0], [3.2, 272.0], [3.3, 276.0], [3.4, 278.0], [3.5, 279.0], [3.6, 280.0], [3.7, 281.0], [3.8, 283.0], [3.9, 283.0], [4.0, 284.0], [4.1, 284.0], [4.2, 287.0], [4.3, 287.0], [4.4, 289.0], [4.5, 291.0], [4.6, 292.0], [4.7, 296.0], [4.8, 296.0], [4.9, 298.0], [5.0, 299.0], [5.1, 299.0], [5.2, 300.0], [5.3, 300.0], [5.4, 301.0], [5.5, 302.0], [5.6, 302.0], [5.7, 303.0], [5.8, 303.0], [5.9, 304.0], [6.0, 305.0], [6.1, 305.0], [6.2, 306.0], [6.3, 306.0], [6.4, 308.0], [6.5, 308.0], [6.6, 308.0], [6.7, 311.0], [6.8, 312.0], [6.9, 312.0], [7.0, 312.0], [7.1, 313.0], [7.2, 313.0], [7.3, 313.0], [7.4, 313.0], [7.5, 314.0], [7.6, 314.0], [7.7, 315.0], [7.8, 316.0], [7.9, 316.0], [8.0, 316.0], [8.1, 317.0], [8.2, 318.0], [8.3, 319.0], [8.4, 320.0], [8.5, 320.0], [8.6, 322.0], [8.7, 324.0], [8.8, 329.0], [8.9, 330.0], [9.0, 331.0], [9.1, 331.0], [9.2, 331.0], [9.3, 331.0], [9.4, 333.0], [9.5, 335.0], [9.6, 335.0], [9.7, 335.0], [9.8, 336.0], [9.9, 336.0], [10.0, 340.0], [10.1, 343.0], [10.2, 343.0], [10.3, 343.0], [10.4, 344.0], [10.5, 344.0], [10.6, 345.0], [10.7, 345.0], [10.8, 346.0], [10.9, 348.0], [11.0, 348.0], [11.1, 348.0], [11.2, 348.0], [11.3, 349.0], [11.4, 353.0], [11.5, 356.0], [11.6, 357.0], [11.7, 358.0], [11.8, 359.0], [11.9, 360.0], [12.0, 360.0], [12.1, 360.0], [12.2, 361.0], [12.3, 361.0], [12.4, 361.0], [12.5, 361.0], [12.6, 362.0], [12.7, 363.0], [12.8, 364.0], [12.9, 364.0], [13.0, 364.0], [13.1, 366.0], [13.2, 367.0], [13.3, 368.0], [13.4, 368.0], [13.5, 369.0], [13.6, 369.0], [13.7, 372.0], [13.8, 372.0], [13.9, 372.0], [14.0, 374.0], [14.1, 375.0], [14.2, 375.0], [14.3, 375.0], [14.4, 375.0], [14.5, 377.0], [14.6, 378.0], [14.7, 379.0], [14.8, 379.0], [14.9, 380.0], [15.0, 380.0], [15.1, 382.0], [15.2, 382.0], [15.3, 383.0], [15.4, 384.0], [15.5, 384.0], [15.6, 386.0], [15.7, 388.0], [15.8, 388.0], [15.9, 389.0], [16.0, 391.0], [16.1, 391.0], [16.2, 391.0], [16.3, 392.0], [16.4, 393.0], [16.5, 393.0], [16.6, 393.0], [16.7, 393.0], [16.8, 395.0], [16.9, 398.0], [17.0, 400.0], [17.1, 402.0], [17.2, 402.0], [17.3, 403.0], [17.4, 404.0], [17.5, 404.0], [17.6, 405.0], [17.7, 405.0], [17.8, 406.0], [17.9, 407.0], [18.0, 407.0], [18.1, 407.0], [18.2, 407.0], [18.3, 408.0], [18.4, 408.0], [18.5, 409.0], [18.6, 409.0], [18.7, 410.0], [18.8, 410.0], [18.9, 411.0], [19.0, 411.0], [19.1, 411.0], [19.2, 413.0], [19.3, 414.0], [19.4, 416.0], [19.5, 416.0], [19.6, 417.0], [19.7, 417.0], [19.8, 418.0], [19.9, 419.0], [20.0, 420.0], [20.1, 420.0], [20.2, 420.0], [20.3, 420.0], [20.4, 421.0], [20.5, 421.0], [20.6, 422.0], [20.7, 422.0], [20.8, 423.0], [20.9, 423.0], [21.0, 424.0], [21.1, 424.0], [21.2, 424.0], [21.3, 424.0], [21.4, 425.0], [21.5, 426.0], [21.6, 428.0], [21.7, 429.0], [21.8, 431.0], [21.9, 432.0], [22.0, 432.0], [22.1, 432.0], [22.2, 433.0], [22.3, 434.0], [22.4, 439.0], [22.5, 439.0], [22.6, 439.0], [22.7, 440.0], [22.8, 440.0], [22.9, 440.0], [23.0, 440.0], [23.1, 442.0], [23.2, 443.0], [23.3, 444.0], [23.4, 444.0], [23.5, 447.0], [23.6, 448.0], [23.7, 448.0], [23.8, 449.0], [23.9, 449.0], [24.0, 452.0], [24.1, 453.0], [24.2, 453.0], [24.3, 453.0], [24.4, 454.0], [24.5, 454.0], [24.6, 454.0], [24.7, 454.0], [24.8, 456.0], [24.9, 458.0], [25.0, 459.0], [25.1, 459.0], [25.2, 461.0], [25.3, 462.0], [25.4, 463.0], [25.5, 463.0], [25.6, 464.0], [25.7, 466.0], [25.8, 466.0], [25.9, 466.0], [26.0, 466.0], [26.1, 467.0], [26.2, 468.0], [26.3, 473.0], [26.4, 475.0], [26.5, 475.0], [26.6, 476.0], [26.7, 476.0], [26.8, 476.0], [26.9, 478.0], [27.0, 479.0], [27.1, 480.0], [27.2, 480.0], [27.3, 480.0], [27.4, 481.0], [27.5, 482.0], [27.6, 482.0], [27.7, 484.0], [27.8, 484.0], [27.9, 485.0], [28.0, 487.0], [28.1, 487.0], [28.2, 488.0], [28.3, 489.0], [28.4, 491.0], [28.5, 492.0], [28.6, 495.0], [28.7, 496.0], [28.8, 497.0], [28.9, 498.0], [29.0, 500.0], [29.1, 502.0], [29.2, 504.0], [29.3, 504.0], [29.4, 504.0], [29.5, 505.0], [29.6, 506.0], [29.7, 509.0], [29.8, 526.0], [29.9, 527.0], [30.0, 527.0], [30.1, 544.0], [30.2, 544.0], [30.3, 546.0], [30.4, 550.0], [30.5, 553.0], [30.6, 554.0], [30.7, 555.0], [30.8, 555.0], [30.9, 555.0], [31.0, 557.0], [31.1, 559.0], [31.2, 559.0], [31.3, 561.0], [31.4, 561.0], [31.5, 562.0], [31.6, 562.0], [31.7, 563.0], [31.8, 564.0], [31.9, 565.0], [32.0, 566.0], [32.1, 567.0], [32.2, 568.0], [32.3, 574.0], [32.4, 574.0], [32.5, 574.0], [32.6, 574.0], [32.7, 575.0], [32.8, 575.0], [32.9, 576.0], [33.0, 578.0], [33.1, 579.0], [33.2, 580.0], [33.3, 580.0], [33.4, 581.0], [33.5, 581.0], [33.6, 582.0], [33.7, 582.0], [33.8, 583.0], [33.9, 584.0], [34.0, 587.0], [34.1, 587.0], [34.2, 588.0], [34.3, 589.0], [34.4, 590.0], [34.5, 590.0], [34.6, 591.0], [34.7, 591.0], [34.8, 592.0], [34.9, 593.0], [35.0, 593.0], [35.1, 593.0], [35.2, 594.0], [35.3, 595.0], [35.4, 595.0], [35.5, 597.0], [35.6, 599.0], [35.7, 600.0], [35.8, 600.0], [35.9, 600.0], [36.0, 600.0], [36.1, 600.0], [36.2, 600.0], [36.3, 601.0], [36.4, 601.0], [36.5, 603.0], [36.6, 603.0], [36.7, 604.0], [36.8, 604.0], [36.9, 604.0], [37.0, 605.0], [37.1, 606.0], [37.2, 607.0], [37.3, 608.0], [37.4, 609.0], [37.5, 610.0], [37.6, 610.0], [37.7, 610.0], [37.8, 611.0], [37.9, 611.0], [38.0, 611.0], [38.1, 612.0], [38.2, 613.0], [38.3, 613.0], [38.4, 613.0], [38.5, 614.0], [38.6, 614.0], [38.7, 615.0], [38.8, 616.0], [38.9, 616.0], [39.0, 616.0], [39.1, 616.0], [39.2, 618.0], [39.3, 618.0], [39.4, 618.0], [39.5, 620.0], [39.6, 623.0], [39.7, 623.0], [39.8, 623.0], [39.9, 624.0], [40.0, 624.0], [40.1, 624.0], [40.2, 625.0], [40.3, 625.0], [40.4, 626.0], [40.5, 626.0], [40.6, 627.0], [40.7, 627.0], [40.8, 627.0], [40.9, 628.0], [41.0, 628.0], [41.1, 628.0], [41.2, 628.0], [41.3, 629.0], [41.4, 630.0], [41.5, 630.0], [41.6, 631.0], [41.7, 632.0], [41.8, 632.0], [41.9, 633.0], [42.0, 633.0], [42.1, 633.0], [42.2, 633.0], [42.3, 633.0], [42.4, 635.0], [42.5, 636.0], [42.6, 636.0], [42.7, 637.0], [42.8, 638.0], [42.9, 638.0], [43.0, 638.0], [43.1, 638.0], [43.2, 638.0], [43.3, 639.0], [43.4, 640.0], [43.5, 640.0], [43.6, 642.0], [43.7, 644.0], [43.8, 644.0], [43.9, 644.0], [44.0, 644.0], [44.1, 645.0], [44.2, 648.0], [44.3, 648.0], [44.4, 648.0], [44.5, 649.0], [44.6, 651.0], [44.7, 651.0], [44.8, 651.0], [44.9, 652.0], [45.0, 652.0], [45.1, 654.0], [45.2, 654.0], [45.3, 654.0], [45.4, 655.0], [45.5, 655.0], [45.6, 655.0], [45.7, 656.0], [45.8, 656.0], [45.9, 657.0], [46.0, 657.0], [46.1, 658.0], [46.2, 658.0], [46.3, 659.0], [46.4, 660.0], [46.5, 660.0], [46.6, 660.0], [46.7, 660.0], [46.8, 662.0], [46.9, 662.0], [47.0, 663.0], [47.1, 663.0], [47.2, 663.0], [47.3, 664.0], [47.4, 664.0], [47.5, 664.0], [47.6, 665.0], [47.7, 665.0], [47.8, 665.0], [47.9, 665.0], [48.0, 666.0], [48.1, 666.0], [48.2, 666.0], [48.3, 666.0], [48.4, 666.0], [48.5, 666.0], [48.6, 666.0], [48.7, 667.0], [48.8, 670.0], [48.9, 670.0], [49.0, 671.0], [49.1, 671.0], [49.2, 672.0], [49.3, 672.0], [49.4, 672.0], [49.5, 673.0], [49.6, 673.0], [49.7, 673.0], [49.8, 673.0], [49.9, 673.0], [50.0, 673.0], [50.1, 674.0], [50.2, 674.0], [50.3, 674.0], [50.4, 675.0], [50.5, 675.0], [50.6, 675.0], [50.7, 676.0], [50.8, 676.0], [50.9, 677.0], [51.0, 677.0], [51.1, 677.0], [51.2, 677.0], [51.3, 677.0], [51.4, 678.0], [51.5, 678.0], [51.6, 678.0], [51.7, 679.0], [51.8, 679.0], [51.9, 679.0], [52.0, 679.0], [52.1, 680.0], [52.2, 680.0], [52.3, 681.0], [52.4, 681.0], [52.5, 681.0], [52.6, 682.0], [52.7, 682.0], [52.8, 682.0], [52.9, 682.0], [53.0, 683.0], [53.1, 683.0], [53.2, 684.0], [53.3, 684.0], [53.4, 684.0], [53.5, 685.0], [53.6, 686.0], [53.7, 686.0], [53.8, 686.0], [53.9, 687.0], [54.0, 687.0], [54.1, 688.0], [54.2, 688.0], [54.3, 689.0], [54.4, 690.0], [54.5, 690.0], [54.6, 690.0], [54.7, 690.0], [54.8, 691.0], [54.9, 691.0], [55.0, 691.0], [55.1, 691.0], [55.2, 692.0], [55.3, 692.0], [55.4, 692.0], [55.5, 692.0], [55.6, 692.0], [55.7, 693.0], [55.8, 693.0], [55.9, 693.0], [56.0, 693.0], [56.1, 694.0], [56.2, 694.0], [56.3, 695.0], [56.4, 695.0], [56.5, 696.0], [56.6, 697.0], [56.7, 698.0], [56.8, 698.0], [56.9, 698.0], [57.0, 699.0], [57.1, 699.0], [57.2, 700.0], [57.3, 700.0], [57.4, 700.0], [57.5, 700.0], [57.6, 700.0], [57.7, 701.0], [57.8, 701.0], [57.9, 702.0], [58.0, 702.0], [58.1, 703.0], [58.2, 703.0], [58.3, 704.0], [58.4, 705.0], [58.5, 705.0], [58.6, 705.0], [58.7, 705.0], [58.8, 705.0], [58.9, 705.0], [59.0, 706.0], [59.1, 706.0], [59.2, 706.0], [59.3, 706.0], [59.4, 707.0], [59.5, 707.0], [59.6, 708.0], [59.7, 708.0], [59.8, 708.0], [59.9, 708.0], [60.0, 708.0], [60.1, 709.0], [60.2, 709.0], [60.3, 709.0], [60.4, 710.0], [60.5, 710.0], [60.6, 710.0], [60.7, 710.0], [60.8, 711.0], [60.9, 712.0], [61.0, 712.0], [61.1, 712.0], [61.2, 712.0], [61.3, 713.0], [61.4, 713.0], [61.5, 713.0], [61.6, 714.0], [61.7, 714.0], [61.8, 715.0], [61.9, 716.0], [62.0, 716.0], [62.1, 717.0], [62.2, 718.0], [62.3, 718.0], [62.4, 718.0], [62.5, 719.0], [62.6, 720.0], [62.7, 720.0], [62.8, 721.0], [62.9, 721.0], [63.0, 722.0], [63.1, 722.0], [63.2, 722.0], [63.3, 723.0], [63.4, 723.0], [63.5, 724.0], [63.6, 725.0], [63.7, 725.0], [63.8, 726.0], [63.9, 726.0], [64.0, 726.0], [64.1, 727.0], [64.2, 727.0], [64.3, 727.0], [64.4, 727.0], [64.5, 727.0], [64.6, 728.0], [64.7, 729.0], [64.8, 730.0], [64.9, 730.0], [65.0, 730.0], [65.1, 730.0], [65.2, 731.0], [65.3, 732.0], [65.4, 733.0], [65.5, 734.0], [65.6, 734.0], [65.7, 735.0], [65.8, 735.0], [65.9, 736.0], [66.0, 737.0], [66.1, 737.0], [66.2, 738.0], [66.3, 738.0], [66.4, 739.0], [66.5, 739.0], [66.6, 740.0], [66.7, 740.0], [66.8, 740.0], [66.9, 740.0], [67.0, 740.0], [67.1, 740.0], [67.2, 741.0], [67.3, 741.0], [67.4, 743.0], [67.5, 744.0], [67.6, 744.0], [67.7, 744.0], [67.8, 744.0], [67.9, 745.0], [68.0, 747.0], [68.1, 747.0], [68.2, 747.0], [68.3, 748.0], [68.4, 748.0], [68.5, 750.0], [68.6, 751.0], [68.7, 752.0], [68.8, 753.0], [68.9, 753.0], [69.0, 754.0], [69.1, 754.0], [69.2, 754.0], [69.3, 756.0], [69.4, 756.0], [69.5, 758.0], [69.6, 759.0], [69.7, 759.0], [69.8, 760.0], [69.9, 763.0], [70.0, 763.0], [70.1, 766.0], [70.2, 767.0], [70.3, 768.0], [70.4, 769.0], [70.5, 772.0], [70.6, 774.0], [70.7, 774.0], [70.8, 775.0], [70.9, 775.0], [71.0, 777.0], [71.1, 778.0], [71.2, 778.0], [71.3, 780.0], [71.4, 786.0], [71.5, 786.0], [71.6, 787.0], [71.7, 792.0], [71.8, 793.0], [71.9, 794.0], [72.0, 795.0], [72.1, 795.0], [72.2, 799.0], [72.3, 799.0], [72.4, 800.0], [72.5, 802.0], [72.6, 802.0], [72.7, 802.0], [72.8, 802.0], [72.9, 810.0], [73.0, 811.0], [73.1, 815.0], [73.2, 821.0], [73.3, 823.0], [73.4, 826.0], [73.5, 826.0], [73.6, 826.0], [73.7, 828.0], [73.8, 828.0], [73.9, 829.0], [74.0, 830.0], [74.1, 832.0], [74.2, 832.0], [74.3, 832.0], [74.4, 836.0], [74.5, 838.0], [74.6, 838.0], [74.7, 838.0], [74.8, 838.0], [74.9, 839.0], [75.0, 839.0], [75.1, 839.0], [75.2, 840.0], [75.3, 840.0], [75.4, 841.0], [75.5, 842.0], [75.6, 843.0], [75.7, 843.0], [75.8, 845.0], [75.9, 845.0], [76.0, 845.0], [76.1, 846.0], [76.2, 847.0], [76.3, 848.0], [76.4, 850.0], [76.5, 851.0], [76.6, 851.0], [76.7, 851.0], [76.8, 853.0], [76.9, 855.0], [77.0, 856.0], [77.1, 856.0], [77.2, 856.0], [77.3, 856.0], [77.4, 858.0], [77.5, 859.0], [77.6, 860.0], [77.7, 863.0], [77.8, 864.0], [77.9, 864.0], [78.0, 864.0], [78.1, 866.0], [78.2, 866.0], [78.3, 866.0], [78.4, 868.0], [78.5, 868.0], [78.6, 869.0], [78.7, 869.0], [78.8, 871.0], [78.9, 872.0], [79.0, 873.0], [79.1, 873.0], [79.2, 874.0], [79.3, 875.0], [79.4, 875.0], [79.5, 878.0], [79.6, 878.0], [79.7, 882.0], [79.8, 882.0], [79.9, 883.0], [80.0, 883.0], [80.1, 884.0], [80.2, 884.0], [80.3, 884.0], [80.4, 885.0], [80.5, 885.0], [80.6, 886.0], [80.7, 887.0], [80.8, 887.0], [80.9, 887.0], [81.0, 888.0], [81.1, 889.0], [81.2, 890.0], [81.3, 891.0], [81.4, 891.0], [81.5, 892.0], [81.6, 892.0], [81.7, 893.0], [81.8, 894.0], [81.9, 894.0], [82.0, 895.0], [82.1, 895.0], [82.2, 895.0], [82.3, 897.0], [82.4, 897.0], [82.5, 899.0], [82.6, 899.0], [82.7, 901.0], [82.8, 903.0], [82.9, 903.0], [83.0, 904.0], [83.1, 904.0], [83.2, 905.0], [83.3, 905.0], [83.4, 907.0], [83.5, 910.0], [83.6, 911.0], [83.7, 912.0], [83.8, 913.0], [83.9, 913.0], [84.0, 917.0], [84.1, 917.0], [84.2, 918.0], [84.3, 918.0], [84.4, 919.0], [84.5, 920.0], [84.6, 922.0], [84.7, 923.0], [84.8, 926.0], [84.9, 927.0], [85.0, 930.0], [85.1, 931.0], [85.2, 932.0], [85.3, 932.0], [85.4, 932.0], [85.5, 935.0], [85.6, 938.0], [85.7, 938.0], [85.8, 939.0], [85.9, 941.0], [86.0, 942.0], [86.1, 943.0], [86.2, 946.0], [86.3, 947.0], [86.4, 947.0], [86.5, 948.0], [86.6, 949.0], [86.7, 950.0], [86.8, 951.0], [86.9, 953.0], [87.0, 953.0], [87.1, 954.0], [87.2, 955.0], [87.3, 957.0], [87.4, 958.0], [87.5, 960.0], [87.6, 960.0], [87.7, 961.0], [87.8, 962.0], [87.9, 965.0], [88.0, 968.0], [88.1, 971.0], [88.2, 973.0], [88.3, 974.0], [88.4, 981.0], [88.5, 983.0], [88.6, 984.0], [88.7, 986.0], [88.8, 987.0], [88.9, 997.0], [89.0, 998.0], [89.1, 998.0], [89.2, 999.0], [89.3, 1000.0], [89.4, 1001.0], [89.5, 1001.0], [89.6, 1002.0], [89.7, 1004.0], [89.8, 1006.0], [89.9, 1013.0], [90.0, 1016.0], [90.1, 1037.0], [90.2, 1037.0], [90.3, 1038.0], [90.4, 1043.0], [90.5, 1047.0], [90.6, 1056.0], [90.7, 1056.0], [90.8, 1058.0], [90.9, 1060.0], [91.0, 1066.0], [91.1, 1068.0], [91.2, 1072.0], [91.3, 1080.0], [91.4, 1085.0], [91.5, 1092.0], [91.6, 1093.0], [91.7, 1096.0], [91.8, 1116.0], [91.9, 1128.0], [92.0, 1134.0], [92.1, 1143.0], [92.2, 1149.0], [92.3, 1154.0], [92.4, 1155.0], [92.5, 1155.0], [92.6, 1155.0], [92.7, 1158.0], [92.8, 1162.0], [92.9, 1162.0], [93.0, 1162.0], [93.1, 1165.0], [93.2, 1165.0], [93.3, 1165.0], [93.4, 1165.0], [93.5, 1165.0], [93.6, 1167.0], [93.7, 1168.0], [93.8, 1174.0], [93.9, 1174.0], [94.0, 1181.0], [94.1, 1184.0], [94.2, 1188.0], [94.3, 1192.0], [94.4, 1194.0], [94.5, 1195.0], [94.6, 1195.0], [94.7, 1198.0], [94.8, 1200.0], [94.9, 1201.0], [95.0, 1202.0], [95.1, 1202.0], [95.2, 1202.0], [95.3, 1202.0], [95.4, 1203.0], [95.5, 1203.0], [95.6, 1203.0], [95.7, 1204.0], [95.8, 1206.0], [95.9, 1207.0], [96.0, 1208.0], [96.1, 1211.0], [96.2, 1212.0], [96.3, 1213.0], [96.4, 1213.0], [96.5, 1214.0], [96.6, 1214.0], [96.7, 1216.0], [96.8, 1216.0], [96.9, 1216.0], [97.0, 1219.0], [97.1, 1220.0], [97.2, 1222.0], [97.3, 1222.0], [97.4, 1223.0], [97.5, 1223.0], [97.6, 1224.0], [97.7, 1224.0], [97.8, 1225.0], [97.9, 1228.0], [98.0, 1229.0], [98.1, 1230.0], [98.2, 1231.0], [98.3, 1232.0], [98.4, 1232.0], [98.5, 1234.0], [98.6, 1236.0], [98.7, 1238.0], [98.8, 1238.0], [98.9, 1239.0], [99.0, 1248.0], [99.1, 1250.0], [99.2, 1261.0], [99.3, 1262.0], [99.4, 1271.0], [99.5, 1273.0], [99.6, 1327.0], [99.7, 1334.0], [99.8, 1336.0], [99.9, 1337.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 8.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 11.0], [1.0, 13.0], [1.1, 13.0], [1.2, 16.0], [1.3, 17.0], [1.4, 17.0], [1.5, 18.0], [1.6, 19.0], [1.7, 19.0], [1.8, 20.0], [1.9, 20.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 22.0], [2.4, 22.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 23.0], [2.9, 23.0], [3.0, 23.0], [3.1, 24.0], [3.2, 24.0], [3.3, 24.0], [3.4, 24.0], [3.5, 24.0], [3.6, 24.0], [3.7, 25.0], [3.8, 25.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 26.0], [4.3, 26.0], [4.4, 27.0], [4.5, 27.0], [4.6, 27.0], [4.7, 27.0], [4.8, 27.0], [4.9, 27.0], [5.0, 28.0], [5.1, 28.0], [5.2, 28.0], [5.3, 28.0], [5.4, 28.0], [5.5, 29.0], [5.6, 29.0], [5.7, 29.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 31.0], [7.3, 31.0], [7.4, 32.0], [7.5, 32.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 33.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 34.0], [9.4, 34.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 35.0], [10.1, 35.0], [10.2, 35.0], [10.3, 35.0], [10.4, 35.0], [10.5, 35.0], [10.6, 35.0], [10.7, 35.0], [10.8, 36.0], [10.9, 36.0], [11.0, 36.0], [11.1, 36.0], [11.2, 36.0], [11.3, 37.0], [11.4, 37.0], [11.5, 37.0], [11.6, 37.0], [11.7, 37.0], [11.8, 37.0], [11.9, 37.0], [12.0, 37.0], [12.1, 37.0], [12.2, 37.0], [12.3, 37.0], [12.4, 37.0], [12.5, 38.0], [12.6, 38.0], [12.7, 38.0], [12.8, 38.0], [12.9, 38.0], [13.0, 38.0], [13.1, 38.0], [13.2, 38.0], [13.3, 38.0], [13.4, 38.0], [13.5, 38.0], [13.6, 38.0], [13.7, 38.0], [13.8, 38.0], [13.9, 39.0], [14.0, 39.0], [14.1, 39.0], [14.2, 39.0], [14.3, 39.0], [14.4, 39.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 43.0], [18.3, 43.0], [18.4, 43.0], [18.5, 43.0], [18.6, 43.0], [18.7, 43.0], [18.8, 44.0], [18.9, 44.0], [19.0, 44.0], [19.1, 44.0], [19.2, 44.0], [19.3, 45.0], [19.4, 45.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 47.0], [19.9, 47.0], [20.0, 47.0], [20.1, 48.0], [20.2, 48.0], [20.3, 48.0], [20.4, 48.0], [20.5, 48.0], [20.6, 48.0], [20.7, 48.0], [20.8, 48.0], [20.9, 48.0], [21.0, 49.0], [21.1, 49.0], [21.2, 50.0], [21.3, 50.0], [21.4, 50.0], [21.5, 50.0], [21.6, 50.0], [21.7, 51.0], [21.8, 51.0], [21.9, 51.0], [22.0, 51.0], [22.1, 51.0], [22.2, 51.0], [22.3, 51.0], [22.4, 52.0], [22.5, 52.0], [22.6, 52.0], [22.7, 52.0], [22.8, 52.0], [22.9, 52.0], [23.0, 52.0], [23.1, 52.0], [23.2, 52.0], [23.3, 52.0], [23.4, 52.0], [23.5, 52.0], [23.6, 52.0], [23.7, 52.0], [23.8, 52.0], [23.9, 53.0], [24.0, 53.0], [24.1, 53.0], [24.2, 53.0], [24.3, 53.0], [24.4, 53.0], [24.5, 53.0], [24.6, 53.0], [24.7, 53.0], [24.8, 53.0], [24.9, 53.0], [25.0, 53.0], [25.1, 54.0], [25.2, 54.0], [25.3, 54.0], [25.4, 54.0], [25.5, 54.0], [25.6, 54.0], [25.7, 54.0], [25.8, 54.0], [25.9, 54.0], [26.0, 54.0], [26.1, 55.0], [26.2, 55.0], [26.3, 55.0], [26.4, 55.0], [26.5, 55.0], [26.6, 55.0], [26.7, 55.0], [26.8, 55.0], [26.9, 55.0], [27.0, 55.0], [27.1, 55.0], [27.2, 56.0], [27.3, 56.0], [27.4, 56.0], [27.5, 56.0], [27.6, 56.0], [27.7, 56.0], [27.8, 56.0], [27.9, 56.0], [28.0, 56.0], [28.1, 57.0], [28.2, 57.0], [28.3, 57.0], [28.4, 57.0], [28.5, 57.0], [28.6, 57.0], [28.7, 57.0], [28.8, 57.0], [28.9, 57.0], [29.0, 57.0], [29.1, 58.0], [29.2, 58.0], [29.3, 58.0], [29.4, 58.0], [29.5, 58.0], [29.6, 58.0], [29.7, 58.0], [29.8, 58.0], [29.9, 58.0], [30.0, 58.0], [30.1, 58.0], [30.2, 58.0], [30.3, 59.0], [30.4, 59.0], [30.5, 59.0], [30.6, 59.0], [30.7, 59.0], [30.8, 59.0], [30.9, 59.0], [31.0, 59.0], [31.1, 59.0], [31.2, 59.0], [31.3, 59.0], [31.4, 59.0], [31.5, 60.0], [31.6, 60.0], [31.7, 60.0], [31.8, 60.0], [31.9, 60.0], [32.0, 60.0], [32.1, 60.0], [32.2, 60.0], [32.3, 60.0], [32.4, 60.0], [32.5, 60.0], [32.6, 60.0], [32.7, 61.0], [32.8, 61.0], [32.9, 61.0], [33.0, 61.0], [33.1, 61.0], [33.2, 61.0], [33.3, 61.0], [33.4, 61.0], [33.5, 61.0], [33.6, 61.0], [33.7, 61.0], [33.8, 61.0], [33.9, 61.0], [34.0, 62.0], [34.1, 62.0], [34.2, 62.0], [34.3, 62.0], [34.4, 62.0], [34.5, 62.0], [34.6, 62.0], [34.7, 62.0], [34.8, 62.0], [34.9, 62.0], [35.0, 62.0], [35.1, 63.0], [35.2, 63.0], [35.3, 63.0], [35.4, 63.0], [35.5, 63.0], [35.6, 63.0], [35.7, 64.0], [35.8, 64.0], [35.9, 64.0], [36.0, 64.0], [36.1, 64.0], [36.2, 64.0], [36.3, 64.0], [36.4, 64.0], [36.5, 65.0], [36.6, 65.0], [36.7, 65.0], [36.8, 65.0], [36.9, 65.0], [37.0, 65.0], [37.1, 65.0], [37.2, 65.0], [37.3, 65.0], [37.4, 65.0], [37.5, 66.0], [37.6, 66.0], [37.7, 66.0], [37.8, 66.0], [37.9, 67.0], [38.0, 67.0], [38.1, 67.0], [38.2, 67.0], [38.3, 67.0], [38.4, 67.0], [38.5, 67.0], [38.6, 67.0], [38.7, 67.0], [38.8, 68.0], [38.9, 68.0], [39.0, 68.0], [39.1, 68.0], [39.2, 68.0], [39.3, 68.0], [39.4, 69.0], [39.5, 69.0], [39.6, 69.0], [39.7, 69.0], [39.8, 69.0], [39.9, 69.0], [40.0, 69.0], [40.1, 70.0], [40.2, 70.0], [40.3, 70.0], [40.4, 70.0], [40.5, 70.0], [40.6, 70.0], [40.7, 70.0], [40.8, 70.0], [40.9, 71.0], [41.0, 71.0], [41.1, 71.0], [41.2, 71.0], [41.3, 72.0], [41.4, 72.0], [41.5, 72.0], [41.6, 72.0], [41.7, 72.0], [41.8, 72.0], [41.9, 73.0], [42.0, 73.0], [42.1, 74.0], [42.2, 74.0], [42.3, 75.0], [42.4, 75.0], [42.5, 76.0], [42.6, 77.0], [42.7, 77.0], [42.8, 77.0], [42.9, 78.0], [43.0, 78.0], [43.1, 78.0], [43.2, 78.0], [43.3, 78.0], [43.4, 78.0], [43.5, 79.0], [43.6, 79.0], [43.7, 79.0], [43.8, 79.0], [43.9, 79.0], [44.0, 79.0], [44.1, 80.0], [44.2, 80.0], [44.3, 80.0], [44.4, 80.0], [44.5, 80.0], [44.6, 81.0], [44.7, 81.0], [44.8, 81.0], [44.9, 81.0], [45.0, 81.0], [45.1, 81.0], [45.2, 81.0], [45.3, 81.0], [45.4, 81.0], [45.5, 82.0], [45.6, 82.0], [45.7, 82.0], [45.8, 82.0], [45.9, 83.0], [46.0, 83.0], [46.1, 83.0], [46.2, 84.0], [46.3, 84.0], [46.4, 84.0], [46.5, 84.0], [46.6, 84.0], [46.7, 84.0], [46.8, 84.0], [46.9, 84.0], [47.0, 85.0], [47.1, 85.0], [47.2, 85.0], [47.3, 85.0], [47.4, 85.0], [47.5, 86.0], [47.6, 86.0], [47.7, 86.0], [47.8, 86.0], [47.9, 86.0], [48.0, 86.0], [48.1, 87.0], [48.2, 87.0], [48.3, 87.0], [48.4, 87.0], [48.5, 87.0], [48.6, 87.0], [48.7, 87.0], [48.8, 87.0], [48.9, 87.0], [49.0, 87.0], [49.1, 87.0], [49.2, 88.0], [49.3, 88.0], [49.4, 88.0], [49.5, 88.0], [49.6, 88.0], [49.7, 88.0], [49.8, 88.0], [49.9, 88.0], [50.0, 88.0], [50.1, 88.0], [50.2, 88.0], [50.3, 88.0], [50.4, 89.0], [50.5, 89.0], [50.6, 89.0], [50.7, 89.0], [50.8, 89.0], [50.9, 89.0], [51.0, 89.0], [51.1, 89.0], [51.2, 89.0], [51.3, 89.0], [51.4, 90.0], [51.5, 90.0], [51.6, 90.0], [51.7, 90.0], [51.8, 90.0], [51.9, 90.0], [52.0, 90.0], [52.1, 90.0], [52.2, 90.0], [52.3, 90.0], [52.4, 90.0], [52.5, 91.0], [52.6, 91.0], [52.7, 91.0], [52.8, 91.0], [52.9, 91.0], [53.0, 91.0], [53.1, 92.0], [53.2, 92.0], [53.3, 92.0], [53.4, 92.0], [53.5, 92.0], [53.6, 92.0], [53.7, 92.0], [53.8, 92.0], [53.9, 93.0], [54.0, 93.0], [54.1, 93.0], [54.2, 93.0], [54.3, 93.0], [54.4, 93.0], [54.5, 94.0], [54.6, 94.0], [54.7, 94.0], [54.8, 94.0], [54.9, 94.0], [55.0, 94.0], [55.1, 94.0], [55.2, 94.0], [55.3, 94.0], [55.4, 94.0], [55.5, 94.0], [55.6, 94.0], [55.7, 94.0], [55.8, 94.0], [55.9, 95.0], [56.0, 95.0], [56.1, 96.0], [56.2, 96.0], [56.3, 96.0], [56.4, 96.0], [56.5, 96.0], [56.6, 96.0], [56.7, 96.0], [56.8, 96.0], [56.9, 96.0], [57.0, 96.0], [57.1, 96.0], [57.2, 96.0], [57.3, 96.0], [57.4, 97.0], [57.5, 97.0], [57.6, 97.0], [57.7, 97.0], [57.8, 97.0], [57.9, 97.0], [58.0, 97.0], [58.1, 97.0], [58.2, 97.0], [58.3, 97.0], [58.4, 98.0], [58.5, 98.0], [58.6, 98.0], [58.7, 98.0], [58.8, 98.0], [58.9, 98.0], [59.0, 98.0], [59.1, 98.0], [59.2, 98.0], [59.3, 98.0], [59.4, 98.0], [59.5, 98.0], [59.6, 98.0], [59.7, 98.0], [59.8, 98.0], [59.9, 99.0], [60.0, 99.0], [60.1, 99.0], [60.2, 99.0], [60.3, 99.0], [60.4, 99.0], [60.5, 99.0], [60.6, 100.0], [60.7, 100.0], [60.8, 100.0], [60.9, 100.0], [61.0, 100.0], [61.1, 100.0], [61.2, 100.0], [61.3, 100.0], [61.4, 100.0], [61.5, 100.0], [61.6, 100.0], [61.7, 101.0], [61.8, 101.0], [61.9, 101.0], [62.0, 101.0], [62.1, 101.0], [62.2, 101.0], [62.3, 101.0], [62.4, 101.0], [62.5, 101.0], [62.6, 101.0], [62.7, 101.0], [62.8, 101.0], [62.9, 102.0], [63.0, 102.0], [63.1, 102.0], [63.2, 103.0], [63.3, 103.0], [63.4, 103.0], [63.5, 103.0], [63.6, 103.0], [63.7, 103.0], [63.8, 103.0], [63.9, 103.0], [64.0, 104.0], [64.1, 104.0], [64.2, 104.0], [64.3, 104.0], [64.4, 104.0], [64.5, 104.0], [64.6, 104.0], [64.7, 104.0], [64.8, 104.0], [64.9, 104.0], [65.0, 104.0], [65.1, 104.0], [65.2, 104.0], [65.3, 104.0], [65.4, 104.0], [65.5, 104.0], [65.6, 104.0], [65.7, 104.0], [65.8, 105.0], [65.9, 105.0], [66.0, 105.0], [66.1, 105.0], [66.2, 105.0], [66.3, 105.0], [66.4, 105.0], [66.5, 105.0], [66.6, 105.0], [66.7, 105.0], [66.8, 106.0], [66.9, 106.0], [67.0, 106.0], [67.1, 106.0], [67.2, 106.0], [67.3, 106.0], [67.4, 106.0], [67.5, 106.0], [67.6, 107.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 107.0], [68.1, 107.0], [68.2, 107.0], [68.3, 107.0], [68.4, 107.0], [68.5, 108.0], [68.6, 108.0], [68.7, 108.0], [68.8, 108.0], [68.9, 108.0], [69.0, 108.0], [69.1, 108.0], [69.2, 108.0], [69.3, 108.0], [69.4, 108.0], [69.5, 108.0], [69.6, 108.0], [69.7, 108.0], [69.8, 109.0], [69.9, 109.0], [70.0, 109.0], [70.1, 109.0], [70.2, 109.0], [70.3, 109.0], [70.4, 109.0], [70.5, 109.0], [70.6, 109.0], [70.7, 109.0], [70.8, 109.0], [70.9, 109.0], [71.0, 109.0], [71.1, 109.0], [71.2, 109.0], [71.3, 110.0], [71.4, 110.0], [71.5, 110.0], [71.6, 110.0], [71.7, 110.0], [71.8, 111.0], [71.9, 111.0], [72.0, 111.0], [72.1, 111.0], [72.2, 111.0], [72.3, 111.0], [72.4, 111.0], [72.5, 111.0], [72.6, 111.0], [72.7, 112.0], [72.8, 112.0], [72.9, 112.0], [73.0, 112.0], [73.1, 112.0], [73.2, 113.0], [73.3, 113.0], [73.4, 113.0], [73.5, 113.0], [73.6, 113.0], [73.7, 113.0], [73.8, 113.0], [73.9, 113.0], [74.0, 113.0], [74.1, 113.0], [74.2, 114.0], [74.3, 114.0], [74.4, 114.0], [74.5, 114.0], [74.6, 114.0], [74.7, 114.0], [74.8, 114.0], [74.9, 114.0], [75.0, 114.0], [75.1, 114.0], [75.2, 114.0], [75.3, 114.0], [75.4, 114.0], [75.5, 114.0], [75.6, 114.0], [75.7, 115.0], [75.8, 115.0], [75.9, 115.0], [76.0, 115.0], [76.1, 115.0], [76.2, 115.0], [76.3, 115.0], [76.4, 115.0], [76.5, 115.0], [76.6, 116.0], [76.7, 116.0], [76.8, 116.0], [76.9, 116.0], [77.0, 116.0], [77.1, 116.0], [77.2, 117.0], [77.3, 117.0], [77.4, 117.0], [77.5, 117.0], [77.6, 117.0], [77.7, 117.0], [77.8, 117.0], [77.9, 117.0], [78.0, 117.0], [78.1, 117.0], [78.2, 118.0], [78.3, 118.0], [78.4, 118.0], [78.5, 119.0], [78.6, 119.0], [78.7, 119.0], [78.8, 119.0], [78.9, 119.0], [79.0, 119.0], [79.1, 119.0], [79.2, 120.0], [79.3, 120.0], [79.4, 120.0], [79.5, 120.0], [79.6, 120.0], [79.7, 120.0], [79.8, 120.0], [79.9, 120.0], [80.0, 120.0], [80.1, 120.0], [80.2, 121.0], [80.3, 121.0], [80.4, 121.0], [80.5, 121.0], [80.6, 121.0], [80.7, 121.0], [80.8, 121.0], [80.9, 122.0], [81.0, 122.0], [81.1, 122.0], [81.2, 122.0], [81.3, 122.0], [81.4, 122.0], [81.5, 122.0], [81.6, 122.0], [81.7, 122.0], [81.8, 123.0], [81.9, 123.0], [82.0, 123.0], [82.1, 123.0], [82.2, 124.0], [82.3, 124.0], [82.4, 124.0], [82.5, 124.0], [82.6, 124.0], [82.7, 125.0], [82.8, 125.0], [82.9, 125.0], [83.0, 125.0], [83.1, 126.0], [83.2, 126.0], [83.3, 126.0], [83.4, 126.0], [83.5, 127.0], [83.6, 127.0], [83.7, 127.0], [83.8, 127.0], [83.9, 127.0], [84.0, 127.0], [84.1, 128.0], [84.2, 128.0], [84.3, 128.0], [84.4, 129.0], [84.5, 129.0], [84.6, 129.0], [84.7, 129.0], [84.8, 129.0], [84.9, 129.0], [85.0, 129.0], [85.1, 130.0], [85.2, 130.0], [85.3, 130.0], [85.4, 131.0], [85.5, 131.0], [85.6, 132.0], [85.7, 132.0], [85.8, 132.0], [85.9, 132.0], [86.0, 132.0], [86.1, 133.0], [86.2, 133.0], [86.3, 133.0], [86.4, 133.0], [86.5, 133.0], [86.6, 134.0], [86.7, 134.0], [86.8, 134.0], [86.9, 134.0], [87.0, 134.0], [87.1, 134.0], [87.2, 135.0], [87.3, 135.0], [87.4, 135.0], [87.5, 135.0], [87.6, 136.0], [87.7, 136.0], [87.8, 136.0], [87.9, 136.0], [88.0, 136.0], [88.1, 136.0], [88.2, 137.0], [88.3, 137.0], [88.4, 137.0], [88.5, 137.0], [88.6, 137.0], [88.7, 137.0], [88.8, 137.0], [88.9, 137.0], [89.0, 138.0], [89.1, 138.0], [89.2, 138.0], [89.3, 138.0], [89.4, 138.0], [89.5, 138.0], [89.6, 138.0], [89.7, 138.0], [89.8, 138.0], [89.9, 138.0], [90.0, 139.0], [90.1, 139.0], [90.2, 139.0], [90.3, 139.0], [90.4, 139.0], [90.5, 139.0], [90.6, 139.0], [90.7, 140.0], [90.8, 140.0], [90.9, 140.0], [91.0, 140.0], [91.1, 140.0], [91.2, 140.0], [91.3, 140.0], [91.4, 141.0], [91.5, 141.0], [91.6, 141.0], [91.7, 142.0], [91.8, 142.0], [91.9, 142.0], [92.0, 142.0], [92.1, 142.0], [92.2, 142.0], [92.3, 142.0], [92.4, 142.0], [92.5, 143.0], [92.6, 143.0], [92.7, 143.0], [92.8, 143.0], [92.9, 143.0], [93.0, 144.0], [93.1, 144.0], [93.2, 144.0], [93.3, 144.0], [93.4, 144.0], [93.5, 144.0], [93.6, 145.0], [93.7, 145.0], [93.8, 145.0], [93.9, 145.0], [94.0, 145.0], [94.1, 145.0], [94.2, 146.0], [94.3, 146.0], [94.4, 146.0], [94.5, 146.0], [94.6, 147.0], [94.7, 147.0], [94.8, 147.0], [94.9, 147.0], [95.0, 148.0], [95.1, 148.0], [95.2, 148.0], [95.3, 148.0], [95.4, 148.0], [95.5, 148.0], [95.6, 149.0], [95.7, 149.0], [95.8, 149.0], [95.9, 149.0], [96.0, 149.0], [96.1, 149.0], [96.2, 150.0], [96.3, 150.0], [96.4, 150.0], [96.5, 150.0], [96.6, 150.0], [96.7, 151.0], [96.8, 151.0], [96.9, 151.0], [97.0, 152.0], [97.1, 152.0], [97.2, 152.0], [97.3, 152.0], [97.4, 152.0], [97.5, 152.0], [97.6, 153.0], [97.7, 153.0], [97.8, 153.0], [97.9, 153.0], [98.0, 154.0], [98.1, 154.0], [98.2, 155.0], [98.3, 156.0], [98.4, 157.0], [98.5, 157.0], [98.6, 158.0], [98.7, 158.0], [98.8, 160.0], [98.9, 160.0], [99.0, 161.0], [99.1, 163.0], [99.2, 165.0], [99.3, 165.0], [99.4, 166.0], [99.5, 167.0], [99.6, 167.0], [99.7, 168.0], [99.8, 168.0], [99.9, 170.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 214.0], [0.1, 224.0], [0.2, 225.0], [0.3, 225.0], [0.4, 225.0], [0.5, 226.0], [0.6, 226.0], [0.7, 226.0], [0.8, 227.0], [0.9, 227.0], [1.0, 227.0], [1.1, 228.0], [1.2, 228.0], [1.3, 229.0], [1.4, 229.0], [1.5, 229.0], [1.6, 229.0], [1.7, 229.0], [1.8, 230.0], [1.9, 230.0], [2.0, 230.0], [2.1, 230.0], [2.2, 230.0], [2.3, 230.0], [2.4, 230.0], [2.5, 231.0], [2.6, 231.0], [2.7, 231.0], [2.8, 231.0], [2.9, 231.0], [3.0, 231.0], [3.1, 231.0], [3.2, 232.0], [3.3, 232.0], [3.4, 232.0], [3.5, 233.0], [3.6, 233.0], [3.7, 233.0], [3.8, 233.0], [3.9, 233.0], [4.0, 233.0], [4.1, 234.0], [4.2, 234.0], [4.3, 234.0], [4.4, 234.0], [4.5, 234.0], [4.6, 234.0], [4.7, 235.0], [4.8, 235.0], [4.9, 235.0], [5.0, 235.0], [5.1, 235.0], [5.2, 235.0], [5.3, 235.0], [5.4, 236.0], [5.5, 236.0], [5.6, 236.0], [5.7, 236.0], [5.8, 236.0], [5.9, 236.0], [6.0, 236.0], [6.1, 236.0], [6.2, 237.0], [6.3, 237.0], [6.4, 237.0], [6.5, 237.0], [6.6, 237.0], [6.7, 237.0], [6.8, 237.0], [6.9, 237.0], [7.0, 238.0], [7.1, 238.0], [7.2, 238.0], [7.3, 238.0], [7.4, 238.0], [7.5, 238.0], [7.6, 238.0], [7.7, 239.0], [7.8, 239.0], [7.9, 239.0], [8.0, 239.0], [8.1, 239.0], [8.2, 239.0], [8.3, 239.0], [8.4, 239.0], [8.5, 239.0], [8.6, 239.0], [8.7, 239.0], [8.8, 239.0], [8.9, 240.0], [9.0, 240.0], [9.1, 240.0], [9.2, 240.0], [9.3, 240.0], [9.4, 240.0], [9.5, 240.0], [9.6, 241.0], [9.7, 241.0], [9.8, 241.0], [9.9, 241.0], [10.0, 241.0], [10.1, 241.0], [10.2, 241.0], [10.3, 241.0], [10.4, 241.0], [10.5, 241.0], [10.6, 241.0], [10.7, 241.0], [10.8, 241.0], [10.9, 241.0], [11.0, 241.0], [11.1, 241.0], [11.2, 241.0], [11.3, 242.0], [11.4, 242.0], [11.5, 242.0], [11.6, 242.0], [11.7, 242.0], [11.8, 242.0], [11.9, 243.0], [12.0, 243.0], [12.1, 243.0], [12.2, 243.0], [12.3, 244.0], [12.4, 244.0], [12.5, 244.0], [12.6, 244.0], [12.7, 244.0], [12.8, 244.0], [12.9, 244.0], [13.0, 244.0], [13.1, 244.0], [13.2, 244.0], [13.3, 244.0], [13.4, 244.0], [13.5, 245.0], [13.6, 245.0], [13.7, 245.0], [13.8, 245.0], [13.9, 245.0], [14.0, 245.0], [14.1, 245.0], [14.2, 245.0], [14.3, 245.0], [14.4, 246.0], [14.5, 246.0], [14.6, 246.0], [14.7, 246.0], [14.8, 246.0], [14.9, 246.0], [15.0, 246.0], [15.1, 246.0], [15.2, 246.0], [15.3, 246.0], [15.4, 247.0], [15.5, 247.0], [15.6, 247.0], [15.7, 247.0], [15.8, 247.0], [15.9, 247.0], [16.0, 247.0], [16.1, 247.0], [16.2, 247.0], [16.3, 248.0], [16.4, 248.0], [16.5, 248.0], [16.6, 248.0], [16.7, 248.0], [16.8, 248.0], [16.9, 248.0], [17.0, 248.0], [17.1, 248.0], [17.2, 248.0], [17.3, 248.0], [17.4, 248.0], [17.5, 249.0], [17.6, 249.0], [17.7, 249.0], [17.8, 249.0], [17.9, 250.0], [18.0, 250.0], [18.1, 250.0], [18.2, 250.0], [18.3, 250.0], [18.4, 250.0], [18.5, 250.0], [18.6, 250.0], [18.7, 250.0], [18.8, 251.0], [18.9, 251.0], [19.0, 251.0], [19.1, 251.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 251.0], [19.6, 252.0], [19.7, 252.0], [19.8, 252.0], [19.9, 252.0], [20.0, 252.0], [20.1, 252.0], [20.2, 252.0], [20.3, 252.0], [20.4, 252.0], [20.5, 252.0], [20.6, 252.0], [20.7, 253.0], [20.8, 253.0], [20.9, 253.0], [21.0, 253.0], [21.1, 253.0], [21.2, 253.0], [21.3, 253.0], [21.4, 253.0], [21.5, 253.0], [21.6, 253.0], [21.7, 253.0], [21.8, 253.0], [21.9, 254.0], [22.0, 254.0], [22.1, 254.0], [22.2, 254.0], [22.3, 254.0], [22.4, 254.0], [22.5, 254.0], [22.6, 255.0], [22.7, 255.0], [22.8, 255.0], [22.9, 255.0], [23.0, 255.0], [23.1, 255.0], [23.2, 255.0], [23.3, 255.0], [23.4, 255.0], [23.5, 255.0], [23.6, 256.0], [23.7, 256.0], [23.8, 256.0], [23.9, 256.0], [24.0, 256.0], [24.1, 256.0], [24.2, 256.0], [24.3, 256.0], [24.4, 256.0], [24.5, 257.0], [24.6, 257.0], [24.7, 257.0], [24.8, 257.0], [24.9, 257.0], [25.0, 257.0], [25.1, 257.0], [25.2, 257.0], [25.3, 257.0], [25.4, 258.0], [25.5, 258.0], [25.6, 258.0], [25.7, 258.0], [25.8, 258.0], [25.9, 258.0], [26.0, 258.0], [26.1, 258.0], [26.2, 258.0], [26.3, 259.0], [26.4, 259.0], [26.5, 259.0], [26.6, 259.0], [26.7, 259.0], [26.8, 259.0], [26.9, 259.0], [27.0, 260.0], [27.1, 260.0], [27.2, 260.0], [27.3, 260.0], [27.4, 261.0], [27.5, 261.0], [27.6, 261.0], [27.7, 262.0], [27.8, 262.0], [27.9, 262.0], [28.0, 263.0], [28.1, 263.0], [28.2, 264.0], [28.3, 264.0], [28.4, 264.0], [28.5, 264.0], [28.6, 264.0], [28.7, 264.0], [28.8, 264.0], [28.9, 264.0], [29.0, 264.0], [29.1, 265.0], [29.2, 265.0], [29.3, 265.0], [29.4, 266.0], [29.5, 266.0], [29.6, 266.0], [29.7, 266.0], [29.8, 266.0], [29.9, 266.0], [30.0, 266.0], [30.1, 267.0], [30.2, 267.0], [30.3, 267.0], [30.4, 267.0], [30.5, 267.0], [30.6, 267.0], [30.7, 268.0], [30.8, 268.0], [30.9, 268.0], [31.0, 268.0], [31.1, 269.0], [31.2, 269.0], [31.3, 269.0], [31.4, 270.0], [31.5, 270.0], [31.6, 270.0], [31.7, 270.0], [31.8, 270.0], [31.9, 271.0], [32.0, 271.0], [32.1, 271.0], [32.2, 271.0], [32.3, 271.0], [32.4, 271.0], [32.5, 271.0], [32.6, 272.0], [32.7, 272.0], [32.8, 273.0], [32.9, 273.0], [33.0, 273.0], [33.1, 273.0], [33.2, 273.0], [33.3, 273.0], [33.4, 273.0], [33.5, 273.0], [33.6, 273.0], [33.7, 273.0], [33.8, 273.0], [33.9, 273.0], [34.0, 273.0], [34.1, 274.0], [34.2, 274.0], [34.3, 274.0], [34.4, 275.0], [34.5, 275.0], [34.6, 275.0], [34.7, 276.0], [34.8, 276.0], [34.9, 276.0], [35.0, 276.0], [35.1, 276.0], [35.2, 276.0], [35.3, 276.0], [35.4, 277.0], [35.5, 277.0], [35.6, 277.0], [35.7, 278.0], [35.8, 278.0], [35.9, 279.0], [36.0, 279.0], [36.1, 279.0], [36.2, 280.0], [36.3, 280.0], [36.4, 280.0], [36.5, 280.0], [36.6, 281.0], [36.7, 281.0], [36.8, 281.0], [36.9, 281.0], [37.0, 281.0], [37.1, 282.0], [37.2, 282.0], [37.3, 282.0], [37.4, 283.0], [37.5, 283.0], [37.6, 284.0], [37.7, 284.0], [37.8, 284.0], [37.9, 284.0], [38.0, 284.0], [38.1, 284.0], [38.2, 284.0], [38.3, 284.0], [38.4, 284.0], [38.5, 285.0], [38.6, 286.0], [38.7, 286.0], [38.8, 286.0], [38.9, 286.0], [39.0, 287.0], [39.1, 287.0], [39.2, 287.0], [39.3, 289.0], [39.4, 290.0], [39.5, 291.0], [39.6, 291.0], [39.7, 291.0], [39.8, 291.0], [39.9, 291.0], [40.0, 292.0], [40.1, 292.0], [40.2, 292.0], [40.3, 293.0], [40.4, 293.0], [40.5, 293.0], [40.6, 294.0], [40.7, 294.0], [40.8, 295.0], [40.9, 296.0], [41.0, 296.0], [41.1, 296.0], [41.2, 297.0], [41.3, 297.0], [41.4, 297.0], [41.5, 297.0], [41.6, 298.0], [41.7, 298.0], [41.8, 298.0], [41.9, 299.0], [42.0, 300.0], [42.1, 300.0], [42.2, 301.0], [42.3, 302.0], [42.4, 302.0], [42.5, 302.0], [42.6, 302.0], [42.7, 303.0], [42.8, 305.0], [42.9, 307.0], [43.0, 308.0], [43.1, 308.0], [43.2, 311.0], [43.3, 312.0], [43.4, 316.0], [43.5, 317.0], [43.6, 317.0], [43.7, 318.0], [43.8, 318.0], [43.9, 319.0], [44.0, 320.0], [44.1, 321.0], [44.2, 322.0], [44.3, 323.0], [44.4, 323.0], [44.5, 324.0], [44.6, 324.0], [44.7, 325.0], [44.8, 325.0], [44.9, 325.0], [45.0, 326.0], [45.1, 327.0], [45.2, 327.0], [45.3, 327.0], [45.4, 328.0], [45.5, 328.0], [45.6, 329.0], [45.7, 329.0], [45.8, 329.0], [45.9, 330.0], [46.0, 330.0], [46.1, 332.0], [46.2, 332.0], [46.3, 332.0], [46.4, 333.0], [46.5, 333.0], [46.6, 333.0], [46.7, 334.0], [46.8, 334.0], [46.9, 335.0], [47.0, 335.0], [47.1, 336.0], [47.2, 336.0], [47.3, 336.0], [47.4, 337.0], [47.5, 337.0], [47.6, 337.0], [47.7, 337.0], [47.8, 337.0], [47.9, 337.0], [48.0, 337.0], [48.1, 338.0], [48.2, 338.0], [48.3, 339.0], [48.4, 339.0], [48.5, 340.0], [48.6, 340.0], [48.7, 340.0], [48.8, 341.0], [48.9, 341.0], [49.0, 341.0], [49.1, 341.0], [49.2, 342.0], [49.3, 342.0], [49.4, 343.0], [49.5, 343.0], [49.6, 344.0], [49.7, 344.0], [49.8, 344.0], [49.9, 345.0], [50.0, 345.0], [50.1, 345.0], [50.2, 345.0], [50.3, 345.0], [50.4, 347.0], [50.5, 348.0], [50.6, 348.0], [50.7, 349.0], [50.8, 349.0], [50.9, 349.0], [51.0, 349.0], [51.1, 350.0], [51.2, 350.0], [51.3, 351.0], [51.4, 351.0], [51.5, 351.0], [51.6, 352.0], [51.7, 353.0], [51.8, 354.0], [51.9, 354.0], [52.0, 354.0], [52.1, 354.0], [52.2, 355.0], [52.3, 356.0], [52.4, 356.0], [52.5, 358.0], [52.6, 358.0], [52.7, 359.0], [52.8, 359.0], [52.9, 359.0], [53.0, 360.0], [53.1, 360.0], [53.2, 361.0], [53.3, 361.0], [53.4, 363.0], [53.5, 364.0], [53.6, 365.0], [53.7, 365.0], [53.8, 365.0], [53.9, 366.0], [54.0, 366.0], [54.1, 367.0], [54.2, 368.0], [54.3, 368.0], [54.4, 368.0], [54.5, 370.0], [54.6, 370.0], [54.7, 372.0], [54.8, 372.0], [54.9, 372.0], [55.0, 373.0], [55.1, 373.0], [55.2, 373.0], [55.3, 374.0], [55.4, 375.0], [55.5, 377.0], [55.6, 377.0], [55.7, 379.0], [55.8, 379.0], [55.9, 380.0], [56.0, 381.0], [56.1, 381.0], [56.2, 383.0], [56.3, 384.0], [56.4, 385.0], [56.5, 386.0], [56.6, 386.0], [56.7, 386.0], [56.8, 387.0], [56.9, 387.0], [57.0, 390.0], [57.1, 390.0], [57.2, 392.0], [57.3, 393.0], [57.4, 397.0], [57.5, 399.0], [57.6, 399.0], [57.7, 400.0], [57.8, 401.0], [57.9, 404.0], [58.0, 407.0], [58.1, 410.0], [58.2, 412.0], [58.3, 414.0], [58.4, 418.0], [58.5, 421.0], [58.6, 423.0], [58.7, 427.0], [58.8, 428.0], [58.9, 428.0], [59.0, 429.0], [59.1, 429.0], [59.2, 431.0], [59.3, 432.0], [59.4, 432.0], [59.5, 434.0], [59.6, 434.0], [59.7, 435.0], [59.8, 435.0], [59.9, 438.0], [60.0, 439.0], [60.1, 441.0], [60.2, 444.0], [60.3, 446.0], [60.4, 448.0], [60.5, 449.0], [60.6, 451.0], [60.7, 453.0], [60.8, 453.0], [60.9, 454.0], [61.0, 455.0], [61.1, 458.0], [61.2, 458.0], [61.3, 459.0], [61.4, 460.0], [61.5, 461.0], [61.6, 463.0], [61.7, 464.0], [61.8, 464.0], [61.9, 465.0], [62.0, 465.0], [62.1, 467.0], [62.2, 468.0], [62.3, 470.0], [62.4, 472.0], [62.5, 472.0], [62.6, 473.0], [62.7, 474.0], [62.8, 475.0], [62.9, 475.0], [63.0, 475.0], [63.1, 475.0], [63.2, 476.0], [63.3, 476.0], [63.4, 476.0], [63.5, 477.0], [63.6, 477.0], [63.7, 478.0], [63.8, 478.0], [63.9, 481.0], [64.0, 481.0], [64.1, 482.0], [64.2, 484.0], [64.3, 484.0], [64.4, 488.0], [64.5, 490.0], [64.6, 490.0], [64.7, 492.0], [64.8, 493.0], [64.9, 494.0], [65.0, 496.0], [65.1, 497.0], [65.2, 497.0], [65.3, 498.0], [65.4, 499.0], [65.5, 501.0], [65.6, 501.0], [65.7, 501.0], [65.8, 504.0], [65.9, 505.0], [66.0, 505.0], [66.1, 506.0], [66.2, 506.0], [66.3, 508.0], [66.4, 508.0], [66.5, 510.0], [66.6, 510.0], [66.7, 511.0], [66.8, 511.0], [66.9, 512.0], [67.0, 513.0], [67.1, 514.0], [67.2, 516.0], [67.3, 516.0], [67.4, 520.0], [67.5, 520.0], [67.6, 521.0], [67.7, 521.0], [67.8, 524.0], [67.9, 525.0], [68.0, 525.0], [68.1, 525.0], [68.2, 528.0], [68.3, 529.0], [68.4, 530.0], [68.5, 530.0], [68.6, 530.0], [68.7, 531.0], [68.8, 534.0], [68.9, 536.0], [69.0, 536.0], [69.1, 537.0], [69.2, 537.0], [69.3, 538.0], [69.4, 538.0], [69.5, 539.0], [69.6, 539.0], [69.7, 541.0], [69.8, 542.0], [69.9, 543.0], [70.0, 543.0], [70.1, 545.0], [70.2, 546.0], [70.3, 547.0], [70.4, 548.0], [70.5, 548.0], [70.6, 548.0], [70.7, 549.0], [70.8, 551.0], [70.9, 551.0], [71.0, 551.0], [71.1, 554.0], [71.2, 554.0], [71.3, 554.0], [71.4, 555.0], [71.5, 557.0], [71.6, 558.0], [71.7, 558.0], [71.8, 558.0], [71.9, 559.0], [72.0, 559.0], [72.1, 560.0], [72.2, 560.0], [72.3, 561.0], [72.4, 561.0], [72.5, 562.0], [72.6, 562.0], [72.7, 562.0], [72.8, 563.0], [72.9, 566.0], [73.0, 566.0], [73.1, 566.0], [73.2, 568.0], [73.3, 569.0], [73.4, 569.0], [73.5, 569.0], [73.6, 570.0], [73.7, 570.0], [73.8, 570.0], [73.9, 571.0], [74.0, 571.0], [74.1, 573.0], [74.2, 573.0], [74.3, 573.0], [74.4, 573.0], [74.5, 575.0], [74.6, 576.0], [74.7, 576.0], [74.8, 576.0], [74.9, 576.0], [75.0, 577.0], [75.1, 579.0], [75.2, 580.0], [75.3, 580.0], [75.4, 581.0], [75.5, 583.0], [75.6, 583.0], [75.7, 584.0], [75.8, 584.0], [75.9, 584.0], [76.0, 586.0], [76.1, 586.0], [76.2, 586.0], [76.3, 586.0], [76.4, 588.0], [76.5, 588.0], [76.6, 588.0], [76.7, 589.0], [76.8, 590.0], [76.9, 590.0], [77.0, 590.0], [77.1, 591.0], [77.2, 592.0], [77.3, 593.0], [77.4, 594.0], [77.5, 594.0], [77.6, 595.0], [77.7, 596.0], [77.8, 597.0], [77.9, 599.0], [78.0, 599.0], [78.1, 600.0], [78.2, 601.0], [78.3, 602.0], [78.4, 602.0], [78.5, 604.0], [78.6, 605.0], [78.7, 605.0], [78.8, 606.0], [78.9, 608.0], [79.0, 611.0], [79.1, 615.0], [79.2, 616.0], [79.3, 616.0], [79.4, 617.0], [79.5, 617.0], [79.6, 619.0], [79.7, 620.0], [79.8, 623.0], [79.9, 623.0], [80.0, 624.0], [80.1, 624.0], [80.2, 625.0], [80.3, 626.0], [80.4, 632.0], [80.5, 633.0], [80.6, 635.0], [80.7, 638.0], [80.8, 639.0], [80.9, 640.0], [81.0, 641.0], [81.1, 643.0], [81.2, 644.0], [81.3, 646.0], [81.4, 646.0], [81.5, 647.0], [81.6, 649.0], [81.7, 651.0], [81.8, 651.0], [81.9, 653.0], [82.0, 653.0], [82.1, 664.0], [82.2, 669.0], [82.3, 672.0], [82.4, 675.0], [82.5, 678.0], [82.6, 679.0], [82.7, 682.0], [82.8, 683.0], [82.9, 683.0], [83.0, 684.0], [83.1, 685.0], [83.2, 687.0], [83.3, 687.0], [83.4, 688.0], [83.5, 693.0], [83.6, 694.0], [83.7, 699.0], [83.8, 700.0], [83.9, 702.0], [84.0, 705.0], [84.1, 708.0], [84.2, 708.0], [84.3, 710.0], [84.4, 711.0], [84.5, 713.0], [84.6, 713.0], [84.7, 715.0], [84.8, 717.0], [84.9, 717.0], [85.0, 718.0], [85.1, 720.0], [85.2, 721.0], [85.3, 721.0], [85.4, 722.0], [85.5, 722.0], [85.6, 725.0], [85.7, 726.0], [85.8, 726.0], [85.9, 727.0], [86.0, 728.0], [86.1, 730.0], [86.2, 732.0], [86.3, 732.0], [86.4, 734.0], [86.5, 735.0], [86.6, 736.0], [86.7, 736.0], [86.8, 736.0], [86.9, 737.0], [87.0, 737.0], [87.1, 739.0], [87.2, 739.0], [87.3, 739.0], [87.4, 739.0], [87.5, 741.0], [87.6, 741.0], [87.7, 741.0], [87.8, 742.0], [87.9, 742.0], [88.0, 742.0], [88.1, 744.0], [88.2, 745.0], [88.3, 747.0], [88.4, 748.0], [88.5, 748.0], [88.6, 749.0], [88.7, 749.0], [88.8, 750.0], [88.9, 750.0], [89.0, 753.0], [89.1, 753.0], [89.2, 753.0], [89.3, 754.0], [89.4, 754.0], [89.5, 754.0], [89.6, 754.0], [89.7, 756.0], [89.8, 757.0], [89.9, 758.0], [90.0, 759.0], [90.1, 760.0], [90.2, 761.0], [90.3, 762.0], [90.4, 762.0], [90.5, 763.0], [90.6, 769.0], [90.7, 770.0], [90.8, 770.0], [90.9, 770.0], [91.0, 772.0], [91.1, 772.0], [91.2, 772.0], [91.3, 777.0], [91.4, 778.0], [91.5, 778.0], [91.6, 780.0], [91.7, 782.0], [91.8, 786.0], [91.9, 787.0], [92.0, 787.0], [92.1, 789.0], [92.2, 794.0], [92.3, 795.0], [92.4, 798.0], [92.5, 798.0], [92.6, 800.0], [92.7, 816.0], [92.8, 831.0], [92.9, 832.0], [93.0, 844.0], [93.1, 847.0], [93.2, 851.0], [93.3, 866.0], [93.4, 897.0], [93.5, 903.0], [93.6, 914.0], [93.7, 917.0], [93.8, 924.0], [93.9, 926.0], [94.0, 930.0], [94.1, 932.0], [94.2, 933.0], [94.3, 940.0], [94.4, 943.0], [94.5, 948.0], [94.6, 1017.0], [94.7, 1018.0], [94.8, 1021.0], [94.9, 1041.0], [95.0, 1042.0], [95.1, 1120.0], [95.2, 1127.0], [95.3, 1130.0], [95.4, 1130.0], [95.5, 1132.0], [95.6, 1150.0], [95.7, 1153.0], [95.8, 1156.0], [95.9, 1162.0], [96.0, 1163.0], [96.1, 1172.0], [96.2, 1172.0], [96.3, 1181.0], [96.4, 1185.0], [96.5, 1185.0], [96.6, 1213.0], [96.7, 1213.0], [96.8, 1213.0], [96.9, 1215.0], [97.0, 1217.0], [97.1, 1220.0], [97.2, 1223.0], [97.3, 1227.0], [97.4, 1229.0], [97.5, 1230.0], [97.6, 1230.0], [97.7, 1230.0], [97.8, 1231.0], [97.9, 1235.0], [98.0, 1235.0], [98.1, 1238.0], [98.2, 1239.0], [98.3, 1246.0], [98.4, 1246.0], [98.5, 1248.0], [98.6, 1249.0], [98.7, 1250.0], [98.8, 1250.0], [98.9, 1252.0], [99.0, 1254.0], [99.1, 1256.0], [99.2, 1262.0], [99.3, 1264.0], [99.4, 1271.0], [99.5, 1273.0], [99.6, 1289.0], [99.7, 1436.0], [99.8, 1439.0], [99.9, 1449.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 606.0, "series": [{"data": [[1100.0, 30.0], [300.0, 118.0], [600.0, 215.0], [1200.0, 48.0], [1300.0, 4.0], [700.0, 152.0], [200.0, 52.0], [400.0, 119.0], [800.0, 104.0], [900.0, 66.0], [500.0, 67.0], [1000.0, 25.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 606.0], [100.0, 394.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1100.0, 15.0], [300.0, 156.0], [600.0, 57.0], [1200.0, 31.0], [700.0, 88.0], [1400.0, 3.0], [400.0, 78.0], [800.0, 9.0], [200.0, 420.0], [900.0, 11.0], [500.0, 127.0], [1000.0, 5.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1056.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1944.0, "series": [{"data": [[0.0, 1944.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1056.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 105.55700000000002, "minX": 1.66901922E12, "maxY": 395.29999999999956, "series": [{"data": [[1.66901922E12, 105.55700000000002]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}, {"data": [[1.66901922E12, 395.29999999999956]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}, {"data": [[1.66901922E12, 254.61100000000025]], "isOverall": false, "label": "client-to-application (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66901922E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 1449.0, "series": [{"data": [[3.0, 1162.3333333333333], [6.0, 1154.0], [7.0, 1155.0], [9.0, 1169.5], [12.0, 1175.6666666666667], [13.0, 1234.0], [14.0, 1236.0], [18.0, 1212.0], [19.0, 1204.0], [20.0, 1195.0], [21.0, 1222.0], [23.0, 1213.5], [24.0, 1212.0], [25.0, 1203.0], [26.0, 1222.0], [29.0, 1233.6666666666667], [31.0, 1243.5], [33.0, 1224.5], [35.0, 1203.0], [34.0, 1213.0], [36.0, 1229.0], [39.0, 1219.3333333333333], [40.0, 1228.0], [42.0, 1219.5], [45.0, 1205.0], [47.0, 1214.0], [46.0, 1043.0], [48.0, 871.0], [51.0, 1201.3333333333333], [54.0, 1203.6666666666667], [56.0, 1202.5], [61.0, 1267.5], [60.0, 1253.0], [63.0, 1232.0], [62.0, 1261.0], [67.0, 1164.0], [64.0, 840.0], [71.0, 1162.0], [75.0, 723.0], [73.0, 1016.2], [79.0, 838.0], [78.0, 729.0], [83.0, 692.0], [81.0, 739.5], [82.0, 1334.0], [87.0, 892.0], [86.0, 691.0], [84.0, 789.6666666666666], [89.0, 810.0], [95.0, 883.0], [92.0, 934.6666666666666], [97.0, 686.0], [96.0, 672.0], [100.0, 704.0], [105.0, 712.75], [104.0, 727.0], [108.0, 713.6666666666666], [117.0, 736.7777777777778], [123.0, 728.0], [120.0, 814.3333333333334], [127.0, 694.0], [126.0, 677.0], [124.0, 660.0], [133.0, 816.25], [130.0, 712.0], [128.0, 730.0], [143.0, 662.0], [142.0, 734.0], [141.0, 718.5], [139.0, 786.6666666666666], [136.0, 714.3333333333334], [151.0, 838.0], [150.0, 705.0], [149.0, 720.0], [148.0, 727.0], [147.0, 714.0], [146.0, 1337.0], [145.0, 708.0], [144.0, 766.0], [156.0, 657.0], [155.0, 765.5], [154.0, 1336.0], [153.0, 723.0], [167.0, 858.1666666666667], [165.0, 772.0], [175.0, 1022.0], [172.0, 689.5], [171.0, 924.6666666666666], [168.0, 683.0], [181.0, 714.0], [180.0, 763.3333333333334], [177.0, 901.5], [188.0, 705.6666666666666], [185.0, 765.6666666666666], [184.0, 753.0], [198.0, 748.3333333333334], [196.0, 671.0], [195.0, 692.0], [193.0, 768.0], [206.0, 730.0], [205.0, 744.0], [204.0, 752.5], [202.0, 824.0], [203.0, 709.0], [201.0, 773.6666666666666], [209.0, 866.3333333333334], [219.0, 219.0], [218.0, 789.6666666666666], [222.0, 223.0], [223.0, 758.0], [220.0, 785.3333333333334], [221.0, 726.0], [216.0, 835.6666666666666], [217.0, 901.5], [231.0, 913.0], [230.0, 883.0], [227.0, 763.0], [226.0, 864.5], [236.0, 533.5], [239.0, 551.0], [237.0, 848.0], [235.0, 763.3333333333334], [233.0, 920.0], [240.0, 543.0], [245.0, 713.5], [247.0, 1002.0], [244.0, 986.0], [243.0, 981.3333333333334], [241.0, 1016.0], [255.0, 587.4], [253.0, 260.0], [251.0, 850.5], [249.0, 890.6666666666666], [270.0, 280.4], [269.0, 273.1666666666667], [271.0, 271.0], [268.0, 255.0], [267.0, 646.6], [264.0, 907.0], [262.0, 786.4], [257.0, 911.5], [256.0, 997.0], [285.0, 658.0], [273.0, 267.625], [276.0, 440.8333333333333], [277.0, 872.25], [274.0, 264.5], [272.0, 278.25], [278.0, 1004.0], [286.0, 884.0], [281.0, 843.3333333333334], [284.0, 810.0], [275.0, 1019.0], [283.0, 953.0], [282.0, 805.0], [302.0, 1143.0], [297.0, 335.0], [298.0, 814.6666666666666], [296.0, 497.0], [294.0, 288.5], [295.0, 486.0], [288.0, 780.0], [291.0, 1155.0], [290.0, 1044.5], [293.0, 343.0], [292.0, 660.0], [303.0, 665.0], [301.0, 799.0], [300.0, 686.0], [319.0, 672.3333333333334], [312.0, 300.0], [317.0, 687.0], [316.0, 984.0], [315.0, 953.0], [314.0, 770.0], [313.0, 912.0], [311.0, 734.0], [305.0, 754.0], [304.0, 1038.0], [309.0, 998.0], [308.0, 993.0], [323.0, 309.0], [322.0, 579.6], [329.0, 284.0], [328.0, 300.3333333333333], [334.0, 626.5], [333.0, 309.5], [332.0, 798.6], [330.0, 653.5], [321.0, 1001.0], [338.0, 512.5], [337.0, 505.0], [336.0, 634.6666666666666], [349.0, 615.25], [351.0, 1096.0], [348.0, 719.25], [366.0, 313.0], [365.0, 600.4], [364.0, 311.0], [362.0, 733.5], [356.0, 929.5], [354.0, 563.0], [352.0, 826.0], [378.0, 454.0], [377.0, 424.0], [376.0, 544.0], [374.0, 943.0], [375.0, 664.0], [373.0, 542.75], [368.0, 804.3333333333334], [385.0, 318.3333333333333], [389.0, 630.8333333333333], [388.0, 450.6], [387.0, 516.3333333333334], [386.0, 563.75], [397.0, 360.0], [399.0, 696.0], [398.0, 624.3333333333334], [396.0, 494.5], [390.0, 356.0], [393.0, 366.5], [392.0, 565.0], [391.0, 616.75], [395.0, 354.0], [394.0, 635.0], [414.0, 871.6666666666666], [413.0, 336.0], [403.0, 490.0], [400.0, 559.0], [415.0, 601.0], [411.0, 583.0], [409.0, 589.0], [407.0, 911.0], [406.0, 464.0], [405.0, 793.0], [404.0, 445.5], [419.0, 614.0], [418.0, 692.0], [437.0, 336.0], [436.0, 356.6], [434.0, 457.375], [435.0, 333.0], [441.0, 468.3333333333333], [444.0, 889.0], [445.0, 609.9], [432.0, 466.0], [461.0, 388.0], [452.0, 343.0], [463.0, 359.0], [462.0, 555.5], [460.0, 633.0], [451.0, 693.6666666666666], [449.0, 716.25], [450.0, 600.0], [448.0, 698.8], [458.0, 623.5], [457.0, 613.0], [455.0, 486.0], [453.0, 593.0], [466.0, 542.0], [470.0, 345.5], [471.0, 385.5], [468.0, 348.0], [469.0, 600.0], [467.0, 353.0], [478.0, 505.0], [476.0, 368.0], [465.0, 361.0], [464.0, 524.5], [472.0, 648.75], [473.0, 618.0], [475.0, 372.0], [474.0, 485.0], [479.0, 420.3333333333333], [482.0, 690.25], [485.0, 633.4], [484.0, 390.25], [483.0, 386.5], [480.0, 632.6], [481.0, 575.0], [495.0, 600.0], [488.0, 904.0], [492.0, 654.5], [491.0, 466.0], [490.0, 595.5], [498.0, 383.0], [496.0, 506.0], [497.0, 563.5], [502.0, 388.0], [503.0, 675.0], [501.0, 579.4], [500.0, 439.5], [508.0, 393.0], [511.0, 843.0], [509.0, 600.6666666666666], [505.0, 393.0], [504.0, 585.0], [507.0, 568.0], [506.0, 372.0], [541.0, 748.3333333333334], [512.0, 472.75], [516.0, 762.5], [527.0, 694.0], [525.0, 699.0], [524.0, 584.0], [522.0, 856.0], [520.0, 736.0], [517.0, 532.5], [534.0, 407.5], [533.0, 555.0], [532.0, 609.0], [530.0, 668.6666666666666], [535.0, 610.0], [543.0, 663.0], [542.0, 665.0], [538.0, 648.0], [537.0, 636.0], [536.0, 839.0], [518.0, 639.0], [574.0, 785.0], [568.0, 549.6666666666666], [556.0, 403.0], [555.0, 476.0], [553.0, 663.0], [552.0, 701.5], [559.0, 698.0], [544.0, 815.0], [548.0, 710.0], [547.0, 652.0], [551.0, 763.0], [550.0, 705.0], [558.0, 838.25], [567.0, 429.0], [573.0, 644.0], [571.0, 633.0], [570.0, 769.0], [566.0, 746.0], [564.0, 688.6666666666666], [565.0, 718.0], [581.0, 559.0], [586.0, 484.4], [584.0, 524.5], [589.0, 509.0], [588.0, 721.0], [590.0, 721.6666666666666], [591.0, 712.0], [577.0, 687.0], [576.0, 743.0], [580.0, 661.0], [579.0, 649.0], [599.0, 621.5714285714286], [598.0, 664.0], [597.0, 622.0], [596.0, 682.75], [606.0, 661.5], [605.0, 750.6666666666666], [602.0, 756.3333333333334], [583.0, 675.6666666666666], [607.0, 866.0], [594.0, 609.6666666666666], [593.0, 705.0], [633.0, 602.5], [621.0, 562.0], [632.0, 745.5], [615.0, 658.0], [612.0, 752.0], [611.0, 719.5], [609.0, 475.0], [608.0, 651.0], [622.0, 649.5], [620.0, 510.5], [618.0, 547.0], [617.0, 685.3333333333334], [638.0, 466.0], [625.0, 407.0], [624.0, 670.3333333333334], [628.0, 556.0], [626.0, 405.0], [631.0, 402.0], [629.0, 431.0], [637.0, 674.0], [636.0, 700.0], [635.0, 739.5], [647.0, 736.0], [646.0, 604.0], [645.0, 638.5], [648.0, 666.0], [650.0, 563.0], [652.0, 840.0], [651.0, 671.0], [654.0, 795.0], [640.0, 691.0], [642.0, 726.0], [641.0, 637.0], [644.0, 692.0], [643.0, 845.0], [653.0, 707.0], [667.0, 662.0], [665.0, 619.6666666666666], [664.0, 344.0], [671.0, 422.0], [663.0, 676.5], [661.0, 510.5], [659.0, 821.0], [658.0, 579.0], [656.0, 667.5], [669.0, 730.0], [666.0, 838.0], [699.0, 591.0], [675.0, 503.75], [676.0, 627.0], [678.0, 400.5], [677.0, 410.0], [696.0, 603.0], [679.0, 655.0], [698.0, 406.0], [697.0, 511.0], [684.0, 626.0], [683.0, 644.0], [682.0, 412.6666666666667], [685.0, 525.5], [686.0, 643.3333333333334], [687.0, 629.0], [672.0, 428.5], [674.0, 811.0], [673.0, 665.0], [700.0, 688.5], [703.0, 482.0], [694.0, 517.2857142857142], [702.0, 706.0], [701.0, 608.0], [707.0, 519.8], [708.0, 507.0], [711.0, 531.5], [709.0, 648.0], [713.0, 475.0], [712.0, 631.0], [716.0, 525.0], [718.0, 799.0], [706.0, 420.0], [705.0, 477.0], [717.0, 500.0], [714.0, 488.3333333333333], [730.0, 639.0], [729.0, 548.0], [731.0, 526.8], [733.0, 543.5], [732.0, 599.0], [728.0, 633.0], [735.0, 633.0], [720.0, 535.5], [723.0, 454.0], [722.0, 653.0], [725.0, 620.0], [724.0, 575.0], [734.0, 414.0], [737.0, 638.0], [736.0, 504.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[395.29900000000004, 674.1510000000001]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 114.0], [4.0, 114.5], [6.0, 120.5], [9.0, 120.33333333333333], [12.0, 61.5], [14.0, 5.0], [15.0, 123.0], [18.0, 134.0], [19.0, 110.5], [21.0, 87.0], [23.0, 117.5], [24.0, 41.5], [25.0, 47.0], [26.0, 19.2], [27.0, 76.0], [28.0, 42.666666666666664], [29.0, 31.88888888888889], [30.0, 35.166666666666664], [31.0, 43.5], [33.0, 58.0], [32.0, 29.2], [34.0, 14.5], [35.0, 63.75], [37.0, 41.0], [36.0, 104.0], [39.0, 49.25], [38.0, 33.5], [41.0, 26.18181818181818], [40.0, 30.75], [43.0, 34.333333333333336], [42.0, 65.33333333333333], [45.0, 29.5], [44.0, 32.0], [47.0, 49.857142857142854], [46.0, 39.0], [49.0, 47.333333333333336], [48.0, 51.0], [51.0, 76.33333333333333], [50.0, 42.0], [53.0, 43.5], [52.0, 65.0], [54.0, 35.833333333333336], [55.0, 55.0], [57.0, 31.5], [56.0, 32.0], [58.0, 37.25], [59.0, 63.0], [61.0, 36.0], [60.0, 38.0], [63.0, 45.5], [64.0, 34.0], [67.0, 58.6], [66.0, 42.0], [65.0, 44.4], [71.0, 43.5], [69.0, 51.0], [68.0, 79.5], [70.0, 60.0], [75.0, 60.66666666666667], [74.0, 55.5], [73.0, 42.5], [77.0, 47.833333333333336], [76.0, 91.33333333333333], [78.0, 79.8], [79.0, 78.5], [83.0, 62.666666666666664], [82.0, 65.0], [81.0, 90.0], [80.0, 73.99999999999999], [87.0, 71.69999999999999], [86.0, 40.2], [85.0, 71.5], [84.0, 81.66666666666667], [90.0, 76.9090909090909], [89.0, 69.66666666666667], [88.0, 76.8], [91.0, 60.09090909090909], [93.0, 55.0], [92.0, 58.090909090909086], [95.0, 74.54545454545455], [94.0, 89.09090909090908], [99.0, 60.8], [98.0, 89.19999999999999], [97.0, 83.0], [96.0, 67.15384615384616], [102.0, 95.0], [101.0, 87.25], [100.0, 79.06666666666666], [103.0, 71.5], [104.0, 60.375], [107.0, 101.5], [105.0, 59.0], [106.0, 76.75], [111.0, 108.42857142857143], [109.0, 80.4], [108.0, 94.6], [114.0, 103.5], [113.0, 92.5], [112.0, 118.16666666666667], [115.0, 134.88888888888886], [119.0, 96.46666666666667], [118.0, 72.75], [117.0, 94.57142857142857], [116.0, 99.375], [123.0, 82.125], [121.0, 78.81818181818181], [120.0, 110.92307692307692], [122.0, 115.6], [127.0, 92.62500000000001], [126.0, 77.66666666666666], [125.0, 87.66666666666666], [124.0, 106.12499999999999], [128.0, 94.25], [135.0, 108.16666666666667], [134.0, 92.6923076923077], [133.0, 94.33333333333333], [132.0, 101.42857142857143], [131.0, 95.52380952380952], [130.0, 101.2], [129.0, 121.33333333333333], [143.0, 113.5], [142.0, 107.84615384615385], [141.0, 92.33333333333333], [139.0, 103.42857142857143], [137.0, 91.11111111111111], [140.0, 107.07692307692307], [138.0, 98.66666666666666], [136.0, 105.5], [151.0, 112.80000000000001], [149.0, 114.80000000000001], [148.0, 107.8], [147.0, 99.57142857142857], [146.0, 107.8], [145.0, 102.0], [144.0, 101.57142857142857], [150.0, 109.71428571428572], [158.0, 117.66666666666667], [157.0, 109.25], [156.0, 120.35714285714286], [155.0, 105.75], [154.0, 103.0], [152.0, 109.8], [159.0, 110.125], [153.0, 111.0], [163.0, 111.0], [167.0, 114.5], [166.0, 133.0], [164.0, 107.0], [162.0, 105.5], [160.0, 111.08333333333333], [165.0, 111.5], [161.0, 133.0], [168.0, 125.39999999999998], [175.0, 137.0], [174.0, 132.0], [173.0, 140.0], [172.0, 129.0], [171.0, 135.0], [169.0, 125.66666666666667], [170.0, 134.0], [1.0, 109.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[105.55700000000002, 85.228]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[2.0, 1019.0], [3.0, 1018.0], [4.0, 1042.0], [5.0, 1041.0], [7.0, 1130.0], [10.0, 1126.3333333333333], [11.0, 1156.0], [12.0, 1153.0], [13.0, 1150.0], [14.0, 1172.0], [15.0, 1172.0], [16.0, 1181.0], [17.0, 1185.0], [19.0, 1162.5], [20.0, 1185.0], [21.0, 431.0], [22.0, 432.0], [26.0, 445.25], [28.0, 470.0], [30.0, 1230.0], [33.0, 1019.25], [35.0, 434.0], [34.0, 1449.0], [36.0, 1439.0], [41.0, 1436.0], [40.0, 440.5], [42.0, 1230.0], [45.0, 461.0], [44.0, 432.0], [47.0, 887.0], [51.0, 1226.25], [53.0, 820.5], [54.0, 454.0], [57.0, 1235.0], [56.0, 488.0], [58.0, 484.0], [61.0, 569.6666666666666], [66.0, 570.0], [65.0, 1217.0], [70.0, 239.0], [69.0, 248.0], [68.0, 1244.5], [74.0, 315.6666666666667], [73.0, 226.0], [79.0, 228.0], [78.0, 227.0], [76.0, 230.0], [83.0, 1256.0], [80.0, 229.0], [87.0, 473.0], [86.0, 236.66666666666666], [85.0, 242.0], [84.0, 231.0], [91.0, 241.0], [88.0, 236.0], [94.0, 238.0], [93.0, 248.66666666666666], [92.0, 240.0], [99.0, 1238.0], [103.0, 280.0], [102.0, 451.0], [101.0, 258.5], [114.0, 228.0], [115.0, 234.0], [118.0, 269.5], [116.0, 235.33333333333334], [122.0, 239.0], [121.0, 599.3333333333333], [125.0, 601.3333333333334], [135.0, 232.75], [134.0, 231.0], [131.0, 282.0], [130.0, 246.0], [128.0, 255.0], [142.0, 1262.0], [151.0, 254.5], [149.0, 251.0], [147.0, 287.0], [144.0, 917.0], [159.0, 243.0], [157.0, 930.3333333333333], [156.0, 411.33333333333337], [155.0, 292.0], [153.0, 737.5], [167.0, 236.0], [166.0, 259.5], [164.0, 238.0], [163.0, 243.0], [161.0, 230.0], [160.0, 490.0], [175.0, 320.2857142857143], [172.0, 247.0], [174.0, 337.0], [173.0, 225.0], [171.0, 249.0], [170.0, 237.0], [169.0, 286.5], [183.0, 603.0], [182.0, 270.6666666666667], [181.0, 301.6], [180.0, 555.0], [179.0, 250.0], [178.0, 496.0], [177.0, 474.50000000000006], [176.0, 227.0], [191.0, 265.0], [190.0, 836.3333333333334], [188.0, 620.75], [189.0, 580.5], [186.0, 331.62499999999994], [184.0, 948.0], [187.0, 508.0], [199.0, 425.0], [198.0, 260.0], [197.0, 405.3333333333333], [193.0, 537.0], [192.0, 394.0], [196.0, 267.42857142857144], [195.0, 1264.0], [207.0, 398.0], [206.0, 308.6], [204.0, 319.6666666666667], [203.0, 261.0], [202.0, 247.66666666666666], [200.0, 420.3333333333333], [215.0, 348.8333333333333], [214.0, 290.0], [212.0, 449.66666666666663], [210.0, 279.75], [208.0, 247.0], [213.0, 251.5], [211.0, 269.4444444444445], [223.0, 553.6666666666667], [216.0, 488.85714285714283], [217.0, 442.0], [218.0, 337.3333333333333], [222.0, 440.0], [220.0, 435.0], [221.0, 491.0], [219.0, 295.75], [230.0, 528.8], [229.0, 379.54545454545456], [227.0, 337.0], [225.0, 476.42857142857144], [224.0, 334.4], [228.0, 528.4], [231.0, 467.25], [226.0, 272.2], [238.0, 347.5], [239.0, 374.8], [236.0, 547.0], [234.0, 319.00000000000006], [232.0, 319.6428571428571], [233.0, 416.75], [235.0, 251.25], [237.0, 342.0], [243.0, 254.5], [245.0, 257.0], [242.0, 265.75], [241.0, 268.8], [240.0, 270.0], [244.0, 265.3333333333333], [246.0, 268.0], [255.0, 423.0], [254.0, 542.5], [253.0, 300.90909090909093], [252.0, 579.3333333333334], [251.0, 678.5], [250.0, 553.2307692307692], [249.0, 590.0], [259.0, 319.0], [271.0, 599.3333333333334], [267.0, 264.0], [266.0, 242.0], [265.0, 256.0], [270.0, 257.6666666666667], [269.0, 530.3333333333334], [268.0, 410.5], [262.0, 414.25], [261.0, 379.0], [260.0, 300.5], [256.0, 762.0], [263.0, 352.0], [257.0, 244.0], [258.0, 264.0], [284.0, 414.85714285714283], [286.0, 338.16666666666663], [285.0, 313.09090909090907], [283.0, 431.7142857142857], [281.0, 361.42857142857144], [287.0, 281.7142857142857], [280.0, 275.25], [282.0, 466.6], [278.0, 512.5], [279.0, 260.0], [274.0, 729.75], [273.0, 273.0], [272.0, 444.0], [277.0, 493.75], [276.0, 352.0], [300.0, 390.42857142857144], [302.0, 735.0], [303.0, 327.3333333333333], [301.0, 285.0], [298.0, 464.0], [297.0, 265.0], [296.0, 591.0], [294.0, 351.8461538461538], [292.0, 351.2857142857143], [293.0, 270.5], [290.0, 347.61538461538464], [289.0, 271.4], [291.0, 258.6666666666667], [288.0, 420.875], [295.0, 269.75], [306.0, 584.0], [317.0, 718.0], [319.0, 550.5], [316.0, 749.0], [307.0, 286.0], [315.0, 610.6666666666666], [312.0, 611.3333333333334], [309.0, 608.3333333333334], [311.0, 273.5], [310.0, 270.0], [304.0, 492.0], [305.0, 283.0], [333.0, 552.0], [334.0, 320.0], [329.0, 734.5], [326.0, 735.3333333333334], [328.0, 690.0], [325.0, 671.0], [324.0, 750.0], [322.0, 710.0], [350.0, 721.0], [351.0, 684.25], [349.0, 680.0], [348.0, 734.3333333333334], [347.0, 722.0], [346.0, 660.6666666666666], [345.0, 683.0], [344.0, 705.0], [342.0, 726.0], [339.0, 715.0], [336.0, 591.5], [366.0, 717.0], [367.0, 551.2857142857143], [365.0, 340.5], [363.0, 694.0], [361.0, 617.3333333333334], [358.0, 593.3333333333334], [355.0, 651.5], [353.0, 372.0], [352.0, 721.5], [371.0, 594.1666666666666], [383.0, 364.2], [380.0, 360.0], [381.0, 672.0], [378.0, 438.75], [377.0, 406.8], [376.0, 356.75], [374.0, 584.4], [373.0, 450.6666666666667], [372.0, 372.0], [368.0, 501.0], [369.0, 424.25], [370.0, 708.0], [375.0, 678.0], [396.0, 573.0], [395.0, 531.6666666666666], [394.0, 499.25], [393.0, 393.0], [387.0, 364.7], [385.0, 506.5], [384.0, 379.57142857142856], [404.0, 520.0], [415.0, 404.0], [414.0, 484.0], [413.0, 469.16666666666663], [410.0, 570.0], [406.0, 582.5], [411.0, 507.0], [405.0, 554.0], [419.0, 561.0], [431.0, 337.0], [430.0, 558.0], [429.0, 486.0], [427.0, 547.25], [423.0, 513.0], [420.0, 571.0], [418.0, 564.0], [416.0, 494.0], [446.0, 463.0], [445.0, 469.0], [447.0, 478.0], [444.0, 459.5], [442.0, 401.0], [441.0, 497.6666666666667], [438.0, 559.3333333333334], [435.0, 411.0], [433.0, 421.5], [461.0, 485.5], [449.0, 474.0], [453.0, 423.0], [462.0, 447.0], [460.0, 481.0], [459.0, 492.0], [458.0, 461.75], [457.0, 466.6666666666667], [454.0, 484.3333333333333], [448.0, 451.0], [452.0, 497.0], [451.0, 547.0], [450.0, 464.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[254.6080000000005, 452.8860000000003]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 737.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6250.0, "minX": 1.66901922E12, "maxY": 25783.333333333332, "series": [{"data": [[1.66901922E12, 6250.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66901922E12, 25783.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66901922E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 85.228, "minX": 1.66901922E12, "maxY": 674.1510000000001, "series": [{"data": [[1.66901922E12, 674.1510000000001]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66901922E12, 85.228]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66901922E12, 452.8860000000003]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66901922E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 85.03099999999995, "minX": 1.66901922E12, "maxY": 674.1369999999998, "series": [{"data": [[1.66901922E12, 674.1369999999998]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66901922E12, 85.03099999999995]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66901922E12, 452.8410000000002]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66901922E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.998000000000005, "minX": 1.66901922E12, "maxY": 85.43999999999998, "series": [{"data": [[1.66901922E12, 4.998000000000005]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66901922E12, 8.894999999999998]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66901922E12, 85.43999999999998]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66901922E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.66901922E12, "maxY": 1449.0, "series": [{"data": [[1.66901922E12, 1449.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66901922E12, 851.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66901922E12, 1238.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66901922E12, 1036.199999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66901922E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66901922E12, 311.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66901922E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 89.0, "minX": 175.0, "maxY": 692.0, "series": [{"data": [[596.0, 266.0], [175.0, 324.0], [712.0, 89.0], [355.0, 97.0], [763.0, 692.0], [399.0, 561.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 763.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 89.0, "minX": 175.0, "maxY": 692.0, "series": [{"data": [[596.0, 266.0], [175.0, 324.0], [712.0, 89.0], [355.0, 97.0], [763.0, 692.0], [399.0, 561.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 763.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66901922E12, "maxY": 50.0, "series": [{"data": [[1.66901922E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66901922E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66901922E12, "maxY": 50.0, "series": [{"data": [[1.66901922E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66901922E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66901922E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66901922E12, 16.666666666666668]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.66901922E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.66901922E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66901922E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66901922E12, "maxY": 50.0, "series": [{"data": [[1.66901922E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66901922E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

