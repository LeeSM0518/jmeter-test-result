/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 4556.0, "series": [{"data": [[0.0, 36.0], [0.1, 56.0], [0.2, 74.0], [0.3, 93.0], [0.4, 121.0], [0.5, 210.0], [0.6, 257.0], [0.7, 275.0], [0.8, 283.0], [0.9, 290.0], [1.0, 296.0], [1.1, 301.0], [1.2, 305.0], [1.3, 306.0], [1.4, 309.0], [1.5, 311.0], [1.6, 315.0], [1.7, 316.0], [1.8, 318.0], [1.9, 323.0], [2.0, 327.0], [2.1, 329.0], [2.2, 333.0], [2.3, 336.0], [2.4, 340.0], [2.5, 345.0], [2.6, 353.0], [2.7, 358.0], [2.8, 365.0], [2.9, 378.0], [3.0, 397.0], [3.1, 428.0], [3.2, 478.0], [3.3, 619.0], [3.4, 885.0], [3.5, 967.0], [3.6, 995.0], [3.7, 1012.0], [3.8, 1030.0], [3.9, 1043.0], [4.0, 1054.0], [4.1, 1057.0], [4.2, 1059.0], [4.3, 1063.0], [4.4, 1066.0], [4.5, 1070.0], [4.6, 1072.0], [4.7, 1074.0], [4.8, 1077.0], [4.9, 1079.0], [5.0, 1080.0], [5.1, 1083.0], [5.2, 1084.0], [5.3, 1086.0], [5.4, 1088.0], [5.5, 1090.0], [5.6, 1092.0], [5.7, 1093.0], [5.8, 1095.0], [5.9, 1096.0], [6.0, 1096.0], [6.1, 1097.0], [6.2, 1100.0], [6.3, 1103.0], [6.4, 1104.0], [6.5, 1105.0], [6.6, 1107.0], [6.7, 1109.0], [6.8, 1110.0], [6.9, 1112.0], [7.0, 1115.0], [7.1, 1117.0], [7.2, 1119.0], [7.3, 1122.0], [7.4, 1124.0], [7.5, 1126.0], [7.6, 1128.0], [7.7, 1131.0], [7.8, 1134.0], [7.9, 1136.0], [8.0, 1141.0], [8.1, 1144.0], [8.2, 1148.0], [8.3, 1152.0], [8.4, 1154.0], [8.5, 1157.0], [8.6, 1158.0], [8.7, 1160.0], [8.8, 1161.0], [8.9, 1163.0], [9.0, 1164.0], [9.1, 1166.0], [9.2, 1168.0], [9.3, 1170.0], [9.4, 1171.0], [9.5, 1172.0], [9.6, 1174.0], [9.7, 1179.0], [9.8, 1180.0], [9.9, 1180.0], [10.0, 1182.0], [10.1, 1184.0], [10.2, 1186.0], [10.3, 1187.0], [10.4, 1189.0], [10.5, 1191.0], [10.6, 1192.0], [10.7, 1194.0], [10.8, 1197.0], [10.9, 1198.0], [11.0, 1199.0], [11.1, 1200.0], [11.2, 1202.0], [11.3, 1204.0], [11.4, 1205.0], [11.5, 1206.0], [11.6, 1208.0], [11.7, 1210.0], [11.8, 1212.0], [11.9, 1213.0], [12.0, 1215.0], [12.1, 1217.0], [12.2, 1219.0], [12.3, 1221.0], [12.4, 1223.0], [12.5, 1225.0], [12.6, 1226.0], [12.7, 1228.0], [12.8, 1230.0], [12.9, 1233.0], [13.0, 1236.0], [13.1, 1244.0], [13.2, 1252.0], [13.3, 1255.0], [13.4, 1262.0], [13.5, 1271.0], [13.6, 1278.0], [13.7, 1282.0], [13.8, 1286.0], [13.9, 1294.0], [14.0, 1298.0], [14.1, 1306.0], [14.2, 1313.0], [14.3, 1316.0], [14.4, 1319.0], [14.5, 1324.0], [14.6, 1327.0], [14.7, 1332.0], [14.8, 1334.0], [14.9, 1337.0], [15.0, 1341.0], [15.1, 1343.0], [15.2, 1345.0], [15.3, 1348.0], [15.4, 1349.0], [15.5, 1352.0], [15.6, 1353.0], [15.7, 1355.0], [15.8, 1356.0], [15.9, 1358.0], [16.0, 1359.0], [16.1, 1360.0], [16.2, 1362.0], [16.3, 1363.0], [16.4, 1364.0], [16.5, 1366.0], [16.6, 1368.0], [16.7, 1369.0], [16.8, 1372.0], [16.9, 1373.0], [17.0, 1374.0], [17.1, 1375.0], [17.2, 1377.0], [17.3, 1378.0], [17.4, 1380.0], [17.5, 1382.0], [17.6, 1384.0], [17.7, 1386.0], [17.8, 1387.0], [17.9, 1390.0], [18.0, 1392.0], [18.1, 1394.0], [18.2, 1396.0], [18.3, 1397.0], [18.4, 1398.0], [18.5, 1401.0], [18.6, 1403.0], [18.7, 1405.0], [18.8, 1408.0], [18.9, 1411.0], [19.0, 1412.0], [19.1, 1415.0], [19.2, 1417.0], [19.3, 1420.0], [19.4, 1423.0], [19.5, 1425.0], [19.6, 1427.0], [19.7, 1430.0], [19.8, 1432.0], [19.9, 1436.0], [20.0, 1438.0], [20.1, 1442.0], [20.2, 1446.0], [20.3, 1450.0], [20.4, 1454.0], [20.5, 1458.0], [20.6, 1464.0], [20.7, 1471.0], [20.8, 1476.0], [20.9, 1480.0], [21.0, 1485.0], [21.1, 1487.0], [21.2, 1491.0], [21.3, 1494.0], [21.4, 1496.0], [21.5, 1498.0], [21.6, 1500.0], [21.7, 1504.0], [21.8, 1507.0], [21.9, 1512.0], [22.0, 1515.0], [22.1, 1516.0], [22.2, 1518.0], [22.3, 1520.0], [22.4, 1523.0], [22.5, 1525.0], [22.6, 1527.0], [22.7, 1528.0], [22.8, 1529.0], [22.9, 1530.0], [23.0, 1532.0], [23.1, 1536.0], [23.2, 1538.0], [23.3, 1539.0], [23.4, 1541.0], [23.5, 1542.0], [23.6, 1546.0], [23.7, 1548.0], [23.8, 1549.0], [23.9, 1551.0], [24.0, 1553.0], [24.1, 1555.0], [24.2, 1558.0], [24.3, 1560.0], [24.4, 1562.0], [24.5, 1564.0], [24.6, 1566.0], [24.7, 1568.0], [24.8, 1570.0], [24.9, 1572.0], [25.0, 1576.0], [25.1, 1579.0], [25.2, 1581.0], [25.3, 1585.0], [25.4, 1588.0], [25.5, 1593.0], [25.6, 1595.0], [25.7, 1597.0], [25.8, 1602.0], [25.9, 1605.0], [26.0, 1616.0], [26.1, 1652.0], [26.2, 2109.0], [26.3, 2119.0], [26.4, 2124.0], [26.5, 2129.0], [26.6, 2133.0], [26.7, 2136.0], [26.8, 2139.0], [26.9, 2141.0], [27.0, 2142.0], [27.1, 2144.0], [27.2, 2146.0], [27.3, 2148.0], [27.4, 2150.0], [27.5, 2152.0], [27.6, 2155.0], [27.7, 2156.0], [27.8, 2158.0], [27.9, 2160.0], [28.0, 2165.0], [28.1, 2167.0], [28.2, 2172.0], [28.3, 2174.0], [28.4, 2176.0], [28.5, 2180.0], [28.6, 2184.0], [28.7, 2187.0], [28.8, 2189.0], [28.9, 2193.0], [29.0, 2196.0], [29.1, 2197.0], [29.2, 2199.0], [29.3, 2201.0], [29.4, 2203.0], [29.5, 2205.0], [29.6, 2205.0], [29.7, 2208.0], [29.8, 2208.0], [29.9, 2209.0], [30.0, 2211.0], [30.1, 2212.0], [30.2, 2212.0], [30.3, 2213.0], [30.4, 2214.0], [30.5, 2214.0], [30.6, 2216.0], [30.7, 2216.0], [30.8, 2217.0], [30.9, 2218.0], [31.0, 2219.0], [31.1, 2220.0], [31.2, 2220.0], [31.3, 2221.0], [31.4, 2221.0], [31.5, 2222.0], [31.6, 2223.0], [31.7, 2224.0], [31.8, 2226.0], [31.9, 2227.0], [32.0, 2228.0], [32.1, 2229.0], [32.2, 2230.0], [32.3, 2231.0], [32.4, 2232.0], [32.5, 2233.0], [32.6, 2233.0], [32.7, 2234.0], [32.8, 2235.0], [32.9, 2236.0], [33.0, 2236.0], [33.1, 2237.0], [33.2, 2237.0], [33.3, 2238.0], [33.4, 2240.0], [33.5, 2241.0], [33.6, 2242.0], [33.7, 2243.0], [33.8, 2244.0], [33.9, 2245.0], [34.0, 2245.0], [34.1, 2247.0], [34.2, 2248.0], [34.3, 2249.0], [34.4, 2250.0], [34.5, 2251.0], [34.6, 2252.0], [34.7, 2253.0], [34.8, 2254.0], [34.9, 2256.0], [35.0, 2257.0], [35.1, 2258.0], [35.2, 2259.0], [35.3, 2261.0], [35.4, 2261.0], [35.5, 2263.0], [35.6, 2264.0], [35.7, 2264.0], [35.8, 2265.0], [35.9, 2267.0], [36.0, 2268.0], [36.1, 2269.0], [36.2, 2270.0], [36.3, 2270.0], [36.4, 2271.0], [36.5, 2272.0], [36.6, 2273.0], [36.7, 2274.0], [36.8, 2275.0], [36.9, 2276.0], [37.0, 2277.0], [37.1, 2277.0], [37.2, 2278.0], [37.3, 2279.0], [37.4, 2280.0], [37.5, 2281.0], [37.6, 2283.0], [37.7, 2284.0], [37.8, 2285.0], [37.9, 2286.0], [38.0, 2286.0], [38.1, 2287.0], [38.2, 2288.0], [38.3, 2288.0], [38.4, 2289.0], [38.5, 2290.0], [38.6, 2290.0], [38.7, 2291.0], [38.8, 2292.0], [38.9, 2292.0], [39.0, 2293.0], [39.1, 2294.0], [39.2, 2295.0], [39.3, 2296.0], [39.4, 2296.0], [39.5, 2297.0], [39.6, 2299.0], [39.7, 2299.0], [39.8, 2300.0], [39.9, 2301.0], [40.0, 2302.0], [40.1, 2302.0], [40.2, 2303.0], [40.3, 2304.0], [40.4, 2305.0], [40.5, 2306.0], [40.6, 2307.0], [40.7, 2308.0], [40.8, 2309.0], [40.9, 2309.0], [41.0, 2310.0], [41.1, 2312.0], [41.2, 2312.0], [41.3, 2313.0], [41.4, 2314.0], [41.5, 2315.0], [41.6, 2315.0], [41.7, 2316.0], [41.8, 2316.0], [41.9, 2316.0], [42.0, 2317.0], [42.1, 2318.0], [42.2, 2319.0], [42.3, 2319.0], [42.4, 2321.0], [42.5, 2322.0], [42.6, 2322.0], [42.7, 2323.0], [42.8, 2323.0], [42.9, 2324.0], [43.0, 2324.0], [43.1, 2325.0], [43.2, 2326.0], [43.3, 2326.0], [43.4, 2327.0], [43.5, 2327.0], [43.6, 2328.0], [43.7, 2328.0], [43.8, 2329.0], [43.9, 2329.0], [44.0, 2330.0], [44.1, 2331.0], [44.2, 2331.0], [44.3, 2332.0], [44.4, 2332.0], [44.5, 2332.0], [44.6, 2333.0], [44.7, 2334.0], [44.8, 2335.0], [44.9, 2335.0], [45.0, 2336.0], [45.1, 2337.0], [45.2, 2337.0], [45.3, 2338.0], [45.4, 2339.0], [45.5, 2339.0], [45.6, 2340.0], [45.7, 2340.0], [45.8, 2341.0], [45.9, 2342.0], [46.0, 2342.0], [46.1, 2343.0], [46.2, 2344.0], [46.3, 2344.0], [46.4, 2345.0], [46.5, 2346.0], [46.6, 2346.0], [46.7, 2347.0], [46.8, 2348.0], [46.9, 2348.0], [47.0, 2348.0], [47.1, 2349.0], [47.2, 2350.0], [47.3, 2350.0], [47.4, 2351.0], [47.5, 2352.0], [47.6, 2352.0], [47.7, 2353.0], [47.8, 2354.0], [47.9, 2355.0], [48.0, 2356.0], [48.1, 2356.0], [48.2, 2357.0], [48.3, 2359.0], [48.4, 2359.0], [48.5, 2360.0], [48.6, 2361.0], [48.7, 2362.0], [48.8, 2363.0], [48.9, 2364.0], [49.0, 2364.0], [49.1, 2365.0], [49.2, 2366.0], [49.3, 2367.0], [49.4, 2367.0], [49.5, 2368.0], [49.6, 2369.0], [49.7, 2370.0], [49.8, 2370.0], [49.9, 2371.0], [50.0, 2372.0], [50.1, 2373.0], [50.2, 2373.0], [50.3, 2374.0], [50.4, 2375.0], [50.5, 2375.0], [50.6, 2375.0], [50.7, 2376.0], [50.8, 2377.0], [50.9, 2378.0], [51.0, 2378.0], [51.1, 2379.0], [51.2, 2380.0], [51.3, 2380.0], [51.4, 2381.0], [51.5, 2382.0], [51.6, 2383.0], [51.7, 2383.0], [51.8, 2384.0], [51.9, 2384.0], [52.0, 2385.0], [52.1, 2386.0], [52.2, 2388.0], [52.3, 2390.0], [52.4, 2391.0], [52.5, 2392.0], [52.6, 2392.0], [52.7, 2394.0], [52.8, 2394.0], [52.9, 2396.0], [53.0, 2398.0], [53.1, 2399.0], [53.2, 2399.0], [53.3, 2400.0], [53.4, 2401.0], [53.5, 2403.0], [53.6, 2405.0], [53.7, 2407.0], [53.8, 2407.0], [53.9, 2408.0], [54.0, 2410.0], [54.1, 2412.0], [54.2, 2414.0], [54.3, 2416.0], [54.4, 2417.0], [54.5, 2419.0], [54.6, 2420.0], [54.7, 2422.0], [54.8, 2424.0], [54.9, 2425.0], [55.0, 2425.0], [55.1, 2427.0], [55.2, 2428.0], [55.3, 2430.0], [55.4, 2431.0], [55.5, 2432.0], [55.6, 2433.0], [55.7, 2434.0], [55.8, 2435.0], [55.9, 2436.0], [56.0, 2436.0], [56.1, 2437.0], [56.2, 2438.0], [56.3, 2439.0], [56.4, 2440.0], [56.5, 2440.0], [56.6, 2441.0], [56.7, 2442.0], [56.8, 2444.0], [56.9, 2445.0], [57.0, 2445.0], [57.1, 2447.0], [57.2, 2448.0], [57.3, 2449.0], [57.4, 2450.0], [57.5, 2451.0], [57.6, 2452.0], [57.7, 2453.0], [57.8, 2454.0], [57.9, 2455.0], [58.0, 2455.0], [58.1, 2456.0], [58.2, 2456.0], [58.3, 2457.0], [58.4, 2457.0], [58.5, 2458.0], [58.6, 2459.0], [58.7, 2460.0], [58.8, 2461.0], [58.9, 2463.0], [59.0, 2463.0], [59.1, 2464.0], [59.2, 2466.0], [59.3, 2467.0], [59.4, 2468.0], [59.5, 2469.0], [59.6, 2470.0], [59.7, 2470.0], [59.8, 2471.0], [59.9, 2472.0], [60.0, 2473.0], [60.1, 2475.0], [60.2, 2476.0], [60.3, 2477.0], [60.4, 2478.0], [60.5, 2479.0], [60.6, 2480.0], [60.7, 2482.0], [60.8, 2483.0], [60.9, 2484.0], [61.0, 2486.0], [61.1, 2487.0], [61.2, 2489.0], [61.3, 2491.0], [61.4, 2492.0], [61.5, 2494.0], [61.6, 2495.0], [61.7, 2499.0], [61.8, 2501.0], [61.9, 2502.0], [62.0, 2505.0], [62.1, 2508.0], [62.2, 2511.0], [62.3, 2512.0], [62.4, 2514.0], [62.5, 2517.0], [62.6, 2519.0], [62.7, 2520.0], [62.8, 2522.0], [62.9, 2525.0], [63.0, 2527.0], [63.1, 2528.0], [63.2, 2530.0], [63.3, 2532.0], [63.4, 2534.0], [63.5, 2536.0], [63.6, 2538.0], [63.7, 2539.0], [63.8, 2540.0], [63.9, 2541.0], [64.0, 2543.0], [64.1, 2544.0], [64.2, 2545.0], [64.3, 2547.0], [64.4, 2548.0], [64.5, 2550.0], [64.6, 2551.0], [64.7, 2552.0], [64.8, 2553.0], [64.9, 2555.0], [65.0, 2557.0], [65.1, 2557.0], [65.2, 2559.0], [65.3, 2560.0], [65.4, 2562.0], [65.5, 2563.0], [65.6, 2564.0], [65.7, 2567.0], [65.8, 2569.0], [65.9, 2570.0], [66.0, 2572.0], [66.1, 2574.0], [66.2, 2575.0], [66.3, 2576.0], [66.4, 2579.0], [66.5, 2580.0], [66.6, 2581.0], [66.7, 2584.0], [66.8, 2585.0], [66.9, 2588.0], [67.0, 2590.0], [67.1, 2593.0], [67.2, 2594.0], [67.3, 2595.0], [67.4, 2596.0], [67.5, 2597.0], [67.6, 2599.0], [67.7, 2600.0], [67.8, 2601.0], [67.9, 2602.0], [68.0, 2605.0], [68.1, 2605.0], [68.2, 2607.0], [68.3, 2608.0], [68.4, 2609.0], [68.5, 2610.0], [68.6, 2611.0], [68.7, 2612.0], [68.8, 2613.0], [68.9, 2614.0], [69.0, 2615.0], [69.1, 2616.0], [69.2, 2616.0], [69.3, 2617.0], [69.4, 2617.0], [69.5, 2618.0], [69.6, 2619.0], [69.7, 2619.0], [69.8, 2620.0], [69.9, 2621.0], [70.0, 2621.0], [70.1, 2622.0], [70.2, 2623.0], [70.3, 2624.0], [70.4, 2624.0], [70.5, 2625.0], [70.6, 2626.0], [70.7, 2627.0], [70.8, 2628.0], [70.9, 2628.0], [71.0, 2629.0], [71.1, 2629.0], [71.2, 2630.0], [71.3, 2631.0], [71.4, 2632.0], [71.5, 2632.0], [71.6, 2633.0], [71.7, 2634.0], [71.8, 2634.0], [71.9, 2635.0], [72.0, 2636.0], [72.1, 2637.0], [72.2, 2637.0], [72.3, 2638.0], [72.4, 2639.0], [72.5, 2639.0], [72.6, 2640.0], [72.7, 2641.0], [72.8, 2641.0], [72.9, 2642.0], [73.0, 2642.0], [73.1, 2643.0], [73.2, 2644.0], [73.3, 2644.0], [73.4, 2645.0], [73.5, 2646.0], [73.6, 2646.0], [73.7, 2647.0], [73.8, 2647.0], [73.9, 2648.0], [74.0, 2648.0], [74.1, 2648.0], [74.2, 2649.0], [74.3, 2649.0], [74.4, 2650.0], [74.5, 2651.0], [74.6, 2652.0], [74.7, 2652.0], [74.8, 2652.0], [74.9, 2653.0], [75.0, 2653.0], [75.1, 2653.0], [75.2, 2654.0], [75.3, 2655.0], [75.4, 2656.0], [75.5, 2656.0], [75.6, 2657.0], [75.7, 2657.0], [75.8, 2658.0], [75.9, 2659.0], [76.0, 2659.0], [76.1, 2660.0], [76.2, 2660.0], [76.3, 2661.0], [76.4, 2662.0], [76.5, 2662.0], [76.6, 2663.0], [76.7, 2663.0], [76.8, 2664.0], [76.9, 2665.0], [77.0, 2665.0], [77.1, 2666.0], [77.2, 2667.0], [77.3, 2668.0], [77.4, 2668.0], [77.5, 2668.0], [77.6, 2669.0], [77.7, 2670.0], [77.8, 2671.0], [77.9, 2672.0], [78.0, 2673.0], [78.1, 2673.0], [78.2, 2674.0], [78.3, 2675.0], [78.4, 2676.0], [78.5, 2678.0], [78.6, 2678.0], [78.7, 2680.0], [78.8, 2681.0], [78.9, 2682.0], [79.0, 2683.0], [79.1, 2685.0], [79.2, 2686.0], [79.3, 2688.0], [79.4, 2689.0], [79.5, 2691.0], [79.6, 2692.0], [79.7, 2693.0], [79.8, 2695.0], [79.9, 2697.0], [80.0, 2699.0], [80.1, 2700.0], [80.2, 2702.0], [80.3, 2703.0], [80.4, 2705.0], [80.5, 2706.0], [80.6, 2707.0], [80.7, 2708.0], [80.8, 2709.0], [80.9, 2710.0], [81.0, 2712.0], [81.1, 2714.0], [81.2, 2715.0], [81.3, 2716.0], [81.4, 2717.0], [81.5, 2718.0], [81.6, 2719.0], [81.7, 2721.0], [81.8, 2723.0], [81.9, 2724.0], [82.0, 2725.0], [82.1, 2727.0], [82.2, 2728.0], [82.3, 2729.0], [82.4, 2730.0], [82.5, 2731.0], [82.6, 2733.0], [82.7, 2734.0], [82.8, 2736.0], [82.9, 2736.0], [83.0, 2738.0], [83.1, 2740.0], [83.2, 2740.0], [83.3, 2741.0], [83.4, 2743.0], [83.5, 2743.0], [83.6, 2744.0], [83.7, 2745.0], [83.8, 2745.0], [83.9, 2747.0], [84.0, 2747.0], [84.1, 2748.0], [84.2, 2749.0], [84.3, 2750.0], [84.4, 2750.0], [84.5, 2751.0], [84.6, 2752.0], [84.7, 2753.0], [84.8, 2753.0], [84.9, 2754.0], [85.0, 2755.0], [85.1, 2756.0], [85.2, 2757.0], [85.3, 2758.0], [85.4, 2760.0], [85.5, 2762.0], [85.6, 2763.0], [85.7, 2765.0], [85.8, 2768.0], [85.9, 2770.0], [86.0, 2772.0], [86.1, 2774.0], [86.2, 2776.0], [86.3, 2778.0], [86.4, 2780.0], [86.5, 2782.0], [86.6, 2784.0], [86.7, 2785.0], [86.8, 2786.0], [86.9, 2788.0], [87.0, 2790.0], [87.1, 2793.0], [87.2, 2795.0], [87.3, 2800.0], [87.4, 2801.0], [87.5, 2801.0], [87.6, 2803.0], [87.7, 2804.0], [87.8, 2806.0], [87.9, 2808.0], [88.0, 2810.0], [88.1, 2810.0], [88.2, 2812.0], [88.3, 2813.0], [88.4, 2815.0], [88.5, 2817.0], [88.6, 2819.0], [88.7, 2821.0], [88.8, 2823.0], [88.9, 2825.0], [89.0, 2827.0], [89.1, 2829.0], [89.2, 2830.0], [89.3, 2831.0], [89.4, 2832.0], [89.5, 2834.0], [89.6, 2837.0], [89.7, 2839.0], [89.8, 2841.0], [89.9, 2844.0], [90.0, 2846.0], [90.1, 2848.0], [90.2, 2850.0], [90.3, 2852.0], [90.4, 2852.0], [90.5, 2853.0], [90.6, 2855.0], [90.7, 2857.0], [90.8, 2859.0], [90.9, 2861.0], [91.0, 2862.0], [91.1, 2863.0], [91.2, 2865.0], [91.3, 2867.0], [91.4, 2869.0], [91.5, 2871.0], [91.6, 2873.0], [91.7, 2876.0], [91.8, 2881.0], [91.9, 2887.0], [92.0, 2890.0], [92.1, 2896.0], [92.2, 2898.0], [92.3, 2900.0], [92.4, 2904.0], [92.5, 2912.0], [92.6, 2916.0], [92.7, 2920.0], [92.8, 2928.0], [92.9, 2933.0], [93.0, 2939.0], [93.1, 2946.0], [93.2, 2948.0], [93.3, 2952.0], [93.4, 2955.0], [93.5, 2957.0], [93.6, 2958.0], [93.7, 2960.0], [93.8, 2965.0], [93.9, 2967.0], [94.0, 2970.0], [94.1, 2976.0], [94.2, 2983.0], [94.3, 2987.0], [94.4, 3360.0], [94.5, 3391.0], [94.6, 3406.0], [94.7, 3429.0], [94.8, 3452.0], [94.9, 3464.0], [95.0, 3472.0], [95.1, 3488.0], [95.2, 3504.0], [95.3, 3518.0], [95.4, 3533.0], [95.5, 3551.0], [95.6, 3567.0], [95.7, 3583.0], [95.8, 3593.0], [95.9, 3607.0], [96.0, 3619.0], [96.1, 3638.0], [96.2, 3656.0], [96.3, 3681.0], [96.4, 3708.0], [96.5, 3730.0], [96.6, 3747.0], [96.7, 3761.0], [96.8, 3786.0], [96.9, 3806.0], [97.0, 3823.0], [97.1, 3846.0], [97.2, 3873.0], [97.3, 3891.0], [97.4, 3908.0], [97.5, 3928.0], [97.6, 3954.0], [97.7, 3972.0], [97.8, 4012.0], [97.9, 4039.0], [98.0, 4062.0], [98.1, 4071.0], [98.2, 4080.0], [98.3, 4098.0], [98.4, 4116.0], [98.5, 4135.0], [98.6, 4161.0], [98.7, 4197.0], [98.8, 4227.0], [98.9, 4239.0], [99.0, 4254.0], [99.1, 4264.0], [99.2, 4280.0], [99.3, 4298.0], [99.4, 4317.0], [99.5, 4346.0], [99.6, 4383.0], [99.7, 4421.0], [99.8, 4451.0], [99.9, 4484.0], [100.0, 4556.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1349.0, "series": [{"data": [[0.0, 33.0], [600.0, 16.0], [800.0, 4.0], [900.0, 21.0], [1000.0, 255.0], [1100.0, 485.0], [1200.0, 298.0], [1300.0, 442.0], [1400.0, 313.0], [1500.0, 418.0], [100.0, 16.0], [1600.0, 41.0], [2100.0, 306.0], [2300.0, 1349.0], [2200.0, 1051.0], [2400.0, 850.0], [2500.0, 591.0], [2600.0, 1243.0], [2700.0, 723.0], [2800.0, 498.0], [2900.0, 213.0], [200.0, 56.0], [3300.0, 15.0], [3400.0, 62.0], [3500.0, 68.0], [3600.0, 53.0], [3700.0, 49.0], [3800.0, 51.0], [3900.0, 41.0], [4000.0, 52.0], [4100.0, 41.0], [4200.0, 59.0], [4300.0, 35.0], [4400.0, 26.0], [4500.0, 9.0], [300.0, 196.0], [400.0, 21.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 322.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7838.0, "series": [{"data": [[0.0, 322.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1840.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7838.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 860.6683000000024, "minX": 1.66955724E12, "maxY": 860.6683000000024, "series": [{"data": [[1.66955724E12, 860.6683000000024]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955724E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 2729.75, "series": [{"data": [[4.0, 1432.3333333333333], [5.0, 1456.0], [6.0, 1396.0], [7.0, 1448.0], [8.0, 1452.0], [10.0, 1435.0], [11.0, 1404.0], [12.0, 1430.0], [14.0, 1444.0], [15.0, 1437.0], [16.0, 1437.0], [18.0, 1436.5], [19.0, 1438.0], [21.0, 1425.5], [22.0, 1443.0], [23.0, 1437.0], [24.0, 1423.0], [25.0, 1423.0], [26.0, 1416.0], [28.0, 1424.0], [29.0, 1420.0], [30.0, 1406.0], [31.0, 1411.0], [33.0, 1398.0], [32.0, 1412.0], [35.0, 1390.0], [34.0, 1398.0], [37.0, 1374.0], [36.0, 1414.0], [39.0, 1387.0], [38.0, 1409.0], [41.0, 1396.0], [40.0, 1409.0], [43.0, 1373.0], [42.0, 1384.0], [45.0, 1358.0], [44.0, 1395.0], [47.0, 1424.0], [46.0, 1405.0], [49.0, 1387.0], [48.0, 1392.0], [51.0, 1385.0], [50.0, 1387.0], [53.0, 1347.0], [52.0, 1401.0], [55.0, 1381.0], [54.0, 1402.0], [57.0, 1374.0], [56.0, 1394.0], [58.0, 1401.0], [61.0, 1357.0], [60.0, 1375.5], [63.0, 1384.0], [62.0, 1391.0], [67.0, 1380.0], [66.0, 1383.0], [65.0, 1374.0], [64.0, 1391.0], [70.0, 1378.0], [69.0, 1385.0], [68.0, 1358.0], [75.0, 1368.0], [74.0, 1368.0], [73.0, 1388.3333333333333], [79.0, 1401.0], [78.0, 1364.0], [76.0, 1380.0], [83.0, 1362.0], [82.0, 1373.0], [81.0, 1379.0], [80.0, 1373.0], [87.0, 1360.0], [86.0, 1396.0], [85.0, 1341.0], [84.0, 1396.0], [91.0, 1342.0], [90.0, 1376.5], [88.0, 1403.0], [95.0, 1383.0], [94.0, 1424.0], [93.0, 1375.0], [92.0, 1410.0], [99.0, 1390.0], [98.0, 1384.0], [97.0, 1384.0], [96.0, 1423.0], [102.0, 177.1818181818182], [103.0, 1410.0], [101.0, 1356.0], [100.0, 1422.0], [105.0, 337.4], [106.0, 744.5], [107.0, 1415.0], [104.0, 1424.0], [111.0, 1401.0], [110.0, 1431.0], [109.0, 1384.0], [108.0, 1430.0], [113.0, 351.0], [115.0, 1411.0], [114.0, 1406.0], [112.0, 1429.0], [119.0, 420.25], [118.0, 1440.0], [117.0, 1396.0], [116.0, 1433.0], [120.0, 36.0], [122.0, 1393.0], [121.0, 1398.0], [126.0, 977.3333333333334], [127.0, 1406.0], [124.0, 1406.5], [128.0, 779.5], [129.0, 137.0], [132.0, 988.6666666666666], [133.0, 716.5], [135.0, 417.0], [134.0, 1411.0], [130.0, 1407.5], [137.0, 541.6666666666667], [141.0, 78.0], [143.0, 1396.0], [142.0, 1398.5], [140.0, 1407.0], [139.0, 1397.0], [138.0, 1405.0], [136.0, 1410.0], [145.0, 412.0], [148.0, 557.3333333333333], [150.0, 526.3333333333333], [151.0, 1428.0], [149.0, 1388.0], [147.0, 1405.0], [146.0, 1397.0], [144.0, 1405.0], [157.0, 748.5], [159.0, 1379.0], [156.0, 1404.0], [154.0, 1387.0], [153.0, 1397.0], [152.0, 1395.0], [163.0, 981.6666666666666], [166.0, 365.83333333333337], [167.0, 168.0], [165.0, 1381.0], [164.0, 1374.0], [161.0, 1397.0], [160.0, 1408.0], [171.0, 169.0], [174.0, 577.3333333333333], [175.0, 1413.0], [173.0, 1414.0], [172.0, 1382.0], [170.0, 1374.0], [169.0, 1395.3333333333333], [179.0, 815.0], [182.0, 820.5], [183.0, 1380.0], [181.0, 1364.0], [180.0, 1395.0], [177.0, 1397.0], [176.0, 1379.0], [186.0, 478.4], [191.0, 1332.0], [190.0, 1342.0], [189.0, 1351.5], [187.0, 1350.0], [185.0, 1358.0], [184.0, 1364.0], [193.0, 815.0], [194.0, 804.5], [199.0, 1334.0], [198.0, 1307.0], [197.0, 1318.0], [196.0, 1343.0], [195.0, 1325.0], [192.0, 1357.0], [200.0, 302.5], [203.0, 334.0], [205.0, 843.0], [207.0, 665.6666666666667], [206.0, 1287.0], [204.0, 1347.6666666666667], [201.0, 1333.0], [212.0, 338.3333333333333], [213.0, 674.1666666666666], [214.0, 462.44444444444446], [215.0, 1338.0], [211.0, 1324.0], [210.0, 1325.0], [209.0, 1351.0], [218.0, 690.6666666666667], [219.0, 689.6666666666667], [223.0, 855.0], [222.0, 1385.0], [220.0, 1313.0], [217.0, 1353.0], [216.0, 1396.0], [228.0, 382.5], [230.0, 887.0], [231.0, 1363.0], [229.0, 1366.0], [227.0, 1372.0], [226.0, 1372.0], [225.0, 1372.0], [224.0, 1392.0], [232.0, 886.5], [233.0, 872.5], [236.0, 884.0], [239.0, 1378.0], [238.0, 1380.0], [237.0, 1344.0], [234.0, 1378.0], [241.0, 400.0], [245.0, 721.3333333333333], [246.0, 886.5], [244.0, 1372.0], [243.0, 1359.0], [242.0, 1376.0], [253.0, 427.0], [255.0, 1339.3333333333333], [252.0, 1348.0], [251.0, 1324.0], [250.0, 1330.0], [249.0, 1332.0], [248.0, 1350.0], [271.0, 1359.0], [264.0, 874.5], [270.0, 1337.0], [269.0, 1317.0], [268.0, 1378.0], [259.0, 1315.0], [258.0, 1315.5], [256.0, 1356.0], [267.0, 1357.0], [266.0, 1333.0], [265.0, 1363.0], [262.0, 1343.0], [261.0, 1362.0], [286.0, 1313.0], [276.0, 720.0], [277.0, 1317.0], [287.0, 1374.0], [285.0, 1368.0], [284.0, 1346.0], [283.0, 1341.0], [282.0, 1362.5], [280.0, 1370.0], [279.0, 1324.0], [273.0, 1327.0], [272.0, 1345.0], [275.0, 1332.0], [274.0, 1327.0], [278.0, 1371.0], [301.0, 881.5], [289.0, 910.5], [303.0, 1337.0], [302.0, 1353.0], [300.0, 1361.0], [290.0, 1356.0], [299.0, 1363.0], [298.0, 1354.0], [297.0, 1357.5], [295.0, 1334.0], [288.0, 1351.0], [294.0, 1365.5], [292.0, 1356.0], [307.0, 672.75], [311.0, 918.5], [304.0, 1346.0], [306.0, 1347.0], [305.0, 1365.0], [309.0, 1349.0], [308.0, 1345.0], [312.0, 814.4], [313.0, 655.5], [319.0, 1372.0], [318.0, 1369.0], [316.0, 1373.0], [315.0, 1357.0], [314.0, 1348.0], [333.0, 1352.5], [321.0, 1113.75], [323.0, 783.8], [326.0, 388.5], [324.0, 1376.0], [327.0, 1359.6666666666667], [334.0, 1377.0], [331.0, 1360.0], [330.0, 1377.0], [329.0, 1360.0], [328.0, 1374.0], [338.0, 570.6], [339.0, 620.75], [340.0, 875.5], [342.0, 352.4], [343.0, 1368.6666666666667], [337.0, 1350.0], [345.0, 348.0], [344.0, 1353.0], [350.0, 1383.0], [349.0, 1343.0], [348.0, 1367.0], [346.0, 1358.0], [364.0, 679.3333333333333], [352.0, 1017.0], [353.0, 838.5], [355.0, 836.5], [354.0, 1334.0], [356.0, 847.5], [358.0, 1354.0], [357.0, 1323.0], [359.0, 1344.0], [367.0, 1357.0], [361.0, 1343.0], [360.0, 1364.0], [366.0, 1367.0], [365.0, 1339.0], [363.0, 1342.0], [362.0, 1350.0], [382.0, 1390.0], [371.0, 333.0], [372.0, 712.75], [373.0, 1379.0], [375.0, 1352.0], [369.0, 1356.0], [368.0, 1373.0], [374.0, 1379.0], [376.0, 689.0], [377.0, 323.5], [380.0, 323.83333333333337], [383.0, 1363.0], [381.0, 1362.0], [379.0, 1372.0], [378.0, 1369.0], [396.0, 817.5], [398.0, 1400.0], [393.0, 516.8000000000001], [397.0, 1393.0], [395.0, 1377.0], [394.0, 1375.0], [391.0, 1378.0], [385.0, 1370.0], [384.0, 1394.0], [387.0, 1363.0], [386.0, 1364.0], [390.0, 1368.0], [388.0, 1390.0], [414.0, 1372.0], [401.0, 286.0], [400.0, 558.25], [402.0, 834.8333333333333], [403.0, 1386.0], [404.0, 510.6], [406.0, 1379.0], [405.0, 1348.0], [407.0, 1363.0], [415.0, 821.5], [409.0, 1367.0], [413.0, 1369.0], [412.0, 1345.0], [411.0, 1363.0], [410.0, 1362.0], [429.0, 1365.0], [431.0, 546.75], [423.0, 569.5], [425.0, 446.49999999999994], [430.0, 1394.0], [428.0, 1382.0], [419.0, 1369.0], [418.0, 1390.0], [416.0, 1362.0], [427.0, 1351.0], [426.0, 1374.0], [422.0, 1366.5], [420.0, 1359.0], [445.0, 695.6999999999999], [434.0, 840.0], [433.0, 1370.0], [438.0, 1416.0], [437.0, 1384.0], [436.0, 1365.0], [435.0, 814.5], [444.0, 285.0], [447.0, 714.75], [446.0, 1454.0], [443.0, 1364.0], [442.0, 1396.0], [441.0, 1397.0], [440.0, 1375.0], [450.0, 1119.6666666666667], [451.0, 1024.0], [454.0, 1214.25], [456.0, 870.6], [463.0, 1064.0], [461.0, 1435.0], [460.0, 1411.5], [458.0, 1427.0], [448.0, 1398.0], [479.0, 1434.0], [470.0, 659.0], [469.0, 1442.0], [468.0, 1444.0], [475.0, 681.6666666666667], [477.0, 1460.0], [476.0, 1424.0], [474.0, 1417.0], [473.0, 1441.0], [472.0, 1419.0], [471.0, 1445.0], [465.0, 1446.0], [464.0, 1427.0], [467.0, 1424.0], [466.0, 1423.0], [493.0, 1417.0], [480.0, 611.8], [483.0, 788.6666666666667], [482.0, 1430.0], [481.0, 1441.0], [486.0, 601.75], [485.0, 1428.0], [484.0, 1419.0], [487.0, 320.0], [491.0, 307.0], [490.0, 1417.0], [489.0, 1446.0], [488.0, 1427.0], [495.0, 1424.0], [494.0, 1442.0], [492.0, 1413.0], [510.0, 1464.0], [496.0, 595.25], [500.0, 426.3], [501.0, 1408.0], [503.0, 1430.0], [502.0, 1454.0], [504.0, 507.0], [507.0, 878.0], [509.0, 700.3333333333333], [511.0, 309.0], [508.0, 1421.0], [499.0, 1436.0], [498.0, 1422.0], [497.0, 1423.0], [506.0, 1423.0], [505.0, 1436.0], [516.0, 850.5], [513.0, 597.75], [512.0, 1436.0], [514.0, 310.0], [515.0, 764.2], [518.0, 878.5], [517.0, 1452.0], [519.0, 594.75], [526.0, 585.75], [525.0, 1426.0], [524.0, 1418.0], [523.0, 1488.0], [522.0, 1458.0], [521.0, 1444.0], [520.0, 1426.0], [527.0, 1433.0], [543.0, 527.2], [528.0, 1401.0], [530.0, 1432.0], [529.0, 1425.0], [533.0, 1425.0], [532.0, 1420.0], [542.0, 1422.5], [540.0, 1430.0], [539.0, 1431.0], [538.0, 1435.0], [537.0, 1424.5], [536.0, 1425.0], [574.0, 1631.5714285714287], [545.0, 306.5], [555.0, 311.25], [554.0, 1392.0], [553.0, 1400.5], [557.0, 1426.5], [556.0, 1442.6666666666667], [559.0, 1413.0], [544.0, 1424.0], [558.0, 1487.0], [563.0, 1069.3333333333333], [564.0, 894.5], [565.0, 1530.0], [567.0, 1452.0], [566.0, 1478.0], [570.0, 1533.9313543599237], [551.0, 1411.0], [549.0, 1403.0], [546.0, 1408.5], [575.0, 1590.0], [561.0, 1450.5], [573.0, 1706.5714285714287], [572.0, 1594.5], [602.0, 2224.6666666666665], [578.0, 818.75], [585.0, 1666.0], [584.0, 2329.0], [586.0, 2317.3333333333335], [588.0, 2323.0], [587.0, 2383.0], [589.0, 1935.6], [590.0, 841.25], [591.0, 2339.571428571429], [577.0, 2335.0], [576.0, 1779.2], [594.0, 313.14285714285717], [597.0, 1862.0000000000002], [596.0, 2204.5], [595.0, 2301.8399246704344], [599.0, 2200.0], [598.0, 2210.0], [607.0, 2241.6666666666665], [593.0, 2350.4285714285716], [592.0, 2381.0], [606.0, 2212.0], [605.0, 2213.0], [604.0, 2212.5], [603.0, 2212.0], [601.0, 2215.0], [600.0, 2205.0], [583.0, 2324.3333333333335], [582.0, 2299.0], [581.0, 2112.6666666666665], [579.0, 2330.0], [632.0, 1278.0], [610.0, 810.2], [615.0, 966.0], [614.0, 2241.0], [613.0, 2220.0], [612.0, 2221.0], [611.0, 2215.0], [616.0, 328.0], [617.0, 2234.5], [621.0, 2236.0], [619.0, 2229.5], [623.0, 2230.0], [609.0, 2201.0], [622.0, 2230.0], [634.0, 1146.0], [633.0, 2211.0], [635.0, 2209.0], [639.0, 2222.0], [625.0, 2229.0], [624.0, 2229.0], [627.0, 2232.0], [626.0, 2235.0], [629.0, 2222.0], [628.0, 2240.0], [631.0, 2211.0], [630.0, 2219.0], [638.0, 2216.0], [637.0, 2245.0], [636.0, 2241.0], [665.0, 1585.5], [640.0, 809.75], [641.0, 333.0], [643.0, 2259.0], [642.0, 2220.0], [646.0, 2275.0], [645.0, 2231.5], [664.0, 2238.0], [647.0, 2235.0], [652.0, 1610.0], [650.0, 2234.0], [649.0, 2228.5], [653.0, 2256.0], [655.0, 2251.0], [654.0, 2250.0], [666.0, 1571.0], [667.0, 2253.0], [671.0, 2243.0], [656.0, 2243.0], [659.0, 2237.0], [657.0, 2244.0], [661.0, 2264.0], [660.0, 2270.0], [663.0, 2239.0], [662.0, 2231.0], [670.0, 2244.0], [669.0, 2266.0], [668.0, 2261.0], [701.0, 2242.0], [675.0, 978.5], [682.0, 1303.0], [681.0, 2244.0], [680.0, 2246.0], [685.0, 2271.0], [684.0, 2243.5], [687.0, 2214.0], [672.0, 2243.0], [674.0, 2247.0], [673.0, 2241.0], [686.0, 2221.0], [688.0, 1293.0], [690.0, 2213.0], [689.0, 2212.0], [692.0, 2265.0], [691.0, 2213.0], [694.0, 2265.0], [693.0, 2222.0], [699.0, 1304.25], [703.0, 2232.0], [702.0, 2231.0], [700.0, 2249.0], [697.0, 2233.0], [696.0, 2222.5], [679.0, 2251.0], [678.0, 2252.5], [676.0, 2262.0], [732.0, 2252.0], [708.0, 364.0], [709.0, 1324.857142857143], [711.0, 2233.0], [710.0, 2240.0], [729.0, 2246.0], [728.0, 2254.0], [716.0, 1621.5], [715.0, 2235.0], [714.0, 2233.0], [713.0, 2234.0], [712.0, 2235.0], [717.0, 2249.0], [719.0, 747.0], [704.0, 2231.0], [707.0, 2235.0], [706.0, 2232.5], [718.0, 2265.0], [734.0, 1405.6666666666667], [735.0, 2255.0], [720.0, 2247.0], [722.0, 2248.0], [721.0, 2269.0], [725.0, 2261.0], [724.0, 2256.0], [727.0, 2265.0], [726.0, 2256.0], [733.0, 2273.0], [731.0, 2252.0], [730.0, 2245.0], [764.0, 2309.0], [741.0, 1858.6666666666667], [738.0, 2264.0], [737.0, 2242.0], [736.0, 2295.0], [743.0, 2288.3333333333335], [761.0, 2287.0], [760.0, 2290.5], [745.0, 1002.0], [744.0, 2288.0], [746.0, 2301.5], [749.0, 2273.0], [748.0, 2271.0], [751.0, 1636.0], [758.0, 956.0], [757.0, 2262.0], [756.0, 2261.5], [754.0, 2283.0], [753.0, 2274.0], [752.0, 2302.0], [759.0, 2296.0], [767.0, 2303.0], [765.0, 2269.0], [763.0, 2277.0], [762.0, 2262.0], [794.0, 2286.0], [798.0, 2278.0], [771.0, 1048.0], [769.0, 2270.5], [774.0, 2286.0], [772.0, 2277.6666666666665], [783.0, 2301.5], [781.0, 2281.0], [780.0, 2263.0], [779.0, 2287.0], [777.0, 2280.0], [776.0, 2282.3333333333335], [793.0, 2275.0], [792.0, 2291.0], [788.0, 1518.8], [790.0, 1857.3333333333333], [791.0, 2292.0], [799.0, 2289.0], [784.0, 2288.0], [787.0, 2272.0], [785.0, 2272.0], [797.0, 2284.0], [796.0, 2285.0], [795.0, 2285.0], [825.0, 2319.0], [829.0, 1680.0], [801.0, 1676.5], [800.0, 2314.0], [802.0, 1636.0], [804.0, 1679.0], [803.0, 2318.0], [824.0, 2308.3333333333335], [807.0, 2303.6666666666665], [826.0, 2299.0], [811.0, 1521.0], [809.0, 2296.0], [808.0, 2297.0], [812.0, 2295.0], [814.0, 2292.0], [813.0, 2302.0], [815.0, 2291.0], [816.0, 1027.4285714285713], [820.0, 1024.75], [818.0, 2323.0], [817.0, 2322.0], [822.0, 2291.0], [821.0, 2305.5], [830.0, 995.0], [828.0, 2327.0], [827.0, 2299.0], [856.0, 2254.0], [861.0, 2259.0], [859.0, 1648.0], [835.0, 1336.0], [834.0, 2299.0], [833.0, 2299.0], [832.0, 2293.6666666666665], [837.0, 2299.0], [839.0, 2293.0], [838.0, 2292.0], [847.0, 2279.0], [846.0, 2284.0], [844.0, 2300.0], [843.0, 2282.0], [842.0, 2281.0], [841.0, 2288.0], [862.0, 2261.0], [849.0, 2275.0], [848.0, 2269.0], [852.0, 2257.0], [851.0, 2267.5], [860.0, 2248.0], [858.0, 2248.5], [854.0, 2255.0], [853.0, 2258.0], [888.0, 2273.3333333333335], [893.0, 2163.714285714286], [879.0, 1055.0], [864.0, 2234.0], [868.0, 2242.3333333333335], [865.0, 2236.0], [870.0, 2260.0], [869.0, 2252.0], [878.0, 2208.0], [877.0, 2239.0], [876.0, 2259.5], [875.0, 2241.0], [874.0, 2234.0], [873.0, 2219.0], [872.0, 2230.5], [894.0, 2159.818181818182], [882.0, 2277.6666666666665], [880.0, 2245.0], [884.0, 2283.0], [883.0, 2261.0], [891.0, 2147.153846153846], [890.0, 2228.5643802647373], [889.0, 2282.8333333333335], [887.0, 2274.25], [886.0, 2267.25], [923.0, 1434.5], [907.0, 1896.0], [906.0, 2280.6666666666665], [905.0, 2320.0], [904.0, 2335.25], [908.0, 2353.75], [909.0, 2028.75], [915.0, 1938.8], [916.0, 1832.5], [917.0, 2574.0], [919.0, 2528.0], [918.0, 2544.6666666666665], [922.0, 1793.5], [921.0, 2529.0], [920.0, 2541.0], [903.0, 2335.0], [902.0, 2300.0], [901.0, 2331.0], [900.0, 2359.0], [899.0, 2265.0], [897.0, 2228.75], [896.0, 2282.3333333333335], [911.0, 2533.1491228070167], [910.0, 2379.002659574466], [926.0, 2518.0], [912.0, 2551.8333333333335], [914.0, 2568.0], [913.0, 2564.142857142857], [925.0, 2540.0], [924.0, 2542.0], [952.0, 2478.0], [956.0, 2570.0], [935.0, 1049.3333333333333], [934.0, 2519.0], [933.0, 2508.0], [932.0, 2533.0], [931.0, 2525.0], [930.0, 2527.0], [929.0, 2528.0], [928.0, 2522.0], [943.0, 2500.0], [942.0, 2514.0], [941.0, 2514.5], [940.0, 2511.0], [938.0, 2514.5], [936.0, 2518.5], [947.0, 1119.0], [950.0, 2476.0], [949.0, 2488.0], [948.0, 2494.0], [958.0, 1773.0], [959.0, 2462.0], [944.0, 2622.0], [946.0, 2494.0], [945.0, 2498.0], [957.0, 2470.5], [955.0, 2472.0], [954.0, 2476.5], [953.0, 2475.0], [985.0, 2253.0], [962.0, 1788.3333333333335], [966.0, 1360.9], [964.0, 2504.5], [963.0, 2552.0], [984.0, 2663.0], [967.0, 2556.0], [974.0, 2068.6666666666665], [973.0, 2548.0], [972.0, 2545.5], [970.0, 2557.0], [969.0, 2546.0], [968.0, 2441.0], [975.0, 2548.0], [991.0, 2664.0], [977.0, 2564.0], [976.0, 2525.0], [979.0, 2572.6249999999995], [978.0, 2559.0], [981.0, 2639.9525350593294], [980.0, 2555.8], [983.0, 2716.9166666666665], [982.0, 2729.75], [990.0, 2665.5], [989.0, 2660.5], [988.0, 2657.0], [986.0, 2658.0], [992.0, 2036.6], [993.0, 2155.0], [995.0, 2091.125], [999.0, 2099.428571428571], [1000.0, 2456.659324208727], [998.0, 2680.0], [997.0, 2688.5], [996.0, 2685.0], [1.0, 1430.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[860.6683000000024, 2237.5847999999983]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31833.333333333332, "minX": 1.66955724E12, "maxY": 1.8714833333333332E7, "series": [{"data": [[1.66955724E12, 1.8714833333333332E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66955724E12, 31833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955724E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2237.5847999999983, "minX": 1.66955724E12, "maxY": 2237.5847999999983, "series": [{"data": [[1.66955724E12, 2237.5847999999983]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955724E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2220.468700000005, "minX": 1.66955724E12, "maxY": 2220.468700000005, "series": [{"data": [[1.66955724E12, 2220.468700000005]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955724E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9407999999999971, "minX": 1.66955724E12, "maxY": 0.9407999999999971, "series": [{"data": [[1.66955724E12, 0.9407999999999971]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955724E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.66955724E12, "maxY": 4556.0, "series": [{"data": [[1.66955724E12, 4556.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66955724E12, 2846.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66955724E12, 4254.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66955724E12, 3472.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66955724E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66955724E12, 2372.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955724E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 317.0, "minX": 138.0, "maxY": 4066.0, "series": [{"data": [[138.0, 1402.5], [229.0, 317.0], [309.0, 1038.0], [328.0, 4066.0], [344.0, 2918.0], [336.0, 2398.0], [366.0, 2783.5], [355.0, 2624.0], [370.0, 1171.5], [382.0, 2831.0], [381.0, 2319.0], [383.0, 2172.0], [372.0, 2253.5], [368.0, 2289.5], [394.0, 1220.5], [391.0, 2318.5], [392.0, 2638.5], [390.0, 2672.5], [402.0, 2707.0], [407.0, 2386.0], [403.0, 1523.0], [406.0, 1374.0], [427.0, 2597.0], [438.0, 2469.0], [437.0, 2274.0], [461.0, 2445.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 296.0, "minX": 138.0, "maxY": 4039.5, "series": [{"data": [[138.0, 1393.0], [229.0, 296.0], [309.0, 1016.0], [328.0, 4039.5], [344.0, 2907.5], [336.0, 2384.5], [366.0, 2772.5], [355.0, 2607.0], [370.0, 1159.0], [382.0, 2815.0], [381.0, 2302.0], [383.0, 2151.0], [372.0, 2236.0], [368.0, 2273.5], [394.0, 1203.5], [391.0, 2299.5], [392.0, 2621.0], [390.0, 2649.0], [402.0, 2691.0], [407.0, 2368.0], [403.0, 1503.0], [406.0, 1357.0], [427.0, 2573.0], [438.0, 2451.5], [437.0, 2256.0], [461.0, 2423.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955724E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955724E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955724E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955724E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955724E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955724E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955724E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955724E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955724E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955724E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955724E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955724E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

