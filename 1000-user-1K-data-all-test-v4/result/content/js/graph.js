/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 70.0, "minX": 0.0, "maxY": 3891.0, "series": [{"data": [[0.0, 70.0], [0.1, 124.0], [0.2, 187.0], [0.3, 219.0], [0.4, 252.0], [0.5, 264.0], [0.6, 282.0], [0.7, 314.0], [0.8, 335.0], [0.9, 355.0], [1.0, 385.0], [1.1, 401.0], [1.2, 427.0], [1.3, 454.0], [1.4, 486.0], [1.5, 515.0], [1.6, 542.0], [1.7, 557.0], [1.8, 565.0], [1.9, 570.0], [2.0, 575.0], [2.1, 584.0], [2.2, 589.0], [2.3, 606.0], [2.4, 613.0], [2.5, 624.0], [2.6, 639.0], [2.7, 657.0], [2.8, 665.0], [2.9, 685.0], [3.0, 702.0], [3.1, 720.0], [3.2, 734.0], [3.3, 740.0], [3.4, 780.0], [3.5, 788.0], [3.6, 798.0], [3.7, 807.0], [3.8, 815.0], [3.9, 825.0], [4.0, 835.0], [4.1, 847.0], [4.2, 861.0], [4.3, 870.0], [4.4, 891.0], [4.5, 902.0], [4.6, 927.0], [4.7, 944.0], [4.8, 949.0], [4.9, 958.0], [5.0, 965.0], [5.1, 972.0], [5.2, 984.0], [5.3, 998.0], [5.4, 1025.0], [5.5, 1041.0], [5.6, 1057.0], [5.7, 1082.0], [5.8, 1108.0], [5.9, 1145.0], [6.0, 1156.0], [6.1, 1175.0], [6.2, 1185.0], [6.3, 1191.0], [6.4, 1218.0], [6.5, 1234.0], [6.6, 1245.0], [6.7, 1253.0], [6.8, 1266.0], [6.9, 1289.0], [7.0, 1316.0], [7.1, 1343.0], [7.2, 1361.0], [7.3, 1371.0], [7.4, 1383.0], [7.5, 1403.0], [7.6, 1421.0], [7.7, 1433.0], [7.8, 1460.0], [7.9, 1484.0], [8.0, 1493.0], [8.1, 1516.0], [8.2, 1522.0], [8.3, 1535.0], [8.4, 1550.0], [8.5, 1589.0], [8.6, 1612.0], [8.7, 1627.0], [8.8, 1634.0], [8.9, 1658.0], [9.0, 1668.0], [9.1, 1676.0], [9.2, 1679.0], [9.3, 1688.0], [9.4, 1705.0], [9.5, 1708.0], [9.6, 1713.0], [9.7, 1716.0], [9.8, 1720.0], [9.9, 1723.0], [10.0, 1731.0], [10.1, 1734.0], [10.2, 1740.0], [10.3, 1744.0], [10.4, 1748.0], [10.5, 1756.0], [10.6, 1764.0], [10.7, 1773.0], [10.8, 1792.0], [10.9, 1817.0], [11.0, 1827.0], [11.1, 1829.0], [11.2, 1833.0], [11.3, 1839.0], [11.4, 1846.0], [11.5, 1850.0], [11.6, 1860.0], [11.7, 1875.0], [11.8, 1880.0], [11.9, 1885.0], [12.0, 1888.0], [12.1, 1892.0], [12.2, 1895.0], [12.3, 1898.0], [12.4, 1899.0], [12.5, 1901.0], [12.6, 1905.0], [12.7, 1906.0], [12.8, 1908.0], [12.9, 1910.0], [13.0, 1912.0], [13.1, 1915.0], [13.2, 1918.0], [13.3, 1923.0], [13.4, 1927.0], [13.5, 1933.0], [13.6, 1936.0], [13.7, 1941.0], [13.8, 1945.0], [13.9, 1954.0], [14.0, 1962.0], [14.1, 1969.0], [14.2, 1978.0], [14.3, 1982.0], [14.4, 1992.0], [14.5, 2001.0], [14.6, 2008.0], [14.7, 2011.0], [14.8, 2016.0], [14.9, 2021.0], [15.0, 2023.0], [15.1, 2027.0], [15.2, 2030.0], [15.3, 2036.0], [15.4, 2039.0], [15.5, 2042.0], [15.6, 2045.0], [15.7, 2048.0], [15.8, 2050.0], [15.9, 2053.0], [16.0, 2055.0], [16.1, 2057.0], [16.2, 2061.0], [16.3, 2063.0], [16.4, 2068.0], [16.5, 2073.0], [16.6, 2083.0], [16.7, 2096.0], [16.8, 2111.0], [16.9, 2121.0], [17.0, 2131.0], [17.1, 2141.0], [17.2, 2146.0], [17.3, 2160.0], [17.4, 2166.0], [17.5, 2176.0], [17.6, 2182.0], [17.7, 2188.0], [17.8, 2191.0], [17.9, 2195.0], [18.0, 2200.0], [18.1, 2205.0], [18.2, 2216.0], [18.3, 2223.0], [18.4, 2230.0], [18.5, 2250.0], [18.6, 2257.0], [18.7, 2276.0], [18.8, 2289.0], [18.9, 2295.0], [19.0, 2298.0], [19.1, 2308.0], [19.2, 2312.0], [19.3, 2317.0], [19.4, 2321.0], [19.5, 2324.0], [19.6, 2324.0], [19.7, 2328.0], [19.8, 2331.0], [19.9, 2336.0], [20.0, 2339.0], [20.1, 2344.0], [20.2, 2347.0], [20.3, 2350.0], [20.4, 2352.0], [20.5, 2357.0], [20.6, 2359.0], [20.7, 2362.0], [20.8, 2366.0], [20.9, 2369.0], [21.0, 2371.0], [21.1, 2377.0], [21.2, 2381.0], [21.3, 2386.0], [21.4, 2390.0], [21.5, 2392.0], [21.6, 2393.0], [21.7, 2401.0], [21.8, 2404.0], [21.9, 2412.0], [22.0, 2418.0], [22.1, 2429.0], [22.2, 2439.0], [22.3, 2441.0], [22.4, 2445.0], [22.5, 2447.0], [22.6, 2450.0], [22.7, 2451.0], [22.8, 2453.0], [22.9, 2454.0], [23.0, 2457.0], [23.1, 2460.0], [23.2, 2463.0], [23.3, 2467.0], [23.4, 2469.0], [23.5, 2472.0], [23.6, 2479.0], [23.7, 2481.0], [23.8, 2485.0], [23.9, 2488.0], [24.0, 2495.0], [24.1, 2507.0], [24.2, 2517.0], [24.3, 2522.0], [24.4, 2530.0], [24.5, 2532.0], [24.6, 2534.0], [24.7, 2538.0], [24.8, 2540.0], [24.9, 2540.0], [25.0, 2541.0], [25.1, 2543.0], [25.2, 2545.0], [25.3, 2547.0], [25.4, 2548.0], [25.5, 2548.0], [25.6, 2549.0], [25.7, 2550.0], [25.8, 2552.0], [25.9, 2553.0], [26.0, 2555.0], [26.1, 2556.0], [26.2, 2556.0], [26.3, 2557.0], [26.4, 2558.0], [26.5, 2560.0], [26.6, 2561.0], [26.7, 2562.0], [26.8, 2562.0], [26.9, 2563.0], [27.0, 2564.0], [27.1, 2565.0], [27.2, 2566.0], [27.3, 2567.0], [27.4, 2568.0], [27.5, 2568.0], [27.6, 2569.0], [27.7, 2569.0], [27.8, 2570.0], [27.9, 2571.0], [28.0, 2571.0], [28.1, 2572.0], [28.2, 2573.0], [28.3, 2574.0], [28.4, 2575.0], [28.5, 2576.0], [28.6, 2576.0], [28.7, 2577.0], [28.8, 2578.0], [28.9, 2578.0], [29.0, 2579.0], [29.1, 2579.0], [29.2, 2580.0], [29.3, 2580.0], [29.4, 2580.0], [29.5, 2581.0], [29.6, 2582.0], [29.7, 2582.0], [29.8, 2583.0], [29.9, 2584.0], [30.0, 2584.0], [30.1, 2585.0], [30.2, 2586.0], [30.3, 2587.0], [30.4, 2587.0], [30.5, 2587.0], [30.6, 2588.0], [30.7, 2588.0], [30.8, 2589.0], [30.9, 2589.0], [31.0, 2590.0], [31.1, 2590.0], [31.2, 2591.0], [31.3, 2592.0], [31.4, 2593.0], [31.5, 2593.0], [31.6, 2594.0], [31.7, 2594.0], [31.8, 2595.0], [31.9, 2596.0], [32.0, 2597.0], [32.1, 2597.0], [32.2, 2598.0], [32.3, 2598.0], [32.4, 2599.0], [32.5, 2599.0], [32.6, 2600.0], [32.7, 2600.0], [32.8, 2601.0], [32.9, 2601.0], [33.0, 2602.0], [33.1, 2603.0], [33.2, 2603.0], [33.3, 2604.0], [33.4, 2605.0], [33.5, 2605.0], [33.6, 2606.0], [33.7, 2607.0], [33.8, 2607.0], [33.9, 2608.0], [34.0, 2608.0], [34.1, 2609.0], [34.2, 2609.0], [34.3, 2610.0], [34.4, 2611.0], [34.5, 2612.0], [34.6, 2612.0], [34.7, 2613.0], [34.8, 2613.0], [34.9, 2614.0], [35.0, 2614.0], [35.1, 2614.0], [35.2, 2615.0], [35.3, 2615.0], [35.4, 2615.0], [35.5, 2616.0], [35.6, 2616.0], [35.7, 2618.0], [35.8, 2619.0], [35.9, 2619.0], [36.0, 2620.0], [36.1, 2620.0], [36.2, 2621.0], [36.3, 2622.0], [36.4, 2623.0], [36.5, 2623.0], [36.6, 2623.0], [36.7, 2624.0], [36.8, 2624.0], [36.9, 2625.0], [37.0, 2626.0], [37.1, 2627.0], [37.2, 2627.0], [37.3, 2628.0], [37.4, 2628.0], [37.5, 2629.0], [37.6, 2630.0], [37.7, 2631.0], [37.8, 2631.0], [37.9, 2632.0], [38.0, 2633.0], [38.1, 2634.0], [38.2, 2634.0], [38.3, 2635.0], [38.4, 2636.0], [38.5, 2636.0], [38.6, 2637.0], [38.7, 2637.0], [38.8, 2639.0], [38.9, 2640.0], [39.0, 2641.0], [39.1, 2641.0], [39.2, 2642.0], [39.3, 2642.0], [39.4, 2643.0], [39.5, 2643.0], [39.6, 2644.0], [39.7, 2644.0], [39.8, 2645.0], [39.9, 2647.0], [40.0, 2647.0], [40.1, 2648.0], [40.2, 2648.0], [40.3, 2649.0], [40.4, 2650.0], [40.5, 2650.0], [40.6, 2652.0], [40.7, 2652.0], [40.8, 2653.0], [40.9, 2654.0], [41.0, 2655.0], [41.1, 2656.0], [41.2, 2657.0], [41.3, 2658.0], [41.4, 2659.0], [41.5, 2659.0], [41.6, 2660.0], [41.7, 2661.0], [41.8, 2661.0], [41.9, 2661.0], [42.0, 2662.0], [42.1, 2663.0], [42.2, 2663.0], [42.3, 2664.0], [42.4, 2665.0], [42.5, 2666.0], [42.6, 2667.0], [42.7, 2668.0], [42.8, 2668.0], [42.9, 2669.0], [43.0, 2669.0], [43.1, 2670.0], [43.2, 2671.0], [43.3, 2672.0], [43.4, 2672.0], [43.5, 2673.0], [43.6, 2673.0], [43.7, 2674.0], [43.8, 2675.0], [43.9, 2676.0], [44.0, 2676.0], [44.1, 2677.0], [44.2, 2677.0], [44.3, 2678.0], [44.4, 2679.0], [44.5, 2680.0], [44.6, 2680.0], [44.7, 2681.0], [44.8, 2681.0], [44.9, 2682.0], [45.0, 2682.0], [45.1, 2683.0], [45.2, 2683.0], [45.3, 2684.0], [45.4, 2684.0], [45.5, 2685.0], [45.6, 2685.0], [45.7, 2686.0], [45.8, 2687.0], [45.9, 2687.0], [46.0, 2688.0], [46.1, 2688.0], [46.2, 2689.0], [46.3, 2690.0], [46.4, 2690.0], [46.5, 2691.0], [46.6, 2691.0], [46.7, 2692.0], [46.8, 2692.0], [46.9, 2693.0], [47.0, 2693.0], [47.1, 2694.0], [47.2, 2694.0], [47.3, 2695.0], [47.4, 2696.0], [47.5, 2696.0], [47.6, 2697.0], [47.7, 2697.0], [47.8, 2698.0], [47.9, 2699.0], [48.0, 2699.0], [48.1, 2700.0], [48.2, 2701.0], [48.3, 2701.0], [48.4, 2702.0], [48.5, 2702.0], [48.6, 2703.0], [48.7, 2704.0], [48.8, 2704.0], [48.9, 2704.0], [49.0, 2705.0], [49.1, 2706.0], [49.2, 2706.0], [49.3, 2707.0], [49.4, 2707.0], [49.5, 2707.0], [49.6, 2708.0], [49.7, 2708.0], [49.8, 2709.0], [49.9, 2709.0], [50.0, 2710.0], [50.1, 2710.0], [50.2, 2711.0], [50.3, 2711.0], [50.4, 2711.0], [50.5, 2712.0], [50.6, 2712.0], [50.7, 2713.0], [50.8, 2713.0], [50.9, 2714.0], [51.0, 2715.0], [51.1, 2715.0], [51.2, 2716.0], [51.3, 2716.0], [51.4, 2717.0], [51.5, 2717.0], [51.6, 2718.0], [51.7, 2719.0], [51.8, 2720.0], [51.9, 2720.0], [52.0, 2720.0], [52.1, 2720.0], [52.2, 2721.0], [52.3, 2721.0], [52.4, 2722.0], [52.5, 2723.0], [52.6, 2723.0], [52.7, 2724.0], [52.8, 2725.0], [52.9, 2725.0], [53.0, 2726.0], [53.1, 2727.0], [53.2, 2727.0], [53.3, 2728.0], [53.4, 2728.0], [53.5, 2729.0], [53.6, 2729.0], [53.7, 2729.0], [53.8, 2730.0], [53.9, 2731.0], [54.0, 2731.0], [54.1, 2732.0], [54.2, 2732.0], [54.3, 2732.0], [54.4, 2733.0], [54.5, 2733.0], [54.6, 2734.0], [54.7, 2734.0], [54.8, 2735.0], [54.9, 2735.0], [55.0, 2735.0], [55.1, 2736.0], [55.2, 2736.0], [55.3, 2736.0], [55.4, 2737.0], [55.5, 2738.0], [55.6, 2739.0], [55.7, 2739.0], [55.8, 2739.0], [55.9, 2740.0], [56.0, 2740.0], [56.1, 2741.0], [56.2, 2742.0], [56.3, 2743.0], [56.4, 2743.0], [56.5, 2744.0], [56.6, 2744.0], [56.7, 2744.0], [56.8, 2745.0], [56.9, 2745.0], [57.0, 2746.0], [57.1, 2747.0], [57.2, 2747.0], [57.3, 2747.0], [57.4, 2748.0], [57.5, 2748.0], [57.6, 2748.0], [57.7, 2749.0], [57.8, 2749.0], [57.9, 2750.0], [58.0, 2751.0], [58.1, 2751.0], [58.2, 2751.0], [58.3, 2752.0], [58.4, 2752.0], [58.5, 2752.0], [58.6, 2752.0], [58.7, 2753.0], [58.8, 2753.0], [58.9, 2753.0], [59.0, 2754.0], [59.1, 2755.0], [59.2, 2755.0], [59.3, 2755.0], [59.4, 2756.0], [59.5, 2756.0], [59.6, 2756.0], [59.7, 2757.0], [59.8, 2757.0], [59.9, 2758.0], [60.0, 2759.0], [60.1, 2759.0], [60.2, 2759.0], [60.3, 2760.0], [60.4, 2760.0], [60.5, 2760.0], [60.6, 2760.0], [60.7, 2761.0], [60.8, 2761.0], [60.9, 2762.0], [61.0, 2762.0], [61.1, 2763.0], [61.2, 2763.0], [61.3, 2764.0], [61.4, 2764.0], [61.5, 2764.0], [61.6, 2764.0], [61.7, 2765.0], [61.8, 2765.0], [61.9, 2765.0], [62.0, 2766.0], [62.1, 2766.0], [62.2, 2766.0], [62.3, 2767.0], [62.4, 2767.0], [62.5, 2768.0], [62.6, 2768.0], [62.7, 2769.0], [62.8, 2769.0], [62.9, 2770.0], [63.0, 2771.0], [63.1, 2771.0], [63.2, 2771.0], [63.3, 2772.0], [63.4, 2772.0], [63.5, 2772.0], [63.6, 2772.0], [63.7, 2773.0], [63.8, 2773.0], [63.9, 2774.0], [64.0, 2775.0], [64.1, 2775.0], [64.2, 2776.0], [64.3, 2776.0], [64.4, 2776.0], [64.5, 2776.0], [64.6, 2777.0], [64.7, 2778.0], [64.8, 2778.0], [64.9, 2779.0], [65.0, 2779.0], [65.1, 2780.0], [65.2, 2780.0], [65.3, 2780.0], [65.4, 2781.0], [65.5, 2781.0], [65.6, 2782.0], [65.7, 2783.0], [65.8, 2783.0], [65.9, 2784.0], [66.0, 2784.0], [66.1, 2785.0], [66.2, 2785.0], [66.3, 2785.0], [66.4, 2786.0], [66.5, 2786.0], [66.6, 2787.0], [66.7, 2787.0], [66.8, 2788.0], [66.9, 2788.0], [67.0, 2788.0], [67.1, 2789.0], [67.2, 2789.0], [67.3, 2790.0], [67.4, 2791.0], [67.5, 2792.0], [67.6, 2792.0], [67.7, 2792.0], [67.8, 2793.0], [67.9, 2793.0], [68.0, 2794.0], [68.1, 2794.0], [68.2, 2795.0], [68.3, 2796.0], [68.4, 2796.0], [68.5, 2796.0], [68.6, 2797.0], [68.7, 2797.0], [68.8, 2798.0], [68.9, 2798.0], [69.0, 2799.0], [69.1, 2799.0], [69.2, 2800.0], [69.3, 2800.0], [69.4, 2800.0], [69.5, 2801.0], [69.6, 2801.0], [69.7, 2801.0], [69.8, 2802.0], [69.9, 2803.0], [70.0, 2803.0], [70.1, 2804.0], [70.2, 2804.0], [70.3, 2804.0], [70.4, 2805.0], [70.5, 2805.0], [70.6, 2805.0], [70.7, 2806.0], [70.8, 2806.0], [70.9, 2807.0], [71.0, 2807.0], [71.1, 2807.0], [71.2, 2808.0], [71.3, 2808.0], [71.4, 2808.0], [71.5, 2809.0], [71.6, 2809.0], [71.7, 2810.0], [71.8, 2811.0], [71.9, 2811.0], [72.0, 2812.0], [72.1, 2812.0], [72.2, 2813.0], [72.3, 2813.0], [72.4, 2814.0], [72.5, 2814.0], [72.6, 2815.0], [72.7, 2815.0], [72.8, 2816.0], [72.9, 2816.0], [73.0, 2816.0], [73.1, 2817.0], [73.2, 2817.0], [73.3, 2818.0], [73.4, 2818.0], [73.5, 2819.0], [73.6, 2819.0], [73.7, 2819.0], [73.8, 2819.0], [73.9, 2820.0], [74.0, 2820.0], [74.1, 2820.0], [74.2, 2821.0], [74.3, 2821.0], [74.4, 2822.0], [74.5, 2822.0], [74.6, 2823.0], [74.7, 2823.0], [74.8, 2824.0], [74.9, 2824.0], [75.0, 2824.0], [75.1, 2825.0], [75.2, 2825.0], [75.3, 2825.0], [75.4, 2826.0], [75.5, 2827.0], [75.6, 2827.0], [75.7, 2827.0], [75.8, 2828.0], [75.9, 2828.0], [76.0, 2828.0], [76.1, 2829.0], [76.2, 2829.0], [76.3, 2830.0], [76.4, 2830.0], [76.5, 2830.0], [76.6, 2831.0], [76.7, 2831.0], [76.8, 2832.0], [76.9, 2832.0], [77.0, 2833.0], [77.1, 2833.0], [77.2, 2833.0], [77.3, 2834.0], [77.4, 2834.0], [77.5, 2834.0], [77.6, 2835.0], [77.7, 2835.0], [77.8, 2835.0], [77.9, 2836.0], [78.0, 2836.0], [78.1, 2836.0], [78.2, 2836.0], [78.3, 2837.0], [78.4, 2837.0], [78.5, 2838.0], [78.6, 2839.0], [78.7, 2839.0], [78.8, 2839.0], [78.9, 2840.0], [79.0, 2840.0], [79.1, 2841.0], [79.2, 2841.0], [79.3, 2841.0], [79.4, 2842.0], [79.5, 2843.0], [79.6, 2843.0], [79.7, 2843.0], [79.8, 2844.0], [79.9, 2844.0], [80.0, 2845.0], [80.1, 2845.0], [80.2, 2846.0], [80.3, 2846.0], [80.4, 2846.0], [80.5, 2847.0], [80.6, 2847.0], [80.7, 2848.0], [80.8, 2848.0], [80.9, 2848.0], [81.0, 2848.0], [81.1, 2849.0], [81.2, 2850.0], [81.3, 2850.0], [81.4, 2851.0], [81.5, 2852.0], [81.6, 2852.0], [81.7, 2853.0], [81.8, 2853.0], [81.9, 2854.0], [82.0, 2855.0], [82.1, 2855.0], [82.2, 2856.0], [82.3, 2856.0], [82.4, 2857.0], [82.5, 2858.0], [82.6, 2859.0], [82.7, 2859.0], [82.8, 2860.0], [82.9, 2860.0], [83.0, 2861.0], [83.1, 2862.0], [83.2, 2862.0], [83.3, 2863.0], [83.4, 2863.0], [83.5, 2864.0], [83.6, 2864.0], [83.7, 2864.0], [83.8, 2865.0], [83.9, 2866.0], [84.0, 2866.0], [84.1, 2867.0], [84.2, 2867.0], [84.3, 2868.0], [84.4, 2868.0], [84.5, 2869.0], [84.6, 2869.0], [84.7, 2870.0], [84.8, 2871.0], [84.9, 2871.0], [85.0, 2871.0], [85.1, 2872.0], [85.2, 2872.0], [85.3, 2872.0], [85.4, 2873.0], [85.5, 2873.0], [85.6, 2874.0], [85.7, 2874.0], [85.8, 2876.0], [85.9, 2876.0], [86.0, 2876.0], [86.1, 2877.0], [86.2, 2878.0], [86.3, 2879.0], [86.4, 2879.0], [86.5, 2880.0], [86.6, 2880.0], [86.7, 2881.0], [86.8, 2882.0], [86.9, 2883.0], [87.0, 2883.0], [87.1, 2884.0], [87.2, 2885.0], [87.3, 2885.0], [87.4, 2886.0], [87.5, 2886.0], [87.6, 2887.0], [87.7, 2888.0], [87.8, 2890.0], [87.9, 2890.0], [88.0, 2891.0], [88.1, 2891.0], [88.2, 2892.0], [88.3, 2892.0], [88.4, 2893.0], [88.5, 2895.0], [88.6, 2895.0], [88.7, 2896.0], [88.8, 2896.0], [88.9, 2897.0], [89.0, 2898.0], [89.1, 2898.0], [89.2, 2899.0], [89.3, 2899.0], [89.4, 2900.0], [89.5, 2900.0], [89.6, 2901.0], [89.7, 2902.0], [89.8, 2903.0], [89.9, 2903.0], [90.0, 2904.0], [90.1, 2904.0], [90.2, 2905.0], [90.3, 2907.0], [90.4, 2907.0], [90.5, 2908.0], [90.6, 2908.0], [90.7, 2909.0], [90.8, 2910.0], [90.9, 2910.0], [91.0, 2911.0], [91.1, 2911.0], [91.2, 2912.0], [91.3, 2912.0], [91.4, 2913.0], [91.5, 2914.0], [91.6, 2914.0], [91.7, 2915.0], [91.8, 2915.0], [91.9, 2916.0], [92.0, 2917.0], [92.1, 2918.0], [92.2, 2919.0], [92.3, 2920.0], [92.4, 2920.0], [92.5, 2922.0], [92.6, 2922.0], [92.7, 2923.0], [92.8, 2924.0], [92.9, 2924.0], [93.0, 2924.0], [93.1, 2926.0], [93.2, 2927.0], [93.3, 2927.0], [93.4, 2928.0], [93.5, 2928.0], [93.6, 2929.0], [93.7, 2929.0], [93.8, 2930.0], [93.9, 2931.0], [94.0, 2932.0], [94.1, 2932.0], [94.2, 2932.0], [94.3, 2933.0], [94.4, 2934.0], [94.5, 2935.0], [94.6, 2936.0], [94.7, 2936.0], [94.8, 2938.0], [94.9, 2938.0], [95.0, 2940.0], [95.1, 2940.0], [95.2, 2941.0], [95.3, 2941.0], [95.4, 2942.0], [95.5, 2943.0], [95.6, 2944.0], [95.7, 2946.0], [95.8, 2947.0], [95.9, 2948.0], [96.0, 2949.0], [96.1, 2950.0], [96.2, 2951.0], [96.3, 2951.0], [96.4, 2952.0], [96.5, 2952.0], [96.6, 2953.0], [96.7, 2955.0], [96.8, 2955.0], [96.9, 2956.0], [97.0, 2957.0], [97.1, 2958.0], [97.2, 2959.0], [97.3, 2960.0], [97.4, 2961.0], [97.5, 2962.0], [97.6, 2963.0], [97.7, 2964.0], [97.8, 2964.0], [97.9, 2965.0], [98.0, 2966.0], [98.1, 2968.0], [98.2, 2969.0], [98.3, 2971.0], [98.4, 2972.0], [98.5, 2973.0], [98.6, 2975.0], [98.7, 2976.0], [98.8, 2978.0], [98.9, 2980.0], [99.0, 2983.0], [99.1, 2985.0], [99.2, 2987.0], [99.3, 2991.0], [99.4, 2993.0], [99.5, 2997.0], [99.6, 2998.0], [99.7, 3004.0], [99.8, 3009.0], [99.9, 3711.0], [100.0, 3891.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2116.0, "series": [{"data": [[0.0, 4.0], [600.0, 73.0], [700.0, 64.0], [800.0, 84.0], [900.0, 84.0], [1000.0, 47.0], [1100.0, 57.0], [1200.0, 63.0], [1300.0, 51.0], [1400.0, 57.0], [1500.0, 49.0], [100.0, 18.0], [1600.0, 81.0], [1700.0, 148.0], [1800.0, 157.0], [1900.0, 207.0], [2000.0, 225.0], [2100.0, 127.0], [2200.0, 102.0], [2300.0, 264.0], [2400.0, 238.0], [2500.0, 850.0], [2600.0, 1548.0], [2700.0, 2116.0], [2800.0, 2013.0], [2900.0, 1034.0], [3000.0, 24.0], [3100.0, 1.0], [200.0, 44.0], [3700.0, 4.0], [3800.0, 6.0], [300.0, 43.0], [400.0, 33.0], [500.0, 84.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 144.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9194.0, "series": [{"data": [[0.0, 144.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 662.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9194.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 904.2524999999986, "minX": 1.66955688E12, "maxY": 904.2524999999986, "series": [{"data": [[1.66955688E12, 904.2524999999986]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955688E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 135.66666666666666, "minX": 1.0, "maxY": 3103.5, "series": [{"data": [[3.0, 1543.0], [5.0, 1712.5], [7.0, 1731.5], [8.0, 1761.0], [9.0, 1724.0], [10.0, 1791.0], [11.0, 1712.0], [12.0, 1764.0], [13.0, 1720.0], [14.0, 1732.0], [15.0, 1737.0], [16.0, 1756.0], [17.0, 1737.0], [19.0, 1757.0], [20.0, 1779.0], [22.0, 1757.0], [24.0, 1753.6666666666667], [25.0, 1755.0], [26.0, 1748.0], [27.0, 1748.0], [28.0, 1747.0], [29.0, 1748.0], [30.0, 1740.0], [31.0, 1760.0], [33.0, 1739.0], [32.0, 1732.0], [35.0, 1731.0], [34.0, 1731.0], [37.0, 1736.0], [39.0, 1733.0], [38.0, 1732.0], [41.0, 1725.0], [40.0, 1724.0], [43.0, 1713.0], [42.0, 1723.0], [45.0, 1705.0], [44.0, 1712.0], [47.0, 1729.0], [46.0, 1705.0], [49.0, 1697.0], [48.0, 1697.0], [51.0, 1714.0], [50.0, 1710.0], [53.0, 1722.0], [52.0, 1713.0], [54.0, 1721.0], [56.0, 1757.5], [59.0, 1754.0], [58.0, 1740.5], [61.0, 1750.0], [60.0, 1765.0], [62.0, 1763.0], [66.0, 1758.0], [65.0, 1764.0], [64.0, 1759.0], [71.0, 1743.0], [70.0, 1777.0], [69.0, 1742.0], [68.0, 1784.0], [75.0, 1767.0], [74.0, 1741.0], [73.0, 1768.0], [72.0, 1735.0], [79.0, 1768.5], [77.0, 1781.0], [76.0, 1767.0], [83.0, 1788.0], [82.0, 1800.0], [81.0, 1811.0], [86.0, 1824.0], [85.0, 1795.0], [91.0, 1832.5], [89.0, 1827.0], [88.0, 1834.6666666666667], [95.0, 1839.0], [94.0, 1828.0], [92.0, 1828.0], [98.0, 1833.0], [97.0, 1866.0], [103.0, 1832.0], [102.0, 1856.0], [101.0, 1827.0], [100.0, 1827.5], [106.0, 1840.0], [105.0, 1832.0], [104.0, 1868.0], [111.0, 1853.5], [109.0, 1853.0], [108.0, 1832.0], [115.0, 1874.0], [113.0, 1899.0], [112.0, 1865.0], [118.0, 1878.5], [116.0, 1868.0], [122.0, 1870.0], [121.0, 1879.0], [126.0, 1899.0], [125.0, 1886.5], [124.0, 1855.0], [135.0, 1910.0], [133.0, 1900.0], [132.0, 1883.0], [131.0, 1883.0], [130.0, 1875.0], [129.0, 1891.6666666666667], [142.0, 1895.0], [139.0, 1900.0], [138.0, 1895.0], [137.0, 1924.5], [151.0, 1884.5], [149.0, 1919.0], [148.0, 1890.0], [147.0, 1894.0], [146.0, 1895.0], [145.0, 1890.0], [144.0, 1890.0], [158.0, 1894.5], [156.0, 1899.0], [155.0, 1898.0], [154.0, 1888.0], [153.0, 1884.0], [167.0, 1898.0], [166.0, 1892.0], [164.0, 1900.3333333333333], [161.0, 1905.0], [174.0, 1897.0], [173.0, 1908.0], [172.0, 1897.5], [170.0, 1892.0], [169.0, 1904.3333333333333], [182.0, 1902.0], [181.0, 1919.0], [180.0, 1935.0], [179.0, 1906.0], [178.0, 1906.0], [177.0, 1924.0], [176.0, 1918.5], [191.0, 1919.0], [190.0, 1914.0], [189.0, 1913.0], [186.0, 1909.0], [185.0, 1916.3333333333333], [199.0, 1917.0], [198.0, 1926.0], [197.0, 1919.0], [196.0, 1925.0], [194.0, 1944.0], [193.0, 1917.0], [192.0, 1933.0], [207.0, 1912.0], [206.0, 1915.6666666666667], [203.0, 1903.0], [202.0, 1903.0], [201.0, 1909.0], [200.0, 1909.0], [215.0, 1912.0], [214.0, 1916.0], [213.0, 1915.0], [212.0, 1910.0], [210.0, 1916.0], [209.0, 1912.0], [223.0, 1924.0], [222.0, 1899.0], [221.0, 1907.0], [220.0, 1886.0], [219.0, 1888.0], [218.0, 1892.0], [217.0, 1892.0], [216.0, 1895.0], [228.0, 315.44444444444446], [231.0, 1067.5], [229.0, 1058.5], [230.0, 1905.0], [227.0, 1903.0], [226.0, 1886.0], [225.0, 1884.0], [224.0, 1884.0], [239.0, 643.25], [235.0, 459.16666666666663], [237.0, 655.7142857142858], [236.0, 135.66666666666666], [238.0, 1905.0], [234.0, 1906.0], [233.0, 1905.0], [232.0, 1911.0], [247.0, 1954.0], [246.0, 1934.0], [245.0, 1934.0], [244.0, 1923.0], [243.0, 1918.0], [242.0, 1911.0], [240.0, 1912.0], [252.0, 1028.0], [255.0, 333.6111111111111], [254.0, 1923.0], [253.0, 1923.0], [251.0, 1942.0], [250.0, 1951.0], [271.0, 1899.0], [257.0, 524.1666666666667], [260.0, 603.2], [261.0, 1907.0], [263.0, 1928.0], [256.0, 1930.0], [262.0, 1905.0], [266.0, 290.0], [270.0, 1905.0], [269.0, 1894.0], [268.0, 1914.0], [259.0, 1915.0], [258.0, 1923.0], [267.0, 1902.0], [265.0, 1949.0], [264.0, 1908.0], [286.0, 1939.0], [275.0, 686.75], [279.0, 840.0], [272.0, 1932.0], [274.0, 1909.0], [273.0, 1919.0], [278.0, 1941.0], [276.0, 1916.0], [280.0, 1384.0], [282.0, 266.8], [285.0, 870.6666666666666], [287.0, 1940.0], [284.0, 1923.6666666666667], [281.0, 1954.0], [301.0, 737.5], [290.0, 857.6666666666666], [289.0, 1136.0], [294.0, 1945.0], [288.0, 1939.0], [291.0, 851.0], [292.0, 328.5], [293.0, 607.8333333333333], [302.0, 1980.0], [297.0, 1971.0], [296.0, 1968.3333333333333], [300.0, 1965.0], [299.0, 1980.0], [298.0, 1965.0], [316.0, 379.5], [305.0, 896.0], [304.0, 1439.6666666666667], [311.0, 1982.0], [310.0, 1987.6666666666667], [306.0, 1161.5], [307.0, 1962.0], [308.0, 350.0], [309.0, 365.6666666666667], [317.0, 1455.6666666666667], [318.0, 1182.0], [319.0, 2024.0], [313.0, 1998.0], [312.0, 2005.0], [315.0, 1996.0], [314.0, 1997.0], [323.0, 690.6], [322.0, 920.6666666666667], [320.0, 2023.0], [334.0, 2016.0], [333.0, 2011.0], [332.0, 2016.0], [329.0, 2019.0], [327.0, 2016.0], [326.0, 2015.0], [325.0, 2026.0], [324.0, 2011.0], [349.0, 674.3333333333333], [337.0, 843.8181818181818], [345.0, 417.0], [350.0, 437.0], [351.0, 2051.5], [348.0, 2017.5], [339.0, 2020.0], [346.0, 2008.0], [344.0, 2012.0], [343.0, 2021.6666666666667], [340.0, 3010.0], [366.0, 990.6666666666666], [358.0, 1511.0], [356.0, 2036.25], [359.0, 2030.0], [352.0, 2044.0], [363.0, 412.5], [367.0, 2079.0], [365.0, 2062.0], [364.0, 2061.5], [362.0, 2062.0], [361.0, 2055.0], [360.0, 2035.0], [381.0, 886.0], [370.0, 1258.5], [369.0, 2062.0], [368.0, 2062.0], [373.0, 776.4], [372.0, 2063.0], [374.0, 2050.0], [375.0, 452.0], [376.0, 1520.0], [379.0, 1255.0], [378.0, 2038.0], [377.0, 2038.0], [382.0, 799.8], [383.0, 1274.5], [380.0, 2044.0], [399.0, 2041.0], [384.0, 1285.0], [388.0, 1030.0], [391.0, 2050.0], [390.0, 2045.5], [395.0, 500.0], [398.0, 2060.0], [397.0, 2056.0], [396.0, 2041.0], [387.0, 2047.0], [386.0, 2047.0], [385.0, 2045.0], [394.0, 2048.0], [393.0, 2057.0], [392.0, 2065.0], [414.0, 566.3333333333334], [402.0, 526.6], [404.0, 1030.3333333333333], [405.0, 2026.0], [407.0, 2033.0], [401.0, 2051.0], [400.0, 2052.0], [406.0, 2027.0], [408.0, 1267.0], [409.0, 565.3333333333334], [415.0, 2010.5], [413.0, 2011.0], [412.0, 2001.0], [403.0, 2036.5], [411.0, 2009.0], [410.0, 2001.5], [429.0, 593.5], [421.0, 716.3333333333334], [420.0, 2024.0], [425.0, 593.5], [426.0, 1456.2], [427.0, 1329.0], [430.0, 1181.4], [428.0, 2062.0], [419.0, 2010.0], [418.0, 2009.0], [416.0, 2009.0], [423.0, 2027.0], [422.0, 2055.0], [434.0, 583.3333333333334], [436.0, 943.5], [437.0, 2056.0], [441.0, 1189.6], [445.0, 640.5], [435.0, 2054.0], [446.0, 2052.0], [443.0, 2042.0], [442.0, 2042.0], [439.0, 2057.0], [433.0, 2045.0], [432.0, 2053.0], [438.0, 2058.0], [448.0, 1569.3333333333333], [463.0, 1481.2], [457.0, 641.1666666666667], [460.0, 2055.5], [451.0, 2057.0], [450.0, 2056.0], [449.0, 2049.0], [458.0, 2067.5], [456.0, 2049.0], [455.0, 2049.0], [454.0, 2064.0], [453.0, 2056.0], [452.0, 2048.0], [467.0, 1041.25], [469.0, 1144.3333333333333], [468.0, 2057.0], [474.0, 1338.75], [478.0, 2091.0], [477.0, 2051.0], [476.0, 2052.5], [475.0, 3068.0], [471.0, 2055.0], [466.0, 2063.5], [464.0, 2064.0], [470.0, 2065.0], [493.0, 2091.0], [483.0, 1175.8], [486.0, 693.75], [481.0, 2073.0], [480.0, 2070.5], [492.0, 960.5], [495.0, 2140.3333333333335], [491.0, 2089.3333333333335], [490.0, 2091.5], [488.0, 2098.0], [484.0, 2081.0], [509.0, 2159.0], [497.0, 966.0], [503.0, 1377.75], [496.0, 2130.0], [501.0, 2159.0], [500.0, 2166.0], [504.0, 579.0], [507.0, 1105.6666666666665], [508.0, 770.375], [499.0, 2166.0], [498.0, 2136.0], [511.0, 550.0], [506.0, 2164.0], [505.0, 2163.0], [518.0, 765.0], [512.0, 1532.4], [514.0, 2166.0], [513.0, 2184.0], [517.0, 2173.5], [515.0, 2176.0], [519.0, 883.8], [538.0, 2193.5], [536.0, 2191.6666666666665], [540.0, 2191.0], [539.0, 2186.0], [541.0, 782.4444444444445], [543.0, 2191.0], [528.0, 2197.0], [542.0, 2199.0], [520.0, 572.0], [521.0, 2176.0], [522.0, 585.0], [526.0, 983.25], [525.0, 2182.0], [524.0, 2188.0], [529.0, 1381.5], [530.0, 1377.5], [533.0, 592.0], [535.0, 2202.0], [534.0, 2192.0], [551.0, 2199.0], [573.0, 1045.5], [553.0, 618.8], [552.0, 2198.0], [554.0, 2195.0], [555.0, 1149.3333333333335], [560.0, 1421.5], [567.0, 834.6249999999999], [566.0, 2204.0], [565.0, 2203.0], [564.0, 2215.0], [562.0, 2216.0], [561.0, 2217.0], [575.0, 2226.6666666666665], [571.0, 2233.0], [569.0, 2228.0], [568.0, 2203.0], [550.0, 2201.0], [549.0, 2216.0], [548.0, 2203.0], [547.0, 2196.0], [546.0, 2188.0], [545.0, 2197.0], [544.0, 2190.0], [559.0, 2227.0], [558.0, 2229.3333333333335], [603.0, 1101.75], [579.0, 1063.25], [578.0, 1443.0], [577.0, 2256.0], [576.0, 2232.0], [580.0, 660.5], [581.0, 1445.0], [585.0, 1470.5], [584.0, 2270.0], [586.0, 992.8], [589.0, 1489.5], [587.0, 2310.0], [590.0, 2318.0], [591.0, 2289.0], [598.0, 1503.0], [599.0, 2272.0], [607.0, 2302.5], [592.0, 2297.0], [595.0, 2298.0], [593.0, 2298.0], [597.0, 2291.0], [596.0, 2293.5], [604.0, 1498.0], [605.0, 1103.5], [602.0, 1758.6666666666667], [600.0, 2285.0], [583.0, 2254.0], [615.0, 1789.0], [616.0, 1040.4], [617.0, 2331.0], [618.0, 1523.75], [619.0, 1686.4], [621.0, 2335.7187500000005], [620.0, 2310.7999999999997], [623.0, 2342.0], [609.0, 2309.0], [608.0, 2301.0], [612.0, 2320.5], [610.0, 2305.0], [614.0, 2324.0], [613.0, 2332.0], [622.0, 2353.0], [626.0, 1270.6666666666665], [625.0, 2336.3333333333335], [628.0, 2333.6], [627.0, 2353.5], [639.0, 2336.0], [638.0, 2351.0], [637.0, 2353.0], [635.0, 1542.5], [636.0, 2088.833333333333], [629.0, 1699.2], [630.0, 1541.5], [631.0, 2344.0], [632.0, 1540.0], [633.0, 2353.0], [634.0, 1199.2857142857144], [669.0, 2451.5], [643.0, 1928.25], [648.0, 1822.0], [649.0, 2352.3333333333335], [651.0, 2350.0], [650.0, 2352.0], [653.0, 2395.0], [652.0, 2371.428571428571], [655.0, 2394.833333333333], [640.0, 2346.0], [642.0, 2319.0], [641.0, 2326.3333333333335], [654.0, 2391.0], [659.0, 2105.1666666666665], [658.0, 2392.0], [657.0, 2392.0], [656.0, 2380.588235294117], [661.0, 2379.8333333333335], [660.0, 2368.9999999999995], [663.0, 2400.95], [662.0, 2376.0], [665.0, 2181.4285714285716], [664.0, 2414.0], [647.0, 2323.0], [646.0, 2319.0], [644.0, 2324.0], [666.0, 2470.0], [671.0, 2450.142857142857], [670.0, 2448.6], [668.0, 2450.7500000000005], [667.0, 2462.0], [698.0, 2469.6], [673.0, 1777.0], [678.0, 2077.777777777778], [677.0, 2453.6666666666665], [676.0, 2451.75], [675.0, 2446.0], [674.0, 2446.833333333333], [679.0, 2449.0], [697.0, 2473.5], [696.0, 2481.0], [699.0, 2482.0], [701.0, 2486.0], [700.0, 2487.5], [680.0, 1199.75], [681.0, 2454.0], [683.0, 2457.5], [682.0, 2454.875], [685.0, 2175.5833333333335], [686.0, 1263.857142857143], [687.0, 1246.909090909091], [672.0, 2451.0], [688.0, 2197.1666666666665], [694.0, 1516.8571428571427], [693.0, 2473.0], [692.0, 2476.0], [691.0, 2491.0], [690.0, 2474.5], [689.0, 2473.5], [695.0, 2482.5], [702.0, 1640.0], [703.0, 2478.0], [708.0, 1295.0], [705.0, 2175.6], [704.0, 2468.3333333333335], [707.0, 2542.5], [710.0, 1886.2777777777778], [709.0, 2526.0], [711.0, 2572.6363636363635], [729.0, 2543.0], [728.0, 2526.6666666666665], [730.0, 2320.6250000000005], [731.0, 1411.0], [732.0, 2544.5], [734.0, 2579.0], [721.0, 2569.0], [720.0, 2583.285714285714], [723.0, 2566.5], [722.0, 2568.5555555555557], [733.0, 2560.4285714285716], [713.0, 1258.25], [712.0, 2585.6666666666665], [714.0, 2003.0], [716.0, 1998.7777777777778], [718.0, 2584.0], [717.0, 2581.0], [719.0, 2587.4444444444443], [724.0, 2287.7692307692305], [725.0, 1539.8333333333333], [727.0, 1973.0], [726.0, 2533.0], [762.0, 847.0], [742.0, 2269.4], [744.0, 828.0], [745.0, 2681.875], [747.0, 2727.108108108108], [746.0, 2686.0], [749.0, 2835.5454545454545], [748.0, 2827.9090909090905], [751.0, 2833.75], [737.0, 2580.0], [736.0, 2567.0], [739.0, 2591.3333333333335], [738.0, 2575.0], [741.0, 2623.0], [740.0, 2596.5], [750.0, 2826.6666666666665], [754.0, 2346.0], [756.0, 1993.857142857143], [755.0, 2864.0], [759.0, 2861.0], [760.0, 1349.5], [743.0, 2655.4285714285716], [761.0, 2852.0], [766.0, 1851.0], [767.0, 2845.0], [753.0, 2840.5], [752.0, 2865.3333333333335], [765.0, 2852.0], [764.0, 2868.0], [763.0, 2860.6666666666665], [796.0, 2867.3333333333335], [772.0, 1055.8], [771.0, 2848.0], [770.0, 2856.6666666666665], [769.0, 2860.0], [768.0, 2857.5], [773.0, 2846.5], [775.0, 2830.5], [774.0, 2849.0], [793.0, 2874.0], [792.0, 2866.0], [777.0, 858.0], [779.0, 2847.875], [782.0, 2846.6], [780.0, 2855.0], [783.0, 2051.2], [784.0, 861.0], [785.0, 2832.5], [787.0, 2871.3333333333335], [786.0, 2852.0], [789.0, 2887.0], [788.0, 2865.0], [791.0, 2884.0], [790.0, 2867.0], [798.0, 2204.6666666666665], [797.0, 2876.0], [795.0, 2863.0], [794.0, 2865.25], [828.0, 2421.5], [800.0, 1869.8333333333333], [807.0, 2445.8888888888887], [806.0, 2886.0], [805.0, 2880.0], [804.0, 2873.25], [802.0, 2876.0], [801.0, 2868.6666666666665], [825.0, 2933.5], [827.0, 2932.0], [826.0, 2936.5], [808.0, 1884.5], [811.0, 2906.5], [809.0, 2930.0], [813.0, 2929.5], [812.0, 2914.0], [815.0, 1918.0], [814.0, 2930.6666666666665], [819.0, 1398.0], [818.0, 2928.0], [817.0, 2940.3333333333335], [816.0, 2936.0], [821.0, 2939.0], [820.0, 2937.4], [823.0, 2932.0], [822.0, 2936.8571428571427], [829.0, 1403.25], [831.0, 2926.5], [830.0, 2928.0], [834.0, 1912.5], [840.0, 1904.5], [841.0, 1895.5], [842.0, 2418.0], [843.0, 2959.0], [845.0, 2958.0], [844.0, 2936.6666666666665], [847.0, 2945.5], [833.0, 2928.0], [832.0, 2931.0], [846.0, 2934.5], [857.0, 2169.1875000000005], [856.0, 2920.0], [839.0, 2917.0], [838.0, 2899.5], [837.0, 2919.4], [835.0, 2931.0], [858.0, 2953.4285714285716], [859.0, 2146.4], [863.0, 2978.0], [849.0, 2951.5], [848.0, 2956.6666666666665], [851.0, 2940.0], [850.0, 2941.0], [853.0, 2931.5], [852.0, 2930.6666666666665], [855.0, 2930.75], [854.0, 2920.3333333333335], [861.0, 2968.0], [860.0, 2965.3333333333335], [894.0, 2935.833333333333], [873.0, 924.0], [872.0, 2955.0], [875.0, 2940.0], [874.0, 2956.3846153846152], [877.0, 2962.3333333333335], [876.0, 2969.0], [879.0, 2985.0], [866.0, 2979.0], [865.0, 2983.6666666666665], [868.0, 2964.25], [867.0, 2966.925925925925], [871.0, 2974.777777777778], [869.0, 2982.0], [878.0, 2992.875], [888.0, 2709.125], [890.0, 2831.8], [895.0, 2940.2], [881.0, 2999.2307692307695], [880.0, 2991.714285714286], [883.0, 2992.3636363636365], [882.0, 3005.3333333333335], [893.0, 2951.0], [887.0, 2971.5], [886.0, 2961.2105263157896], [885.0, 2961.086956521739], [884.0, 2973.5], [902.0, 2941.285714285714], [925.0, 2586.285714285714], [912.0, 2234.333333333333], [909.0, 935.0], [908.0, 2911.1], [907.0, 2916.3333333333335], [906.0, 2909.75], [905.0, 2928.6250000000005], [904.0, 2938.0], [911.0, 2886.2727272727275], [897.0, 2960.0], [896.0, 2963.3333333333335], [899.0, 2941.6774193548395], [898.0, 2955.25], [901.0, 2950.4444444444443], [900.0, 2958.6875], [903.0, 2937.1428571428573], [910.0, 2894.0], [913.0, 2109.4], [914.0, 1266.1666666666665], [919.0, 2624.4999999999995], [918.0, 2895.75], [917.0, 2882.6666666666665], [916.0, 2894.2857142857147], [915.0, 2913.0], [921.0, 1441.5833333333333], [922.0, 2678.1000000000004], [924.0, 2847.0], [923.0, 2841.8571428571427], [926.0, 2475.4], [927.0, 2212.1111111111113], [954.0, 1893.0], [931.0, 1712.6], [930.0, 2845.0], [929.0, 2844.0], [928.0, 2854.0], [932.0, 2840.5], [934.0, 2826.0], [933.0, 2837.6], [943.0, 2873.266666666667], [942.0, 2885.0], [941.0, 2867.8888888888887], [940.0, 2860.4], [939.0, 3103.5], [938.0, 2858.5], [937.0, 2835.0], [936.0, 2834.0], [935.0, 2002.2222222222222], [944.0, 2576.516129032258], [947.0, 1932.5], [946.0, 2898.75], [945.0, 2900.8], [949.0, 2869.6923076923076], [948.0, 2892.6666666666665], [951.0, 2868.0], [950.0, 2868.0], [953.0, 2735.733333333333], [958.0, 2708.6875], [959.0, 1896.5], [957.0, 2810.0], [956.0, 2806.0], [989.0, 2745.5], [985.0, 2304.125], [961.0, 1900.4999999999998], [975.0, 2796.75], [960.0, 2826.5], [973.0, 2828.3333333333335], [972.0, 2804.0], [971.0, 2804.625], [969.0, 2801.0], [991.0, 2745.1666666666665], [976.0, 2779.5], [978.0, 2832.0], [977.0, 2782.0], [980.0, 2808.0], [979.0, 2774.0], [988.0, 2743.0], [987.0, 2746.75], [986.0, 2754.0], [984.0, 2747.5], [967.0, 2788.75], [966.0, 2791.0], [965.0, 2791.1666666666665], [964.0, 2792.0], [963.0, 2794.6666666666665], [962.0, 2803.5], [981.0, 2845.75], [982.0, 2757.0], [996.0, 2759.4999999999995], [999.0, 2540.125], [1000.0, 2622.540409631886], [998.0, 2761.666666666667], [997.0, 2774.75], [995.0, 2755.0], [994.0, 2770.0], [993.0, 2749.0], [992.0, 2757.0], [1.0, 1196.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[904.2524999999986, 2499.5734000000084]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31833.333333333332, "minX": 1.66955688E12, "maxY": 1.8714833333333332E7, "series": [{"data": [[1.66955688E12, 1.8714833333333332E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66955688E12, 31833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955688E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2499.5734000000084, "minX": 1.66955688E12, "maxY": 2499.5734000000084, "series": [{"data": [[1.66955688E12, 2499.5734000000084]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955688E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2475.068399999993, "minX": 1.66955688E12, "maxY": 2475.068399999993, "series": [{"data": [[1.66955688E12, 2475.068399999993]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955688E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.490699999999977, "minX": 1.66955688E12, "maxY": 11.490699999999977, "series": [{"data": [[1.66955688E12, 11.490699999999977]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955688E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 70.0, "minX": 1.66955688E12, "maxY": 3891.0, "series": [{"data": [[1.66955688E12, 3891.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66955688E12, 2904.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66955688E12, 2983.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66955688E12, 2939.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66955688E12, 70.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66955688E12, 2710.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955688E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 564.5, "minX": 232.0, "maxY": 2924.0, "series": [{"data": [[232.0, 1871.5], [317.0, 2804.0], [335.0, 2709.0], [323.0, 2782.0], [347.0, 2854.0], [339.0, 2682.0], [349.0, 2651.5], [358.0, 564.5], [366.0, 2043.0], [361.0, 2806.0], [364.0, 2748.0], [354.0, 2924.0], [360.0, 2050.0], [376.0, 2396.0], [369.0, 2628.0], [374.0, 2653.5], [375.0, 2619.0], [372.0, 2884.0], [380.0, 2728.0], [371.0, 2600.0], [398.0, 2296.5], [393.0, 2571.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 398.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 538.0, "minX": 232.0, "maxY": 2895.0, "series": [{"data": [[232.0, 1841.5], [317.0, 2783.0], [335.0, 2683.0], [323.0, 2758.0], [347.0, 2829.0], [339.0, 2655.0], [349.0, 2630.5], [358.0, 538.0], [366.0, 2015.5], [361.0, 2784.0], [364.0, 2720.0], [354.0, 2895.0], [360.0, 2028.5], [376.0, 2377.5], [369.0, 2603.0], [374.0, 2633.0], [375.0, 2596.0], [372.0, 2856.0], [380.0, 2701.0], [371.0, 2577.0], [398.0, 2284.5], [393.0, 2545.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 398.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955688E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955688E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955688E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955688E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955688E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955688E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955688E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955688E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955688E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66955688E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66955688E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955688E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

