/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 52.0, "minX": 0.0, "maxY": 3871.0, "series": [{"data": [[0.0, 52.0], [0.1, 90.0], [0.2, 112.0], [0.3, 177.0], [0.4, 199.0], [0.5, 226.0], [0.6, 240.0], [0.7, 267.0], [0.8, 295.0], [0.9, 329.0], [1.0, 355.0], [1.1, 381.0], [1.2, 430.0], [1.3, 460.0], [1.4, 502.0], [1.5, 522.0], [1.6, 553.0], [1.7, 569.0], [1.8, 593.0], [1.9, 638.0], [2.0, 670.0], [2.1, 700.0], [2.2, 732.0], [2.3, 761.0], [2.4, 799.0], [2.5, 832.0], [2.6, 841.0], [2.7, 848.0], [2.8, 858.0], [2.9, 866.0], [3.0, 883.0], [3.1, 890.0], [3.2, 904.0], [3.3, 918.0], [3.4, 933.0], [3.5, 947.0], [3.6, 975.0], [3.7, 980.0], [3.8, 991.0], [3.9, 1004.0], [4.0, 1033.0], [4.1, 1058.0], [4.2, 1065.0], [4.3, 1087.0], [4.4, 1105.0], [4.5, 1116.0], [4.6, 1128.0], [4.7, 1143.0], [4.8, 1165.0], [4.9, 1191.0], [5.0, 1220.0], [5.1, 1236.0], [5.2, 1245.0], [5.3, 1249.0], [5.4, 1255.0], [5.5, 1274.0], [5.6, 1296.0], [5.7, 1313.0], [5.8, 1333.0], [5.9, 1354.0], [6.0, 1368.0], [6.1, 1382.0], [6.2, 1401.0], [6.3, 1411.0], [6.4, 1422.0], [6.5, 1429.0], [6.6, 1439.0], [6.7, 1470.0], [6.8, 1477.0], [6.9, 1490.0], [7.0, 1497.0], [7.1, 1533.0], [7.2, 1550.0], [7.3, 1562.0], [7.4, 1571.0], [7.5, 1578.0], [7.6, 1589.0], [7.7, 1592.0], [7.8, 1596.0], [7.9, 1602.0], [8.0, 1610.0], [8.1, 1621.0], [8.2, 1658.0], [8.3, 1665.0], [8.4, 1675.0], [8.5, 1693.0], [8.6, 1704.0], [8.7, 1712.0], [8.8, 1724.0], [8.9, 1732.0], [9.0, 1763.0], [9.1, 1790.0], [9.2, 1820.0], [9.3, 1838.0], [9.4, 1846.0], [9.5, 1852.0], [9.6, 1859.0], [9.7, 1864.0], [9.8, 1871.0], [9.9, 1881.0], [10.0, 1886.0], [10.1, 1891.0], [10.2, 1898.0], [10.3, 1901.0], [10.4, 1905.0], [10.5, 1908.0], [10.6, 1916.0], [10.7, 1924.0], [10.8, 1931.0], [10.9, 1937.0], [11.0, 1940.0], [11.1, 1944.0], [11.2, 1948.0], [11.3, 1956.0], [11.4, 1961.0], [11.5, 1970.0], [11.6, 1976.0], [11.7, 1981.0], [11.8, 1987.0], [11.9, 1993.0], [12.0, 1997.0], [12.1, 2002.0], [12.2, 2011.0], [12.3, 2013.0], [12.4, 2015.0], [12.5, 2019.0], [12.6, 2025.0], [12.7, 2031.0], [12.8, 2034.0], [12.9, 2043.0], [13.0, 2051.0], [13.1, 2057.0], [13.2, 2062.0], [13.3, 2069.0], [13.4, 2076.0], [13.5, 2087.0], [13.6, 2101.0], [13.7, 2110.0], [13.8, 2124.0], [13.9, 2135.0], [14.0, 2141.0], [14.1, 2146.0], [14.2, 2162.0], [14.3, 2173.0], [14.4, 2174.0], [14.5, 2176.0], [14.6, 2179.0], [14.7, 2181.0], [14.8, 2185.0], [14.9, 2189.0], [15.0, 2193.0], [15.1, 2195.0], [15.2, 2200.0], [15.3, 2202.0], [15.4, 2205.0], [15.5, 2210.0], [15.6, 2219.0], [15.7, 2225.0], [15.8, 2231.0], [15.9, 2240.0], [16.0, 2245.0], [16.1, 2256.0], [16.2, 2280.0], [16.3, 2291.0], [16.4, 2294.0], [16.5, 2300.0], [16.6, 2306.0], [16.7, 2323.0], [16.8, 2331.0], [16.9, 2337.0], [17.0, 2350.0], [17.1, 2355.0], [17.2, 2359.0], [17.3, 2364.0], [17.4, 2369.0], [17.5, 2373.0], [17.6, 2380.0], [17.7, 2384.0], [17.8, 2391.0], [17.9, 2399.0], [18.0, 2406.0], [18.1, 2417.0], [18.2, 2426.0], [18.3, 2438.0], [18.4, 2444.0], [18.5, 2451.0], [18.6, 2456.0], [18.7, 2465.0], [18.8, 2472.0], [18.9, 2476.0], [19.0, 2480.0], [19.1, 2483.0], [19.2, 2485.0], [19.3, 2495.0], [19.4, 2500.0], [19.5, 2503.0], [19.6, 2511.0], [19.7, 2516.0], [19.8, 2517.0], [19.9, 2520.0], [20.0, 2522.0], [20.1, 2524.0], [20.2, 2525.0], [20.3, 2527.0], [20.4, 2528.0], [20.5, 2531.0], [20.6, 2533.0], [20.7, 2535.0], [20.8, 2536.0], [20.9, 2538.0], [21.0, 2539.0], [21.1, 2540.0], [21.2, 2542.0], [21.3, 2543.0], [21.4, 2543.0], [21.5, 2545.0], [21.6, 2546.0], [21.7, 2548.0], [21.8, 2550.0], [21.9, 2551.0], [22.0, 2552.0], [22.1, 2553.0], [22.2, 2554.0], [22.3, 2555.0], [22.4, 2558.0], [22.5, 2560.0], [22.6, 2561.0], [22.7, 2562.0], [22.8, 2563.0], [22.9, 2564.0], [23.0, 2565.0], [23.1, 2566.0], [23.2, 2567.0], [23.3, 2569.0], [23.4, 2571.0], [23.5, 2572.0], [23.6, 2572.0], [23.7, 2573.0], [23.8, 2574.0], [23.9, 2575.0], [24.0, 2576.0], [24.1, 2578.0], [24.2, 2579.0], [24.3, 2580.0], [24.4, 2581.0], [24.5, 2583.0], [24.6, 2583.0], [24.7, 2584.0], [24.8, 2586.0], [24.9, 2586.0], [25.0, 2587.0], [25.1, 2588.0], [25.2, 2589.0], [25.3, 2590.0], [25.4, 2591.0], [25.5, 2593.0], [25.6, 2594.0], [25.7, 2596.0], [25.8, 2597.0], [25.9, 2598.0], [26.0, 2600.0], [26.1, 2600.0], [26.2, 2601.0], [26.3, 2602.0], [26.4, 2603.0], [26.5, 2603.0], [26.6, 2604.0], [26.7, 2604.0], [26.8, 2605.0], [26.9, 2605.0], [27.0, 2606.0], [27.1, 2607.0], [27.2, 2608.0], [27.3, 2608.0], [27.4, 2609.0], [27.5, 2609.0], [27.6, 2610.0], [27.7, 2611.0], [27.8, 2612.0], [27.9, 2612.0], [28.0, 2613.0], [28.1, 2614.0], [28.2, 2614.0], [28.3, 2615.0], [28.4, 2615.0], [28.5, 2616.0], [28.6, 2616.0], [28.7, 2617.0], [28.8, 2617.0], [28.9, 2618.0], [29.0, 2618.0], [29.1, 2619.0], [29.2, 2619.0], [29.3, 2620.0], [29.4, 2621.0], [29.5, 2621.0], [29.6, 2622.0], [29.7, 2622.0], [29.8, 2623.0], [29.9, 2623.0], [30.0, 2624.0], [30.1, 2624.0], [30.2, 2624.0], [30.3, 2624.0], [30.4, 2625.0], [30.5, 2625.0], [30.6, 2626.0], [30.7, 2626.0], [30.8, 2627.0], [30.9, 2627.0], [31.0, 2628.0], [31.1, 2628.0], [31.2, 2628.0], [31.3, 2629.0], [31.4, 2629.0], [31.5, 2629.0], [31.6, 2630.0], [31.7, 2630.0], [31.8, 2630.0], [31.9, 2631.0], [32.0, 2631.0], [32.1, 2631.0], [32.2, 2632.0], [32.3, 2632.0], [32.4, 2632.0], [32.5, 2632.0], [32.6, 2632.0], [32.7, 2633.0], [32.8, 2633.0], [32.9, 2634.0], [33.0, 2634.0], [33.1, 2635.0], [33.2, 2635.0], [33.3, 2635.0], [33.4, 2636.0], [33.5, 2636.0], [33.6, 2636.0], [33.7, 2636.0], [33.8, 2637.0], [33.9, 2637.0], [34.0, 2638.0], [34.1, 2638.0], [34.2, 2638.0], [34.3, 2638.0], [34.4, 2639.0], [34.5, 2639.0], [34.6, 2640.0], [34.7, 2640.0], [34.8, 2640.0], [34.9, 2641.0], [35.0, 2641.0], [35.1, 2641.0], [35.2, 2642.0], [35.3, 2642.0], [35.4, 2642.0], [35.5, 2643.0], [35.6, 2643.0], [35.7, 2643.0], [35.8, 2644.0], [35.9, 2644.0], [36.0, 2644.0], [36.1, 2644.0], [36.2, 2644.0], [36.3, 2645.0], [36.4, 2645.0], [36.5, 2645.0], [36.6, 2645.0], [36.7, 2645.0], [36.8, 2646.0], [36.9, 2646.0], [37.0, 2646.0], [37.1, 2647.0], [37.2, 2647.0], [37.3, 2647.0], [37.4, 2647.0], [37.5, 2647.0], [37.6, 2648.0], [37.7, 2648.0], [37.8, 2648.0], [37.9, 2648.0], [38.0, 2648.0], [38.1, 2648.0], [38.2, 2649.0], [38.3, 2649.0], [38.4, 2649.0], [38.5, 2649.0], [38.6, 2650.0], [38.7, 2650.0], [38.8, 2650.0], [38.9, 2650.0], [39.0, 2651.0], [39.1, 2651.0], [39.2, 2651.0], [39.3, 2651.0], [39.4, 2651.0], [39.5, 2652.0], [39.6, 2652.0], [39.7, 2652.0], [39.8, 2652.0], [39.9, 2652.0], [40.0, 2652.0], [40.1, 2652.0], [40.2, 2652.0], [40.3, 2653.0], [40.4, 2653.0], [40.5, 2653.0], [40.6, 2653.0], [40.7, 2654.0], [40.8, 2654.0], [40.9, 2654.0], [41.0, 2654.0], [41.1, 2655.0], [41.2, 2655.0], [41.3, 2655.0], [41.4, 2655.0], [41.5, 2655.0], [41.6, 2655.0], [41.7, 2656.0], [41.8, 2656.0], [41.9, 2656.0], [42.0, 2656.0], [42.1, 2656.0], [42.2, 2657.0], [42.3, 2657.0], [42.4, 2657.0], [42.5, 2657.0], [42.6, 2658.0], [42.7, 2658.0], [42.8, 2658.0], [42.9, 2658.0], [43.0, 2659.0], [43.1, 2659.0], [43.2, 2659.0], [43.3, 2659.0], [43.4, 2659.0], [43.5, 2659.0], [43.6, 2660.0], [43.7, 2660.0], [43.8, 2660.0], [43.9, 2660.0], [44.0, 2660.0], [44.1, 2660.0], [44.2, 2661.0], [44.3, 2661.0], [44.4, 2661.0], [44.5, 2662.0], [44.6, 2662.0], [44.7, 2662.0], [44.8, 2662.0], [44.9, 2663.0], [45.0, 2663.0], [45.1, 2663.0], [45.2, 2663.0], [45.3, 2664.0], [45.4, 2664.0], [45.5, 2664.0], [45.6, 2664.0], [45.7, 2664.0], [45.8, 2664.0], [45.9, 2665.0], [46.0, 2665.0], [46.1, 2665.0], [46.2, 2665.0], [46.3, 2665.0], [46.4, 2666.0], [46.5, 2666.0], [46.6, 2666.0], [46.7, 2667.0], [46.8, 2667.0], [46.9, 2667.0], [47.0, 2667.0], [47.1, 2667.0], [47.2, 2668.0], [47.3, 2668.0], [47.4, 2668.0], [47.5, 2668.0], [47.6, 2668.0], [47.7, 2668.0], [47.8, 2668.0], [47.9, 2669.0], [48.0, 2669.0], [48.1, 2669.0], [48.2, 2670.0], [48.3, 2670.0], [48.4, 2670.0], [48.5, 2671.0], [48.6, 2671.0], [48.7, 2671.0], [48.8, 2671.0], [48.9, 2672.0], [49.0, 2672.0], [49.1, 2672.0], [49.2, 2672.0], [49.3, 2673.0], [49.4, 2673.0], [49.5, 2673.0], [49.6, 2673.0], [49.7, 2674.0], [49.8, 2674.0], [49.9, 2675.0], [50.0, 2675.0], [50.1, 2675.0], [50.2, 2675.0], [50.3, 2676.0], [50.4, 2676.0], [50.5, 2676.0], [50.6, 2676.0], [50.7, 2676.0], [50.8, 2676.0], [50.9, 2677.0], [51.0, 2677.0], [51.1, 2677.0], [51.2, 2678.0], [51.3, 2678.0], [51.4, 2678.0], [51.5, 2679.0], [51.6, 2679.0], [51.7, 2679.0], [51.8, 2679.0], [51.9, 2680.0], [52.0, 2680.0], [52.1, 2680.0], [52.2, 2680.0], [52.3, 2680.0], [52.4, 2681.0], [52.5, 2681.0], [52.6, 2682.0], [52.7, 2682.0], [52.8, 2682.0], [52.9, 2683.0], [53.0, 2683.0], [53.1, 2683.0], [53.2, 2683.0], [53.3, 2683.0], [53.4, 2684.0], [53.5, 2684.0], [53.6, 2684.0], [53.7, 2684.0], [53.8, 2685.0], [53.9, 2685.0], [54.0, 2685.0], [54.1, 2685.0], [54.2, 2685.0], [54.3, 2686.0], [54.4, 2686.0], [54.5, 2686.0], [54.6, 2687.0], [54.7, 2687.0], [54.8, 2687.0], [54.9, 2688.0], [55.0, 2688.0], [55.1, 2688.0], [55.2, 2688.0], [55.3, 2689.0], [55.4, 2689.0], [55.5, 2690.0], [55.6, 2690.0], [55.7, 2691.0], [55.8, 2691.0], [55.9, 2691.0], [56.0, 2692.0], [56.1, 2692.0], [56.2, 2692.0], [56.3, 2692.0], [56.4, 2693.0], [56.5, 2693.0], [56.6, 2694.0], [56.7, 2694.0], [56.8, 2695.0], [56.9, 2695.0], [57.0, 2695.0], [57.1, 2695.0], [57.2, 2696.0], [57.3, 2696.0], [57.4, 2696.0], [57.5, 2697.0], [57.6, 2697.0], [57.7, 2698.0], [57.8, 2698.0], [57.9, 2698.0], [58.0, 2699.0], [58.1, 2699.0], [58.2, 2699.0], [58.3, 2700.0], [58.4, 2700.0], [58.5, 2700.0], [58.6, 2701.0], [58.7, 2701.0], [58.8, 2702.0], [58.9, 2702.0], [59.0, 2702.0], [59.1, 2703.0], [59.2, 2703.0], [59.3, 2703.0], [59.4, 2704.0], [59.5, 2704.0], [59.6, 2704.0], [59.7, 2704.0], [59.8, 2705.0], [59.9, 2705.0], [60.0, 2706.0], [60.1, 2706.0], [60.2, 2707.0], [60.3, 2707.0], [60.4, 2707.0], [60.5, 2707.0], [60.6, 2708.0], [60.7, 2708.0], [60.8, 2708.0], [60.9, 2708.0], [61.0, 2709.0], [61.1, 2709.0], [61.2, 2709.0], [61.3, 2710.0], [61.4, 2710.0], [61.5, 2710.0], [61.6, 2711.0], [61.7, 2711.0], [61.8, 2711.0], [61.9, 2711.0], [62.0, 2711.0], [62.1, 2712.0], [62.2, 2712.0], [62.3, 2712.0], [62.4, 2713.0], [62.5, 2713.0], [62.6, 2713.0], [62.7, 2714.0], [62.8, 2714.0], [62.9, 2715.0], [63.0, 2715.0], [63.1, 2715.0], [63.2, 2716.0], [63.3, 2716.0], [63.4, 2716.0], [63.5, 2716.0], [63.6, 2717.0], [63.7, 2717.0], [63.8, 2717.0], [63.9, 2718.0], [64.0, 2719.0], [64.1, 2719.0], [64.2, 2719.0], [64.3, 2719.0], [64.4, 2719.0], [64.5, 2720.0], [64.6, 2720.0], [64.7, 2720.0], [64.8, 2720.0], [64.9, 2720.0], [65.0, 2721.0], [65.1, 2721.0], [65.2, 2722.0], [65.3, 2722.0], [65.4, 2722.0], [65.5, 2723.0], [65.6, 2723.0], [65.7, 2723.0], [65.8, 2724.0], [65.9, 2724.0], [66.0, 2724.0], [66.1, 2725.0], [66.2, 2725.0], [66.3, 2726.0], [66.4, 2726.0], [66.5, 2727.0], [66.6, 2727.0], [66.7, 2727.0], [66.8, 2728.0], [66.9, 2728.0], [67.0, 2728.0], [67.1, 2728.0], [67.2, 2728.0], [67.3, 2729.0], [67.4, 2729.0], [67.5, 2730.0], [67.6, 2730.0], [67.7, 2730.0], [67.8, 2731.0], [67.9, 2731.0], [68.0, 2732.0], [68.1, 2732.0], [68.2, 2732.0], [68.3, 2732.0], [68.4, 2733.0], [68.5, 2733.0], [68.6, 2734.0], [68.7, 2735.0], [68.8, 2735.0], [68.9, 2736.0], [69.0, 2736.0], [69.1, 2736.0], [69.2, 2737.0], [69.3, 2737.0], [69.4, 2738.0], [69.5, 2739.0], [69.6, 2739.0], [69.7, 2739.0], [69.8, 2740.0], [69.9, 2740.0], [70.0, 2740.0], [70.1, 2741.0], [70.2, 2741.0], [70.3, 2742.0], [70.4, 2742.0], [70.5, 2743.0], [70.6, 2743.0], [70.7, 2744.0], [70.8, 2744.0], [70.9, 2744.0], [71.0, 2744.0], [71.1, 2744.0], [71.2, 2745.0], [71.3, 2745.0], [71.4, 2746.0], [71.5, 2747.0], [71.6, 2747.0], [71.7, 2747.0], [71.8, 2748.0], [71.9, 2748.0], [72.0, 2749.0], [72.1, 2750.0], [72.2, 2751.0], [72.3, 2752.0], [72.4, 2752.0], [72.5, 2753.0], [72.6, 2753.0], [72.7, 2754.0], [72.8, 2754.0], [72.9, 2755.0], [73.0, 2756.0], [73.1, 2756.0], [73.2, 2757.0], [73.3, 2758.0], [73.4, 2759.0], [73.5, 2760.0], [73.6, 2760.0], [73.7, 2761.0], [73.8, 2761.0], [73.9, 2762.0], [74.0, 2762.0], [74.1, 2763.0], [74.2, 2764.0], [74.3, 2764.0], [74.4, 2764.0], [74.5, 2765.0], [74.6, 2766.0], [74.7, 2767.0], [74.8, 2768.0], [74.9, 2768.0], [75.0, 2769.0], [75.1, 2769.0], [75.2, 2770.0], [75.3, 2771.0], [75.4, 2771.0], [75.5, 2772.0], [75.6, 2772.0], [75.7, 2772.0], [75.8, 2773.0], [75.9, 2774.0], [76.0, 2775.0], [76.1, 2775.0], [76.2, 2776.0], [76.3, 2776.0], [76.4, 2777.0], [76.5, 2777.0], [76.6, 2778.0], [76.7, 2778.0], [76.8, 2779.0], [76.9, 2779.0], [77.0, 2780.0], [77.1, 2780.0], [77.2, 2781.0], [77.3, 2781.0], [77.4, 2782.0], [77.5, 2782.0], [77.6, 2783.0], [77.7, 2783.0], [77.8, 2784.0], [77.9, 2784.0], [78.0, 2784.0], [78.1, 2785.0], [78.2, 2785.0], [78.3, 2785.0], [78.4, 2786.0], [78.5, 2787.0], [78.6, 2787.0], [78.7, 2788.0], [78.8, 2788.0], [78.9, 2788.0], [79.0, 2788.0], [79.1, 2789.0], [79.2, 2789.0], [79.3, 2789.0], [79.4, 2790.0], [79.5, 2790.0], [79.6, 2791.0], [79.7, 2791.0], [79.8, 2792.0], [79.9, 2792.0], [80.0, 2792.0], [80.1, 2793.0], [80.2, 2794.0], [80.3, 2794.0], [80.4, 2795.0], [80.5, 2795.0], [80.6, 2796.0], [80.7, 2796.0], [80.8, 2796.0], [80.9, 2797.0], [81.0, 2797.0], [81.1, 2797.0], [81.2, 2798.0], [81.3, 2799.0], [81.4, 2799.0], [81.5, 2799.0], [81.6, 2800.0], [81.7, 2800.0], [81.8, 2800.0], [81.9, 2801.0], [82.0, 2801.0], [82.1, 2802.0], [82.2, 2802.0], [82.3, 2803.0], [82.4, 2803.0], [82.5, 2803.0], [82.6, 2803.0], [82.7, 2804.0], [82.8, 2804.0], [82.9, 2804.0], [83.0, 2805.0], [83.1, 2805.0], [83.2, 2806.0], [83.3, 2806.0], [83.4, 2807.0], [83.5, 2807.0], [83.6, 2808.0], [83.7, 2808.0], [83.8, 2809.0], [83.9, 2809.0], [84.0, 2810.0], [84.1, 2810.0], [84.2, 2811.0], [84.3, 2811.0], [84.4, 2811.0], [84.5, 2812.0], [84.6, 2812.0], [84.7, 2812.0], [84.8, 2812.0], [84.9, 2813.0], [85.0, 2813.0], [85.1, 2813.0], [85.2, 2814.0], [85.3, 2815.0], [85.4, 2815.0], [85.5, 2815.0], [85.6, 2815.0], [85.7, 2816.0], [85.8, 2816.0], [85.9, 2816.0], [86.0, 2817.0], [86.1, 2817.0], [86.2, 2817.0], [86.3, 2818.0], [86.4, 2819.0], [86.5, 2819.0], [86.6, 2819.0], [86.7, 2820.0], [86.8, 2820.0], [86.9, 2820.0], [87.0, 2820.0], [87.1, 2821.0], [87.2, 2821.0], [87.3, 2822.0], [87.4, 2822.0], [87.5, 2823.0], [87.6, 2823.0], [87.7, 2823.0], [87.8, 2824.0], [87.9, 2824.0], [88.0, 2824.0], [88.1, 2824.0], [88.2, 2825.0], [88.3, 2825.0], [88.4, 2826.0], [88.5, 2826.0], [88.6, 2827.0], [88.7, 2828.0], [88.8, 2828.0], [88.9, 2828.0], [89.0, 2828.0], [89.1, 2829.0], [89.2, 2829.0], [89.3, 2830.0], [89.4, 2831.0], [89.5, 2831.0], [89.6, 2831.0], [89.7, 2832.0], [89.8, 2832.0], [89.9, 2833.0], [90.0, 2833.0], [90.1, 2834.0], [90.2, 2834.0], [90.3, 2835.0], [90.4, 2835.0], [90.5, 2836.0], [90.6, 2836.0], [90.7, 2837.0], [90.8, 2837.0], [90.9, 2838.0], [91.0, 2838.0], [91.1, 2839.0], [91.2, 2839.0], [91.3, 2840.0], [91.4, 2840.0], [91.5, 2840.0], [91.6, 2841.0], [91.7, 2841.0], [91.8, 2842.0], [91.9, 2843.0], [92.0, 2843.0], [92.1, 2843.0], [92.2, 2844.0], [92.3, 2844.0], [92.4, 2845.0], [92.5, 2845.0], [92.6, 2846.0], [92.7, 2847.0], [92.8, 2847.0], [92.9, 2848.0], [93.0, 2848.0], [93.1, 2848.0], [93.2, 2849.0], [93.3, 2849.0], [93.4, 2850.0], [93.5, 2850.0], [93.6, 2851.0], [93.7, 2851.0], [93.8, 2852.0], [93.9, 2852.0], [94.0, 2852.0], [94.1, 2853.0], [94.2, 2854.0], [94.3, 2855.0], [94.4, 2855.0], [94.5, 2856.0], [94.6, 2856.0], [94.7, 2856.0], [94.8, 2857.0], [94.9, 2858.0], [95.0, 2858.0], [95.1, 2859.0], [95.2, 2860.0], [95.3, 2860.0], [95.4, 2861.0], [95.5, 2861.0], [95.6, 2862.0], [95.7, 2863.0], [95.8, 2864.0], [95.9, 2864.0], [96.0, 2864.0], [96.1, 2865.0], [96.2, 2865.0], [96.3, 2866.0], [96.4, 2867.0], [96.5, 2867.0], [96.6, 2868.0], [96.7, 2869.0], [96.8, 2870.0], [96.9, 2871.0], [97.0, 2872.0], [97.1, 2872.0], [97.2, 2872.0], [97.3, 2873.0], [97.4, 2874.0], [97.5, 2875.0], [97.6, 2876.0], [97.7, 2876.0], [97.8, 2877.0], [97.9, 2878.0], [98.0, 2879.0], [98.1, 2879.0], [98.2, 2881.0], [98.3, 2883.0], [98.4, 2883.0], [98.5, 2884.0], [98.6, 2885.0], [98.7, 2887.0], [98.8, 2888.0], [98.9, 2891.0], [99.0, 2892.0], [99.1, 2896.0], [99.2, 2898.0], [99.3, 2900.0], [99.4, 2903.0], [99.5, 2906.0], [99.6, 2913.0], [99.7, 2920.0], [99.8, 3230.0], [99.9, 3659.0], [100.0, 3871.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3225.0, "series": [{"data": [[0.0, 17.0], [600.0, 29.0], [700.0, 32.0], [800.0, 77.0], [900.0, 67.0], [1000.0, 50.0], [1100.0, 56.0], [1200.0, 71.0], [1300.0, 55.0], [1400.0, 84.0], [1500.0, 86.0], [100.0, 23.0], [1600.0, 66.0], [1700.0, 62.0], [1800.0, 107.0], [1900.0, 183.0], [2000.0, 154.0], [2100.0, 159.0], [2200.0, 130.0], [2300.0, 143.0], [2400.0, 148.0], [2500.0, 658.0], [2600.0, 3225.0], [2700.0, 2329.0], [2800.0, 1778.0], [2900.0, 49.0], [3000.0, 1.0], [200.0, 41.0], [3300.0, 1.0], [3200.0, 1.0], [3500.0, 2.0], [3600.0, 11.0], [3700.0, 2.0], [3800.0, 3.0], [300.0, 34.0], [400.0, 24.0], [500.0, 42.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 139.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9297.0, "series": [{"data": [[0.0, 139.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 564.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9297.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 537.3922445935859, "minX": 1.66955694E12, "maxY": 979.4568656888769, "series": [{"data": [[1.66955694E12, 979.4568656888769], [1.669557E12, 537.3922445935859]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.669557E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 84.0, "minX": 2.0, "maxY": 3142.0, "series": [{"data": [[2.0, 1533.0], [3.0, 1623.0], [4.0, 1566.0], [5.0, 1848.0], [6.0, 1866.0], [7.0, 1867.0], [8.0, 1847.0], [9.0, 1856.0], [10.0, 1868.0], [11.0, 1859.0], [12.0, 1853.0], [14.0, 1857.0], [15.0, 1838.0], [16.0, 1846.0], [17.0, 1845.0], [19.0, 1838.5], [20.0, 1838.0], [22.0, 1870.0], [23.0, 1839.0], [24.0, 1838.0], [25.0, 1837.0], [26.0, 1855.0], [27.0, 1855.0], [28.0, 1864.0], [29.0, 1863.0], [30.0, 1864.0], [33.0, 1867.5], [32.0, 1864.0], [35.0, 1858.0], [37.0, 1876.0], [36.0, 1871.0], [39.0, 1864.0], [38.0, 1862.0], [41.0, 1858.0], [43.0, 1853.0], [42.0, 1968.0], [45.0, 1851.0], [44.0, 1852.0], [47.0, 1855.5], [49.0, 1877.5], [51.0, 1886.5], [53.0, 1882.0], [52.0, 1883.0], [54.0, 1881.0], [57.0, 1879.0], [56.0, 1877.5], [58.0, 1880.0], [60.0, 1886.0], [62.0, 1863.0], [67.0, 1904.0], [66.0, 1879.0], [65.0, 1887.6666666666667], [70.0, 1909.0], [69.0, 1875.0], [75.0, 1908.0], [73.0, 1895.5], [72.0, 1900.0], [79.0, 1940.0], [78.0, 1913.0], [76.0, 1902.0], [83.0, 1933.0], [82.0, 1915.0], [81.0, 1906.5], [87.0, 1921.0], [86.0, 1921.0], [85.0, 1905.0], [84.0, 1924.0], [91.0, 1920.5], [89.0, 1920.5], [95.0, 1913.3333333333333], [93.0, 1920.0], [99.0, 1896.0], [98.0, 1907.3333333333333], [103.0, 1906.0], [102.0, 1896.0], [100.0, 1905.0], [107.0, 1893.0], [105.0, 1905.0], [104.0, 1901.0], [109.0, 1922.0], [114.0, 1946.0], [113.0, 1908.3333333333333], [112.0, 1894.5], [119.0, 1944.0], [118.0, 1947.0], [116.0, 1930.0], [123.0, 1956.0], [122.0, 1948.5], [120.0, 1954.0], [127.0, 1941.0], [126.0, 1944.3333333333333], [135.0, 1926.0], [134.0, 1927.0], [133.0, 1936.0], [132.0, 1943.6666666666667], [129.0, 1948.0], [128.0, 1948.0], [143.0, 1940.0], [142.0, 1932.0], [141.0, 1962.3333333333333], [138.0, 1932.0], [137.0, 1925.0], [136.0, 1926.0], [150.0, 1949.0], [149.0, 1931.5], [147.0, 1949.3333333333333], [144.0, 1949.0], [159.0, 1958.0], [158.0, 1942.0], [157.0, 1942.0], [156.0, 1951.3333333333333], [153.0, 1956.0], [152.0, 1964.0], [167.0, 1966.0], [166.0, 1966.0], [165.0, 1968.0], [164.0, 1960.0], [163.0, 1960.0], [162.0, 1970.0], [161.0, 1964.0], [160.0, 1971.0], [175.0, 1968.0], [174.0, 1968.5], [173.0, 1969.0], [170.0, 1978.0], [169.0, 1961.0], [168.0, 1954.0], [183.0, 1989.5], [181.0, 1988.0], [180.0, 1971.0], [179.0, 1976.0], [178.0, 1987.0], [177.0, 1975.0], [176.0, 1988.0], [191.0, 1985.0], [190.0, 1994.0], [189.0, 1989.0], [187.0, 1986.0], [186.0, 1991.5], [184.0, 1992.0], [199.0, 1996.0], [198.0, 1989.0], [197.0, 1990.0], [196.0, 1991.0], [195.0, 1992.0], [194.0, 1992.0], [193.0, 2000.0], [192.0, 1987.0], [207.0, 2013.0], [206.0, 2015.0], [205.0, 2015.0], [204.0, 1994.0], [203.0, 1994.0], [202.0, 2004.0], [201.0, 1990.0], [200.0, 1987.0], [215.0, 2016.0], [214.0, 2016.0], [213.0, 2011.0], [212.0, 2025.0], [211.0, 2011.0], [210.0, 2019.0], [209.0, 2012.0], [208.0, 2012.0], [223.0, 2018.0], [222.0, 2018.0], [221.0, 2032.0], [220.0, 2000.0], [219.0, 2002.0], [218.0, 2027.0], [217.0, 2009.0], [216.0, 2015.0], [231.0, 2015.0], [230.0, 2015.0], [229.0, 2002.0], [228.0, 2015.0], [227.0, 2016.0], [226.0, 2024.0], [225.0, 2031.0], [224.0, 2033.0], [239.0, 2019.0], [238.0, 2009.5], [236.0, 1998.0], [235.0, 2012.0], [233.0, 1999.0], [232.0, 2001.0], [247.0, 2033.0], [246.0, 2026.0], [244.0, 2019.0], [242.0, 2021.3333333333333], [255.0, 2539.0], [253.0, 2024.0], [252.0, 2025.0], [251.0, 2022.0], [249.0, 2032.0], [248.0, 2025.0], [259.0, 2030.0], [269.0, 2057.0], [271.0, 2052.0], [268.0, 2052.5], [266.0, 2038.6666666666667], [265.0, 2057.0], [263.0, 2039.6666666666667], [256.0, 2023.0], [258.0, 2022.0], [257.0, 2023.0], [286.0, 2034.0], [287.0, 2059.0], [285.0, 2051.0], [284.0, 2043.0], [283.0, 2032.0], [282.0, 2068.0], [281.0, 2055.0], [280.0, 2053.0], [278.0, 2063.0], [275.0, 2052.0], [274.0, 2050.0], [273.0, 2060.5], [276.0, 2064.0], [302.0, 2074.0], [303.0, 2076.0], [301.0, 2084.0], [300.0, 2080.0], [298.0, 2087.0], [297.0, 2078.0], [296.0, 2079.0], [295.0, 2039.0], [291.0, 2032.0], [289.0, 2030.0], [294.0, 2077.0], [293.0, 2070.0], [305.0, 471.6], [304.0, 564.75], [318.0, 520.0], [317.0, 2093.0], [307.0, 2063.0], [308.0, 340.0], [309.0, 84.0], [310.0, 1409.0], [311.0, 2078.0], [312.0, 89.0], [313.0, 96.0], [315.0, 2106.0], [314.0, 2086.0], [319.0, 2096.0], [333.0, 173.66666666666666], [334.0, 1475.6666666666667], [323.0, 793.3333333333334], [327.0, 1140.25], [320.0, 2097.0], [322.0, 2110.0], [321.0, 2115.0], [332.0, 2136.0], [331.0, 2137.0], [330.0, 2141.0], [328.0, 2124.0], [325.0, 2101.0], [324.0, 2101.0], [350.0, 2160.0], [342.0, 333.42857142857144], [336.0, 2133.0], [339.0, 2129.0], [337.0, 2123.0], [351.0, 2176.0], [347.0, 2177.0], [346.0, 2164.0], [345.0, 2139.0], [344.0, 2146.0], [341.0, 2146.0], [340.0, 2124.0], [359.0, 614.4], [356.0, 218.0], [357.0, 225.6], [358.0, 1700.25], [366.0, 717.75], [367.0, 2176.0], [361.0, 2173.0], [360.0, 2176.0], [365.0, 2176.0], [355.0, 2186.0], [354.0, 2192.0], [352.0, 2174.0], [363.0, 2174.0], [362.0, 2189.0], [382.0, 2199.0], [375.0, 462.0], [371.0, 234.0], [369.0, 2175.5], [372.0, 1698.5], [374.0, 2184.5], [383.0, 2193.0], [376.0, 2190.0], [381.0, 2187.0], [380.0, 2160.0], [379.0, 2165.0], [378.0, 2177.5], [398.0, 2174.0], [399.0, 2173.0], [397.0, 2181.0], [396.0, 2181.0], [395.0, 2189.0], [394.0, 2190.0], [393.0, 2189.0], [392.0, 2189.0], [391.0, 2189.0], [384.0, 2192.0], [386.0, 2214.0], [385.0, 2196.0], [390.0, 2197.0], [389.0, 2205.0], [388.0, 2196.5], [414.0, 2174.0], [403.0, 903.6666666666666], [404.0, 268.25], [415.0, 2165.0], [412.0, 2150.0], [411.0, 2162.0], [410.0, 2175.0], [408.0, 2179.0], [407.0, 2178.5], [402.0, 2177.0], [400.0, 2180.0], [405.0, 2175.0], [431.0, 2211.0], [423.0, 299.3333333333333], [419.0, 2171.0], [418.0, 2185.5], [416.0, 2185.0], [426.0, 935.3333333333334], [427.0, 296.0], [428.0, 1269.25], [430.0, 1065.0], [425.0, 2201.0], [424.0, 2191.3333333333335], [421.0, 2190.5], [435.0, 1268.0], [434.0, 1258.0], [432.0, 2202.0], [441.0, 1145.7142857142858], [447.0, 370.0], [442.0, 806.5], [445.0, 2201.0], [443.0, 2202.0], [438.0, 2187.0], [437.0, 2189.0], [436.0, 2195.0], [462.0, 390.0], [449.0, 968.3333333333334], [454.0, 736.0], [455.0, 2225.0], [448.0, 2200.0], [463.0, 1310.0], [456.0, 2225.0], [453.0, 1302.5], [452.0, 2200.0], [460.0, 1264.0], [450.0, 2196.0], [461.0, 2210.0], [459.0, 2231.0], [458.0, 2217.5], [477.0, 1137.2], [470.0, 967.3333333333334], [479.0, 2244.0], [478.0, 2239.0], [475.0, 2239.0], [474.0, 2232.5], [472.0, 2251.0], [471.0, 2233.0], [465.0, 2225.0], [467.0, 2224.0], [466.0, 2733.0], [469.0, 2231.0], [481.0, 393.0], [485.0, 1360.5], [484.0, 2245.0], [489.0, 898.25], [493.0, 890.25], [494.0, 1071.0], [492.0, 2284.0], [482.0, 2249.6666666666665], [491.0, 2252.0], [490.0, 2269.0], [486.0, 2262.0], [509.0, 498.5714285714286], [504.0, 782.8333333333333], [499.0, 831.0], [498.0, 2302.0], [497.0, 2303.0], [496.0, 2317.0], [506.0, 501.25], [511.0, 2362.0], [510.0, 2350.5], [507.0, 2318.3333333333335], [503.0, 2327.0], [502.0, 2300.0], [501.0, 2305.0], [519.0, 1449.0], [513.0, 859.2727272727273], [512.0, 2364.0], [527.0, 2365.0], [526.0, 2364.0], [525.0, 2357.5], [523.0, 2387.0], [522.0, 2359.0], [521.0, 2333.0], [520.0, 2371.0], [514.0, 553.5], [516.0, 704.2500000000001], [515.0, 2354.0], [518.0, 2364.5], [528.0, 1479.5], [540.0, 1804.3333333333333], [538.0, 2384.0], [536.0, 2379.0], [542.0, 2386.0], [541.0, 2381.0], [543.0, 2503.0], [529.0, 1479.5], [530.0, 1481.0], [531.0, 1477.0], [533.0, 586.0], [532.0, 2376.0], [535.0, 2496.0], [534.0, 2392.5], [550.0, 1488.5], [553.0, 1506.0], [552.0, 2432.0], [556.0, 2400.0], [554.0, 2419.0], [557.0, 1219.6666666666665], [559.0, 1230.3333333333335], [549.0, 2416.5], [547.0, 2416.0], [546.0, 2398.0], [545.0, 2391.0], [544.0, 2886.5], [558.0, 2417.0], [561.0, 631.0], [575.0, 2457.0], [560.0, 2426.0], [562.0, 1774.0], [565.0, 1361.2], [564.0, 2440.5], [566.0, 1239.3333333333335], [573.0, 1207.0], [572.0, 2460.0], [571.0, 2448.0], [570.0, 2427.5], [568.0, 2468.0], [551.0, 2396.0], [574.0, 1546.5], [603.0, 2485.0], [577.0, 651.0], [579.0, 1552.0], [578.0, 2461.3333333333335], [583.0, 2457.0], [580.0, 2463.0], [602.0, 2493.0], [600.0, 2479.0], [587.0, 922.8571428571428], [586.0, 2451.0], [585.0, 2516.0], [584.0, 2433.0], [588.0, 2455.0], [589.0, 1011.4], [591.0, 2473.0], [590.0, 2456.0], [593.0, 678.0], [592.0, 2484.0], [597.0, 2483.0], [596.0, 2486.25], [599.0, 2480.0], [598.0, 2483.0], [605.0, 699.6666666666666], [607.0, 2503.0], [606.0, 2500.5], [604.0, 2500.0], [634.0, 1440.0], [611.0, 1156.0], [616.0, 2022.75], [617.0, 2500.0], [619.0, 2533.0], [618.0, 2546.0], [621.0, 2531.0], [620.0, 2516.0], [623.0, 2524.0], [608.0, 2528.0], [610.0, 2503.0], [609.0, 2496.0], [622.0, 2517.0], [628.0, 724.0], [629.0, 2553.0], [639.0, 2572.0], [624.0, 2525.0], [627.0, 2538.5], [625.0, 2555.0], [630.0, 729.5], [631.0, 1830.4], [632.0, 1634.0], [615.0, 2518.0], [613.0, 2510.0], [635.0, 1346.0], [637.0, 2578.0], [638.0, 746.0], [666.0, 2702.6666666666665], [645.0, 1362.0], [647.0, 1369.6666666666665], [646.0, 2601.0], [665.0, 2700.0000000000005], [664.0, 2671.3333333333335], [648.0, 1394.3333333333335], [650.0, 2599.0], [649.0, 2604.0], [652.0, 2591.0], [651.0, 2592.0], [655.0, 1306.4285714285713], [643.0, 2583.5], [640.0, 2639.0], [654.0, 2605.5], [660.0, 1404.0], [658.0, 2614.5], [657.0, 2615.0], [661.0, 2623.8333333333335], [663.0, 2645.3529411764703], [662.0, 2598.12962962963], [668.0, 1186.4], [670.0, 2686.0], [669.0, 2697.25], [667.0, 2704.333333333333], [701.0, 859.6666666666666], [673.0, 811.0], [681.0, 2048.3333333333335], [680.0, 2678.9166666666665], [683.0, 2686.0], [682.0, 2673.0], [685.0, 2677.222222222222], [684.0, 2657.0], [687.0, 2678.6], [672.0, 2696.0], [686.0, 2675.0], [688.0, 1541.4], [689.0, 2058.777777777778], [693.0, 1302.25], [692.0, 2670.5], [691.0, 2677.714285714286], [690.0, 2678.333333333333], [695.0, 2681.0], [694.0, 2681.5], [698.0, 2346.8333333333335], [697.0, 2672.0], [696.0, 2679.75], [678.0, 2692.0], [677.0, 2691.0], [676.0, 2708.0], [675.0, 2691.6666666666665], [674.0, 2701.0], [699.0, 2676.0], [703.0, 2686.6666666666665], [702.0, 2680.0], [733.0, 2656.6666666666665], [710.0, 1759.5], [719.0, 2642.2], [705.0, 2678.0], [704.0, 2673.0], [707.0, 2667.25], [706.0, 2674.833333333333], [709.0, 2666.8571428571427], [708.0, 2656.75], [718.0, 2643.3333333333335], [717.0, 2633.0], [716.0, 2652.0], [715.0, 2654.0], [714.0, 2655.0], [713.0, 2635.75], [712.0, 2654.1666666666665], [728.0, 2668.0], [711.0, 2656.5], [723.0, 1746.75], [722.0, 2625.75], [721.0, 2628.5], [720.0, 2652.6666666666665], [725.0, 2654.3333333333335], [724.0, 2640.5], [727.0, 2661.875], [726.0, 2662.5], [735.0, 2669.6666666666665], [734.0, 2658.5], [732.0, 2661.0], [731.0, 2656.8], [730.0, 2652.2], [729.0, 2661.166666666667], [761.0, 2685.0], [766.0, 1581.8], [750.0, 1954.4], [745.0, 2075.3333333333335], [744.0, 2671.0], [747.0, 2668.75], [746.0, 2675.0], [749.0, 2688.0], [748.0, 2674.0], [751.0, 2070.6666666666665], [738.0, 2658.0], [737.0, 2679.333333333333], [740.0, 2643.5], [739.0, 2654.5], [742.0, 2828.666666666667], [741.0, 2682.0], [760.0, 2672.0], [743.0, 2673.6], [762.0, 2660.5], [765.0, 2666.8], [763.0, 2657.4999999999995], [752.0, 1782.5], [753.0, 1663.4285714285713], [755.0, 2663.0], [754.0, 2666.6666666666665], [756.0, 2504.4545454545455], [757.0, 1785.5], [759.0, 2647.5], [758.0, 2654.5], [767.0, 2663.25], [773.0, 1801.6666666666665], [796.0, 2708.0], [780.0, 1982.2], [779.0, 2684.0], [778.0, 2687.6], [776.0, 2679.6666666666665], [781.0, 2692.4285714285716], [783.0, 2688.5], [768.0, 2655.0], [770.0, 2639.0], [769.0, 2645.0], [772.0, 2670.0], [771.0, 2657.4444444444443], [782.0, 2681.0], [792.0, 1810.0], [775.0, 2671.3333333333335], [774.0, 2671.0], [798.0, 1828.75], [799.0, 2708.5], [786.0, 2701.5], [784.0, 2687.0], [788.0, 2680.714285714286], [787.0, 2679.5], [791.0, 2682.25], [789.0, 2681.5], [797.0, 2710.571428571429], [795.0, 2702.6], [793.0, 2691.1111111111113], [826.0, 1571.5555555555557], [808.0, 2056.25], [810.0, 2710.0], [809.0, 2728.0], [812.0, 2711.5], [811.0, 2718.6666666666665], [815.0, 2744.75], [800.0, 2719.0], [802.0, 2726.333333333333], [801.0, 2731.0], [804.0, 2703.0], [803.0, 2705.0], [806.0, 2718.3333333333335], [805.0, 2708.0], [813.0, 2743.833333333333], [819.0, 2243.428571428571], [822.0, 966.0], [821.0, 2757.5], [820.0, 2750.6666666666665], [823.0, 2750.0909090909095], [825.0, 1865.6666666666667], [824.0, 2156.6666666666665], [831.0, 1431.75], [816.0, 2732.0], [818.0, 2751.0], [817.0, 2745.5], [830.0, 2748.0], [829.0, 2744.3333333333335], [828.0, 2740.3333333333335], [827.0, 2739.0], [857.0, 2747.5], [861.0, 1820.0], [833.0, 1837.0], [839.0, 2746.0], [838.0, 2755.0], [837.0, 2756.0], [836.0, 2753.75], [835.0, 2757.5], [834.0, 2757.0], [847.0, 2744.0], [832.0, 2739.0], [858.0, 2756.0], [845.0, 1888.5], [844.0, 2752.0], [843.0, 2749.3333333333335], [841.0, 2748.0], [840.0, 2760.0], [846.0, 852.5], [848.0, 1800.0], [849.0, 2112.0], [850.0, 2845.0], [852.0, 2745.3333333333335], [851.0, 2750.6666666666665], [855.0, 2740.6666666666665], [853.0, 2800.0], [863.0, 2796.0], [862.0, 2767.0], [860.0, 2764.6666666666665], [859.0, 2756.0], [893.0, 1512.5], [885.0, 882.0], [884.0, 2820.0], [883.0, 2798.8], [882.0, 2790.5], [881.0, 2812.0], [880.0, 2752.0], [887.0, 2796.0], [886.0, 2789.0], [895.0, 2785.5], [894.0, 2793.25], [892.0, 2791.5], [891.0, 2795.6], [890.0, 2797.6666666666665], [889.0, 2821.0], [888.0, 2782.5], [871.0, 2792.0], [870.0, 2767.0], [868.0, 2773.0], [866.0, 2787.3333333333335], [865.0, 2782.5], [864.0, 2762.0], [879.0, 2776.2], [878.0, 2764.6666666666665], [876.0, 2819.0], [875.0, 2778.0], [874.0, 2785.6], [873.0, 2768.0], [872.0, 2820.0], [920.0, 1826.5], [898.0, 853.7142857142857], [902.0, 2051.625], [901.0, 2799.6666666666665], [900.0, 2785.0], [899.0, 2801.0], [903.0, 2779.0], [904.0, 1498.8333333333333], [905.0, 1818.0], [911.0, 2778.3333333333335], [897.0, 2794.0], [896.0, 2800.5], [910.0, 2784.0000000000005], [909.0, 2779.5], [908.0, 2784.0], [907.0, 2776.0], [906.0, 2780.0], [912.0, 2307.25], [916.0, 2063.0], [915.0, 2792.0], [914.0, 2790.6], [913.0, 2793.0], [917.0, 2766.0], [919.0, 2136.0], [918.0, 2776.75], [927.0, 2791.0], [926.0, 2777.0], [925.0, 3142.0], [923.0, 2775.75], [922.0, 2769.0], [921.0, 2768.5], [954.0, 2819.0], [939.0, 1835.0], [934.0, 2239.285714285714], [936.0, 1530.6666666666665], [937.0, 2149.0], [938.0, 2300.25], [940.0, 1831.0], [941.0, 2776.3333333333335], [943.0, 2770.0], [929.0, 2761.3333333333335], [928.0, 2768.1666666666665], [931.0, 2793.0], [930.0, 2825.5416666666665], [933.0, 2802.0], [932.0, 2786.5], [942.0, 2771.0], [944.0, 1537.3333333333335], [948.0, 1849.0], [947.0, 2770.5], [946.0, 2829.0], [945.0, 2761.0], [951.0, 2775.5], [950.0, 2771.6666666666665], [956.0, 1858.125], [955.0, 2782.6], [953.0, 2779.0], [952.0, 2776.75], [935.0, 2780.5], [957.0, 2782.8571428571427], [959.0, 2837.0], [958.0, 2801.0], [986.0, 2183.0], [961.0, 2641.818181818182], [965.0, 1868.0], [964.0, 2812.75], [963.0, 2798.0], [962.0, 2813.0], [967.0, 2793.0], [985.0, 2786.75], [984.0, 2799.0], [968.0, 2107.875], [970.0, 2871.0], [969.0, 2873.8571428571427], [972.0, 2875.5], [971.0, 2831.0], [974.0, 2881.2], [960.0, 2808.3333333333335], [973.0, 2846.0], [987.0, 2519.0], [991.0, 1870.0], [978.0, 2851.3333333333335], [977.0, 2856.5], [980.0, 2803.4], [979.0, 2833.3333333333335], [983.0, 2951.714285714286], [981.0, 2865.857142857143], [990.0, 2819.0], [989.0, 2783.75], [988.0, 2787.5], [995.0, 2812.0], [997.0, 2677.066666666667], [998.0, 1577.6666666666665], [1000.0, 2588.974264705885], [999.0, 2789.564948453608], [996.0, 2800.0], [994.0, 2798.153846153846], [993.0, 2787.5], [992.0, 2783.5454545454545]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[920.1758000000003, 2509.6429000000035]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4268.85, "minX": 1.66955694E12, "maxY": 1.6205174183333334E7, "series": [{"data": [[1.66955694E12, 1.6205174183333334E7], [1.669557E12, 2509659.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66955694E12, 27564.483333333334], [1.669557E12, 4268.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.669557E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2418.5645041014195, "minX": 1.66955694E12, "maxY": 2523.748007853108, "series": [{"data": [[1.66955694E12, 2523.748007853108], [1.669557E12, 2418.5645041014195]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.669557E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2393.534675615214, "minX": 1.66955694E12, "maxY": 2497.884166762904, "series": [{"data": [[1.66955694E12, 2497.884166762904], [1.669557E12, 2393.534675615214]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.669557E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.835197613721089, "minX": 1.66955694E12, "maxY": 13.395657697193636, "series": [{"data": [[1.66955694E12, 13.395657697193636], [1.669557E12, 10.835197613721089]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.669557E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 52.0, "minX": 1.66955694E12, "maxY": 3871.0, "series": [{"data": [[1.66955694E12, 3871.0], [1.669557E12, 3653.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66955694E12, 2840.0], [1.669557E12, 2711.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66955694E12, 2896.0], [1.669557E12, 2765.3199999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66955694E12, 2863.0], [1.669557E12, 2745.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66955694E12, 52.0], [1.669557E12, 1341.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66955694E12, 2685.0], [1.669557E12, 2603.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.669557E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 390.0, "minX": 223.0, "maxY": 2863.5, "series": [{"data": [[223.0, 390.0], [235.0, 1932.0], [329.0, 2850.0], [344.0, 1011.5], [346.0, 2668.0], [348.0, 2772.0], [351.0, 2740.0], [357.0, 2642.0], [365.0, 2752.0], [366.0, 2662.5], [352.0, 2745.0], [367.0, 2808.0], [362.0, 2656.5], [354.0, 2192.5], [371.0, 2677.0], [368.0, 2781.5], [369.0, 2711.0], [374.0, 2610.0], [376.0, 2552.0], [370.0, 2863.5], [372.0, 2819.0], [386.0, 1589.0], [398.0, 2295.5], [384.0, 2688.0], [390.0, 2683.5], [410.0, 2644.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 410.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 369.0, "minX": 223.0, "maxY": 2835.0, "series": [{"data": [[223.0, 369.0], [235.0, 1906.0], [329.0, 2826.0], [344.0, 991.5], [346.0, 2637.5], [348.0, 2741.5], [351.0, 2714.0], [357.0, 2613.0], [365.0, 2718.5], [366.0, 2640.0], [352.0, 2719.5], [367.0, 2780.0], [362.0, 2633.0], [354.0, 2169.5], [371.0, 2647.0], [368.0, 2750.0], [369.0, 2687.0], [374.0, 2585.0], [376.0, 2532.0], [370.0, 2835.0], [372.0, 2792.0], [386.0, 1554.0], [398.0, 2269.0], [384.0, 2661.0], [390.0, 2660.0], [410.0, 2619.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 410.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.166666666666666, "minX": 1.66955694E12, "maxY": 158.5, "series": [{"data": [[1.66955694E12, 158.5], [1.669557E12, 8.166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.669557E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 22.35, "minX": 1.66955694E12, "maxY": 144.31666666666666, "series": [{"data": [[1.66955694E12, 144.31666666666666], [1.669557E12, 22.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.669557E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 22.35, "minX": 1.66955694E12, "maxY": 144.31666666666666, "series": [{"data": [[1.66955694E12, 144.31666666666666], [1.669557E12, 22.35]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.669557E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 22.35, "minX": 1.66955694E12, "maxY": 144.31666666666666, "series": [{"data": [[1.66955694E12, 144.31666666666666], [1.669557E12, 22.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.669557E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

