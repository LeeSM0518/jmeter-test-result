/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3421.0, "series": [{"data": [[0.0, 1.0], [0.1, 10.0], [0.2, 12.0], [0.3, 16.0], [0.4, 18.0], [0.5, 20.0], [0.6, 22.0], [0.7, 23.0], [0.8, 24.0], [0.9, 24.0], [1.0, 26.0], [1.1, 30.0], [1.2, 31.0], [1.3, 31.0], [1.4, 32.0], [1.5, 34.0], [1.6, 38.0], [1.7, 39.0], [1.8, 41.0], [1.9, 44.0], [2.0, 46.0], [2.1, 49.0], [2.2, 55.0], [2.3, 56.0], [2.4, 59.0], [2.5, 62.0], [2.6, 64.0], [2.7, 67.0], [2.8, 71.0], [2.9, 73.0], [3.0, 77.0], [3.1, 80.0], [3.2, 83.0], [3.3, 85.0], [3.4, 87.0], [3.5, 88.0], [3.6, 90.0], [3.7, 92.0], [3.8, 93.0], [3.9, 95.0], [4.0, 96.0], [4.1, 97.0], [4.2, 98.0], [4.3, 100.0], [4.4, 102.0], [4.5, 103.0], [4.6, 105.0], [4.7, 107.0], [4.8, 108.0], [4.9, 109.0], [5.0, 111.0], [5.1, 111.0], [5.2, 113.0], [5.3, 115.0], [5.4, 116.0], [5.5, 117.0], [5.6, 118.0], [5.7, 119.0], [5.8, 119.0], [5.9, 121.0], [6.0, 123.0], [6.1, 124.0], [6.2, 125.0], [6.3, 126.0], [6.4, 127.0], [6.5, 128.0], [6.6, 130.0], [6.7, 131.0], [6.8, 132.0], [6.9, 133.0], [7.0, 134.0], [7.1, 135.0], [7.2, 137.0], [7.3, 139.0], [7.4, 140.0], [7.5, 141.0], [7.6, 143.0], [7.7, 145.0], [7.8, 147.0], [7.9, 149.0], [8.0, 150.0], [8.1, 152.0], [8.2, 153.0], [8.3, 155.0], [8.4, 156.0], [8.5, 157.0], [8.6, 159.0], [8.7, 161.0], [8.8, 162.0], [8.9, 163.0], [9.0, 164.0], [9.1, 166.0], [9.2, 167.0], [9.3, 168.0], [9.4, 169.0], [9.5, 171.0], [9.6, 172.0], [9.7, 175.0], [9.8, 176.0], [9.9, 177.0], [10.0, 179.0], [10.1, 180.0], [10.2, 181.0], [10.3, 181.0], [10.4, 184.0], [10.5, 185.0], [10.6, 187.0], [10.7, 188.0], [10.8, 190.0], [10.9, 191.0], [11.0, 193.0], [11.1, 196.0], [11.2, 198.0], [11.3, 201.0], [11.4, 202.0], [11.5, 203.0], [11.6, 205.0], [11.7, 206.0], [11.8, 208.0], [11.9, 209.0], [12.0, 210.0], [12.1, 211.0], [12.2, 212.0], [12.3, 213.0], [12.4, 215.0], [12.5, 216.0], [12.6, 217.0], [12.7, 219.0], [12.8, 219.0], [12.9, 220.0], [13.0, 221.0], [13.1, 223.0], [13.2, 224.0], [13.3, 225.0], [13.4, 227.0], [13.5, 228.0], [13.6, 229.0], [13.7, 229.0], [13.8, 230.0], [13.9, 231.0], [14.0, 231.0], [14.1, 232.0], [14.2, 233.0], [14.3, 234.0], [14.4, 234.0], [14.5, 235.0], [14.6, 235.0], [14.7, 236.0], [14.8, 236.0], [14.9, 237.0], [15.0, 237.0], [15.1, 238.0], [15.2, 239.0], [15.3, 239.0], [15.4, 240.0], [15.5, 240.0], [15.6, 241.0], [15.7, 241.0], [15.8, 242.0], [15.9, 242.0], [16.0, 243.0], [16.1, 244.0], [16.2, 244.0], [16.3, 245.0], [16.4, 246.0], [16.5, 246.0], [16.6, 247.0], [16.7, 248.0], [16.8, 248.0], [16.9, 249.0], [17.0, 250.0], [17.1, 251.0], [17.2, 251.0], [17.3, 252.0], [17.4, 252.0], [17.5, 253.0], [17.6, 254.0], [17.7, 255.0], [17.8, 255.0], [17.9, 256.0], [18.0, 257.0], [18.1, 258.0], [18.2, 258.0], [18.3, 259.0], [18.4, 260.0], [18.5, 261.0], [18.6, 262.0], [18.7, 262.0], [18.8, 263.0], [18.9, 264.0], [19.0, 264.0], [19.1, 265.0], [19.2, 266.0], [19.3, 267.0], [19.4, 267.0], [19.5, 268.0], [19.6, 269.0], [19.7, 269.0], [19.8, 270.0], [19.9, 270.0], [20.0, 271.0], [20.1, 271.0], [20.2, 271.0], [20.3, 272.0], [20.4, 272.0], [20.5, 273.0], [20.6, 274.0], [20.7, 275.0], [20.8, 275.0], [20.9, 276.0], [21.0, 276.0], [21.1, 277.0], [21.2, 278.0], [21.3, 279.0], [21.4, 279.0], [21.5, 279.0], [21.6, 280.0], [21.7, 281.0], [21.8, 281.0], [21.9, 281.0], [22.0, 282.0], [22.1, 282.0], [22.2, 283.0], [22.3, 283.0], [22.4, 284.0], [22.5, 285.0], [22.6, 285.0], [22.7, 285.0], [22.8, 286.0], [22.9, 286.0], [23.0, 287.0], [23.1, 288.0], [23.2, 288.0], [23.3, 289.0], [23.4, 290.0], [23.5, 290.0], [23.6, 291.0], [23.7, 291.0], [23.8, 292.0], [23.9, 292.0], [24.0, 293.0], [24.1, 293.0], [24.2, 294.0], [24.3, 294.0], [24.4, 295.0], [24.5, 295.0], [24.6, 296.0], [24.7, 296.0], [24.8, 297.0], [24.9, 297.0], [25.0, 297.0], [25.1, 298.0], [25.2, 299.0], [25.3, 299.0], [25.4, 299.0], [25.5, 300.0], [25.6, 300.0], [25.7, 301.0], [25.8, 301.0], [25.9, 302.0], [26.0, 303.0], [26.1, 303.0], [26.2, 304.0], [26.3, 305.0], [26.4, 306.0], [26.5, 307.0], [26.6, 307.0], [26.7, 308.0], [26.8, 308.0], [26.9, 309.0], [27.0, 309.0], [27.1, 310.0], [27.2, 311.0], [27.3, 311.0], [27.4, 312.0], [27.5, 313.0], [27.6, 313.0], [27.7, 314.0], [27.8, 315.0], [27.9, 316.0], [28.0, 317.0], [28.1, 318.0], [28.2, 319.0], [28.3, 319.0], [28.4, 320.0], [28.5, 320.0], [28.6, 321.0], [28.7, 322.0], [28.8, 323.0], [28.9, 323.0], [29.0, 324.0], [29.1, 325.0], [29.2, 326.0], [29.3, 326.0], [29.4, 327.0], [29.5, 328.0], [29.6, 328.0], [29.7, 329.0], [29.8, 330.0], [29.9, 331.0], [30.0, 331.0], [30.1, 332.0], [30.2, 333.0], [30.3, 334.0], [30.4, 335.0], [30.5, 335.0], [30.6, 336.0], [30.7, 337.0], [30.8, 337.0], [30.9, 338.0], [31.0, 338.0], [31.1, 340.0], [31.2, 341.0], [31.3, 341.0], [31.4, 342.0], [31.5, 343.0], [31.6, 344.0], [31.7, 345.0], [31.8, 345.0], [31.9, 346.0], [32.0, 347.0], [32.1, 348.0], [32.2, 348.0], [32.3, 349.0], [32.4, 350.0], [32.5, 350.0], [32.6, 351.0], [32.7, 352.0], [32.8, 353.0], [32.9, 354.0], [33.0, 354.0], [33.1, 355.0], [33.2, 356.0], [33.3, 358.0], [33.4, 359.0], [33.5, 360.0], [33.6, 361.0], [33.7, 362.0], [33.8, 362.0], [33.9, 363.0], [34.0, 364.0], [34.1, 365.0], [34.2, 366.0], [34.3, 367.0], [34.4, 367.0], [34.5, 368.0], [34.6, 369.0], [34.7, 369.0], [34.8, 370.0], [34.9, 371.0], [35.0, 372.0], [35.1, 373.0], [35.2, 374.0], [35.3, 374.0], [35.4, 375.0], [35.5, 375.0], [35.6, 376.0], [35.7, 376.0], [35.8, 378.0], [35.9, 378.0], [36.0, 379.0], [36.1, 380.0], [36.2, 380.0], [36.3, 381.0], [36.4, 382.0], [36.5, 383.0], [36.6, 384.0], [36.7, 384.0], [36.8, 385.0], [36.9, 386.0], [37.0, 386.0], [37.1, 387.0], [37.2, 388.0], [37.3, 389.0], [37.4, 390.0], [37.5, 390.0], [37.6, 391.0], [37.7, 391.0], [37.8, 392.0], [37.9, 393.0], [38.0, 393.0], [38.1, 394.0], [38.2, 395.0], [38.3, 395.0], [38.4, 396.0], [38.5, 397.0], [38.6, 397.0], [38.7, 397.0], [38.8, 398.0], [38.9, 399.0], [39.0, 399.0], [39.1, 400.0], [39.2, 401.0], [39.3, 401.0], [39.4, 401.0], [39.5, 402.0], [39.6, 403.0], [39.7, 403.0], [39.8, 404.0], [39.9, 405.0], [40.0, 406.0], [40.1, 406.0], [40.2, 407.0], [40.3, 407.0], [40.4, 407.0], [40.5, 408.0], [40.6, 408.0], [40.7, 409.0], [40.8, 409.0], [40.9, 410.0], [41.0, 410.0], [41.1, 411.0], [41.2, 411.0], [41.3, 411.0], [41.4, 412.0], [41.5, 412.0], [41.6, 412.0], [41.7, 413.0], [41.8, 413.0], [41.9, 414.0], [42.0, 414.0], [42.1, 414.0], [42.2, 415.0], [42.3, 415.0], [42.4, 416.0], [42.5, 416.0], [42.6, 416.0], [42.7, 417.0], [42.8, 417.0], [42.9, 418.0], [43.0, 418.0], [43.1, 418.0], [43.2, 419.0], [43.3, 419.0], [43.4, 420.0], [43.5, 420.0], [43.6, 420.0], [43.7, 421.0], [43.8, 421.0], [43.9, 422.0], [44.0, 423.0], [44.1, 423.0], [44.2, 423.0], [44.3, 424.0], [44.4, 424.0], [44.5, 425.0], [44.6, 425.0], [44.7, 425.0], [44.8, 426.0], [44.9, 426.0], [45.0, 427.0], [45.1, 427.0], [45.2, 428.0], [45.3, 428.0], [45.4, 429.0], [45.5, 430.0], [45.6, 430.0], [45.7, 431.0], [45.8, 432.0], [45.9, 432.0], [46.0, 433.0], [46.1, 433.0], [46.2, 434.0], [46.3, 434.0], [46.4, 435.0], [46.5, 435.0], [46.6, 436.0], [46.7, 437.0], [46.8, 438.0], [46.9, 439.0], [47.0, 440.0], [47.1, 440.0], [47.2, 441.0], [47.3, 442.0], [47.4, 443.0], [47.5, 443.0], [47.6, 444.0], [47.7, 445.0], [47.8, 446.0], [47.9, 447.0], [48.0, 448.0], [48.1, 449.0], [48.2, 450.0], [48.3, 450.0], [48.4, 452.0], [48.5, 452.0], [48.6, 453.0], [48.7, 454.0], [48.8, 455.0], [48.9, 455.0], [49.0, 456.0], [49.1, 456.0], [49.2, 457.0], [49.3, 458.0], [49.4, 459.0], [49.5, 460.0], [49.6, 461.0], [49.7, 462.0], [49.8, 463.0], [49.9, 463.0], [50.0, 464.0], [50.1, 465.0], [50.2, 466.0], [50.3, 466.0], [50.4, 467.0], [50.5, 468.0], [50.6, 468.0], [50.7, 469.0], [50.8, 470.0], [50.9, 470.0], [51.0, 471.0], [51.1, 472.0], [51.2, 473.0], [51.3, 474.0], [51.4, 474.0], [51.5, 475.0], [51.6, 476.0], [51.7, 476.0], [51.8, 477.0], [51.9, 478.0], [52.0, 478.0], [52.1, 479.0], [52.2, 480.0], [52.3, 481.0], [52.4, 481.0], [52.5, 482.0], [52.6, 482.0], [52.7, 483.0], [52.8, 484.0], [52.9, 484.0], [53.0, 485.0], [53.1, 485.0], [53.2, 486.0], [53.3, 486.0], [53.4, 487.0], [53.5, 487.0], [53.6, 487.0], [53.7, 488.0], [53.8, 489.0], [53.9, 489.0], [54.0, 490.0], [54.1, 490.0], [54.2, 491.0], [54.3, 491.0], [54.4, 492.0], [54.5, 492.0], [54.6, 492.0], [54.7, 493.0], [54.8, 493.0], [54.9, 493.0], [55.0, 494.0], [55.1, 494.0], [55.2, 495.0], [55.3, 495.0], [55.4, 495.0], [55.5, 496.0], [55.6, 496.0], [55.7, 497.0], [55.8, 497.0], [55.9, 498.0], [56.0, 498.0], [56.1, 499.0], [56.2, 499.0], [56.3, 500.0], [56.4, 500.0], [56.5, 501.0], [56.6, 501.0], [56.7, 502.0], [56.8, 502.0], [56.9, 503.0], [57.0, 503.0], [57.1, 504.0], [57.2, 504.0], [57.3, 504.0], [57.4, 504.0], [57.5, 505.0], [57.6, 505.0], [57.7, 505.0], [57.8, 506.0], [57.9, 506.0], [58.0, 506.0], [58.1, 507.0], [58.2, 507.0], [58.3, 507.0], [58.4, 508.0], [58.5, 508.0], [58.6, 508.0], [58.7, 509.0], [58.8, 509.0], [58.9, 509.0], [59.0, 510.0], [59.1, 510.0], [59.2, 511.0], [59.3, 511.0], [59.4, 511.0], [59.5, 511.0], [59.6, 512.0], [59.7, 512.0], [59.8, 513.0], [59.9, 513.0], [60.0, 513.0], [60.1, 514.0], [60.2, 514.0], [60.3, 514.0], [60.4, 515.0], [60.5, 515.0], [60.6, 515.0], [60.7, 516.0], [60.8, 516.0], [60.9, 516.0], [61.0, 517.0], [61.1, 517.0], [61.2, 517.0], [61.3, 517.0], [61.4, 518.0], [61.5, 518.0], [61.6, 519.0], [61.7, 519.0], [61.8, 519.0], [61.9, 520.0], [62.0, 520.0], [62.1, 520.0], [62.2, 521.0], [62.3, 521.0], [62.4, 521.0], [62.5, 522.0], [62.6, 522.0], [62.7, 522.0], [62.8, 523.0], [62.9, 523.0], [63.0, 524.0], [63.1, 524.0], [63.2, 525.0], [63.3, 525.0], [63.4, 526.0], [63.5, 526.0], [63.6, 526.0], [63.7, 527.0], [63.8, 527.0], [63.9, 528.0], [64.0, 528.0], [64.1, 528.0], [64.2, 528.0], [64.3, 529.0], [64.4, 529.0], [64.5, 530.0], [64.6, 530.0], [64.7, 530.0], [64.8, 531.0], [64.9, 531.0], [65.0, 531.0], [65.1, 532.0], [65.2, 532.0], [65.3, 533.0], [65.4, 533.0], [65.5, 533.0], [65.6, 533.0], [65.7, 534.0], [65.8, 535.0], [65.9, 535.0], [66.0, 535.0], [66.1, 536.0], [66.2, 536.0], [66.3, 537.0], [66.4, 537.0], [66.5, 538.0], [66.6, 538.0], [66.7, 538.0], [66.8, 539.0], [66.9, 540.0], [67.0, 540.0], [67.1, 540.0], [67.2, 541.0], [67.3, 542.0], [67.4, 542.0], [67.5, 543.0], [67.6, 544.0], [67.7, 544.0], [67.8, 545.0], [67.9, 545.0], [68.0, 546.0], [68.1, 546.0], [68.2, 547.0], [68.3, 548.0], [68.4, 548.0], [68.5, 549.0], [68.6, 550.0], [68.7, 550.0], [68.8, 551.0], [68.9, 551.0], [69.0, 552.0], [69.1, 553.0], [69.2, 554.0], [69.3, 554.0], [69.4, 555.0], [69.5, 555.0], [69.6, 556.0], [69.7, 556.0], [69.8, 557.0], [69.9, 558.0], [70.0, 558.0], [70.1, 559.0], [70.2, 560.0], [70.3, 561.0], [70.4, 561.0], [70.5, 562.0], [70.6, 563.0], [70.7, 563.0], [70.8, 564.0], [70.9, 564.0], [71.0, 565.0], [71.1, 565.0], [71.2, 566.0], [71.3, 567.0], [71.4, 567.0], [71.5, 568.0], [71.6, 568.0], [71.7, 569.0], [71.8, 569.0], [71.9, 570.0], [72.0, 571.0], [72.1, 572.0], [72.2, 572.0], [72.3, 573.0], [72.4, 573.0], [72.5, 574.0], [72.6, 574.0], [72.7, 574.0], [72.8, 575.0], [72.9, 575.0], [73.0, 576.0], [73.1, 577.0], [73.2, 577.0], [73.3, 578.0], [73.4, 578.0], [73.5, 579.0], [73.6, 579.0], [73.7, 580.0], [73.8, 580.0], [73.9, 581.0], [74.0, 581.0], [74.1, 581.0], [74.2, 582.0], [74.3, 582.0], [74.4, 583.0], [74.5, 583.0], [74.6, 583.0], [74.7, 584.0], [74.8, 584.0], [74.9, 585.0], [75.0, 585.0], [75.1, 586.0], [75.2, 586.0], [75.3, 587.0], [75.4, 587.0], [75.5, 588.0], [75.6, 588.0], [75.7, 589.0], [75.8, 589.0], [75.9, 590.0], [76.0, 590.0], [76.1, 591.0], [76.2, 591.0], [76.3, 592.0], [76.4, 592.0], [76.5, 593.0], [76.6, 593.0], [76.7, 594.0], [76.8, 594.0], [76.9, 595.0], [77.0, 595.0], [77.1, 596.0], [77.2, 596.0], [77.3, 597.0], [77.4, 597.0], [77.5, 598.0], [77.6, 598.0], [77.7, 599.0], [77.8, 599.0], [77.9, 600.0], [78.0, 601.0], [78.1, 601.0], [78.2, 602.0], [78.3, 603.0], [78.4, 603.0], [78.5, 604.0], [78.6, 605.0], [78.7, 605.0], [78.8, 606.0], [78.9, 607.0], [79.0, 608.0], [79.1, 608.0], [79.2, 609.0], [79.3, 609.0], [79.4, 610.0], [79.5, 611.0], [79.6, 611.0], [79.7, 612.0], [79.8, 612.0], [79.9, 613.0], [80.0, 613.0], [80.1, 614.0], [80.2, 615.0], [80.3, 615.0], [80.4, 616.0], [80.5, 617.0], [80.6, 618.0], [80.7, 619.0], [80.8, 620.0], [80.9, 621.0], [81.0, 621.0], [81.1, 622.0], [81.2, 623.0], [81.3, 623.0], [81.4, 624.0], [81.5, 624.0], [81.6, 625.0], [81.7, 626.0], [81.8, 627.0], [81.9, 628.0], [82.0, 628.0], [82.1, 629.0], [82.2, 630.0], [82.3, 631.0], [82.4, 632.0], [82.5, 632.0], [82.6, 634.0], [82.7, 634.0], [82.8, 635.0], [82.9, 636.0], [83.0, 637.0], [83.1, 637.0], [83.2, 638.0], [83.3, 639.0], [83.4, 640.0], [83.5, 641.0], [83.6, 642.0], [83.7, 643.0], [83.8, 644.0], [83.9, 645.0], [84.0, 646.0], [84.1, 646.0], [84.2, 648.0], [84.3, 649.0], [84.4, 651.0], [84.5, 652.0], [84.6, 653.0], [84.7, 654.0], [84.8, 655.0], [84.9, 656.0], [85.0, 657.0], [85.1, 659.0], [85.2, 661.0], [85.3, 663.0], [85.4, 664.0], [85.5, 666.0], [85.6, 668.0], [85.7, 669.0], [85.8, 671.0], [85.9, 673.0], [86.0, 676.0], [86.1, 678.0], [86.2, 679.0], [86.3, 682.0], [86.4, 683.0], [86.5, 687.0], [86.6, 690.0], [86.7, 693.0], [86.8, 696.0], [86.9, 700.0], [87.0, 702.0], [87.1, 706.0], [87.2, 711.0], [87.3, 718.0], [87.4, 722.0], [87.5, 727.0], [87.6, 734.0], [87.7, 747.0], [87.8, 754.0], [87.9, 761.0], [88.0, 770.0], [88.1, 773.0], [88.2, 778.0], [88.3, 782.0], [88.4, 798.0], [88.5, 810.0], [88.6, 814.0], [88.7, 819.0], [88.8, 825.0], [88.9, 835.0], [89.0, 847.0], [89.1, 852.0], [89.2, 858.0], [89.3, 862.0], [89.4, 868.0], [89.5, 879.0], [89.6, 885.0], [89.7, 891.0], [89.8, 895.0], [89.9, 904.0], [90.0, 911.0], [90.1, 919.0], [90.2, 1014.0], [90.3, 1021.0], [90.4, 1024.0], [90.5, 1028.0], [90.6, 1036.0], [90.7, 1044.0], [90.8, 1053.0], [90.9, 1108.0], [91.0, 1158.0], [91.1, 1205.0], [91.2, 1215.0], [91.3, 1223.0], [91.4, 1229.0], [91.5, 1235.0], [91.6, 1241.0], [91.7, 1250.0], [91.8, 1256.0], [91.9, 1265.0], [92.0, 1273.0], [92.1, 1293.0], [92.2, 1301.0], [92.3, 1306.0], [92.4, 1311.0], [92.5, 1315.0], [92.6, 1321.0], [92.7, 1324.0], [92.8, 1327.0], [92.9, 1335.0], [93.0, 1340.0], [93.1, 1344.0], [93.2, 1349.0], [93.3, 1352.0], [93.4, 1360.0], [93.5, 1369.0], [93.6, 1378.0], [93.7, 1383.0], [93.8, 1387.0], [93.9, 1392.0], [94.0, 1395.0], [94.1, 1401.0], [94.2, 1402.0], [94.3, 1404.0], [94.4, 1409.0], [94.5, 1411.0], [94.6, 1413.0], [94.7, 1417.0], [94.8, 1419.0], [94.9, 1420.0], [95.0, 1423.0], [95.1, 1424.0], [95.2, 1425.0], [95.3, 1426.0], [95.4, 1428.0], [95.5, 1429.0], [95.6, 1431.0], [95.7, 1433.0], [95.8, 1435.0], [95.9, 1436.0], [96.0, 1438.0], [96.1, 1441.0], [96.2, 1444.0], [96.3, 1447.0], [96.4, 1449.0], [96.5, 1452.0], [96.6, 1454.0], [96.7, 1457.0], [96.8, 1459.0], [96.9, 1462.0], [97.0, 1464.0], [97.1, 1467.0], [97.2, 1470.0], [97.3, 1472.0], [97.4, 1474.0], [97.5, 1481.0], [97.6, 1488.0], [97.7, 1496.0], [97.8, 1505.0], [97.9, 1515.0], [98.0, 1519.0], [98.1, 1524.0], [98.2, 1537.0], [98.3, 1545.0], [98.4, 1555.0], [98.5, 1576.0], [98.6, 1592.0], [98.7, 1609.0], [98.8, 1620.0], [98.9, 1630.0], [99.0, 1640.0], [99.1, 1645.0], [99.2, 1650.0], [99.3, 1660.0], [99.4, 1662.0], [99.5, 1676.0], [99.6, 1720.0], [99.7, 1789.0], [99.8, 2357.0], [99.9, 2461.0], [100.0, 3421.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2154.0, "series": [{"data": [[0.0, 429.0], [600.0, 907.0], [700.0, 153.0], [800.0, 144.0], [900.0, 30.0], [1000.0, 71.0], [1100.0, 21.0], [1200.0, 110.0], [1300.0, 191.0], [1400.0, 365.0], [1500.0, 92.0], [100.0, 694.0], [1600.0, 91.0], [1700.0, 18.0], [1800.0, 4.0], [2000.0, 1.0], [2300.0, 10.0], [2400.0, 6.0], [2500.0, 1.0], [200.0, 1418.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 1.0], [300.0, 1360.0], [400.0, 1726.0], [500.0, 2154.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 227.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5643.0, "series": [{"data": [[0.0, 5643.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4130.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 227.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 682.0674846625773, "minX": 1.6695564E12, "maxY": 816.4514677103717, "series": [{"data": [[1.66955646E12, 682.0674846625773], [1.6695564E12, 816.4514677103717]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.0, "maxY": 1640.0, "series": [{"data": [[2.0, 1640.0], [3.0, 13.0], [4.0, 26.0], [7.0, 18.4], [9.0, 20.666666666666668], [10.0, 31.0], [11.0, 31.0], [12.0, 20.0], [13.0, 1023.0], [14.0, 445.42857142857144], [15.0, 350.3333333333333], [16.0, 1027.0], [18.0, 1027.3333333333333], [19.0, 1026.25], [20.0, 1021.3333333333334], [21.0, 1020.0], [23.0, 1008.5], [24.0, 12.0], [25.0, 12.0], [26.0, 10.0], [27.0, 10.0], [29.0, 18.0], [30.0, 19.2], [31.0, 23.666666666666668], [33.0, 24.0], [32.0, 25.0], [34.0, 601.7142857142857], [36.0, 1024.111111111111], [39.0, 847.5000000000001], [38.0, 1014.0], [40.0, 9.0], [42.0, 31.5], [45.0, 34.0], [46.0, 34.0], [49.0, 21.249999999999996], [50.0, 18.666666666666668], [52.0, 1054.0], [55.0, 435.0], [54.0, 26.0], [57.0, 366.0], [59.0, 1046.6666666666667], [58.0, 1054.0], [60.0, 1046.0], [63.0, 1045.0], [62.0, 1045.0], [67.0, 1033.8], [65.0, 634.8], [71.0, 1018.4], [70.0, 1020.0], [75.0, 24.0], [74.0, 25.0], [73.0, 23.0], [72.0, 10.0], [79.0, 24.0], [78.0, 23.0], [77.0, 23.5], [83.0, 55.0], [81.0, 55.0], [80.0, 17.0], [86.0, 40.0], [85.0, 39.0], [84.0, 40.0], [88.0, 43.5], [102.0, 51.5], [101.0, 53.454545454545446], [100.0, 24.5], [107.0, 40.5], [106.0, 44.0], [105.0, 97.0], [104.0, 73.0], [111.0, 50.5], [109.0, 79.0], [108.0, 64.0], [114.0, 92.0], [113.0, 78.0], [112.0, 63.5], [119.0, 81.0], [118.0, 79.0], [117.0, 64.0], [123.0, 74.66666666666667], [122.0, 61.666666666666664], [121.0, 33.0], [125.0, 48.0], [124.0, 58.0], [133.0, 100.0], [129.0, 58.0], [128.0, 63.666666666666664], [142.0, 97.16666666666666], [141.0, 109.33333333333333], [139.0, 96.4], [138.0, 116.66666666666667], [137.0, 98.0], [148.0, 39.90909090909091], [149.0, 50.0], [150.0, 48.0], [151.0, 43.55555555555556], [147.0, 104.0], [146.0, 72.0], [144.0, 88.4], [157.0, 43.714285714285715], [153.0, 51.0], [159.0, 76.0], [158.0, 88.0], [155.0, 92.33333333333333], [154.0, 95.8], [152.0, 95.0], [163.0, 68.05000000000001], [160.0, 65.33333333333333], [167.0, 54.0], [166.0, 63.0], [165.0, 52.0], [164.0, 70.0], [162.0, 45.666666666666664], [169.0, 85.375], [173.0, 135.54545454545453], [175.0, 129.5], [174.0, 132.33333333333334], [180.0, 132.50000000000003], [182.0, 157.59999999999997], [183.0, 152.62500000000003], [177.0, 136.0], [176.0, 135.0], [191.0, 172.0], [185.0, 200.11111111111111], [189.0, 128.0], [188.0, 122.0], [187.0, 125.88888888888889], [192.0, 159.45454545454547], [197.0, 180.5625], [199.0, 248.0], [198.0, 126.0], [196.0, 126.75], [195.0, 128.0], [194.0, 128.5], [193.0, 119.5], [201.0, 187.75], [206.0, 113.95454545454547], [202.0, 107.0], [205.0, 130.6], [204.0, 122.25], [207.0, 147.0], [203.0, 113.0], [215.0, 107.2], [214.0, 97.66666666666667], [212.0, 139.0], [208.0, 117.11111111111111], [209.0, 123.0], [210.0, 123.0], [213.0, 113.0], [211.0, 105.0], [218.0, 131.0], [220.0, 112.33333333333334], [223.0, 91.0625], [222.0, 268.875], [221.0, 159.0], [216.0, 135.0], [227.0, 139.0], [224.0, 91.0], [230.0, 157.0], [229.0, 150.0], [226.0, 145.0], [228.0, 125.0], [239.0, 24.666666666666668], [237.0, 118.3125], [235.0, 122.0], [234.0, 153.04], [238.0, 155.0], [233.0, 158.0], [246.0, 49.00000000000001], [241.0, 43.5], [240.0, 158.0], [247.0, 151.0], [242.0, 150.75], [255.0, 174.375], [253.0, 118.5], [252.0, 77.25], [251.0, 75.83333333333333], [248.0, 145.71428571428572], [254.0, 133.33333333333334], [250.0, 128.0], [249.0, 138.5], [256.0, 169.0], [262.0, 67.58333333333334], [263.0, 468.33333333333337], [261.0, 178.0], [260.0, 123.66666666666666], [257.0, 154.5], [258.0, 146.0], [259.0, 172.0], [271.0, 142.66666666666666], [264.0, 1158.0], [267.0, 139.33333333333334], [266.0, 126.66666666666667], [268.0, 131.0], [285.0, 128.75], [274.0, 160.33333333333334], [273.0, 173.4], [279.0, 108.0], [278.0, 633.5], [275.0, 122.75], [284.0, 104.0], [276.0, 135.33333333333334], [277.0, 205.0], [281.0, 94.5217391304348], [282.0, 113.07547169811323], [283.0, 118.55555555555556], [286.0, 98.5], [280.0, 124.0], [302.0, 143.44444444444446], [301.0, 207.0], [303.0, 175.0], [300.0, 188.66666666666666], [299.0, 177.66666666666666], [298.0, 647.0], [296.0, 194.5], [295.0, 188.5], [289.0, 105.0], [288.0, 91.0], [291.0, 107.5], [290.0, 118.0], [294.0, 118.0], [292.0, 117.0], [318.0, 172.0], [304.0, 272.8571428571429], [305.0, 497.0], [307.0, 187.0], [306.0, 175.0], [311.0, 423.0], [310.0, 186.0], [309.0, 189.0], [308.0, 184.0], [319.0, 165.75], [317.0, 181.0], [316.0, 170.5], [315.0, 406.25], [314.0, 197.2857142857143], [313.0, 239.66666666666666], [312.0, 191.0], [333.0, 169.6], [325.0, 152.1111111111111], [326.0, 180.0], [327.0, 172.76], [328.0, 150.5909090909091], [329.0, 242.60714285714286], [330.0, 175.44444444444446], [331.0, 184.04878048780486], [332.0, 156.5], [323.0, 650.0], [321.0, 180.0], [320.0, 491.33333333333337], [334.0, 168.0], [335.0, 174.33333333333334], [349.0, 1261.0], [336.0, 243.46153846153848], [350.0, 401.0], [348.0, 513.0], [338.0, 681.0], [339.0, 1278.0], [347.0, 250.6], [346.0, 262.0], [345.0, 295.4], [344.0, 284.0], [343.0, 608.3333333333334], [342.0, 261.0], [341.0, 521.75], [340.0, 257.6], [367.0, 716.3846153846154], [362.0, 267.0], [361.0, 1263.0], [360.0, 483.3333333333333], [357.0, 595.0], [356.0, 584.0], [355.0, 457.42857142857144], [354.0, 264.0], [353.0, 290.0], [352.0, 521.25], [381.0, 1062.25], [382.0, 270.0], [380.0, 258.6666666666667], [371.0, 250.5], [370.0, 258.0], [369.0, 242.0], [368.0, 240.0], [378.0, 269.0], [377.0, 250.0], [376.0, 250.0], [375.0, 506.75], [374.0, 260.3333333333333], [373.0, 262.0], [372.0, 240.0], [397.0, 248.0], [399.0, 251.125], [396.0, 368.875], [394.0, 1069.1666666666667], [393.0, 566.8888888888889], [392.0, 227.83333333333334], [391.0, 247.0], [389.0, 256.2], [387.0, 254.16666666666666], [386.0, 262.83333333333337], [385.0, 596.0], [384.0, 239.0], [413.0, 296.1111111111111], [408.0, 245.70000000000002], [412.0, 251.2500000000001], [403.0, 1433.0], [402.0, 406.0], [401.0, 263.0], [400.0, 254.0], [414.0, 248.46153846153848], [415.0, 292.5], [409.0, 296.0], [410.0, 287.0], [406.0, 310.0], [405.0, 575.5], [429.0, 454.57142857142856], [420.0, 276.8888888888889], [431.0, 426.33333333333326], [428.0, 476.66666666666663], [427.0, 303.225806451613], [426.0, 301.2727272727273], [418.0, 286.3333333333333], [416.0, 337.42424242424244], [419.0, 286.0], [446.0, 448.8181818181818], [447.0, 469.0], [445.0, 347.25], [444.0, 283.2857142857143], [443.0, 288.8571428571429], [442.0, 285.6666666666667], [441.0, 294.0], [439.0, 295.5], [434.0, 276.0], [433.0, 283.875], [437.0, 292.25], [436.0, 282.125], [461.0, 657.0], [460.0, 357.5], [459.0, 321.0], [458.0, 705.0000000000001], [457.0, 931.5714285714286], [455.0, 750.0], [453.0, 503.8], [452.0, 529.6], [451.0, 547.3333333333334], [449.0, 628.1666666666666], [479.0, 252.5], [476.0, 236.66666666666669], [467.0, 728.3499999999999], [477.0, 270.2897196261682], [478.0, 261.45714285714297], [475.0, 325.0], [474.0, 920.0], [473.0, 880.3333333333334], [472.0, 834.6], [470.0, 774.0], [468.0, 312.0], [480.0, 254.23076923076925], [481.0, 232.13513513513516], [482.0, 311.44444444444446], [483.0, 281.25], [495.0, 344.0], [493.0, 447.1538461538462], [488.0, 342.25], [508.0, 354.0], [510.0, 339.5], [511.0, 342.5], [509.0, 338.6], [507.0, 328.5], [506.0, 332.0], [503.0, 335.6666666666667], [497.0, 345.0], [496.0, 346.5], [499.0, 332.5], [498.0, 266.0], [502.0, 324.25], [501.0, 600.3846153846155], [500.0, 345.7], [537.0, 235.0], [542.0, 1631.0], [543.0, 349.5], [533.0, 1165.7857142857142], [541.0, 829.0], [539.0, 1427.0], [538.0, 1429.0], [536.0, 999.2], [519.0, 756.1428571428571], [518.0, 776.3529411764705], [517.0, 1466.0], [516.0, 623.25], [515.0, 1166.5], [514.0, 1150.0], [513.0, 554.0], [512.0, 343.5], [525.0, 1442.5], [524.0, 221.33333333333334], [523.0, 525.75], [522.0, 216.0], [521.0, 211.0], [520.0, 1443.0], [527.0, 1414.0], [535.0, 245.0], [534.0, 1363.5714285714287], [571.0, 274.47826086956513], [568.0, 287.69918699186996], [551.0, 757.0625], [558.0, 1426.3333333333335], [557.0, 1075.2857142857142], [556.0, 800.1666666666666], [555.0, 331.2], [553.0, 603.5], [552.0, 702.4], [569.0, 360.5], [570.0, 281.2307692307692], [572.0, 317.0294117647059], [574.0, 305.2], [560.0, 1136.2941176470592], [563.0, 803.3333333333334], [562.0, 1151.076923076923], [565.0, 478.0], [564.0, 802.6666666666666], [573.0, 410.8], [567.0, 934.2068965517242], [566.0, 1020.6666666666666], [592.0, 443.0], [596.0, 449.0], [607.0, 376.875], [580.0, 423.0], [579.0, 406.8], [578.0, 331.0], [577.0, 332.0], [576.0, 332.0], [591.0, 407.0], [588.0, 415.125], [587.0, 410.0], [586.0, 378.4], [584.0, 399.79310344827593], [599.0, 423.0], [598.0, 428.0], [597.0, 398.0], [595.0, 445.0], [594.0, 453.0], [593.0, 451.0], [633.0, 419.55555555555554], [637.0, 393.25], [639.0, 363.375], [627.0, 390.0909090909092], [629.0, 413.8], [628.0, 372.0], [636.0, 424.0], [635.0, 423.6], [634.0, 421.3333333333333], [632.0, 424.0], [615.0, 409.0], [614.0, 383.7142857142857], [613.0, 350.0], [612.0, 351.66666666666663], [611.0, 335.0], [610.0, 373.0], [609.0, 387.6666666666667], [608.0, 354.72727272727275], [622.0, 401.14285714285717], [621.0, 388.5], [620.0, 409.3333333333333], [619.0, 409.6], [618.0, 403.0], [617.0, 411.07692307692304], [631.0, 417.0], [630.0, 419.3333333333333], [664.0, 372.0], [668.0, 292.6666666666667], [670.0, 159.5], [656.0, 404.16666666666663], [659.0, 335.625], [657.0, 404.0], [667.0, 318.75], [666.0, 822.0], [665.0, 382.61538461538464], [654.0, 404.1666666666667], [641.0, 341.25], [640.0, 343.75], [643.0, 393.0], [642.0, 384.0], [647.0, 398.3333333333333], [646.0, 396.91666666666663], [653.0, 401.22222222222223], [652.0, 398.0], [651.0, 393.5], [649.0, 402.0], [648.0, 396.5], [663.0, 373.0], [662.0, 316.4], [661.0, 367.0], [660.0, 310.1666666666667], [698.0, 316.125], [678.0, 347.7999999999999], [679.0, 352.1153846153846], [680.0, 340.1325301204819], [681.0, 296.29999999999995], [682.0, 364.1460674157304], [683.0, 317.5], [687.0, 328.3333333333333], [673.0, 242.54545454545453], [672.0, 159.66666666666666], [675.0, 331.0], [674.0, 218.0], [677.0, 310.75], [676.0, 290.0], [685.0, 318.55555555555554], [703.0, 290.0], [689.0, 318.0], [688.0, 325.5], [695.0, 291.75], [693.0, 295.4814814814816], [697.0, 295.6], [696.0, 298.5], [709.0, 475.66666666666663], [707.0, 292.00000000000006], [706.0, 284.25], [704.0, 302.8], [719.0, 420.4166666666667], [717.0, 1045.0], [716.0, 749.5], [708.0, 394.57142857142856], [713.0, 399.75000000000006], [712.0, 827.75], [714.0, 683.0], [715.0, 334.6666666666667], [724.0, 934.0], [723.0, 986.4999999999999], [722.0, 754.25], [721.0, 242.0], [720.0, 493.0], [725.0, 569.5714285714286], [727.0, 361.0], [726.0, 752.0], [733.0, 311.3], [729.0, 619.6666666666666], [728.0, 447.6666666666667], [711.0, 570.9767441860465], [760.0, 421.5], [764.0, 317.5], [767.0, 335.0769230769231], [754.0, 420.8666666666667], [752.0, 416.75], [756.0, 425.3333333333333], [755.0, 424.5], [766.0, 338.85714285714283], [765.0, 369.0], [763.0, 300.8], [762.0, 391.8181818181818], [761.0, 419.3333333333333], [751.0, 554.5625], [737.0, 1060.3333333333333], [739.0, 426.5], [740.0, 887.0], [742.0, 513.0882352941177], [741.0, 599.2105263157895], [750.0, 414.75], [749.0, 1032.1666666666667], [748.0, 756.875], [746.0, 809.75], [745.0, 654.0851063829789], [744.0, 222.0], [759.0, 420.125], [757.0, 415.5], [796.0, 424.625], [799.0, 336.46666666666664], [784.0, 407.00000000000006], [798.0, 450.75000000000006], [797.0, 380.5], [795.0, 379.8888888888889], [794.0, 392.0], [793.0, 363.09999999999997], [792.0, 369.728813559322], [777.0, 437.00000000000006], [781.0, 244.0], [775.0, 426.0], [768.0, 387.7272727272727], [786.0, 394.08333333333337], [785.0, 370.68571428571437], [819.0, 397.0], [822.0, 414.0], [829.0, 395.5], [828.0, 625.4], [827.0, 427.04761904761904], [815.0, 401.0], [807.0, 396.5], [800.0, 338.54545454545456], [814.0, 397.5], [813.0, 483.1333333333332], [808.0, 398.9767441860464], [821.0, 414.75], [820.0, 400.3], [818.0, 392.8], [817.0, 893.5], [816.0, 394.3333333333333], [860.0, 593.0], [836.0, 380.7953216374269], [835.0, 413.972972972973], [834.0, 470.05555555555566], [847.0, 389.8421052631579], [846.0, 529.8571428571428], [845.0, 379.4], [844.0, 378.0], [843.0, 385.842105263158], [842.0, 354.0], [841.0, 404.2857142857143], [840.0, 401.0], [837.0, 391.95726495726507], [863.0, 1199.25], [849.0, 778.0], [848.0, 818.3076923076924], [851.0, 924.0], [850.0, 762.0], [853.0, 1052.0714285714284], [852.0, 1204.3157894736842], [855.0, 843.8709677419354], [854.0, 1023.1666666666666], [862.0, 864.6666666666667], [861.0, 1082.6], [859.0, 468.5], [858.0, 1419.3333333333333], [857.0, 877.3529411764704], [856.0, 1303.0714285714284], [839.0, 390.0], [838.0, 371.6666666666667], [890.0, 774.0526315789473], [894.0, 521.6], [895.0, 707.0], [881.0, 903.6666666666666], [880.0, 746.0], [883.0, 545.6666666666666], [882.0, 599.1666666666667], [885.0, 740.9736842105264], [884.0, 856.6999999999999], [893.0, 516.0], [892.0, 570.448275862069], [891.0, 534.0000000000001], [888.0, 794.15], [871.0, 589.6153846153845], [870.0, 576.6999999999999], [869.0, 574.6666666666666], [868.0, 574.7], [867.0, 577.0], [866.0, 1302.3750000000002], [865.0, 886.2142857142856], [879.0, 912.0], [878.0, 815.952380952381], [877.0, 554.0], [876.0, 1239.8333333333335], [875.0, 644.1818181818181], [874.0, 474.75], [873.0, 1393.0], [872.0, 1267.875], [887.0, 630.0833333333334], [886.0, 645.0799999999999], [921.0, 654.7142857142857], [925.0, 653.2173913043476], [926.0, 259.0], [914.0, 968.4999999999999], [917.0, 1182.3333333333333], [916.0, 581.0], [915.0, 797.9444444444445], [924.0, 638.4285714285714], [923.0, 641.9166666666667], [922.0, 716.8461538461538], [920.0, 622.0], [903.0, 856.875], [902.0, 726.8043478260869], [901.0, 669.1724137931035], [900.0, 642.9333333333334], [899.0, 739.5], [898.0, 516.0], [897.0, 633.1111111111112], [896.0, 517.9354838709679], [911.0, 488.5], [909.0, 485.5], [908.0, 472.25], [907.0, 586.6666666666666], [906.0, 489.0], [905.0, 585.0882352941177], [904.0, 669.3199999999999], [919.0, 1525.0], [918.0, 931.375], [956.0, 566.6896551724137], [959.0, 1216.9444444444441], [944.0, 717.0384615384615], [946.0, 631.6], [945.0, 587.3636363636364], [948.0, 904.25], [947.0, 700.8], [958.0, 911.2], [957.0, 681.0357142857144], [955.0, 598.375], [954.0, 490.0], [953.0, 470.75], [952.0, 734.1801801801798], [943.0, 610.2564102564104], [928.0, 251.25], [930.0, 238.5], [929.0, 240.6615384615384], [933.0, 233.33333333333331], [931.0, 235.0], [935.0, 233.66666666666666], [934.0, 233.0], [942.0, 989.8823529411765], [941.0, 676.0], [940.0, 960.1999999999999], [939.0, 544.3333333333334], [938.0, 427.7777777777777], [937.0, 725.0], [936.0, 231.58823529411762], [951.0, 488.0], [950.0, 496.84615384615387], [985.0, 802.7796610169493], [989.0, 535.8235294117646], [990.0, 513.6086956521739], [976.0, 523.4285714285714], [978.0, 448.85], [977.0, 525.2222222222222], [981.0, 536.9], [979.0, 541.5714285714286], [988.0, 514.0454545454545], [987.0, 516.2666666666668], [986.0, 543.8545454545454], [983.0, 693.0], [984.0, 512.0], [967.0, 621.1463414634146], [966.0, 574.4], [965.0, 940.5], [964.0, 987.8181818181819], [963.0, 935.7272727272726], [962.0, 847.1499999999999], [960.0, 1290.5454545454547], [974.0, 580.16], [973.0, 546.4444444444445], [972.0, 513.6], [971.0, 522.7142857142857], [970.0, 546.5217391304348], [969.0, 628.0000000000001], [968.0, 1090.5301204819273], [982.0, 422.0], [996.0, 739.090909090909], [1000.0, 612.5657370517922], [999.0, 661.4190476190477], [998.0, 619.4047619047619], [997.0, 757.9850746268659], [995.0, 721.4411764705882], [994.0, 717.9527027027027], [993.0, 520.4399999999999], [992.0, 498.26666666666677], [1.0, 1.6666666666666667]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[750.7372000000004, 515.8033000000029]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15566.5, "minX": 1.6695564E12, "maxY": 17288.833333333332, "series": [{"data": [[1.66955646E12, 16544.5], [1.6695564E12, 17288.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66955646E12, 15566.5], [1.6695564E12, 16266.833333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 489.86281800391424, "minX": 1.6695564E12, "maxY": 542.9108384458076, "series": [{"data": [[1.66955646E12, 542.9108384458076], [1.6695564E12, 489.86281800391424]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 489.3477495107644, "minX": 1.6695564E12, "maxY": 542.1353783231075, "series": [{"data": [[1.66955646E12, 542.1353783231075], [1.6695564E12, 489.3477495107644]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 60.808414872798515, "minX": 1.6695564E12, "maxY": 176.7832310838444, "series": [{"data": [[1.66955646E12, 176.7832310838444], [1.6695564E12, 60.808414872798515]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6695564E12, "maxY": 3421.0, "series": [{"data": [[1.66955646E12, 3421.0], [1.6695564E12, 2516.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66955646E12, 1335.0], [1.6695564E12, 655.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66955646E12, 1662.0], [1.6695564E12, 1516.7800000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66955646E12, 1446.0], [1.6695564E12, 885.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66955646E12, 1.0], [1.6695564E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66955646E12, 425.0], [1.6695564E12, 502.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 7.0, "maxY": 613.0, "series": [{"data": [[1247.0, 613.0], [1477.0, 376.0], [1530.0, 530.0], [1502.0, 536.0], [1521.0, 413.0], [1619.0, 318.0], [856.0, 164.0], [7.0, 2.0], [241.0, 56.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1619.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 7.0, "maxY": 613.0, "series": [{"data": [[1247.0, 613.0], [1477.0, 375.0], [1530.0, 530.0], [1502.0, 535.0], [1521.0, 413.0], [1619.0, 318.0], [856.0, 163.5], [7.0, 2.0], [241.0, 56.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1619.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 65.08333333333333, "minX": 1.6695564E12, "maxY": 101.58333333333333, "series": [{"data": [[1.66955646E12, 65.08333333333333], [1.6695564E12, 101.58333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 81.5, "minX": 1.6695564E12, "maxY": 85.16666666666667, "series": [{"data": [[1.66955646E12, 81.5], [1.6695564E12, 85.16666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66955646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 81.5, "minX": 1.6695564E12, "maxY": 85.16666666666667, "series": [{"data": [[1.66955646E12, 81.5], [1.6695564E12, 85.16666666666667]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 81.5, "minX": 1.6695564E12, "maxY": 85.16666666666667, "series": [{"data": [[1.66955646E12, 81.5], [1.6695564E12, 85.16666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66955646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

