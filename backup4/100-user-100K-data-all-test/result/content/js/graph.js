/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 668.0, "minX": 0.0, "maxY": 43900.0, "series": [{"data": [[0.0, 12082.0], [0.1, 12082.0], [0.2, 12082.0], [0.3, 12082.0], [0.4, 12082.0], [0.5, 12082.0], [0.6, 12082.0], [0.7, 12082.0], [0.8, 12082.0], [0.9, 12082.0], [1.0, 14612.0], [1.1, 14612.0], [1.2, 14612.0], [1.3, 14612.0], [1.4, 14612.0], [1.5, 14612.0], [1.6, 14612.0], [1.7, 14612.0], [1.8, 14612.0], [1.9, 14612.0], [2.0, 15516.0], [2.1, 15516.0], [2.2, 15516.0], [2.3, 15516.0], [2.4, 15516.0], [2.5, 15516.0], [2.6, 15516.0], [2.7, 15516.0], [2.8, 15516.0], [2.9, 15516.0], [3.0, 16875.0], [3.1, 16875.0], [3.2, 16875.0], [3.3, 16875.0], [3.4, 16875.0], [3.5, 16875.0], [3.6, 16875.0], [3.7, 16875.0], [3.8, 16875.0], [3.9, 16875.0], [4.0, 20132.0], [4.1, 20132.0], [4.2, 20132.0], [4.3, 20132.0], [4.4, 20132.0], [4.5, 20132.0], [4.6, 20132.0], [4.7, 20132.0], [4.8, 20132.0], [4.9, 20132.0], [5.0, 20144.0], [5.1, 20144.0], [5.2, 20144.0], [5.3, 20144.0], [5.4, 20144.0], [5.5, 20144.0], [5.6, 20144.0], [5.7, 20144.0], [5.8, 20144.0], [5.9, 20144.0], [6.0, 20170.0], [6.1, 20170.0], [6.2, 20170.0], [6.3, 20170.0], [6.4, 20170.0], [6.5, 20170.0], [6.6, 20170.0], [6.7, 20170.0], [6.8, 20170.0], [6.9, 20170.0], [7.0, 21041.0], [7.1, 21041.0], [7.2, 21041.0], [7.3, 21041.0], [7.4, 21041.0], [7.5, 21041.0], [7.6, 21041.0], [7.7, 21041.0], [7.8, 21041.0], [7.9, 21041.0], [8.0, 23126.0], [8.1, 23126.0], [8.2, 23126.0], [8.3, 23126.0], [8.4, 23126.0], [8.5, 23126.0], [8.6, 23126.0], [8.7, 23126.0], [8.8, 23126.0], [8.9, 23126.0], [9.0, 23250.0], [9.1, 23250.0], [9.2, 23250.0], [9.3, 23250.0], [9.4, 23250.0], [9.5, 23250.0], [9.6, 23250.0], [9.7, 23250.0], [9.8, 23250.0], [9.9, 23250.0], [10.0, 24269.0], [10.1, 24269.0], [10.2, 24269.0], [10.3, 24269.0], [10.4, 24269.0], [10.5, 24269.0], [10.6, 24269.0], [10.7, 24269.0], [10.8, 24269.0], [10.9, 24269.0], [11.0, 24757.0], [11.1, 24757.0], [11.2, 24757.0], [11.3, 24757.0], [11.4, 24757.0], [11.5, 24757.0], [11.6, 24757.0], [11.7, 24757.0], [11.8, 24757.0], [11.9, 24757.0], [12.0, 29914.0], [12.1, 29914.0], [12.2, 29914.0], [12.3, 29914.0], [12.4, 29914.0], [12.5, 29914.0], [12.6, 29914.0], [12.7, 29914.0], [12.8, 29914.0], [12.9, 29914.0], [13.0, 30905.0], [13.1, 30905.0], [13.2, 30905.0], [13.3, 30905.0], [13.4, 30905.0], [13.5, 30905.0], [13.6, 30905.0], [13.7, 30905.0], [13.8, 30905.0], [13.9, 30905.0], [14.0, 34912.0], [14.1, 34912.0], [14.2, 34912.0], [14.3, 34912.0], [14.4, 34912.0], [14.5, 34912.0], [14.6, 34912.0], [14.7, 34912.0], [14.8, 34912.0], [14.9, 34912.0], [15.0, 35929.0], [15.1, 35929.0], [15.2, 35929.0], [15.3, 35929.0], [15.4, 35929.0], [15.5, 35929.0], [15.6, 35929.0], [15.7, 35929.0], [15.8, 35929.0], [15.9, 35929.0], [16.0, 39305.0], [16.1, 39305.0], [16.2, 39305.0], [16.3, 39305.0], [16.4, 39305.0], [16.5, 39305.0], [16.6, 39305.0], [16.7, 39305.0], [16.8, 39305.0], [16.9, 39305.0], [17.0, 39958.0], [17.1, 39958.0], [17.2, 39958.0], [17.3, 39958.0], [17.4, 39958.0], [17.5, 39958.0], [17.6, 39958.0], [17.7, 39958.0], [17.8, 39958.0], [17.9, 39958.0], [18.0, 40598.0], [18.1, 40598.0], [18.2, 40598.0], [18.3, 40598.0], [18.4, 40598.0], [18.5, 40598.0], [18.6, 40598.0], [18.7, 40598.0], [18.8, 40598.0], [18.9, 40598.0], [19.0, 40648.0], [19.1, 40648.0], [19.2, 40648.0], [19.3, 40648.0], [19.4, 40648.0], [19.5, 40648.0], [19.6, 40648.0], [19.7, 40648.0], [19.8, 40648.0], [19.9, 40648.0], [20.0, 40668.0], [20.1, 40668.0], [20.2, 40668.0], [20.3, 40668.0], [20.4, 40668.0], [20.5, 40668.0], [20.6, 40668.0], [20.7, 40668.0], [20.8, 40668.0], [20.9, 40668.0], [21.0, 41015.0], [21.1, 41015.0], [21.2, 41015.0], [21.3, 41015.0], [21.4, 41015.0], [21.5, 41015.0], [21.6, 41015.0], [21.7, 41015.0], [21.8, 41015.0], [21.9, 41015.0], [22.0, 41186.0], [22.1, 41186.0], [22.2, 41186.0], [22.3, 41186.0], [22.4, 41186.0], [22.5, 41186.0], [22.6, 41186.0], [22.7, 41186.0], [22.8, 41186.0], [22.9, 41186.0], [23.0, 42332.0], [23.1, 42332.0], [23.2, 42332.0], [23.3, 42332.0], [23.4, 42332.0], [23.5, 42332.0], [23.6, 42332.0], [23.7, 42332.0], [23.8, 42332.0], [23.9, 42332.0], [24.0, 42387.0], [24.1, 42387.0], [24.2, 42387.0], [24.3, 42387.0], [24.4, 42387.0], [24.5, 42387.0], [24.6, 42387.0], [24.7, 42387.0], [24.8, 42387.0], [24.9, 42387.0], [25.0, 42471.0], [25.1, 42471.0], [25.2, 42471.0], [25.3, 42471.0], [25.4, 42471.0], [25.5, 42471.0], [25.6, 42471.0], [25.7, 42471.0], [25.8, 42471.0], [25.9, 42471.0], [26.0, 42523.0], [26.1, 42523.0], [26.2, 42523.0], [26.3, 42523.0], [26.4, 42523.0], [26.5, 42523.0], [26.6, 42523.0], [26.7, 42523.0], [26.8, 42523.0], [26.9, 42523.0], [27.0, 42624.0], [27.1, 42624.0], [27.2, 42624.0], [27.3, 42624.0], [27.4, 42624.0], [27.5, 42624.0], [27.6, 42624.0], [27.7, 42624.0], [27.8, 42624.0], [27.9, 42624.0], [28.0, 42853.0], [28.1, 42853.0], [28.2, 42853.0], [28.3, 42853.0], [28.4, 42853.0], [28.5, 42853.0], [28.6, 42853.0], [28.7, 42853.0], [28.8, 42853.0], [28.9, 42853.0], [29.0, 42957.0], [29.1, 42957.0], [29.2, 42957.0], [29.3, 42957.0], [29.4, 42957.0], [29.5, 42957.0], [29.6, 42957.0], [29.7, 42957.0], [29.8, 42957.0], [29.9, 42957.0], [30.0, 43029.0], [30.1, 43029.0], [30.2, 43029.0], [30.3, 43029.0], [30.4, 43029.0], [30.5, 43029.0], [30.6, 43029.0], [30.7, 43029.0], [30.8, 43029.0], [30.9, 43029.0], [31.0, 43039.0], [31.1, 43039.0], [31.2, 43039.0], [31.3, 43039.0], [31.4, 43039.0], [31.5, 43039.0], [31.6, 43039.0], [31.7, 43039.0], [31.8, 43039.0], [31.9, 43039.0], [32.0, 43043.0], [32.1, 43043.0], [32.2, 43043.0], [32.3, 43043.0], [32.4, 43043.0], [32.5, 43043.0], [32.6, 43043.0], [32.7, 43043.0], [32.8, 43043.0], [32.9, 43043.0], [33.0, 43044.0], [33.1, 43044.0], [33.2, 43044.0], [33.3, 43044.0], [33.4, 43044.0], [33.5, 43044.0], [33.6, 43044.0], [33.7, 43044.0], [33.8, 43044.0], [33.9, 43044.0], [34.0, 43055.0], [34.1, 43055.0], [34.2, 43055.0], [34.3, 43055.0], [34.4, 43055.0], [34.5, 43055.0], [34.6, 43055.0], [34.7, 43055.0], [34.8, 43055.0], [34.9, 43055.0], [35.0, 43071.0], [35.1, 43071.0], [35.2, 43071.0], [35.3, 43071.0], [35.4, 43071.0], [35.5, 43071.0], [35.6, 43071.0], [35.7, 43071.0], [35.8, 43071.0], [35.9, 43071.0], [36.0, 43115.0], [36.1, 43115.0], [36.2, 43115.0], [36.3, 43115.0], [36.4, 43115.0], [36.5, 43115.0], [36.6, 43115.0], [36.7, 43115.0], [36.8, 43115.0], [36.9, 43115.0], [37.0, 43153.0], [37.1, 43153.0], [37.2, 43153.0], [37.3, 43153.0], [37.4, 43153.0], [37.5, 43153.0], [37.6, 43153.0], [37.7, 43153.0], [37.8, 43153.0], [37.9, 43153.0], [38.0, 43171.0], [38.1, 43171.0], [38.2, 43171.0], [38.3, 43171.0], [38.4, 43171.0], [38.5, 43171.0], [38.6, 43171.0], [38.7, 43171.0], [38.8, 43171.0], [38.9, 43171.0], [39.0, 43173.0], [39.1, 43173.0], [39.2, 43173.0], [39.3, 43173.0], [39.4, 43173.0], [39.5, 43173.0], [39.6, 43173.0], [39.7, 43173.0], [39.8, 43173.0], [39.9, 43173.0], [40.0, 43176.0], [40.1, 43176.0], [40.2, 43176.0], [40.3, 43176.0], [40.4, 43176.0], [40.5, 43176.0], [40.6, 43176.0], [40.7, 43176.0], [40.8, 43176.0], [40.9, 43176.0], [41.0, 43196.0], [41.1, 43196.0], [41.2, 43196.0], [41.3, 43196.0], [41.4, 43196.0], [41.5, 43196.0], [41.6, 43196.0], [41.7, 43196.0], [41.8, 43196.0], [41.9, 43196.0], [42.0, 43219.0], [42.1, 43219.0], [42.2, 43219.0], [42.3, 43219.0], [42.4, 43219.0], [42.5, 43219.0], [42.6, 43219.0], [42.7, 43219.0], [42.8, 43219.0], [42.9, 43219.0], [43.0, 43232.0], [43.1, 43232.0], [43.2, 43232.0], [43.3, 43232.0], [43.4, 43232.0], [43.5, 43232.0], [43.6, 43232.0], [43.7, 43232.0], [43.8, 43232.0], [43.9, 43232.0], [44.0, 43247.0], [44.1, 43247.0], [44.2, 43247.0], [44.3, 43247.0], [44.4, 43247.0], [44.5, 43247.0], [44.6, 43247.0], [44.7, 43247.0], [44.8, 43247.0], [44.9, 43247.0], [45.0, 43254.0], [45.1, 43254.0], [45.2, 43254.0], [45.3, 43254.0], [45.4, 43254.0], [45.5, 43254.0], [45.6, 43254.0], [45.7, 43254.0], [45.8, 43254.0], [45.9, 43254.0], [46.0, 43259.0], [46.1, 43259.0], [46.2, 43259.0], [46.3, 43259.0], [46.4, 43259.0], [46.5, 43259.0], [46.6, 43259.0], [46.7, 43259.0], [46.8, 43259.0], [46.9, 43259.0], [47.0, 43268.0], [47.1, 43268.0], [47.2, 43268.0], [47.3, 43268.0], [47.4, 43268.0], [47.5, 43268.0], [47.6, 43268.0], [47.7, 43268.0], [47.8, 43268.0], [47.9, 43268.0], [48.0, 43272.0], [48.1, 43272.0], [48.2, 43272.0], [48.3, 43272.0], [48.4, 43272.0], [48.5, 43272.0], [48.6, 43272.0], [48.7, 43272.0], [48.8, 43272.0], [48.9, 43272.0], [49.0, 43277.0], [49.1, 43277.0], [49.2, 43277.0], [49.3, 43277.0], [49.4, 43277.0], [49.5, 43277.0], [49.6, 43277.0], [49.7, 43277.0], [49.8, 43277.0], [49.9, 43277.0], [50.0, 43290.0], [50.1, 43290.0], [50.2, 43290.0], [50.3, 43290.0], [50.4, 43290.0], [50.5, 43290.0], [50.6, 43290.0], [50.7, 43290.0], [50.8, 43290.0], [50.9, 43290.0], [51.0, 43293.0], [51.1, 43293.0], [51.2, 43293.0], [51.3, 43293.0], [51.4, 43293.0], [51.5, 43293.0], [51.6, 43293.0], [51.7, 43293.0], [51.8, 43293.0], [51.9, 43293.0], [52.0, 43391.0], [52.1, 43391.0], [52.2, 43391.0], [52.3, 43391.0], [52.4, 43391.0], [52.5, 43391.0], [52.6, 43391.0], [52.7, 43391.0], [52.8, 43391.0], [52.9, 43391.0], [53.0, 43391.0], [53.1, 43391.0], [53.2, 43391.0], [53.3, 43391.0], [53.4, 43391.0], [53.5, 43391.0], [53.6, 43391.0], [53.7, 43391.0], [53.8, 43391.0], [53.9, 43391.0], [54.0, 43393.0], [54.1, 43393.0], [54.2, 43393.0], [54.3, 43393.0], [54.4, 43393.0], [54.5, 43393.0], [54.6, 43393.0], [54.7, 43393.0], [54.8, 43393.0], [54.9, 43393.0], [55.0, 43446.0], [55.1, 43446.0], [55.2, 43446.0], [55.3, 43446.0], [55.4, 43446.0], [55.5, 43446.0], [55.6, 43446.0], [55.7, 43446.0], [55.8, 43446.0], [55.9, 43446.0], [56.0, 43524.0], [56.1, 43524.0], [56.2, 43524.0], [56.3, 43524.0], [56.4, 43524.0], [56.5, 43524.0], [56.6, 43524.0], [56.7, 43524.0], [56.8, 43524.0], [56.9, 43524.0], [57.0, 43555.0], [57.1, 43555.0], [57.2, 43555.0], [57.3, 43555.0], [57.4, 43555.0], [57.5, 43555.0], [57.6, 43555.0], [57.7, 43555.0], [57.8, 43555.0], [57.9, 43555.0], [58.0, 43567.0], [58.1, 43567.0], [58.2, 43567.0], [58.3, 43567.0], [58.4, 43567.0], [58.5, 43567.0], [58.6, 43567.0], [58.7, 43567.0], [58.8, 43567.0], [58.9, 43567.0], [59.0, 43584.0], [59.1, 43584.0], [59.2, 43584.0], [59.3, 43584.0], [59.4, 43584.0], [59.5, 43584.0], [59.6, 43584.0], [59.7, 43584.0], [59.8, 43584.0], [59.9, 43584.0], [60.0, 43595.0], [60.1, 43595.0], [60.2, 43595.0], [60.3, 43595.0], [60.4, 43595.0], [60.5, 43595.0], [60.6, 43595.0], [60.7, 43595.0], [60.8, 43595.0], [60.9, 43595.0], [61.0, 43598.0], [61.1, 43598.0], [61.2, 43598.0], [61.3, 43598.0], [61.4, 43598.0], [61.5, 43598.0], [61.6, 43598.0], [61.7, 43598.0], [61.8, 43598.0], [61.9, 43598.0], [62.0, 43635.0], [62.1, 43635.0], [62.2, 43635.0], [62.3, 43635.0], [62.4, 43635.0], [62.5, 43635.0], [62.6, 43635.0], [62.7, 43635.0], [62.8, 43635.0], [62.9, 43635.0], [63.0, 43648.0], [63.1, 43648.0], [63.2, 43648.0], [63.3, 43648.0], [63.4, 43648.0], [63.5, 43648.0], [63.6, 43648.0], [63.7, 43648.0], [63.8, 43648.0], [63.9, 43648.0], [64.0, 43655.0], [64.1, 43655.0], [64.2, 43655.0], [64.3, 43655.0], [64.4, 43655.0], [64.5, 43655.0], [64.6, 43655.0], [64.7, 43655.0], [64.8, 43655.0], [64.9, 43655.0], [65.0, 43669.0], [65.1, 43669.0], [65.2, 43669.0], [65.3, 43669.0], [65.4, 43669.0], [65.5, 43669.0], [65.6, 43669.0], [65.7, 43669.0], [65.8, 43669.0], [65.9, 43669.0], [66.0, 43698.0], [66.1, 43698.0], [66.2, 43698.0], [66.3, 43698.0], [66.4, 43698.0], [66.5, 43698.0], [66.6, 43698.0], [66.7, 43698.0], [66.8, 43698.0], [66.9, 43698.0], [67.0, 43707.0], [67.1, 43707.0], [67.2, 43707.0], [67.3, 43707.0], [67.4, 43707.0], [67.5, 43707.0], [67.6, 43707.0], [67.7, 43707.0], [67.8, 43707.0], [67.9, 43707.0], [68.0, 43716.0], [68.1, 43716.0], [68.2, 43716.0], [68.3, 43716.0], [68.4, 43716.0], [68.5, 43716.0], [68.6, 43716.0], [68.7, 43716.0], [68.8, 43716.0], [68.9, 43716.0], [69.0, 43716.0], [69.1, 43716.0], [69.2, 43716.0], [69.3, 43716.0], [69.4, 43716.0], [69.5, 43716.0], [69.6, 43716.0], [69.7, 43716.0], [69.8, 43716.0], [69.9, 43716.0], [70.0, 43725.0], [70.1, 43725.0], [70.2, 43725.0], [70.3, 43725.0], [70.4, 43725.0], [70.5, 43725.0], [70.6, 43725.0], [70.7, 43725.0], [70.8, 43725.0], [70.9, 43725.0], [71.0, 43732.0], [71.1, 43732.0], [71.2, 43732.0], [71.3, 43732.0], [71.4, 43732.0], [71.5, 43732.0], [71.6, 43732.0], [71.7, 43732.0], [71.8, 43732.0], [71.9, 43732.0], [72.0, 43733.0], [72.1, 43733.0], [72.2, 43733.0], [72.3, 43733.0], [72.4, 43733.0], [72.5, 43733.0], [72.6, 43733.0], [72.7, 43733.0], [72.8, 43733.0], [72.9, 43733.0], [73.0, 43741.0], [73.1, 43741.0], [73.2, 43741.0], [73.3, 43741.0], [73.4, 43741.0], [73.5, 43741.0], [73.6, 43741.0], [73.7, 43741.0], [73.8, 43741.0], [73.9, 43741.0], [74.0, 43750.0], [74.1, 43750.0], [74.2, 43750.0], [74.3, 43750.0], [74.4, 43750.0], [74.5, 43750.0], [74.6, 43750.0], [74.7, 43750.0], [74.8, 43750.0], [74.9, 43750.0], [75.0, 43750.0], [75.1, 43750.0], [75.2, 43750.0], [75.3, 43750.0], [75.4, 43750.0], [75.5, 43750.0], [75.6, 43750.0], [75.7, 43750.0], [75.8, 43750.0], [75.9, 43750.0], [76.0, 43752.0], [76.1, 43752.0], [76.2, 43752.0], [76.3, 43752.0], [76.4, 43752.0], [76.5, 43752.0], [76.6, 43752.0], [76.7, 43752.0], [76.8, 43752.0], [76.9, 43752.0], [77.0, 43763.0], [77.1, 43763.0], [77.2, 43763.0], [77.3, 43763.0], [77.4, 43763.0], [77.5, 43763.0], [77.6, 43763.0], [77.7, 43763.0], [77.8, 43763.0], [77.9, 43763.0], [78.0, 43768.0], [78.1, 43768.0], [78.2, 43768.0], [78.3, 43768.0], [78.4, 43768.0], [78.5, 43768.0], [78.6, 43768.0], [78.7, 43768.0], [78.8, 43768.0], [78.9, 43768.0], [79.0, 43777.0], [79.1, 43777.0], [79.2, 43777.0], [79.3, 43777.0], [79.4, 43777.0], [79.5, 43777.0], [79.6, 43777.0], [79.7, 43777.0], [79.8, 43777.0], [79.9, 43777.0], [80.0, 43780.0], [80.1, 43780.0], [80.2, 43780.0], [80.3, 43780.0], [80.4, 43780.0], [80.5, 43780.0], [80.6, 43780.0], [80.7, 43780.0], [80.8, 43780.0], [80.9, 43780.0], [81.0, 43785.0], [81.1, 43785.0], [81.2, 43785.0], [81.3, 43785.0], [81.4, 43785.0], [81.5, 43785.0], [81.6, 43785.0], [81.7, 43785.0], [81.8, 43785.0], [81.9, 43785.0], [82.0, 43785.0], [82.1, 43785.0], [82.2, 43785.0], [82.3, 43785.0], [82.4, 43785.0], [82.5, 43785.0], [82.6, 43785.0], [82.7, 43785.0], [82.8, 43785.0], [82.9, 43785.0], [83.0, 43793.0], [83.1, 43793.0], [83.2, 43793.0], [83.3, 43793.0], [83.4, 43793.0], [83.5, 43793.0], [83.6, 43793.0], [83.7, 43793.0], [83.8, 43793.0], [83.9, 43793.0], [84.0, 43795.0], [84.1, 43795.0], [84.2, 43795.0], [84.3, 43795.0], [84.4, 43795.0], [84.5, 43795.0], [84.6, 43795.0], [84.7, 43795.0], [84.8, 43795.0], [84.9, 43795.0], [85.0, 43801.0], [85.1, 43801.0], [85.2, 43801.0], [85.3, 43801.0], [85.4, 43801.0], [85.5, 43801.0], [85.6, 43801.0], [85.7, 43801.0], [85.8, 43801.0], [85.9, 43801.0], [86.0, 43814.0], [86.1, 43814.0], [86.2, 43814.0], [86.3, 43814.0], [86.4, 43814.0], [86.5, 43814.0], [86.6, 43814.0], [86.7, 43814.0], [86.8, 43814.0], [86.9, 43814.0], [87.0, 43821.0], [87.1, 43821.0], [87.2, 43821.0], [87.3, 43821.0], [87.4, 43821.0], [87.5, 43821.0], [87.6, 43821.0], [87.7, 43821.0], [87.8, 43821.0], [87.9, 43821.0], [88.0, 43821.0], [88.1, 43821.0], [88.2, 43821.0], [88.3, 43821.0], [88.4, 43821.0], [88.5, 43821.0], [88.6, 43821.0], [88.7, 43821.0], [88.8, 43821.0], [88.9, 43821.0], [89.0, 43823.0], [89.1, 43823.0], [89.2, 43823.0], [89.3, 43823.0], [89.4, 43823.0], [89.5, 43823.0], [89.6, 43823.0], [89.7, 43823.0], [89.8, 43823.0], [89.9, 43823.0], [90.0, 43823.0], [90.1, 43823.0], [90.2, 43823.0], [90.3, 43823.0], [90.4, 43823.0], [90.5, 43823.0], [90.6, 43823.0], [90.7, 43823.0], [90.8, 43823.0], [90.9, 43823.0], [91.0, 43831.0], [91.1, 43831.0], [91.2, 43831.0], [91.3, 43831.0], [91.4, 43831.0], [91.5, 43831.0], [91.6, 43831.0], [91.7, 43831.0], [91.8, 43831.0], [91.9, 43831.0], [92.0, 43833.0], [92.1, 43833.0], [92.2, 43833.0], [92.3, 43833.0], [92.4, 43833.0], [92.5, 43833.0], [92.6, 43833.0], [92.7, 43833.0], [92.8, 43833.0], [92.9, 43833.0], [93.0, 43835.0], [93.1, 43835.0], [93.2, 43835.0], [93.3, 43835.0], [93.4, 43835.0], [93.5, 43835.0], [93.6, 43835.0], [93.7, 43835.0], [93.8, 43835.0], [93.9, 43835.0], [94.0, 43838.0], [94.1, 43838.0], [94.2, 43838.0], [94.3, 43838.0], [94.4, 43838.0], [94.5, 43838.0], [94.6, 43838.0], [94.7, 43838.0], [94.8, 43838.0], [94.9, 43838.0], [95.0, 43846.0], [95.1, 43846.0], [95.2, 43846.0], [95.3, 43846.0], [95.4, 43846.0], [95.5, 43846.0], [95.6, 43846.0], [95.7, 43846.0], [95.8, 43846.0], [95.9, 43846.0], [96.0, 43880.0], [96.1, 43880.0], [96.2, 43880.0], [96.3, 43880.0], [96.4, 43880.0], [96.5, 43880.0], [96.6, 43880.0], [96.7, 43880.0], [96.8, 43880.0], [96.9, 43880.0], [97.0, 43884.0], [97.1, 43884.0], [97.2, 43884.0], [97.3, 43884.0], [97.4, 43884.0], [97.5, 43884.0], [97.6, 43884.0], [97.7, 43884.0], [97.8, 43884.0], [97.9, 43884.0], [98.0, 43900.0], [98.1, 43900.0], [98.2, 43900.0], [98.3, 43900.0], [98.4, 43900.0], [98.5, 43900.0], [98.6, 43900.0], [98.7, 43900.0], [98.8, 43900.0], [98.9, 43900.0], [99.0, 43900.0], [99.1, 43900.0], [99.2, 43900.0], [99.3, 43900.0], [99.4, 43900.0], [99.5, 43900.0], [99.6, 43900.0], [99.7, 43900.0], [99.8, 43900.0], [99.9, 43900.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 668.0], [0.1, 668.0], [0.2, 668.0], [0.3, 668.0], [0.4, 668.0], [0.5, 668.0], [0.6, 668.0], [0.7, 668.0], [0.8, 668.0], [0.9, 668.0], [1.0, 793.0], [1.1, 793.0], [1.2, 793.0], [1.3, 793.0], [1.4, 793.0], [1.5, 793.0], [1.6, 793.0], [1.7, 793.0], [1.8, 793.0], [1.9, 793.0], [2.0, 985.0], [2.1, 985.0], [2.2, 985.0], [2.3, 985.0], [2.4, 985.0], [2.5, 985.0], [2.6, 985.0], [2.7, 985.0], [2.8, 985.0], [2.9, 985.0], [3.0, 12836.0], [3.1, 12836.0], [3.2, 12836.0], [3.3, 12836.0], [3.4, 12836.0], [3.5, 12836.0], [3.6, 12836.0], [3.7, 12836.0], [3.8, 12836.0], [3.9, 12836.0], [4.0, 15770.0], [4.1, 15770.0], [4.2, 15770.0], [4.3, 15770.0], [4.4, 15770.0], [4.5, 15770.0], [4.6, 15770.0], [4.7, 15770.0], [4.8, 15770.0], [4.9, 15770.0], [5.0, 16312.0], [5.1, 16312.0], [5.2, 16312.0], [5.3, 16312.0], [5.4, 16312.0], [5.5, 16312.0], [5.6, 16312.0], [5.7, 16312.0], [5.8, 16312.0], [5.9, 16312.0], [6.0, 16417.0], [6.1, 16417.0], [6.2, 16417.0], [6.3, 16417.0], [6.4, 16417.0], [6.5, 16417.0], [6.6, 16417.0], [6.7, 16417.0], [6.8, 16417.0], [6.9, 16417.0], [7.0, 16848.0], [7.1, 16848.0], [7.2, 16848.0], [7.3, 16848.0], [7.4, 16848.0], [7.5, 16848.0], [7.6, 16848.0], [7.7, 16848.0], [7.8, 16848.0], [7.9, 16848.0], [8.0, 18986.0], [8.1, 18986.0], [8.2, 18986.0], [8.3, 18986.0], [8.4, 18986.0], [8.5, 18986.0], [8.6, 18986.0], [8.7, 18986.0], [8.8, 18986.0], [8.9, 18986.0], [9.0, 19619.0], [9.1, 19619.0], [9.2, 19619.0], [9.3, 19619.0], [9.4, 19619.0], [9.5, 19619.0], [9.6, 19619.0], [9.7, 19619.0], [9.8, 19619.0], [9.9, 19619.0], [10.0, 20249.0], [10.1, 20249.0], [10.2, 20249.0], [10.3, 20249.0], [10.4, 20249.0], [10.5, 20249.0], [10.6, 20249.0], [10.7, 20249.0], [10.8, 20249.0], [10.9, 20249.0], [11.0, 20533.0], [11.1, 20533.0], [11.2, 20533.0], [11.3, 20533.0], [11.4, 20533.0], [11.5, 20533.0], [11.6, 20533.0], [11.7, 20533.0], [11.8, 20533.0], [11.9, 20533.0], [12.0, 20640.0], [12.1, 20640.0], [12.2, 20640.0], [12.3, 20640.0], [12.4, 20640.0], [12.5, 20640.0], [12.6, 20640.0], [12.7, 20640.0], [12.8, 20640.0], [12.9, 20640.0], [13.0, 20704.0], [13.1, 20704.0], [13.2, 20704.0], [13.3, 20704.0], [13.4, 20704.0], [13.5, 20704.0], [13.6, 20704.0], [13.7, 20704.0], [13.8, 20704.0], [13.9, 20704.0], [14.0, 20825.0], [14.1, 20825.0], [14.2, 20825.0], [14.3, 20825.0], [14.4, 20825.0], [14.5, 20825.0], [14.6, 20825.0], [14.7, 20825.0], [14.8, 20825.0], [14.9, 20825.0], [15.0, 20898.0], [15.1, 20898.0], [15.2, 20898.0], [15.3, 20898.0], [15.4, 20898.0], [15.5, 20898.0], [15.6, 20898.0], [15.7, 20898.0], [15.8, 20898.0], [15.9, 20898.0], [16.0, 21037.0], [16.1, 21037.0], [16.2, 21037.0], [16.3, 21037.0], [16.4, 21037.0], [16.5, 21037.0], [16.6, 21037.0], [16.7, 21037.0], [16.8, 21037.0], [16.9, 21037.0], [17.0, 21138.0], [17.1, 21138.0], [17.2, 21138.0], [17.3, 21138.0], [17.4, 21138.0], [17.5, 21138.0], [17.6, 21138.0], [17.7, 21138.0], [17.8, 21138.0], [17.9, 21138.0], [18.0, 21159.0], [18.1, 21159.0], [18.2, 21159.0], [18.3, 21159.0], [18.4, 21159.0], [18.5, 21159.0], [18.6, 21159.0], [18.7, 21159.0], [18.8, 21159.0], [18.9, 21159.0], [19.0, 21221.0], [19.1, 21221.0], [19.2, 21221.0], [19.3, 21221.0], [19.4, 21221.0], [19.5, 21221.0], [19.6, 21221.0], [19.7, 21221.0], [19.8, 21221.0], [19.9, 21221.0], [20.0, 21264.0], [20.1, 21264.0], [20.2, 21264.0], [20.3, 21264.0], [20.4, 21264.0], [20.5, 21264.0], [20.6, 21264.0], [20.7, 21264.0], [20.8, 21264.0], [20.9, 21264.0], [21.0, 21319.0], [21.1, 21319.0], [21.2, 21319.0], [21.3, 21319.0], [21.4, 21319.0], [21.5, 21319.0], [21.6, 21319.0], [21.7, 21319.0], [21.8, 21319.0], [21.9, 21319.0], [22.0, 21337.0], [22.1, 21337.0], [22.2, 21337.0], [22.3, 21337.0], [22.4, 21337.0], [22.5, 21337.0], [22.6, 21337.0], [22.7, 21337.0], [22.8, 21337.0], [22.9, 21337.0], [23.0, 21504.0], [23.1, 21504.0], [23.2, 21504.0], [23.3, 21504.0], [23.4, 21504.0], [23.5, 21504.0], [23.6, 21504.0], [23.7, 21504.0], [23.8, 21504.0], [23.9, 21504.0], [24.0, 22329.0], [24.1, 22329.0], [24.2, 22329.0], [24.3, 22329.0], [24.4, 22329.0], [24.5, 22329.0], [24.6, 22329.0], [24.7, 22329.0], [24.8, 22329.0], [24.9, 22329.0], [25.0, 22344.0], [25.1, 22344.0], [25.2, 22344.0], [25.3, 22344.0], [25.4, 22344.0], [25.5, 22344.0], [25.6, 22344.0], [25.7, 22344.0], [25.8, 22344.0], [25.9, 22344.0], [26.0, 22348.0], [26.1, 22348.0], [26.2, 22348.0], [26.3, 22348.0], [26.4, 22348.0], [26.5, 22348.0], [26.6, 22348.0], [26.7, 22348.0], [26.8, 22348.0], [26.9, 22348.0], [27.0, 22516.0], [27.1, 22516.0], [27.2, 22516.0], [27.3, 22516.0], [27.4, 22516.0], [27.5, 22516.0], [27.6, 22516.0], [27.7, 22516.0], [27.8, 22516.0], [27.9, 22516.0], [28.0, 22519.0], [28.1, 22519.0], [28.2, 22519.0], [28.3, 22519.0], [28.4, 22519.0], [28.5, 22519.0], [28.6, 22519.0], [28.7, 22519.0], [28.8, 22519.0], [28.9, 22519.0], [29.0, 22522.0], [29.1, 22522.0], [29.2, 22522.0], [29.3, 22522.0], [29.4, 22522.0], [29.5, 22522.0], [29.6, 22522.0], [29.7, 22522.0], [29.8, 22522.0], [29.9, 22522.0], [30.0, 22547.0], [30.1, 22547.0], [30.2, 22547.0], [30.3, 22547.0], [30.4, 22547.0], [30.5, 22547.0], [30.6, 22547.0], [30.7, 22547.0], [30.8, 22547.0], [30.9, 22547.0], [31.0, 22576.0], [31.1, 22576.0], [31.2, 22576.0], [31.3, 22576.0], [31.4, 22576.0], [31.5, 22576.0], [31.6, 22576.0], [31.7, 22576.0], [31.8, 22576.0], [31.9, 22576.0], [32.0, 22639.0], [32.1, 22639.0], [32.2, 22639.0], [32.3, 22639.0], [32.4, 22639.0], [32.5, 22639.0], [32.6, 22639.0], [32.7, 22639.0], [32.8, 22639.0], [32.9, 22639.0], [33.0, 22689.0], [33.1, 22689.0], [33.2, 22689.0], [33.3, 22689.0], [33.4, 22689.0], [33.5, 22689.0], [33.6, 22689.0], [33.7, 22689.0], [33.8, 22689.0], [33.9, 22689.0], [34.0, 22707.0], [34.1, 22707.0], [34.2, 22707.0], [34.3, 22707.0], [34.4, 22707.0], [34.5, 22707.0], [34.6, 22707.0], [34.7, 22707.0], [34.8, 22707.0], [34.9, 22707.0], [35.0, 22769.0], [35.1, 22769.0], [35.2, 22769.0], [35.3, 22769.0], [35.4, 22769.0], [35.5, 22769.0], [35.6, 22769.0], [35.7, 22769.0], [35.8, 22769.0], [35.9, 22769.0], [36.0, 23583.0], [36.1, 23583.0], [36.2, 23583.0], [36.3, 23583.0], [36.4, 23583.0], [36.5, 23583.0], [36.6, 23583.0], [36.7, 23583.0], [36.8, 23583.0], [36.9, 23583.0], [37.0, 23586.0], [37.1, 23586.0], [37.2, 23586.0], [37.3, 23586.0], [37.4, 23586.0], [37.5, 23586.0], [37.6, 23586.0], [37.7, 23586.0], [37.8, 23586.0], [37.9, 23586.0], [38.0, 23587.0], [38.1, 23587.0], [38.2, 23587.0], [38.3, 23587.0], [38.4, 23587.0], [38.5, 23587.0], [38.6, 23587.0], [38.7, 23587.0], [38.8, 23587.0], [38.9, 23587.0], [39.0, 23601.0], [39.1, 23601.0], [39.2, 23601.0], [39.3, 23601.0], [39.4, 23601.0], [39.5, 23601.0], [39.6, 23601.0], [39.7, 23601.0], [39.8, 23601.0], [39.9, 23601.0], [40.0, 23604.0], [40.1, 23604.0], [40.2, 23604.0], [40.3, 23604.0], [40.4, 23604.0], [40.5, 23604.0], [40.6, 23604.0], [40.7, 23604.0], [40.8, 23604.0], [40.9, 23604.0], [41.0, 23604.0], [41.1, 23604.0], [41.2, 23604.0], [41.3, 23604.0], [41.4, 23604.0], [41.5, 23604.0], [41.6, 23604.0], [41.7, 23604.0], [41.8, 23604.0], [41.9, 23604.0], [42.0, 23612.0], [42.1, 23612.0], [42.2, 23612.0], [42.3, 23612.0], [42.4, 23612.0], [42.5, 23612.0], [42.6, 23612.0], [42.7, 23612.0], [42.8, 23612.0], [42.9, 23612.0], [43.0, 23627.0], [43.1, 23627.0], [43.2, 23627.0], [43.3, 23627.0], [43.4, 23627.0], [43.5, 23627.0], [43.6, 23627.0], [43.7, 23627.0], [43.8, 23627.0], [43.9, 23627.0], [44.0, 23636.0], [44.1, 23636.0], [44.2, 23636.0], [44.3, 23636.0], [44.4, 23636.0], [44.5, 23636.0], [44.6, 23636.0], [44.7, 23636.0], [44.8, 23636.0], [44.9, 23636.0], [45.0, 23694.0], [45.1, 23694.0], [45.2, 23694.0], [45.3, 23694.0], [45.4, 23694.0], [45.5, 23694.0], [45.6, 23694.0], [45.7, 23694.0], [45.8, 23694.0], [45.9, 23694.0], [46.0, 23766.0], [46.1, 23766.0], [46.2, 23766.0], [46.3, 23766.0], [46.4, 23766.0], [46.5, 23766.0], [46.6, 23766.0], [46.7, 23766.0], [46.8, 23766.0], [46.9, 23766.0], [47.0, 23849.0], [47.1, 23849.0], [47.2, 23849.0], [47.3, 23849.0], [47.4, 23849.0], [47.5, 23849.0], [47.6, 23849.0], [47.7, 23849.0], [47.8, 23849.0], [47.9, 23849.0], [48.0, 23888.0], [48.1, 23888.0], [48.2, 23888.0], [48.3, 23888.0], [48.4, 23888.0], [48.5, 23888.0], [48.6, 23888.0], [48.7, 23888.0], [48.8, 23888.0], [48.9, 23888.0], [49.0, 23903.0], [49.1, 23903.0], [49.2, 23903.0], [49.3, 23903.0], [49.4, 23903.0], [49.5, 23903.0], [49.6, 23903.0], [49.7, 23903.0], [49.8, 23903.0], [49.9, 23903.0], [50.0, 23920.0], [50.1, 23920.0], [50.2, 23920.0], [50.3, 23920.0], [50.4, 23920.0], [50.5, 23920.0], [50.6, 23920.0], [50.7, 23920.0], [50.8, 23920.0], [50.9, 23920.0], [51.0, 23927.0], [51.1, 23927.0], [51.2, 23927.0], [51.3, 23927.0], [51.4, 23927.0], [51.5, 23927.0], [51.6, 23927.0], [51.7, 23927.0], [51.8, 23927.0], [51.9, 23927.0], [52.0, 23938.0], [52.1, 23938.0], [52.2, 23938.0], [52.3, 23938.0], [52.4, 23938.0], [52.5, 23938.0], [52.6, 23938.0], [52.7, 23938.0], [52.8, 23938.0], [52.9, 23938.0], [53.0, 23947.0], [53.1, 23947.0], [53.2, 23947.0], [53.3, 23947.0], [53.4, 23947.0], [53.5, 23947.0], [53.6, 23947.0], [53.7, 23947.0], [53.8, 23947.0], [53.9, 23947.0], [54.0, 23951.0], [54.1, 23951.0], [54.2, 23951.0], [54.3, 23951.0], [54.4, 23951.0], [54.5, 23951.0], [54.6, 23951.0], [54.7, 23951.0], [54.8, 23951.0], [54.9, 23951.0], [55.0, 23959.0], [55.1, 23959.0], [55.2, 23959.0], [55.3, 23959.0], [55.4, 23959.0], [55.5, 23959.0], [55.6, 23959.0], [55.7, 23959.0], [55.8, 23959.0], [55.9, 23959.0], [56.0, 23972.0], [56.1, 23972.0], [56.2, 23972.0], [56.3, 23972.0], [56.4, 23972.0], [56.5, 23972.0], [56.6, 23972.0], [56.7, 23972.0], [56.8, 23972.0], [56.9, 23972.0], [57.0, 24008.0], [57.1, 24008.0], [57.2, 24008.0], [57.3, 24008.0], [57.4, 24008.0], [57.5, 24008.0], [57.6, 24008.0], [57.7, 24008.0], [57.8, 24008.0], [57.9, 24008.0], [58.0, 24016.0], [58.1, 24016.0], [58.2, 24016.0], [58.3, 24016.0], [58.4, 24016.0], [58.5, 24016.0], [58.6, 24016.0], [58.7, 24016.0], [58.8, 24016.0], [58.9, 24016.0], [59.0, 24036.0], [59.1, 24036.0], [59.2, 24036.0], [59.3, 24036.0], [59.4, 24036.0], [59.5, 24036.0], [59.6, 24036.0], [59.7, 24036.0], [59.8, 24036.0], [59.9, 24036.0], [60.0, 24042.0], [60.1, 24042.0], [60.2, 24042.0], [60.3, 24042.0], [60.4, 24042.0], [60.5, 24042.0], [60.6, 24042.0], [60.7, 24042.0], [60.8, 24042.0], [60.9, 24042.0], [61.0, 24048.0], [61.1, 24048.0], [61.2, 24048.0], [61.3, 24048.0], [61.4, 24048.0], [61.5, 24048.0], [61.6, 24048.0], [61.7, 24048.0], [61.8, 24048.0], [61.9, 24048.0], [62.0, 24058.0], [62.1, 24058.0], [62.2, 24058.0], [62.3, 24058.0], [62.4, 24058.0], [62.5, 24058.0], [62.6, 24058.0], [62.7, 24058.0], [62.8, 24058.0], [62.9, 24058.0], [63.0, 24067.0], [63.1, 24067.0], [63.2, 24067.0], [63.3, 24067.0], [63.4, 24067.0], [63.5, 24067.0], [63.6, 24067.0], [63.7, 24067.0], [63.8, 24067.0], [63.9, 24067.0], [64.0, 24071.0], [64.1, 24071.0], [64.2, 24071.0], [64.3, 24071.0], [64.4, 24071.0], [64.5, 24071.0], [64.6, 24071.0], [64.7, 24071.0], [64.8, 24071.0], [64.9, 24071.0], [65.0, 24080.0], [65.1, 24080.0], [65.2, 24080.0], [65.3, 24080.0], [65.4, 24080.0], [65.5, 24080.0], [65.6, 24080.0], [65.7, 24080.0], [65.8, 24080.0], [65.9, 24080.0], [66.0, 24117.0], [66.1, 24117.0], [66.2, 24117.0], [66.3, 24117.0], [66.4, 24117.0], [66.5, 24117.0], [66.6, 24117.0], [66.7, 24117.0], [66.8, 24117.0], [66.9, 24117.0], [67.0, 24118.0], [67.1, 24118.0], [67.2, 24118.0], [67.3, 24118.0], [67.4, 24118.0], [67.5, 24118.0], [67.6, 24118.0], [67.7, 24118.0], [67.8, 24118.0], [67.9, 24118.0], [68.0, 24128.0], [68.1, 24128.0], [68.2, 24128.0], [68.3, 24128.0], [68.4, 24128.0], [68.5, 24128.0], [68.6, 24128.0], [68.7, 24128.0], [68.8, 24128.0], [68.9, 24128.0], [69.0, 24132.0], [69.1, 24132.0], [69.2, 24132.0], [69.3, 24132.0], [69.4, 24132.0], [69.5, 24132.0], [69.6, 24132.0], [69.7, 24132.0], [69.8, 24132.0], [69.9, 24132.0], [70.0, 24134.0], [70.1, 24134.0], [70.2, 24134.0], [70.3, 24134.0], [70.4, 24134.0], [70.5, 24134.0], [70.6, 24134.0], [70.7, 24134.0], [70.8, 24134.0], [70.9, 24134.0], [71.0, 24145.0], [71.1, 24145.0], [71.2, 24145.0], [71.3, 24145.0], [71.4, 24145.0], [71.5, 24145.0], [71.6, 24145.0], [71.7, 24145.0], [71.8, 24145.0], [71.9, 24145.0], [72.0, 24161.0], [72.1, 24161.0], [72.2, 24161.0], [72.3, 24161.0], [72.4, 24161.0], [72.5, 24161.0], [72.6, 24161.0], [72.7, 24161.0], [72.8, 24161.0], [72.9, 24161.0], [73.0, 24174.0], [73.1, 24174.0], [73.2, 24174.0], [73.3, 24174.0], [73.4, 24174.0], [73.5, 24174.0], [73.6, 24174.0], [73.7, 24174.0], [73.8, 24174.0], [73.9, 24174.0], [74.0, 24182.0], [74.1, 24182.0], [74.2, 24182.0], [74.3, 24182.0], [74.4, 24182.0], [74.5, 24182.0], [74.6, 24182.0], [74.7, 24182.0], [74.8, 24182.0], [74.9, 24182.0], [75.0, 24184.0], [75.1, 24184.0], [75.2, 24184.0], [75.3, 24184.0], [75.4, 24184.0], [75.5, 24184.0], [75.6, 24184.0], [75.7, 24184.0], [75.8, 24184.0], [75.9, 24184.0], [76.0, 24193.0], [76.1, 24193.0], [76.2, 24193.0], [76.3, 24193.0], [76.4, 24193.0], [76.5, 24193.0], [76.6, 24193.0], [76.7, 24193.0], [76.8, 24193.0], [76.9, 24193.0], [77.0, 24198.0], [77.1, 24198.0], [77.2, 24198.0], [77.3, 24198.0], [77.4, 24198.0], [77.5, 24198.0], [77.6, 24198.0], [77.7, 24198.0], [77.8, 24198.0], [77.9, 24198.0], [78.0, 24201.0], [78.1, 24201.0], [78.2, 24201.0], [78.3, 24201.0], [78.4, 24201.0], [78.5, 24201.0], [78.6, 24201.0], [78.7, 24201.0], [78.8, 24201.0], [78.9, 24201.0], [79.0, 24216.0], [79.1, 24216.0], [79.2, 24216.0], [79.3, 24216.0], [79.4, 24216.0], [79.5, 24216.0], [79.6, 24216.0], [79.7, 24216.0], [79.8, 24216.0], [79.9, 24216.0], [80.0, 24226.0], [80.1, 24226.0], [80.2, 24226.0], [80.3, 24226.0], [80.4, 24226.0], [80.5, 24226.0], [80.6, 24226.0], [80.7, 24226.0], [80.8, 24226.0], [80.9, 24226.0], [81.0, 24235.0], [81.1, 24235.0], [81.2, 24235.0], [81.3, 24235.0], [81.4, 24235.0], [81.5, 24235.0], [81.6, 24235.0], [81.7, 24235.0], [81.8, 24235.0], [81.9, 24235.0], [82.0, 24236.0], [82.1, 24236.0], [82.2, 24236.0], [82.3, 24236.0], [82.4, 24236.0], [82.5, 24236.0], [82.6, 24236.0], [82.7, 24236.0], [82.8, 24236.0], [82.9, 24236.0], [83.0, 24237.0], [83.1, 24237.0], [83.2, 24237.0], [83.3, 24237.0], [83.4, 24237.0], [83.5, 24237.0], [83.6, 24237.0], [83.7, 24237.0], [83.8, 24237.0], [83.9, 24237.0], [84.0, 24245.0], [84.1, 24245.0], [84.2, 24245.0], [84.3, 24245.0], [84.4, 24245.0], [84.5, 24245.0], [84.6, 24245.0], [84.7, 24245.0], [84.8, 24245.0], [84.9, 24245.0], [85.0, 24249.0], [85.1, 24249.0], [85.2, 24249.0], [85.3, 24249.0], [85.4, 24249.0], [85.5, 24249.0], [85.6, 24249.0], [85.7, 24249.0], [85.8, 24249.0], [85.9, 24249.0], [86.0, 24269.0], [86.1, 24269.0], [86.2, 24269.0], [86.3, 24269.0], [86.4, 24269.0], [86.5, 24269.0], [86.6, 24269.0], [86.7, 24269.0], [86.8, 24269.0], [86.9, 24269.0], [87.0, 24276.0], [87.1, 24276.0], [87.2, 24276.0], [87.3, 24276.0], [87.4, 24276.0], [87.5, 24276.0], [87.6, 24276.0], [87.7, 24276.0], [87.8, 24276.0], [87.9, 24276.0], [88.0, 24285.0], [88.1, 24285.0], [88.2, 24285.0], [88.3, 24285.0], [88.4, 24285.0], [88.5, 24285.0], [88.6, 24285.0], [88.7, 24285.0], [88.8, 24285.0], [88.9, 24285.0], [89.0, 24290.0], [89.1, 24290.0], [89.2, 24290.0], [89.3, 24290.0], [89.4, 24290.0], [89.5, 24290.0], [89.6, 24290.0], [89.7, 24290.0], [89.8, 24290.0], [89.9, 24290.0], [90.0, 24291.0], [90.1, 24291.0], [90.2, 24291.0], [90.3, 24291.0], [90.4, 24291.0], [90.5, 24291.0], [90.6, 24291.0], [90.7, 24291.0], [90.8, 24291.0], [90.9, 24291.0], [91.0, 24323.0], [91.1, 24323.0], [91.2, 24323.0], [91.3, 24323.0], [91.4, 24323.0], [91.5, 24323.0], [91.6, 24323.0], [91.7, 24323.0], [91.8, 24323.0], [91.9, 24323.0], [92.0, 24388.0], [92.1, 24388.0], [92.2, 24388.0], [92.3, 24388.0], [92.4, 24388.0], [92.5, 24388.0], [92.6, 24388.0], [92.7, 24388.0], [92.8, 24388.0], [92.9, 24388.0], [93.0, 24459.0], [93.1, 24459.0], [93.2, 24459.0], [93.3, 24459.0], [93.4, 24459.0], [93.5, 24459.0], [93.6, 24459.0], [93.7, 24459.0], [93.8, 24459.0], [93.9, 24459.0], [94.0, 24621.0], [94.1, 24621.0], [94.2, 24621.0], [94.3, 24621.0], [94.4, 24621.0], [94.5, 24621.0], [94.6, 24621.0], [94.7, 24621.0], [94.8, 24621.0], [94.9, 24621.0], [95.0, 24643.0], [95.1, 24643.0], [95.2, 24643.0], [95.3, 24643.0], [95.4, 24643.0], [95.5, 24643.0], [95.6, 24643.0], [95.7, 24643.0], [95.8, 24643.0], [95.9, 24643.0], [96.0, 24661.0], [96.1, 24661.0], [96.2, 24661.0], [96.3, 24661.0], [96.4, 24661.0], [96.5, 24661.0], [96.6, 24661.0], [96.7, 24661.0], [96.8, 24661.0], [96.9, 24661.0], [97.0, 24667.0], [97.1, 24667.0], [97.2, 24667.0], [97.3, 24667.0], [97.4, 24667.0], [97.5, 24667.0], [97.6, 24667.0], [97.7, 24667.0], [97.8, 24667.0], [97.9, 24667.0], [98.0, 24685.0], [98.1, 24685.0], [98.2, 24685.0], [98.3, 24685.0], [98.4, 24685.0], [98.5, 24685.0], [98.6, 24685.0], [98.7, 24685.0], [98.8, 24685.0], [98.9, 24685.0], [99.0, 24738.0], [99.1, 24738.0], [99.2, 24738.0], [99.3, 24738.0], [99.4, 24738.0], [99.5, 24738.0], [99.6, 24738.0], [99.7, 24738.0], [99.8, 24738.0], [99.9, 24738.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 10160.0], [0.1, 10160.0], [0.2, 10160.0], [0.3, 10160.0], [0.4, 10160.0], [0.5, 10160.0], [0.6, 10160.0], [0.7, 10160.0], [0.8, 10160.0], [0.9, 10160.0], [1.0, 10734.0], [1.1, 10734.0], [1.2, 10734.0], [1.3, 10734.0], [1.4, 10734.0], [1.5, 10734.0], [1.6, 10734.0], [1.7, 10734.0], [1.8, 10734.0], [1.9, 10734.0], [2.0, 16601.0], [2.1, 16601.0], [2.2, 16601.0], [2.3, 16601.0], [2.4, 16601.0], [2.5, 16601.0], [2.6, 16601.0], [2.7, 16601.0], [2.8, 16601.0], [2.9, 16601.0], [3.0, 16785.0], [3.1, 16785.0], [3.2, 16785.0], [3.3, 16785.0], [3.4, 16785.0], [3.5, 16785.0], [3.6, 16785.0], [3.7, 16785.0], [3.8, 16785.0], [3.9, 16785.0], [4.0, 16868.0], [4.1, 16868.0], [4.2, 16868.0], [4.3, 16868.0], [4.4, 16868.0], [4.5, 16868.0], [4.6, 16868.0], [4.7, 16868.0], [4.8, 16868.0], [4.9, 16868.0], [5.0, 17291.0], [5.1, 17291.0], [5.2, 17291.0], [5.3, 17291.0], [5.4, 17291.0], [5.5, 17291.0], [5.6, 17291.0], [5.7, 17291.0], [5.8, 17291.0], [5.9, 17291.0], [6.0, 17373.0], [6.1, 17373.0], [6.2, 17373.0], [6.3, 17373.0], [6.4, 17373.0], [6.5, 17373.0], [6.6, 17373.0], [6.7, 17373.0], [6.8, 17373.0], [6.9, 17373.0], [7.0, 17922.0], [7.1, 17922.0], [7.2, 17922.0], [7.3, 17922.0], [7.4, 17922.0], [7.5, 17922.0], [7.6, 17922.0], [7.7, 17922.0], [7.8, 17922.0], [7.9, 17922.0], [8.0, 17996.0], [8.1, 17996.0], [8.2, 17996.0], [8.3, 17996.0], [8.4, 17996.0], [8.5, 17996.0], [8.6, 17996.0], [8.7, 17996.0], [8.8, 17996.0], [8.9, 17996.0], [9.0, 18086.0], [9.1, 18086.0], [9.2, 18086.0], [9.3, 18086.0], [9.4, 18086.0], [9.5, 18086.0], [9.6, 18086.0], [9.7, 18086.0], [9.8, 18086.0], [9.9, 18086.0], [10.0, 18672.0], [10.1, 18672.0], [10.2, 18672.0], [10.3, 18672.0], [10.4, 18672.0], [10.5, 18672.0], [10.6, 18672.0], [10.7, 18672.0], [10.8, 18672.0], [10.9, 18672.0], [11.0, 19378.0], [11.1, 19378.0], [11.2, 19378.0], [11.3, 19378.0], [11.4, 19378.0], [11.5, 19378.0], [11.6, 19378.0], [11.7, 19378.0], [11.8, 19378.0], [11.9, 19378.0], [12.0, 20887.0], [12.1, 20887.0], [12.2, 20887.0], [12.3, 20887.0], [12.4, 20887.0], [12.5, 20887.0], [12.6, 20887.0], [12.7, 20887.0], [12.8, 20887.0], [12.9, 20887.0], [13.0, 21255.0], [13.1, 21255.0], [13.2, 21255.0], [13.3, 21255.0], [13.4, 21255.0], [13.5, 21255.0], [13.6, 21255.0], [13.7, 21255.0], [13.8, 21255.0], [13.9, 21255.0], [14.0, 21882.0], [14.1, 21882.0], [14.2, 21882.0], [14.3, 21882.0], [14.4, 21882.0], [14.5, 21882.0], [14.6, 21882.0], [14.7, 21882.0], [14.8, 21882.0], [14.9, 21882.0], [15.0, 22119.0], [15.1, 22119.0], [15.2, 22119.0], [15.3, 22119.0], [15.4, 22119.0], [15.5, 22119.0], [15.6, 22119.0], [15.7, 22119.0], [15.8, 22119.0], [15.9, 22119.0], [16.0, 22286.0], [16.1, 22286.0], [16.2, 22286.0], [16.3, 22286.0], [16.4, 22286.0], [16.5, 22286.0], [16.6, 22286.0], [16.7, 22286.0], [16.8, 22286.0], [16.9, 22286.0], [17.0, 22573.0], [17.1, 22573.0], [17.2, 22573.0], [17.3, 22573.0], [17.4, 22573.0], [17.5, 22573.0], [17.6, 22573.0], [17.7, 22573.0], [17.8, 22573.0], [17.9, 22573.0], [18.0, 22992.0], [18.1, 22992.0], [18.2, 22992.0], [18.3, 22992.0], [18.4, 22992.0], [18.5, 22992.0], [18.6, 22992.0], [18.7, 22992.0], [18.8, 22992.0], [18.9, 22992.0], [19.0, 23206.0], [19.1, 23206.0], [19.2, 23206.0], [19.3, 23206.0], [19.4, 23206.0], [19.5, 23206.0], [19.6, 23206.0], [19.7, 23206.0], [19.8, 23206.0], [19.9, 23206.0], [20.0, 23295.0], [20.1, 23295.0], [20.2, 23295.0], [20.3, 23295.0], [20.4, 23295.0], [20.5, 23295.0], [20.6, 23295.0], [20.7, 23295.0], [20.8, 23295.0], [20.9, 23295.0], [21.0, 23330.0], [21.1, 23330.0], [21.2, 23330.0], [21.3, 23330.0], [21.4, 23330.0], [21.5, 23330.0], [21.6, 23330.0], [21.7, 23330.0], [21.8, 23330.0], [21.9, 23330.0], [22.0, 23414.0], [22.1, 23414.0], [22.2, 23414.0], [22.3, 23414.0], [22.4, 23414.0], [22.5, 23414.0], [22.6, 23414.0], [22.7, 23414.0], [22.8, 23414.0], [22.9, 23414.0], [23.0, 23504.0], [23.1, 23504.0], [23.2, 23504.0], [23.3, 23504.0], [23.4, 23504.0], [23.5, 23504.0], [23.6, 23504.0], [23.7, 23504.0], [23.8, 23504.0], [23.9, 23504.0], [24.0, 24021.0], [24.1, 24021.0], [24.2, 24021.0], [24.3, 24021.0], [24.4, 24021.0], [24.5, 24021.0], [24.6, 24021.0], [24.7, 24021.0], [24.8, 24021.0], [24.9, 24021.0], [25.0, 25857.0], [25.1, 25857.0], [25.2, 25857.0], [25.3, 25857.0], [25.4, 25857.0], [25.5, 25857.0], [25.6, 25857.0], [25.7, 25857.0], [25.8, 25857.0], [25.9, 25857.0], [26.0, 26247.0], [26.1, 26247.0], [26.2, 26247.0], [26.3, 26247.0], [26.4, 26247.0], [26.5, 26247.0], [26.6, 26247.0], [26.7, 26247.0], [26.8, 26247.0], [26.9, 26247.0], [27.0, 26295.0], [27.1, 26295.0], [27.2, 26295.0], [27.3, 26295.0], [27.4, 26295.0], [27.5, 26295.0], [27.6, 26295.0], [27.7, 26295.0], [27.8, 26295.0], [27.9, 26295.0], [28.0, 27354.0], [28.1, 27354.0], [28.2, 27354.0], [28.3, 27354.0], [28.4, 27354.0], [28.5, 27354.0], [28.6, 27354.0], [28.7, 27354.0], [28.8, 27354.0], [28.9, 27354.0], [29.0, 29546.0], [29.1, 29546.0], [29.2, 29546.0], [29.3, 29546.0], [29.4, 29546.0], [29.5, 29546.0], [29.6, 29546.0], [29.7, 29546.0], [29.8, 29546.0], [29.9, 29546.0], [30.0, 29578.0], [30.1, 29578.0], [30.2, 29578.0], [30.3, 29578.0], [30.4, 29578.0], [30.5, 29578.0], [30.6, 29578.0], [30.7, 29578.0], [30.8, 29578.0], [30.9, 29578.0], [31.0, 30741.0], [31.1, 30741.0], [31.2, 30741.0], [31.3, 30741.0], [31.4, 30741.0], [31.5, 30741.0], [31.6, 30741.0], [31.7, 30741.0], [31.8, 30741.0], [31.9, 30741.0], [32.0, 31016.0], [32.1, 31016.0], [32.2, 31016.0], [32.3, 31016.0], [32.4, 31016.0], [32.5, 31016.0], [32.6, 31016.0], [32.7, 31016.0], [32.8, 31016.0], [32.9, 31016.0], [33.0, 31497.0], [33.1, 31497.0], [33.2, 31497.0], [33.3, 31497.0], [33.4, 31497.0], [33.5, 31497.0], [33.6, 31497.0], [33.7, 31497.0], [33.8, 31497.0], [33.9, 31497.0], [34.0, 31666.0], [34.1, 31666.0], [34.2, 31666.0], [34.3, 31666.0], [34.4, 31666.0], [34.5, 31666.0], [34.6, 31666.0], [34.7, 31666.0], [34.8, 31666.0], [34.9, 31666.0], [35.0, 32408.0], [35.1, 32408.0], [35.2, 32408.0], [35.3, 32408.0], [35.4, 32408.0], [35.5, 32408.0], [35.6, 32408.0], [35.7, 32408.0], [35.8, 32408.0], [35.9, 32408.0], [36.0, 32420.0], [36.1, 32420.0], [36.2, 32420.0], [36.3, 32420.0], [36.4, 32420.0], [36.5, 32420.0], [36.6, 32420.0], [36.7, 32420.0], [36.8, 32420.0], [36.9, 32420.0], [37.0, 32665.0], [37.1, 32665.0], [37.2, 32665.0], [37.3, 32665.0], [37.4, 32665.0], [37.5, 32665.0], [37.6, 32665.0], [37.7, 32665.0], [37.8, 32665.0], [37.9, 32665.0], [38.0, 32943.0], [38.1, 32943.0], [38.2, 32943.0], [38.3, 32943.0], [38.4, 32943.0], [38.5, 32943.0], [38.6, 32943.0], [38.7, 32943.0], [38.8, 32943.0], [38.9, 32943.0], [39.0, 33107.0], [39.1, 33107.0], [39.2, 33107.0], [39.3, 33107.0], [39.4, 33107.0], [39.5, 33107.0], [39.6, 33107.0], [39.7, 33107.0], [39.8, 33107.0], [39.9, 33107.0], [40.0, 33148.0], [40.1, 33148.0], [40.2, 33148.0], [40.3, 33148.0], [40.4, 33148.0], [40.5, 33148.0], [40.6, 33148.0], [40.7, 33148.0], [40.8, 33148.0], [40.9, 33148.0], [41.0, 33389.0], [41.1, 33389.0], [41.2, 33389.0], [41.3, 33389.0], [41.4, 33389.0], [41.5, 33389.0], [41.6, 33389.0], [41.7, 33389.0], [41.8, 33389.0], [41.9, 33389.0], [42.0, 33692.0], [42.1, 33692.0], [42.2, 33692.0], [42.3, 33692.0], [42.4, 33692.0], [42.5, 33692.0], [42.6, 33692.0], [42.7, 33692.0], [42.8, 33692.0], [42.9, 33692.0], [43.0, 33841.0], [43.1, 33841.0], [43.2, 33841.0], [43.3, 33841.0], [43.4, 33841.0], [43.5, 33841.0], [43.6, 33841.0], [43.7, 33841.0], [43.8, 33841.0], [43.9, 33841.0], [44.0, 33862.0], [44.1, 33862.0], [44.2, 33862.0], [44.3, 33862.0], [44.4, 33862.0], [44.5, 33862.0], [44.6, 33862.0], [44.7, 33862.0], [44.8, 33862.0], [44.9, 33862.0], [45.0, 33871.0], [45.1, 33871.0], [45.2, 33871.0], [45.3, 33871.0], [45.4, 33871.0], [45.5, 33871.0], [45.6, 33871.0], [45.7, 33871.0], [45.8, 33871.0], [45.9, 33871.0], [46.0, 33921.0], [46.1, 33921.0], [46.2, 33921.0], [46.3, 33921.0], [46.4, 33921.0], [46.5, 33921.0], [46.6, 33921.0], [46.7, 33921.0], [46.8, 33921.0], [46.9, 33921.0], [47.0, 33934.0], [47.1, 33934.0], [47.2, 33934.0], [47.3, 33934.0], [47.4, 33934.0], [47.5, 33934.0], [47.6, 33934.0], [47.7, 33934.0], [47.8, 33934.0], [47.9, 33934.0], [48.0, 33975.0], [48.1, 33975.0], [48.2, 33975.0], [48.3, 33975.0], [48.4, 33975.0], [48.5, 33975.0], [48.6, 33975.0], [48.7, 33975.0], [48.8, 33975.0], [48.9, 33975.0], [49.0, 33990.0], [49.1, 33990.0], [49.2, 33990.0], [49.3, 33990.0], [49.4, 33990.0], [49.5, 33990.0], [49.6, 33990.0], [49.7, 33990.0], [49.8, 33990.0], [49.9, 33990.0], [50.0, 33992.0], [50.1, 33992.0], [50.2, 33992.0], [50.3, 33992.0], [50.4, 33992.0], [50.5, 33992.0], [50.6, 33992.0], [50.7, 33992.0], [50.8, 33992.0], [50.9, 33992.0], [51.0, 34069.0], [51.1, 34069.0], [51.2, 34069.0], [51.3, 34069.0], [51.4, 34069.0], [51.5, 34069.0], [51.6, 34069.0], [51.7, 34069.0], [51.8, 34069.0], [51.9, 34069.0], [52.0, 34119.0], [52.1, 34119.0], [52.2, 34119.0], [52.3, 34119.0], [52.4, 34119.0], [52.5, 34119.0], [52.6, 34119.0], [52.7, 34119.0], [52.8, 34119.0], [52.9, 34119.0], [53.0, 34319.0], [53.1, 34319.0], [53.2, 34319.0], [53.3, 34319.0], [53.4, 34319.0], [53.5, 34319.0], [53.6, 34319.0], [53.7, 34319.0], [53.8, 34319.0], [53.9, 34319.0], [54.0, 34331.0], [54.1, 34331.0], [54.2, 34331.0], [54.3, 34331.0], [54.4, 34331.0], [54.5, 34331.0], [54.6, 34331.0], [54.7, 34331.0], [54.8, 34331.0], [54.9, 34331.0], [55.0, 34402.0], [55.1, 34402.0], [55.2, 34402.0], [55.3, 34402.0], [55.4, 34402.0], [55.5, 34402.0], [55.6, 34402.0], [55.7, 34402.0], [55.8, 34402.0], [55.9, 34402.0], [56.0, 34427.0], [56.1, 34427.0], [56.2, 34427.0], [56.3, 34427.0], [56.4, 34427.0], [56.5, 34427.0], [56.6, 34427.0], [56.7, 34427.0], [56.8, 34427.0], [56.9, 34427.0], [57.0, 34438.0], [57.1, 34438.0], [57.2, 34438.0], [57.3, 34438.0], [57.4, 34438.0], [57.5, 34438.0], [57.6, 34438.0], [57.7, 34438.0], [57.8, 34438.0], [57.9, 34438.0], [58.0, 34462.0], [58.1, 34462.0], [58.2, 34462.0], [58.3, 34462.0], [58.4, 34462.0], [58.5, 34462.0], [58.6, 34462.0], [58.7, 34462.0], [58.8, 34462.0], [58.9, 34462.0], [59.0, 34556.0], [59.1, 34556.0], [59.2, 34556.0], [59.3, 34556.0], [59.4, 34556.0], [59.5, 34556.0], [59.6, 34556.0], [59.7, 34556.0], [59.8, 34556.0], [59.9, 34556.0], [60.0, 34573.0], [60.1, 34573.0], [60.2, 34573.0], [60.3, 34573.0], [60.4, 34573.0], [60.5, 34573.0], [60.6, 34573.0], [60.7, 34573.0], [60.8, 34573.0], [60.9, 34573.0], [61.0, 34593.0], [61.1, 34593.0], [61.2, 34593.0], [61.3, 34593.0], [61.4, 34593.0], [61.5, 34593.0], [61.6, 34593.0], [61.7, 34593.0], [61.8, 34593.0], [61.9, 34593.0], [62.0, 34612.0], [62.1, 34612.0], [62.2, 34612.0], [62.3, 34612.0], [62.4, 34612.0], [62.5, 34612.0], [62.6, 34612.0], [62.7, 34612.0], [62.8, 34612.0], [62.9, 34612.0], [63.0, 34638.0], [63.1, 34638.0], [63.2, 34638.0], [63.3, 34638.0], [63.4, 34638.0], [63.5, 34638.0], [63.6, 34638.0], [63.7, 34638.0], [63.8, 34638.0], [63.9, 34638.0], [64.0, 34712.0], [64.1, 34712.0], [64.2, 34712.0], [64.3, 34712.0], [64.4, 34712.0], [64.5, 34712.0], [64.6, 34712.0], [64.7, 34712.0], [64.8, 34712.0], [64.9, 34712.0], [65.0, 34721.0], [65.1, 34721.0], [65.2, 34721.0], [65.3, 34721.0], [65.4, 34721.0], [65.5, 34721.0], [65.6, 34721.0], [65.7, 34721.0], [65.8, 34721.0], [65.9, 34721.0], [66.0, 34813.0], [66.1, 34813.0], [66.2, 34813.0], [66.3, 34813.0], [66.4, 34813.0], [66.5, 34813.0], [66.6, 34813.0], [66.7, 34813.0], [66.8, 34813.0], [66.9, 34813.0], [67.0, 34894.0], [67.1, 34894.0], [67.2, 34894.0], [67.3, 34894.0], [67.4, 34894.0], [67.5, 34894.0], [67.6, 34894.0], [67.7, 34894.0], [67.8, 34894.0], [67.9, 34894.0], [68.0, 34962.0], [68.1, 34962.0], [68.2, 34962.0], [68.3, 34962.0], [68.4, 34962.0], [68.5, 34962.0], [68.6, 34962.0], [68.7, 34962.0], [68.8, 34962.0], [68.9, 34962.0], [69.0, 34964.0], [69.1, 34964.0], [69.2, 34964.0], [69.3, 34964.0], [69.4, 34964.0], [69.5, 34964.0], [69.6, 34964.0], [69.7, 34964.0], [69.8, 34964.0], [69.9, 34964.0], [70.0, 35034.0], [70.1, 35034.0], [70.2, 35034.0], [70.3, 35034.0], [70.4, 35034.0], [70.5, 35034.0], [70.6, 35034.0], [70.7, 35034.0], [70.8, 35034.0], [70.9, 35034.0], [71.0, 35084.0], [71.1, 35084.0], [71.2, 35084.0], [71.3, 35084.0], [71.4, 35084.0], [71.5, 35084.0], [71.6, 35084.0], [71.7, 35084.0], [71.8, 35084.0], [71.9, 35084.0], [72.0, 35088.0], [72.1, 35088.0], [72.2, 35088.0], [72.3, 35088.0], [72.4, 35088.0], [72.5, 35088.0], [72.6, 35088.0], [72.7, 35088.0], [72.8, 35088.0], [72.9, 35088.0], [73.0, 35100.0], [73.1, 35100.0], [73.2, 35100.0], [73.3, 35100.0], [73.4, 35100.0], [73.5, 35100.0], [73.6, 35100.0], [73.7, 35100.0], [73.8, 35100.0], [73.9, 35100.0], [74.0, 35112.0], [74.1, 35112.0], [74.2, 35112.0], [74.3, 35112.0], [74.4, 35112.0], [74.5, 35112.0], [74.6, 35112.0], [74.7, 35112.0], [74.8, 35112.0], [74.9, 35112.0], [75.0, 35163.0], [75.1, 35163.0], [75.2, 35163.0], [75.3, 35163.0], [75.4, 35163.0], [75.5, 35163.0], [75.6, 35163.0], [75.7, 35163.0], [75.8, 35163.0], [75.9, 35163.0], [76.0, 35199.0], [76.1, 35199.0], [76.2, 35199.0], [76.3, 35199.0], [76.4, 35199.0], [76.5, 35199.0], [76.6, 35199.0], [76.7, 35199.0], [76.8, 35199.0], [76.9, 35199.0], [77.0, 35215.0], [77.1, 35215.0], [77.2, 35215.0], [77.3, 35215.0], [77.4, 35215.0], [77.5, 35215.0], [77.6, 35215.0], [77.7, 35215.0], [77.8, 35215.0], [77.9, 35215.0], [78.0, 35270.0], [78.1, 35270.0], [78.2, 35270.0], [78.3, 35270.0], [78.4, 35270.0], [78.5, 35270.0], [78.6, 35270.0], [78.7, 35270.0], [78.8, 35270.0], [78.9, 35270.0], [79.0, 35276.0], [79.1, 35276.0], [79.2, 35276.0], [79.3, 35276.0], [79.4, 35276.0], [79.5, 35276.0], [79.6, 35276.0], [79.7, 35276.0], [79.8, 35276.0], [79.9, 35276.0], [80.0, 35282.0], [80.1, 35282.0], [80.2, 35282.0], [80.3, 35282.0], [80.4, 35282.0], [80.5, 35282.0], [80.6, 35282.0], [80.7, 35282.0], [80.8, 35282.0], [80.9, 35282.0], [81.0, 35324.0], [81.1, 35324.0], [81.2, 35324.0], [81.3, 35324.0], [81.4, 35324.0], [81.5, 35324.0], [81.6, 35324.0], [81.7, 35324.0], [81.8, 35324.0], [81.9, 35324.0], [82.0, 35330.0], [82.1, 35330.0], [82.2, 35330.0], [82.3, 35330.0], [82.4, 35330.0], [82.5, 35330.0], [82.6, 35330.0], [82.7, 35330.0], [82.8, 35330.0], [82.9, 35330.0], [83.0, 35332.0], [83.1, 35332.0], [83.2, 35332.0], [83.3, 35332.0], [83.4, 35332.0], [83.5, 35332.0], [83.6, 35332.0], [83.7, 35332.0], [83.8, 35332.0], [83.9, 35332.0], [84.0, 35336.0], [84.1, 35336.0], [84.2, 35336.0], [84.3, 35336.0], [84.4, 35336.0], [84.5, 35336.0], [84.6, 35336.0], [84.7, 35336.0], [84.8, 35336.0], [84.9, 35336.0], [85.0, 35338.0], [85.1, 35338.0], [85.2, 35338.0], [85.3, 35338.0], [85.4, 35338.0], [85.5, 35338.0], [85.6, 35338.0], [85.7, 35338.0], [85.8, 35338.0], [85.9, 35338.0], [86.0, 35355.0], [86.1, 35355.0], [86.2, 35355.0], [86.3, 35355.0], [86.4, 35355.0], [86.5, 35355.0], [86.6, 35355.0], [86.7, 35355.0], [86.8, 35355.0], [86.9, 35355.0], [87.0, 35360.0], [87.1, 35360.0], [87.2, 35360.0], [87.3, 35360.0], [87.4, 35360.0], [87.5, 35360.0], [87.6, 35360.0], [87.7, 35360.0], [87.8, 35360.0], [87.9, 35360.0], [88.0, 35367.0], [88.1, 35367.0], [88.2, 35367.0], [88.3, 35367.0], [88.4, 35367.0], [88.5, 35367.0], [88.6, 35367.0], [88.7, 35367.0], [88.8, 35367.0], [88.9, 35367.0], [89.0, 35373.0], [89.1, 35373.0], [89.2, 35373.0], [89.3, 35373.0], [89.4, 35373.0], [89.5, 35373.0], [89.6, 35373.0], [89.7, 35373.0], [89.8, 35373.0], [89.9, 35373.0], [90.0, 35376.0], [90.1, 35376.0], [90.2, 35376.0], [90.3, 35376.0], [90.4, 35376.0], [90.5, 35376.0], [90.6, 35376.0], [90.7, 35376.0], [90.8, 35376.0], [90.9, 35376.0], [91.0, 35376.0], [91.1, 35376.0], [91.2, 35376.0], [91.3, 35376.0], [91.4, 35376.0], [91.5, 35376.0], [91.6, 35376.0], [91.7, 35376.0], [91.8, 35376.0], [91.9, 35376.0], [92.0, 35382.0], [92.1, 35382.0], [92.2, 35382.0], [92.3, 35382.0], [92.4, 35382.0], [92.5, 35382.0], [92.6, 35382.0], [92.7, 35382.0], [92.8, 35382.0], [92.9, 35382.0], [93.0, 35384.0], [93.1, 35384.0], [93.2, 35384.0], [93.3, 35384.0], [93.4, 35384.0], [93.5, 35384.0], [93.6, 35384.0], [93.7, 35384.0], [93.8, 35384.0], [93.9, 35384.0], [94.0, 35409.0], [94.1, 35409.0], [94.2, 35409.0], [94.3, 35409.0], [94.4, 35409.0], [94.5, 35409.0], [94.6, 35409.0], [94.7, 35409.0], [94.8, 35409.0], [94.9, 35409.0], [95.0, 35447.0], [95.1, 35447.0], [95.2, 35447.0], [95.3, 35447.0], [95.4, 35447.0], [95.5, 35447.0], [95.6, 35447.0], [95.7, 35447.0], [95.8, 35447.0], [95.9, 35447.0], [96.0, 35453.0], [96.1, 35453.0], [96.2, 35453.0], [96.3, 35453.0], [96.4, 35453.0], [96.5, 35453.0], [96.6, 35453.0], [96.7, 35453.0], [96.8, 35453.0], [96.9, 35453.0], [97.0, 35524.0], [97.1, 35524.0], [97.2, 35524.0], [97.3, 35524.0], [97.4, 35524.0], [97.5, 35524.0], [97.6, 35524.0], [97.7, 35524.0], [97.8, 35524.0], [97.9, 35524.0], [98.0, 35532.0], [98.1, 35532.0], [98.2, 35532.0], [98.3, 35532.0], [98.4, 35532.0], [98.5, 35532.0], [98.6, 35532.0], [98.7, 35532.0], [98.8, 35532.0], [98.9, 35532.0], [99.0, 35587.0], [99.1, 35587.0], [99.2, 35587.0], [99.3, 35587.0], [99.4, 35587.0], [99.5, 35587.0], [99.6, 35587.0], [99.7, 35587.0], [99.8, 35587.0], [99.9, 35587.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 18.0, "series": [{"data": [[12000.0, 1.0], [14600.0, 1.0], [15500.0, 1.0], [16800.0, 1.0], [20100.0, 3.0], [21000.0, 1.0], [23100.0, 1.0], [23200.0, 1.0], [24200.0, 1.0], [24700.0, 1.0], [29900.0, 1.0], [30900.0, 1.0], [34900.0, 1.0], [35900.0, 1.0], [39300.0, 1.0], [39900.0, 1.0], [40500.0, 1.0], [40600.0, 2.0], [42600.0, 1.0], [41000.0, 1.0], [41100.0, 1.0], [42300.0, 2.0], [42400.0, 1.0], [42500.0, 1.0], [42800.0, 1.0], [42900.0, 1.0], [43000.0, 6.0], [43200.0, 10.0], [43100.0, 6.0], [43300.0, 3.0], [43400.0, 1.0], [43500.0, 6.0], [43600.0, 5.0], [43700.0, 18.0], [43800.0, 13.0], [43900.0, 2.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[600.0, 1.0], [700.0, 1.0], [12800.0, 1.0], [900.0, 1.0], [15700.0, 1.0], [16300.0, 1.0], [16400.0, 1.0], [16800.0, 1.0], [18900.0, 1.0], [19600.0, 1.0], [20200.0, 1.0], [20500.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [20800.0, 2.0], [21000.0, 1.0], [21100.0, 2.0], [21200.0, 2.0], [21300.0, 2.0], [21500.0, 1.0], [22300.0, 3.0], [22500.0, 5.0], [22600.0, 2.0], [22700.0, 2.0], [23500.0, 3.0], [23700.0, 1.0], [23600.0, 7.0], [23800.0, 2.0], [23900.0, 8.0], [24000.0, 9.0], [24100.0, 12.0], [24200.0, 13.0], [24300.0, 2.0], [24400.0, 1.0], [24600.0, 5.0], [24700.0, 1.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[10100.0, 1.0], [10700.0, 1.0], [16600.0, 1.0], [16700.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17300.0, 1.0], [17900.0, 2.0], [18000.0, 1.0], [18600.0, 1.0], [19300.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [21800.0, 1.0], [22100.0, 1.0], [22200.0, 1.0], [22500.0, 1.0], [22900.0, 1.0], [23200.0, 2.0], [23300.0, 1.0], [23400.0, 1.0], [23500.0, 1.0], [24000.0, 1.0], [25800.0, 1.0], [26200.0, 2.0], [27300.0, 1.0], [29500.0, 2.0], [30700.0, 1.0], [31000.0, 1.0], [31400.0, 1.0], [31600.0, 1.0], [32400.0, 2.0], [32600.0, 1.0], [33800.0, 3.0], [32900.0, 1.0], [33100.0, 2.0], [34400.0, 4.0], [34500.0, 3.0], [34600.0, 2.0], [34700.0, 2.0], [34800.0, 2.0], [33300.0, 1.0], [33600.0, 1.0], [33900.0, 5.0], [34000.0, 1.0], [34100.0, 1.0], [34300.0, 2.0], [34900.0, 2.0], [35000.0, 3.0], [35100.0, 4.0], [35200.0, 4.0], [35300.0, 13.0], [35400.0, 3.0], [35500.0, 3.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 43900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 297.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 297.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.60465116279069, "minX": 1.66896468E12, "maxY": 93.5, "series": [{"data": [[1.66896474E12, 43.60465116279069], [1.66896468E12, 93.5]], "isOverall": false, "label": "client-to-gateway-non-caching (GET)", "isController": false}, {"data": [[1.66896468E12, 50.52000000000002]], "isOverall": false, "label": "client-to-application (GET)", "isController": false}, {"data": [[1.66896474E12, 50.60000000000002]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66896474E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 668.0, "minX": 1.0, "maxY": 43900.0, "series": [{"data": [[2.0, 43900.0], [3.0, 43801.0], [4.0, 43884.0], [5.0, 43814.0], [6.0, 43900.0], [8.0, 43820.5], [9.0, 43821.0], [11.0, 43836.5], [12.0, 43785.0], [13.0, 43780.0], [15.0, 43795.5], [16.0, 43763.0], [17.0, 43831.0], [18.0, 43793.0], [19.0, 43823.0], [20.0, 43777.0], [21.0, 43750.0], [22.0, 43833.0], [23.0, 43732.0], [24.0, 43698.0], [25.0, 43785.0], [28.0, 43756.666666666664], [29.0, 43750.0], [30.0, 43725.0], [31.0, 43716.0], [33.0, 43741.0], [32.0, 43648.0], [34.0, 43707.0], [37.0, 43655.0], [36.0, 43693.5], [39.0, 43584.0], [38.0, 43669.0], [41.0, 43567.0], [40.0, 43598.0], [43.0, 43575.0], [45.0, 43393.0], [44.0, 43524.0], [47.0, 43446.0], [46.0, 43391.0], [49.0, 43268.0], [48.0, 43391.0], [51.0, 43272.0], [50.0, 43290.0], [53.0, 43293.0], [52.0, 43277.0], [55.0, 43219.0], [54.0, 43259.0], [57.0, 43225.0], [59.0, 43153.0], [58.0, 43247.0], [61.0, 43173.0], [60.0, 43232.0], [63.0, 43171.0], [62.0, 43115.0], [67.0, 43044.0], [66.0, 43071.0], [65.0, 43055.0], [64.0, 43176.0], [71.0, 42957.0], [70.0, 43039.0], [69.0, 43029.0], [68.0, 43043.0], [75.0, 42471.0], [74.0, 42523.0], [73.0, 42624.0], [72.0, 42853.0], [79.0, 41015.0], [78.0, 41186.0], [77.0, 42332.0], [76.0, 42387.0], [83.0, 39958.0], [82.0, 40598.0], [81.0, 40648.0], [80.0, 40668.0], [87.0, 30905.0], [86.0, 34912.0], [85.0, 35929.0], [84.0, 39305.0], [91.0, 23250.0], [90.0, 24269.0], [89.0, 24757.0], [88.0, 29914.0], [95.0, 20170.0], [94.0, 20144.0], [93.0, 21041.0], [92.0, 23126.0], [99.0, 14612.0], [98.0, 15516.0], [97.0, 16875.0], [96.0, 20132.0], [100.0, 12082.0], [1.0, 43880.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[50.589999999999996, 39976.01999999998]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 24738.0], [3.0, 24661.0], [4.0, 24643.0], [5.0, 24685.0], [6.0, 24621.0], [8.0, 24423.5], [9.0, 24323.0], [10.0, 24290.0], [11.0, 24245.0], [12.0, 24237.0], [14.0, 24280.0], [15.0, 24285.0], [16.0, 24276.0], [17.0, 24236.0], [18.0, 24193.0], [19.0, 24249.0], [20.0, 24201.0], [22.0, 24225.5], [23.0, 24198.0], [24.0, 24226.0], [25.0, 24161.0], [26.0, 24145.0], [27.0, 24118.0], [28.0, 24174.0], [29.0, 24134.0], [30.0, 24182.0], [31.0, 24117.0], [33.0, 24184.0], [32.0, 24132.0], [34.0, 24128.0], [36.0, 24061.0], [39.0, 24008.0], [38.0, 24032.0], [41.0, 24058.0], [40.0, 24036.0], [43.0, 24071.0], [42.0, 24067.0], [45.0, 23903.0], [44.0, 23972.0], [46.0, 23920.0], [49.0, 23959.0], [48.0, 23944.5], [50.0, 23927.0], [53.0, 23849.0], [52.0, 23917.5], [55.0, 23694.0], [54.0, 23766.0], [57.0, 23636.0], [56.0, 23604.0], [59.0, 23586.0], [58.0, 23583.0], [63.0, 23627.0], [62.0, 23601.0], [67.0, 22689.0], [66.0, 22769.0], [65.0, 22707.0], [64.0, 23601.0], [71.0, 22519.0], [70.0, 22547.0], [69.0, 22576.0], [68.0, 22639.0], [75.0, 22329.0], [74.0, 22344.0], [73.0, 22522.0], [72.0, 22516.0], [79.0, 21319.0], [78.0, 21337.0], [77.0, 21504.0], [76.0, 22348.0], [83.0, 21138.0], [82.0, 21159.0], [81.0, 21221.0], [80.0, 21264.0], [87.0, 20704.0], [86.0, 20825.0], [85.0, 20898.0], [84.0, 21037.0], [91.0, 19619.0], [90.0, 20249.0], [89.0, 20533.0], [88.0, 20640.0], [95.0, 16312.0], [94.0, 16417.0], [93.0, 16848.0], [92.0, 18986.0], [99.0, 793.0], [98.0, 985.0], [97.0, 12836.0], [96.0, 15770.0], [100.0, 668.0], [1.0, 24667.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[50.60000000000002, 22254.54]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[2.0, 35532.0], [3.0, 35524.0], [4.0, 35447.0], [5.0, 35453.0], [7.0, 35396.5], [8.0, 35367.0], [9.0, 35376.0], [10.0, 35355.0], [11.0, 35376.0], [12.0, 35373.0], [13.0, 35382.0], [14.0, 35332.0], [15.0, 35338.0], [17.0, 35342.0], [18.0, 35336.0], [19.0, 35330.0], [20.0, 35276.0], [21.0, 35270.0], [22.0, 35282.0], [23.0, 35215.0], [24.0, 35199.0], [25.0, 35163.0], [26.0, 35100.0], [27.0, 35112.0], [28.0, 35088.0], [29.0, 35084.0], [30.0, 35034.0], [31.0, 34962.0], [33.0, 34894.0], [32.0, 34964.0], [35.0, 34721.0], [34.0, 34813.0], [37.0, 34638.0], [36.0, 34712.0], [39.0, 34593.0], [38.0, 34612.0], [41.0, 34556.0], [40.0, 34573.0], [43.0, 34462.0], [42.0, 34427.0], [45.0, 34402.0], [44.0, 34438.0], [47.0, 34319.0], [46.0, 34331.0], [49.0, 34069.0], [48.0, 34119.0], [51.0, 33990.0], [50.0, 33992.0], [53.0, 33934.0], [52.0, 33975.0], [55.0, 33871.0], [54.0, 33921.0], [57.0, 33841.0], [56.0, 33862.0], [59.0, 33389.0], [58.0, 33692.0], [61.0, 33107.0], [60.0, 33148.0], [63.0, 32665.0], [62.0, 32943.0], [67.0, 31497.0], [66.0, 31666.0], [65.0, 32420.0], [64.0, 32408.0], [71.0, 29546.0], [70.0, 29578.0], [69.0, 30741.0], [68.0, 31016.0], [75.0, 25857.0], [74.0, 26247.0], [73.0, 26295.0], [72.0, 27354.0], [79.0, 23330.0], [78.0, 23414.0], [77.0, 23504.0], [76.0, 24021.0], [83.0, 22573.0], [82.0, 22992.0], [81.0, 23206.0], [80.0, 23295.0], [87.0, 21255.0], [86.0, 21882.0], [85.0, 22119.0], [84.0, 22286.0], [91.0, 18086.0], [90.0, 18672.0], [89.0, 19378.0], [88.0, 20887.0], [95.0, 17291.0], [94.0, 17373.0], [93.0, 17922.0], [92.0, 17996.0], [99.0, 10734.0], [98.0, 16601.0], [97.0, 16785.0], [96.0, 16868.0], [100.0, 10160.0], [1.0, 35587.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[50.52000000000002, 30335.980000000003]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 241.3, "minX": 1.66896468E12, "maxY": 3.51083467E7, "series": [{"data": [[1.66896474E12, 3.51083467E7], [1.66896468E12, 2.1527784733333334E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66896474E12, 500.3666666666667], [1.66896468E12, 241.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66896474E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21199.5, "minX": 1.66896468E12, "maxY": 43032.66279069767, "series": [{"data": [[1.66896474E12, 43032.66279069767], [1.66896468E12, 21199.5]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66896474E12, 22254.54]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66896468E12, 30335.980000000003]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66896474E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7059.959999999996, "minX": 1.66896468E12, "maxY": 23890.53488372093, "series": [{"data": [[1.66896474E12, 23890.53488372093], [1.66896468E12, 16674.928571428572]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66896474E12, 7059.959999999996]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66896468E12, 23030.630000000005]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66896474E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9400000000000002, "minX": 1.66896468E12, "maxY": 35.75, "series": [{"data": [[1.66896474E12, 0.9883720930232558], [1.66896468E12, 1.785714285714286]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66896474E12, 0.9400000000000002]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66896468E12, 35.75]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66896474E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 668.0, "minX": 1.66896468E12, "maxY": 43900.0, "series": [{"data": [[1.66896474E12, 43900.0], [1.66896468E12, 35587.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66896474E12, 43785.0], [1.66896468E12, 35370.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66896474E12, 43900.0], [1.66896468E12, 35578.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66896474E12, 43828.2], [1.66896468E12, 35418.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66896474E12, 668.0], [1.66896468E12, 10160.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66896474E12, 24423.5], [1.66896468E12, 33766.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66896474E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18986.0, "minX": 1.0, "maxY": 43683.5, "series": [{"data": [[2.0, 24513.0], [34.0, 24236.5], [36.0, 35327.0], [9.0, 42624.0], [3.0, 21352.5], [12.0, 22534.5], [1.0, 18986.0], [4.0, 22202.5], [68.0, 43683.5], [22.0, 34219.0], [6.0, 23312.5], [7.0, 21087.5], [30.0, 23923.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6945.5, "minX": 1.0, "maxY": 25905.5, "series": [{"data": [[2.0, 19433.0], [34.0, 7911.5], [36.0, 25905.5], [9.0, 21861.0], [3.0, 16211.5], [12.0, 6945.5], [1.0, 12446.0], [4.0, 19415.5], [68.0, 23993.5], [22.0, 25071.0], [6.0, 19701.5], [7.0, 7285.5], [30.0, 6962.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.66896462E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66896474E12, 1.6666666666666667], [1.66896462E12, 1.6666666666666667], [1.66896468E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66896474E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.66896468E12, "maxY": 3.1, "series": [{"data": [[1.66896474E12, 3.1], [1.66896468E12, 1.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66896474E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.66896468E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66896468E12, 1.6666666666666667]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.66896474E12, 1.6666666666666667]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.66896474E12, 1.4333333333333333], [1.66896468E12, 0.23333333333333334]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66896474E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.66896468E12, "maxY": 3.1, "series": [{"data": [[1.66896474E12, 3.1], [1.66896468E12, 1.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66896474E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

