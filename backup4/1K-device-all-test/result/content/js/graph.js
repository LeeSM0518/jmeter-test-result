/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "maxY": 1101.0, "series": [{"data": [[0.0, 42.0], [0.1, 57.0], [0.2, 67.0], [0.3, 67.0], [0.4, 130.0], [0.5, 132.0], [0.6, 132.0], [0.7, 132.0], [0.8, 132.0], [0.9, 132.0], [1.0, 133.0], [1.1, 133.0], [1.2, 133.0], [1.3, 133.0], [1.4, 133.0], [1.5, 135.0], [1.6, 135.0], [1.7, 136.0], [1.8, 136.0], [1.9, 136.0], [2.0, 137.0], [2.1, 137.0], [2.2, 137.0], [2.3, 138.0], [2.4, 138.0], [2.5, 138.0], [2.6, 139.0], [2.7, 139.0], [2.8, 139.0], [2.9, 139.0], [3.0, 140.0], [3.1, 140.0], [3.2, 140.0], [3.3, 140.0], [3.4, 141.0], [3.5, 141.0], [3.6, 141.0], [3.7, 141.0], [3.8, 141.0], [3.9, 141.0], [4.0, 141.0], [4.1, 141.0], [4.2, 142.0], [4.3, 142.0], [4.4, 142.0], [4.5, 142.0], [4.6, 142.0], [4.7, 142.0], [4.8, 142.0], [4.9, 143.0], [5.0, 143.0], [5.1, 143.0], [5.2, 143.0], [5.3, 143.0], [5.4, 143.0], [5.5, 143.0], [5.6, 143.0], [5.7, 143.0], [5.8, 144.0], [5.9, 144.0], [6.0, 144.0], [6.1, 144.0], [6.2, 144.0], [6.3, 144.0], [6.4, 144.0], [6.5, 144.0], [6.6, 144.0], [6.7, 144.0], [6.8, 145.0], [6.9, 145.0], [7.0, 145.0], [7.1, 145.0], [7.2, 145.0], [7.3, 145.0], [7.4, 145.0], [7.5, 146.0], [7.6, 146.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 147.0], [8.6, 147.0], [8.7, 147.0], [8.8, 147.0], [8.9, 147.0], [9.0, 147.0], [9.1, 147.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 148.0], [10.5, 149.0], [10.6, 149.0], [10.7, 149.0], [10.8, 150.0], [10.9, 150.0], [11.0, 150.0], [11.1, 150.0], [11.2, 150.0], [11.3, 151.0], [11.4, 151.0], [11.5, 151.0], [11.6, 151.0], [11.7, 151.0], [11.8, 151.0], [11.9, 151.0], [12.0, 151.0], [12.1, 151.0], [12.2, 152.0], [12.3, 152.0], [12.4, 152.0], [12.5, 152.0], [12.6, 152.0], [12.7, 152.0], [12.8, 153.0], [12.9, 153.0], [13.0, 153.0], [13.1, 153.0], [13.2, 153.0], [13.3, 153.0], [13.4, 153.0], [13.5, 153.0], [13.6, 153.0], [13.7, 153.0], [13.8, 154.0], [13.9, 154.0], [14.0, 154.0], [14.1, 154.0], [14.2, 154.0], [14.3, 154.0], [14.4, 154.0], [14.5, 154.0], [14.6, 154.0], [14.7, 155.0], [14.8, 156.0], [14.9, 156.0], [15.0, 156.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 156.0], [15.5, 157.0], [15.6, 157.0], [15.7, 157.0], [15.8, 157.0], [15.9, 157.0], [16.0, 157.0], [16.1, 157.0], [16.2, 157.0], [16.3, 157.0], [16.4, 158.0], [16.5, 158.0], [16.6, 158.0], [16.7, 158.0], [16.8, 158.0], [16.9, 158.0], [17.0, 158.0], [17.1, 158.0], [17.2, 158.0], [17.3, 158.0], [17.4, 158.0], [17.5, 158.0], [17.6, 158.0], [17.7, 159.0], [17.8, 159.0], [17.9, 159.0], [18.0, 159.0], [18.1, 159.0], [18.2, 160.0], [18.3, 160.0], [18.4, 160.0], [18.5, 160.0], [18.6, 160.0], [18.7, 160.0], [18.8, 160.0], [18.9, 160.0], [19.0, 160.0], [19.1, 160.0], [19.2, 160.0], [19.3, 161.0], [19.4, 161.0], [19.5, 161.0], [19.6, 161.0], [19.7, 161.0], [19.8, 161.0], [19.9, 161.0], [20.0, 161.0], [20.1, 161.0], [20.2, 162.0], [20.3, 162.0], [20.4, 162.0], [20.5, 162.0], [20.6, 162.0], [20.7, 162.0], [20.8, 162.0], [20.9, 162.0], [21.0, 162.0], [21.1, 162.0], [21.2, 162.0], [21.3, 162.0], [21.4, 162.0], [21.5, 163.0], [21.6, 163.0], [21.7, 163.0], [21.8, 163.0], [21.9, 163.0], [22.0, 163.0], [22.1, 163.0], [22.2, 163.0], [22.3, 163.0], [22.4, 163.0], [22.5, 163.0], [22.6, 163.0], [22.7, 163.0], [22.8, 163.0], [22.9, 163.0], [23.0, 163.0], [23.1, 164.0], [23.2, 164.0], [23.3, 164.0], [23.4, 164.0], [23.5, 164.0], [23.6, 164.0], [23.7, 164.0], [23.8, 164.0], [23.9, 164.0], [24.0, 164.0], [24.1, 164.0], [24.2, 164.0], [24.3, 165.0], [24.4, 165.0], [24.5, 165.0], [24.6, 165.0], [24.7, 165.0], [24.8, 165.0], [24.9, 165.0], [25.0, 165.0], [25.1, 166.0], [25.2, 166.0], [25.3, 166.0], [25.4, 166.0], [25.5, 166.0], [25.6, 166.0], [25.7, 166.0], [25.8, 167.0], [25.9, 167.0], [26.0, 167.0], [26.1, 167.0], [26.2, 167.0], [26.3, 167.0], [26.4, 167.0], [26.5, 167.0], [26.6, 167.0], [26.7, 167.0], [26.8, 168.0], [26.9, 168.0], [27.0, 168.0], [27.1, 168.0], [27.2, 168.0], [27.3, 168.0], [27.4, 168.0], [27.5, 168.0], [27.6, 168.0], [27.7, 168.0], [27.8, 168.0], [27.9, 168.0], [28.0, 169.0], [28.1, 169.0], [28.2, 169.0], [28.3, 169.0], [28.4, 169.0], [28.5, 169.0], [28.6, 169.0], [28.7, 169.0], [28.8, 169.0], [28.9, 169.0], [29.0, 170.0], [29.1, 170.0], [29.2, 170.0], [29.3, 170.0], [29.4, 170.0], [29.5, 170.0], [29.6, 170.0], [29.7, 170.0], [29.8, 171.0], [29.9, 171.0], [30.0, 171.0], [30.1, 171.0], [30.2, 171.0], [30.3, 171.0], [30.4, 171.0], [30.5, 171.0], [30.6, 171.0], [30.7, 171.0], [30.8, 171.0], [30.9, 171.0], [31.0, 172.0], [31.1, 172.0], [31.2, 172.0], [31.3, 172.0], [31.4, 172.0], [31.5, 172.0], [31.6, 172.0], [31.7, 172.0], [31.8, 172.0], [31.9, 173.0], [32.0, 173.0], [32.1, 173.0], [32.2, 173.0], [32.3, 173.0], [32.4, 173.0], [32.5, 174.0], [32.6, 174.0], [32.7, 174.0], [32.8, 174.0], [32.9, 174.0], [33.0, 174.0], [33.1, 174.0], [33.2, 174.0], [33.3, 174.0], [33.4, 174.0], [33.5, 174.0], [33.6, 174.0], [33.7, 174.0], [33.8, 174.0], [33.9, 175.0], [34.0, 175.0], [34.1, 175.0], [34.2, 175.0], [34.3, 175.0], [34.4, 175.0], [34.5, 175.0], [34.6, 175.0], [34.7, 175.0], [34.8, 175.0], [34.9, 175.0], [35.0, 175.0], [35.1, 175.0], [35.2, 175.0], [35.3, 176.0], [35.4, 176.0], [35.5, 176.0], [35.6, 176.0], [35.7, 176.0], [35.8, 176.0], [35.9, 176.0], [36.0, 176.0], [36.1, 176.0], [36.2, 176.0], [36.3, 176.0], [36.4, 176.0], [36.5, 176.0], [36.6, 177.0], [36.7, 177.0], [36.8, 177.0], [36.9, 177.0], [37.0, 177.0], [37.1, 177.0], [37.2, 177.0], [37.3, 177.0], [37.4, 177.0], [37.5, 177.0], [37.6, 177.0], [37.7, 177.0], [37.8, 177.0], [37.9, 178.0], [38.0, 178.0], [38.1, 178.0], [38.2, 178.0], [38.3, 178.0], [38.4, 178.0], [38.5, 178.0], [38.6, 178.0], [38.7, 178.0], [38.8, 178.0], [38.9, 178.0], [39.0, 179.0], [39.1, 179.0], [39.2, 179.0], [39.3, 179.0], [39.4, 179.0], [39.5, 179.0], [39.6, 179.0], [39.7, 179.0], [39.8, 179.0], [39.9, 179.0], [40.0, 179.0], [40.1, 179.0], [40.2, 180.0], [40.3, 180.0], [40.4, 180.0], [40.5, 180.0], [40.6, 180.0], [40.7, 180.0], [40.8, 180.0], [40.9, 181.0], [41.0, 181.0], [41.1, 181.0], [41.2, 181.0], [41.3, 181.0], [41.4, 181.0], [41.5, 181.0], [41.6, 181.0], [41.7, 181.0], [41.8, 181.0], [41.9, 181.0], [42.0, 182.0], [42.1, 182.0], [42.2, 182.0], [42.3, 182.0], [42.4, 182.0], [42.5, 182.0], [42.6, 182.0], [42.7, 182.0], [42.8, 182.0], [42.9, 182.0], [43.0, 182.0], [43.1, 182.0], [43.2, 182.0], [43.3, 183.0], [43.4, 183.0], [43.5, 183.0], [43.6, 183.0], [43.7, 183.0], [43.8, 183.0], [43.9, 183.0], [44.0, 183.0], [44.1, 183.0], [44.2, 184.0], [44.3, 184.0], [44.4, 184.0], [44.5, 184.0], [44.6, 184.0], [44.7, 184.0], [44.8, 184.0], [44.9, 184.0], [45.0, 184.0], [45.1, 184.0], [45.2, 184.0], [45.3, 184.0], [45.4, 184.0], [45.5, 184.0], [45.6, 184.0], [45.7, 184.0], [45.8, 184.0], [45.9, 184.0], [46.0, 185.0], [46.1, 185.0], [46.2, 185.0], [46.3, 185.0], [46.4, 185.0], [46.5, 185.0], [46.6, 185.0], [46.7, 185.0], [46.8, 185.0], [46.9, 185.0], [47.0, 185.0], [47.1, 185.0], [47.2, 185.0], [47.3, 185.0], [47.4, 185.0], [47.5, 185.0], [47.6, 186.0], [47.7, 186.0], [47.8, 186.0], [47.9, 186.0], [48.0, 186.0], [48.1, 186.0], [48.2, 186.0], [48.3, 186.0], [48.4, 186.0], [48.5, 187.0], [48.6, 187.0], [48.7, 187.0], [48.8, 187.0], [48.9, 187.0], [49.0, 187.0], [49.1, 187.0], [49.2, 187.0], [49.3, 187.0], [49.4, 187.0], [49.5, 187.0], [49.6, 188.0], [49.7, 188.0], [49.8, 188.0], [49.9, 188.0], [50.0, 188.0], [50.1, 188.0], [50.2, 188.0], [50.3, 188.0], [50.4, 189.0], [50.5, 189.0], [50.6, 189.0], [50.7, 189.0], [50.8, 189.0], [50.9, 189.0], [51.0, 189.0], [51.1, 189.0], [51.2, 189.0], [51.3, 189.0], [51.4, 189.0], [51.5, 190.0], [51.6, 190.0], [51.7, 190.0], [51.8, 190.0], [51.9, 190.0], [52.0, 190.0], [52.1, 191.0], [52.2, 191.0], [52.3, 191.0], [52.4, 191.0], [52.5, 191.0], [52.6, 191.0], [52.7, 191.0], [52.8, 191.0], [52.9, 191.0], [53.0, 191.0], [53.1, 191.0], [53.2, 191.0], [53.3, 191.0], [53.4, 191.0], [53.5, 192.0], [53.6, 192.0], [53.7, 192.0], [53.8, 192.0], [53.9, 192.0], [54.0, 192.0], [54.1, 192.0], [54.2, 192.0], [54.3, 192.0], [54.4, 192.0], [54.5, 192.0], [54.6, 192.0], [54.7, 192.0], [54.8, 193.0], [54.9, 193.0], [55.0, 193.0], [55.1, 193.0], [55.2, 193.0], [55.3, 193.0], [55.4, 193.0], [55.5, 193.0], [55.6, 193.0], [55.7, 193.0], [55.8, 193.0], [55.9, 193.0], [56.0, 193.0], [56.1, 194.0], [56.2, 194.0], [56.3, 194.0], [56.4, 194.0], [56.5, 194.0], [56.6, 194.0], [56.7, 194.0], [56.8, 194.0], [56.9, 194.0], [57.0, 194.0], [57.1, 194.0], [57.2, 194.0], [57.3, 194.0], [57.4, 194.0], [57.5, 194.0], [57.6, 195.0], [57.7, 195.0], [57.8, 195.0], [57.9, 195.0], [58.0, 195.0], [58.1, 195.0], [58.2, 195.0], [58.3, 195.0], [58.4, 195.0], [58.5, 195.0], [58.6, 195.0], [58.7, 195.0], [58.8, 196.0], [58.9, 196.0], [59.0, 196.0], [59.1, 196.0], [59.2, 196.0], [59.3, 196.0], [59.4, 196.0], [59.5, 197.0], [59.6, 197.0], [59.7, 197.0], [59.8, 197.0], [59.9, 197.0], [60.0, 197.0], [60.1, 197.0], [60.2, 197.0], [60.3, 197.0], [60.4, 198.0], [60.5, 198.0], [60.6, 198.0], [60.7, 198.0], [60.8, 198.0], [60.9, 198.0], [61.0, 198.0], [61.1, 198.0], [61.2, 198.0], [61.3, 198.0], [61.4, 198.0], [61.5, 198.0], [61.6, 198.0], [61.7, 198.0], [61.8, 199.0], [61.9, 199.0], [62.0, 199.0], [62.1, 199.0], [62.2, 199.0], [62.3, 199.0], [62.4, 199.0], [62.5, 199.0], [62.6, 199.0], [62.7, 199.0], [62.8, 200.0], [62.9, 200.0], [63.0, 200.0], [63.1, 200.0], [63.2, 200.0], [63.3, 200.0], [63.4, 200.0], [63.5, 200.0], [63.6, 200.0], [63.7, 200.0], [63.8, 200.0], [63.9, 200.0], [64.0, 200.0], [64.1, 200.0], [64.2, 200.0], [64.3, 201.0], [64.4, 201.0], [64.5, 201.0], [64.6, 201.0], [64.7, 201.0], [64.8, 201.0], [64.9, 201.0], [65.0, 201.0], [65.1, 201.0], [65.2, 201.0], [65.3, 201.0], [65.4, 201.0], [65.5, 201.0], [65.6, 202.0], [65.7, 202.0], [65.8, 202.0], [65.9, 202.0], [66.0, 202.0], [66.1, 202.0], [66.2, 202.0], [66.3, 202.0], [66.4, 202.0], [66.5, 203.0], [66.6, 203.0], [66.7, 203.0], [66.8, 203.0], [66.9, 203.0], [67.0, 203.0], [67.1, 203.0], [67.2, 203.0], [67.3, 203.0], [67.4, 203.0], [67.5, 203.0], [67.6, 204.0], [67.7, 204.0], [67.8, 204.0], [67.9, 204.0], [68.0, 204.0], [68.1, 204.0], [68.2, 204.0], [68.3, 204.0], [68.4, 204.0], [68.5, 204.0], [68.6, 204.0], [68.7, 205.0], [68.8, 205.0], [68.9, 205.0], [69.0, 205.0], [69.1, 205.0], [69.2, 205.0], [69.3, 205.0], [69.4, 205.0], [69.5, 205.0], [69.6, 205.0], [69.7, 205.0], [69.8, 205.0], [69.9, 205.0], [70.0, 205.0], [70.1, 205.0], [70.2, 206.0], [70.3, 206.0], [70.4, 206.0], [70.5, 206.0], [70.6, 206.0], [70.7, 206.0], [70.8, 206.0], [70.9, 206.0], [71.0, 206.0], [71.1, 207.0], [71.2, 207.0], [71.3, 207.0], [71.4, 207.0], [71.5, 207.0], [71.6, 207.0], [71.7, 207.0], [71.8, 207.0], [71.9, 207.0], [72.0, 207.0], [72.1, 207.0], [72.2, 208.0], [72.3, 208.0], [72.4, 208.0], [72.5, 208.0], [72.6, 208.0], [72.7, 208.0], [72.8, 208.0], [72.9, 208.0], [73.0, 208.0], [73.1, 208.0], [73.2, 208.0], [73.3, 208.0], [73.4, 208.0], [73.5, 208.0], [73.6, 209.0], [73.7, 209.0], [73.8, 209.0], [73.9, 209.0], [74.0, 209.0], [74.1, 209.0], [74.2, 209.0], [74.3, 209.0], [74.4, 209.0], [74.5, 209.0], [74.6, 209.0], [74.7, 209.0], [74.8, 209.0], [74.9, 210.0], [75.0, 210.0], [75.1, 210.0], [75.2, 210.0], [75.3, 210.0], [75.4, 210.0], [75.5, 210.0], [75.6, 211.0], [75.7, 211.0], [75.8, 211.0], [75.9, 211.0], [76.0, 211.0], [76.1, 211.0], [76.2, 211.0], [76.3, 211.0], [76.4, 211.0], [76.5, 212.0], [76.6, 212.0], [76.7, 212.0], [76.8, 212.0], [76.9, 212.0], [77.0, 212.0], [77.1, 212.0], [77.2, 212.0], [77.3, 213.0], [77.4, 213.0], [77.5, 213.0], [77.6, 213.0], [77.7, 213.0], [77.8, 213.0], [77.9, 213.0], [78.0, 214.0], [78.1, 214.0], [78.2, 214.0], [78.3, 214.0], [78.4, 214.0], [78.5, 214.0], [78.6, 215.0], [78.7, 215.0], [78.8, 215.0], [78.9, 215.0], [79.0, 215.0], [79.1, 215.0], [79.2, 215.0], [79.3, 215.0], [79.4, 215.0], [79.5, 215.0], [79.6, 215.0], [79.7, 215.0], [79.8, 215.0], [79.9, 215.0], [80.0, 216.0], [80.1, 216.0], [80.2, 216.0], [80.3, 216.0], [80.4, 216.0], [80.5, 216.0], [80.6, 216.0], [80.7, 216.0], [80.8, 217.0], [80.9, 217.0], [81.0, 217.0], [81.1, 217.0], [81.2, 217.0], [81.3, 217.0], [81.4, 217.0], [81.5, 218.0], [81.6, 218.0], [81.7, 218.0], [81.8, 218.0], [81.9, 218.0], [82.0, 218.0], [82.1, 218.0], [82.2, 218.0], [82.3, 219.0], [82.4, 219.0], [82.5, 219.0], [82.6, 219.0], [82.7, 220.0], [82.8, 220.0], [82.9, 220.0], [83.0, 220.0], [83.1, 220.0], [83.2, 220.0], [83.3, 220.0], [83.4, 221.0], [83.5, 221.0], [83.6, 221.0], [83.7, 221.0], [83.8, 221.0], [83.9, 221.0], [84.0, 221.0], [84.1, 221.0], [84.2, 221.0], [84.3, 221.0], [84.4, 221.0], [84.5, 222.0], [84.6, 222.0], [84.7, 222.0], [84.8, 222.0], [84.9, 222.0], [85.0, 222.0], [85.1, 223.0], [85.2, 223.0], [85.3, 223.0], [85.4, 223.0], [85.5, 223.0], [85.6, 223.0], [85.7, 223.0], [85.8, 223.0], [85.9, 223.0], [86.0, 224.0], [86.1, 225.0], [86.2, 225.0], [86.3, 225.0], [86.4, 225.0], [86.5, 225.0], [86.6, 226.0], [86.7, 227.0], [86.8, 227.0], [86.9, 227.0], [87.0, 228.0], [87.1, 228.0], [87.2, 228.0], [87.3, 228.0], [87.4, 229.0], [87.5, 229.0], [87.6, 229.0], [87.7, 229.0], [87.8, 229.0], [87.9, 229.0], [88.0, 229.0], [88.1, 229.0], [88.2, 230.0], [88.3, 230.0], [88.4, 230.0], [88.5, 230.0], [88.6, 231.0], [88.7, 231.0], [88.8, 231.0], [88.9, 231.0], [89.0, 231.0], [89.1, 232.0], [89.2, 232.0], [89.3, 232.0], [89.4, 232.0], [89.5, 232.0], [89.6, 233.0], [89.7, 233.0], [89.8, 234.0], [89.9, 234.0], [90.0, 234.0], [90.1, 234.0], [90.2, 234.0], [90.3, 235.0], [90.4, 235.0], [90.5, 235.0], [90.6, 236.0], [90.7, 236.0], [90.8, 236.0], [90.9, 236.0], [91.0, 236.0], [91.1, 236.0], [91.2, 236.0], [91.3, 236.0], [91.4, 236.0], [91.5, 236.0], [91.6, 237.0], [91.7, 237.0], [91.8, 237.0], [91.9, 237.0], [92.0, 237.0], [92.1, 237.0], [92.2, 237.0], [92.3, 238.0], [92.4, 239.0], [92.5, 239.0], [92.6, 239.0], [92.7, 239.0], [92.8, 239.0], [92.9, 239.0], [93.0, 239.0], [93.1, 239.0], [93.2, 240.0], [93.3, 241.0], [93.4, 241.0], [93.5, 241.0], [93.6, 241.0], [93.7, 241.0], [93.8, 241.0], [93.9, 243.0], [94.0, 243.0], [94.1, 244.0], [94.2, 244.0], [94.3, 244.0], [94.4, 244.0], [94.5, 245.0], [94.6, 245.0], [94.7, 246.0], [94.8, 247.0], [94.9, 247.0], [95.0, 248.0], [95.1, 248.0], [95.2, 248.0], [95.3, 249.0], [95.4, 249.0], [95.5, 250.0], [95.6, 250.0], [95.7, 251.0], [95.8, 251.0], [95.9, 251.0], [96.0, 252.0], [96.1, 252.0], [96.2, 252.0], [96.3, 253.0], [96.4, 253.0], [96.5, 253.0], [96.6, 253.0], [96.7, 254.0], [96.8, 254.0], [96.9, 256.0], [97.0, 256.0], [97.1, 256.0], [97.2, 256.0], [97.3, 257.0], [97.4, 257.0], [97.5, 258.0], [97.6, 258.0], [97.7, 259.0], [97.8, 259.0], [97.9, 260.0], [98.0, 262.0], [98.1, 262.0], [98.2, 262.0], [98.3, 262.0], [98.4, 262.0], [98.5, 263.0], [98.6, 263.0], [98.7, 265.0], [98.8, 265.0], [98.9, 265.0], [99.0, 266.0], [99.1, 271.0], [99.2, 272.0], [99.3, 273.0], [99.4, 273.0], [99.5, 274.0], [99.6, 275.0], [99.7, 280.0], [99.8, 302.0], [99.9, 311.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 12.0], [0.1, 13.0], [0.2, 13.0], [0.3, 13.0], [0.4, 14.0], [0.5, 15.0], [0.6, 15.0], [0.7, 15.0], [0.8, 16.0], [0.9, 16.0], [1.0, 17.0], [1.1, 17.0], [1.2, 17.0], [1.3, 17.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 21.0], [3.0, 22.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 22.0], [3.8, 22.0], [3.9, 23.0], [4.0, 23.0], [4.1, 24.0], [4.2, 24.0], [4.3, 24.0], [4.4, 24.0], [4.5, 24.0], [4.6, 24.0], [4.7, 25.0], [4.8, 25.0], [4.9, 25.0], [5.0, 25.0], [5.1, 25.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 26.0], [5.7, 26.0], [5.8, 26.0], [5.9, 26.0], [6.0, 26.0], [6.1, 26.0], [6.2, 26.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 27.0], [6.9, 27.0], [7.0, 27.0], [7.1, 27.0], [7.2, 28.0], [7.3, 28.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 28.0], [7.9, 28.0], [8.0, 28.0], [8.1, 28.0], [8.2, 29.0], [8.3, 29.0], [8.4, 29.0], [8.5, 29.0], [8.6, 29.0], [8.7, 29.0], [8.8, 29.0], [8.9, 29.0], [9.0, 29.0], [9.1, 29.0], [9.2, 29.0], [9.3, 29.0], [9.4, 30.0], [9.5, 30.0], [9.6, 30.0], [9.7, 30.0], [9.8, 30.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 30.0], [10.5, 30.0], [10.6, 31.0], [10.7, 31.0], [10.8, 31.0], [10.9, 31.0], [11.0, 31.0], [11.1, 31.0], [11.2, 31.0], [11.3, 31.0], [11.4, 31.0], [11.5, 31.0], [11.6, 31.0], [11.7, 32.0], [11.8, 32.0], [11.9, 32.0], [12.0, 32.0], [12.1, 32.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 33.0], [12.6, 33.0], [12.7, 33.0], [12.8, 33.0], [12.9, 33.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 33.0], [13.4, 33.0], [13.5, 33.0], [13.6, 33.0], [13.7, 33.0], [13.8, 33.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 34.0], [14.3, 34.0], [14.4, 34.0], [14.5, 34.0], [14.6, 34.0], [14.7, 34.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 34.0], [15.2, 34.0], [15.3, 34.0], [15.4, 35.0], [15.5, 35.0], [15.6, 35.0], [15.7, 35.0], [15.8, 35.0], [15.9, 35.0], [16.0, 35.0], [16.1, 35.0], [16.2, 35.0], [16.3, 35.0], [16.4, 35.0], [16.5, 35.0], [16.6, 35.0], [16.7, 35.0], [16.8, 35.0], [16.9, 35.0], [17.0, 35.0], [17.1, 35.0], [17.2, 35.0], [17.3, 35.0], [17.4, 36.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 36.0], [18.0, 36.0], [18.1, 36.0], [18.2, 36.0], [18.3, 36.0], [18.4, 36.0], [18.5, 37.0], [18.6, 37.0], [18.7, 37.0], [18.8, 37.0], [18.9, 37.0], [19.0, 37.0], [19.1, 37.0], [19.2, 37.0], [19.3, 37.0], [19.4, 37.0], [19.5, 37.0], [19.6, 37.0], [19.7, 37.0], [19.8, 37.0], [19.9, 37.0], [20.0, 37.0], [20.1, 37.0], [20.2, 37.0], [20.3, 37.0], [20.4, 38.0], [20.5, 38.0], [20.6, 38.0], [20.7, 38.0], [20.8, 38.0], [20.9, 38.0], [21.0, 38.0], [21.1, 38.0], [21.2, 38.0], [21.3, 38.0], [21.4, 39.0], [21.5, 39.0], [21.6, 39.0], [21.7, 39.0], [21.8, 39.0], [21.9, 39.0], [22.0, 39.0], [22.1, 39.0], [22.2, 39.0], [22.3, 39.0], [22.4, 39.0], [22.5, 39.0], [22.6, 39.0], [22.7, 40.0], [22.8, 40.0], [22.9, 40.0], [23.0, 40.0], [23.1, 40.0], [23.2, 40.0], [23.3, 40.0], [23.4, 40.0], [23.5, 40.0], [23.6, 40.0], [23.7, 40.0], [23.8, 40.0], [23.9, 40.0], [24.0, 41.0], [24.1, 41.0], [24.2, 41.0], [24.3, 41.0], [24.4, 41.0], [24.5, 41.0], [24.6, 41.0], [24.7, 41.0], [24.8, 41.0], [24.9, 41.0], [25.0, 41.0], [25.1, 41.0], [25.2, 41.0], [25.3, 42.0], [25.4, 42.0], [25.5, 42.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 42.0], [26.0, 42.0], [26.1, 42.0], [26.2, 42.0], [26.3, 42.0], [26.4, 42.0], [26.5, 42.0], [26.6, 42.0], [26.7, 42.0], [26.8, 42.0], [26.9, 42.0], [27.0, 42.0], [27.1, 42.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 43.0], [28.5, 43.0], [28.6, 43.0], [28.7, 43.0], [28.8, 43.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 45.0], [30.8, 45.0], [30.9, 45.0], [31.0, 45.0], [31.1, 45.0], [31.2, 45.0], [31.3, 45.0], [31.4, 45.0], [31.5, 45.0], [31.6, 45.0], [31.7, 45.0], [31.8, 45.0], [31.9, 45.0], [32.0, 45.0], [32.1, 45.0], [32.2, 45.0], [32.3, 45.0], [32.4, 46.0], [32.5, 46.0], [32.6, 46.0], [32.7, 46.0], [32.8, 46.0], [32.9, 46.0], [33.0, 46.0], [33.1, 46.0], [33.2, 46.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 48.0], [34.4, 48.0], [34.5, 48.0], [34.6, 48.0], [34.7, 48.0], [34.8, 48.0], [34.9, 48.0], [35.0, 48.0], [35.1, 49.0], [35.2, 49.0], [35.3, 49.0], [35.4, 49.0], [35.5, 49.0], [35.6, 49.0], [35.7, 49.0], [35.8, 49.0], [35.9, 49.0], [36.0, 49.0], [36.1, 49.0], [36.2, 49.0], [36.3, 49.0], [36.4, 49.0], [36.5, 49.0], [36.6, 49.0], [36.7, 50.0], [36.8, 50.0], [36.9, 50.0], [37.0, 50.0], [37.1, 50.0], [37.2, 50.0], [37.3, 50.0], [37.4, 50.0], [37.5, 50.0], [37.6, 50.0], [37.7, 50.0], [37.8, 50.0], [37.9, 50.0], [38.0, 50.0], [38.1, 50.0], [38.2, 50.0], [38.3, 50.0], [38.4, 50.0], [38.5, 51.0], [38.6, 51.0], [38.7, 51.0], [38.8, 51.0], [38.9, 51.0], [39.0, 51.0], [39.1, 51.0], [39.2, 51.0], [39.3, 51.0], [39.4, 51.0], [39.5, 52.0], [39.6, 52.0], [39.7, 52.0], [39.8, 52.0], [39.9, 52.0], [40.0, 52.0], [40.1, 52.0], [40.2, 52.0], [40.3, 52.0], [40.4, 52.0], [40.5, 52.0], [40.6, 53.0], [40.7, 53.0], [40.8, 53.0], [40.9, 53.0], [41.0, 53.0], [41.1, 53.0], [41.2, 53.0], [41.3, 53.0], [41.4, 53.0], [41.5, 53.0], [41.6, 53.0], [41.7, 53.0], [41.8, 53.0], [41.9, 53.0], [42.0, 53.0], [42.1, 53.0], [42.2, 53.0], [42.3, 53.0], [42.4, 53.0], [42.5, 54.0], [42.6, 54.0], [42.7, 54.0], [42.8, 54.0], [42.9, 54.0], [43.0, 54.0], [43.1, 54.0], [43.2, 54.0], [43.3, 54.0], [43.4, 54.0], [43.5, 54.0], [43.6, 54.0], [43.7, 54.0], [43.8, 54.0], [43.9, 54.0], [44.0, 54.0], [44.1, 55.0], [44.2, 55.0], [44.3, 55.0], [44.4, 55.0], [44.5, 55.0], [44.6, 55.0], [44.7, 55.0], [44.8, 55.0], [44.9, 55.0], [45.0, 55.0], [45.1, 55.0], [45.2, 55.0], [45.3, 55.0], [45.4, 55.0], [45.5, 55.0], [45.6, 55.0], [45.7, 56.0], [45.8, 56.0], [45.9, 56.0], [46.0, 56.0], [46.1, 56.0], [46.2, 56.0], [46.3, 56.0], [46.4, 56.0], [46.5, 56.0], [46.6, 56.0], [46.7, 56.0], [46.8, 56.0], [46.9, 56.0], [47.0, 56.0], [47.1, 56.0], [47.2, 56.0], [47.3, 56.0], [47.4, 56.0], [47.5, 56.0], [47.6, 57.0], [47.7, 57.0], [47.8, 57.0], [47.9, 57.0], [48.0, 57.0], [48.1, 57.0], [48.2, 57.0], [48.3, 57.0], [48.4, 57.0], [48.5, 57.0], [48.6, 57.0], [48.7, 57.0], [48.8, 57.0], [48.9, 58.0], [49.0, 58.0], [49.1, 58.0], [49.2, 58.0], [49.3, 58.0], [49.4, 58.0], [49.5, 58.0], [49.6, 59.0], [49.7, 59.0], [49.8, 59.0], [49.9, 59.0], [50.0, 59.0], [50.1, 59.0], [50.2, 59.0], [50.3, 59.0], [50.4, 59.0], [50.5, 59.0], [50.6, 59.0], [50.7, 59.0], [50.8, 59.0], [50.9, 59.0], [51.0, 59.0], [51.1, 59.0], [51.2, 59.0], [51.3, 59.0], [51.4, 59.0], [51.5, 59.0], [51.6, 59.0], [51.7, 59.0], [51.8, 59.0], [51.9, 60.0], [52.0, 60.0], [52.1, 60.0], [52.2, 60.0], [52.3, 60.0], [52.4, 60.0], [52.5, 60.0], [52.6, 60.0], [52.7, 60.0], [52.8, 60.0], [52.9, 60.0], [53.0, 60.0], [53.1, 60.0], [53.2, 61.0], [53.3, 61.0], [53.4, 61.0], [53.5, 61.0], [53.6, 61.0], [53.7, 61.0], [53.8, 61.0], [53.9, 61.0], [54.0, 61.0], [54.1, 61.0], [54.2, 61.0], [54.3, 61.0], [54.4, 61.0], [54.5, 61.0], [54.6, 61.0], [54.7, 61.0], [54.8, 61.0], [54.9, 61.0], [55.0, 61.0], [55.1, 61.0], [55.2, 61.0], [55.3, 61.0], [55.4, 61.0], [55.5, 61.0], [55.6, 61.0], [55.7, 61.0], [55.8, 61.0], [55.9, 62.0], [56.0, 62.0], [56.1, 62.0], [56.2, 62.0], [56.3, 62.0], [56.4, 62.0], [56.5, 62.0], [56.6, 62.0], [56.7, 62.0], [56.8, 62.0], [56.9, 62.0], [57.0, 62.0], [57.1, 62.0], [57.2, 63.0], [57.3, 63.0], [57.4, 63.0], [57.5, 63.0], [57.6, 63.0], [57.7, 63.0], [57.8, 63.0], [57.9, 64.0], [58.0, 64.0], [58.1, 64.0], [58.2, 64.0], [58.3, 64.0], [58.4, 64.0], [58.5, 64.0], [58.6, 65.0], [58.7, 65.0], [58.8, 65.0], [58.9, 65.0], [59.0, 65.0], [59.1, 65.0], [59.2, 65.0], [59.3, 65.0], [59.4, 66.0], [59.5, 66.0], [59.6, 66.0], [59.7, 66.0], [59.8, 66.0], [59.9, 66.0], [60.0, 66.0], [60.1, 66.0], [60.2, 66.0], [60.3, 66.0], [60.4, 66.0], [60.5, 67.0], [60.6, 67.0], [60.7, 67.0], [60.8, 67.0], [60.9, 67.0], [61.0, 67.0], [61.1, 67.0], [61.2, 67.0], [61.3, 67.0], [61.4, 67.0], [61.5, 67.0], [61.6, 67.0], [61.7, 68.0], [61.8, 68.0], [61.9, 68.0], [62.0, 68.0], [62.1, 68.0], [62.2, 68.0], [62.3, 68.0], [62.4, 68.0], [62.5, 68.0], [62.6, 69.0], [62.7, 69.0], [62.8, 69.0], [62.9, 69.0], [63.0, 69.0], [63.1, 69.0], [63.2, 69.0], [63.3, 69.0], [63.4, 69.0], [63.5, 69.0], [63.6, 70.0], [63.7, 70.0], [63.8, 70.0], [63.9, 70.0], [64.0, 70.0], [64.1, 70.0], [64.2, 71.0], [64.3, 71.0], [64.4, 71.0], [64.5, 71.0], [64.6, 71.0], [64.7, 71.0], [64.8, 72.0], [64.9, 72.0], [65.0, 72.0], [65.1, 72.0], [65.2, 72.0], [65.3, 72.0], [65.4, 73.0], [65.5, 73.0], [65.6, 73.0], [65.7, 73.0], [65.8, 73.0], [65.9, 73.0], [66.0, 73.0], [66.1, 74.0], [66.2, 74.0], [66.3, 74.0], [66.4, 74.0], [66.5, 74.0], [66.6, 74.0], [66.7, 74.0], [66.8, 75.0], [66.9, 75.0], [67.0, 75.0], [67.1, 75.0], [67.2, 76.0], [67.3, 76.0], [67.4, 76.0], [67.5, 76.0], [67.6, 76.0], [67.7, 76.0], [67.8, 76.0], [67.9, 77.0], [68.0, 77.0], [68.1, 77.0], [68.2, 77.0], [68.3, 77.0], [68.4, 78.0], [68.5, 78.0], [68.6, 78.0], [68.7, 78.0], [68.8, 78.0], [68.9, 79.0], [69.0, 79.0], [69.1, 79.0], [69.2, 79.0], [69.3, 79.0], [69.4, 79.0], [69.5, 79.0], [69.6, 79.0], [69.7, 79.0], [69.8, 80.0], [69.9, 80.0], [70.0, 80.0], [70.1, 80.0], [70.2, 80.0], [70.3, 80.0], [70.4, 80.0], [70.5, 80.0], [70.6, 80.0], [70.7, 80.0], [70.8, 80.0], [70.9, 81.0], [71.0, 81.0], [71.1, 81.0], [71.2, 81.0], [71.3, 81.0], [71.4, 81.0], [71.5, 81.0], [71.6, 81.0], [71.7, 82.0], [71.8, 82.0], [71.9, 82.0], [72.0, 82.0], [72.1, 82.0], [72.2, 82.0], [72.3, 82.0], [72.4, 83.0], [72.5, 83.0], [72.6, 83.0], [72.7, 83.0], [72.8, 83.0], [72.9, 84.0], [73.0, 84.0], [73.1, 84.0], [73.2, 84.0], [73.3, 84.0], [73.4, 84.0], [73.5, 84.0], [73.6, 84.0], [73.7, 84.0], [73.8, 84.0], [73.9, 84.0], [74.0, 84.0], [74.1, 85.0], [74.2, 85.0], [74.3, 85.0], [74.4, 85.0], [74.5, 85.0], [74.6, 85.0], [74.7, 85.0], [74.8, 85.0], [74.9, 85.0], [75.0, 85.0], [75.1, 85.0], [75.2, 85.0], [75.3, 85.0], [75.4, 85.0], [75.5, 85.0], [75.6, 85.0], [75.7, 86.0], [75.8, 86.0], [75.9, 86.0], [76.0, 86.0], [76.1, 86.0], [76.2, 86.0], [76.3, 86.0], [76.4, 86.0], [76.5, 86.0], [76.6, 87.0], [76.7, 87.0], [76.8, 87.0], [76.9, 87.0], [77.0, 87.0], [77.1, 87.0], [77.2, 87.0], [77.3, 87.0], [77.4, 87.0], [77.5, 87.0], [77.6, 87.0], [77.7, 87.0], [77.8, 88.0], [77.9, 88.0], [78.0, 88.0], [78.1, 88.0], [78.2, 88.0], [78.3, 88.0], [78.4, 88.0], [78.5, 88.0], [78.6, 88.0], [78.7, 89.0], [78.8, 89.0], [78.9, 89.0], [79.0, 89.0], [79.1, 89.0], [79.2, 89.0], [79.3, 89.0], [79.4, 89.0], [79.5, 89.0], [79.6, 89.0], [79.7, 90.0], [79.8, 90.0], [79.9, 90.0], [80.0, 90.0], [80.1, 90.0], [80.2, 90.0], [80.3, 90.0], [80.4, 91.0], [80.5, 91.0], [80.6, 92.0], [80.7, 92.0], [80.8, 92.0], [80.9, 92.0], [81.0, 92.0], [81.1, 92.0], [81.2, 92.0], [81.3, 92.0], [81.4, 92.0], [81.5, 92.0], [81.6, 93.0], [81.7, 93.0], [81.8, 93.0], [81.9, 93.0], [82.0, 93.0], [82.1, 93.0], [82.2, 94.0], [82.3, 94.0], [82.4, 94.0], [82.5, 94.0], [82.6, 94.0], [82.7, 94.0], [82.8, 94.0], [82.9, 94.0], [83.0, 94.0], [83.1, 94.0], [83.2, 94.0], [83.3, 94.0], [83.4, 95.0], [83.5, 95.0], [83.6, 95.0], [83.7, 95.0], [83.8, 96.0], [83.9, 96.0], [84.0, 96.0], [84.1, 96.0], [84.2, 96.0], [84.3, 96.0], [84.4, 96.0], [84.5, 97.0], [84.6, 97.0], [84.7, 97.0], [84.8, 97.0], [84.9, 97.0], [85.0, 97.0], [85.1, 97.0], [85.2, 97.0], [85.3, 98.0], [85.4, 98.0], [85.5, 98.0], [85.6, 98.0], [85.7, 98.0], [85.8, 98.0], [85.9, 98.0], [86.0, 98.0], [86.1, 98.0], [86.2, 99.0], [86.3, 99.0], [86.4, 99.0], [86.5, 99.0], [86.6, 100.0], [86.7, 100.0], [86.8, 100.0], [86.9, 100.0], [87.0, 100.0], [87.1, 100.0], [87.2, 100.0], [87.3, 100.0], [87.4, 101.0], [87.5, 101.0], [87.6, 101.0], [87.7, 101.0], [87.8, 101.0], [87.9, 101.0], [88.0, 101.0], [88.1, 101.0], [88.2, 102.0], [88.3, 102.0], [88.4, 102.0], [88.5, 102.0], [88.6, 102.0], [88.7, 102.0], [88.8, 102.0], [88.9, 103.0], [89.0, 103.0], [89.1, 103.0], [89.2, 103.0], [89.3, 104.0], [89.4, 104.0], [89.5, 104.0], [89.6, 104.0], [89.7, 104.0], [89.8, 104.0], [89.9, 105.0], [90.0, 105.0], [90.1, 105.0], [90.2, 105.0], [90.3, 106.0], [90.4, 107.0], [90.5, 107.0], [90.6, 107.0], [90.7, 107.0], [90.8, 108.0], [90.9, 108.0], [91.0, 108.0], [91.1, 109.0], [91.2, 109.0], [91.3, 109.0], [91.4, 110.0], [91.5, 110.0], [91.6, 110.0], [91.7, 110.0], [91.8, 110.0], [91.9, 110.0], [92.0, 110.0], [92.1, 111.0], [92.2, 111.0], [92.3, 111.0], [92.4, 111.0], [92.5, 111.0], [92.6, 111.0], [92.7, 111.0], [92.8, 112.0], [92.9, 112.0], [93.0, 112.0], [93.1, 112.0], [93.2, 112.0], [93.3, 113.0], [93.4, 113.0], [93.5, 113.0], [93.6, 113.0], [93.7, 114.0], [93.8, 114.0], [93.9, 115.0], [94.0, 115.0], [94.1, 115.0], [94.2, 115.0], [94.3, 116.0], [94.4, 116.0], [94.5, 116.0], [94.6, 116.0], [94.7, 117.0], [94.8, 118.0], [94.9, 118.0], [95.0, 118.0], [95.1, 118.0], [95.2, 119.0], [95.3, 119.0], [95.4, 119.0], [95.5, 119.0], [95.6, 119.0], [95.7, 120.0], [95.8, 120.0], [95.9, 120.0], [96.0, 120.0], [96.1, 120.0], [96.2, 120.0], [96.3, 121.0], [96.4, 121.0], [96.5, 121.0], [96.6, 121.0], [96.7, 121.0], [96.8, 122.0], [96.9, 122.0], [97.0, 122.0], [97.1, 123.0], [97.2, 123.0], [97.3, 123.0], [97.4, 123.0], [97.5, 124.0], [97.6, 124.0], [97.7, 124.0], [97.8, 125.0], [97.9, 125.0], [98.0, 125.0], [98.1, 125.0], [98.2, 126.0], [98.3, 127.0], [98.4, 127.0], [98.5, 128.0], [98.6, 128.0], [98.7, 128.0], [98.8, 130.0], [98.9, 131.0], [99.0, 132.0], [99.1, 132.0], [99.2, 132.0], [99.3, 133.0], [99.4, 134.0], [99.5, 134.0], [99.6, 135.0], [99.7, 138.0], [99.8, 141.0], [99.9, 141.0], [100.0, 142.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 91.0], [0.1, 100.0], [0.2, 104.0], [0.3, 104.0], [0.4, 111.0], [0.5, 115.0], [0.6, 116.0], [0.7, 117.0], [0.8, 117.0], [0.9, 117.0], [1.0, 118.0], [1.1, 118.0], [1.2, 120.0], [1.3, 120.0], [1.4, 121.0], [1.5, 123.0], [1.6, 123.0], [1.7, 125.0], [1.8, 126.0], [1.9, 126.0], [2.0, 127.0], [2.1, 127.0], [2.2, 127.0], [2.3, 127.0], [2.4, 128.0], [2.5, 129.0], [2.6, 129.0], [2.7, 129.0], [2.8, 130.0], [2.9, 130.0], [3.0, 131.0], [3.1, 132.0], [3.2, 132.0], [3.3, 132.0], [3.4, 133.0], [3.5, 133.0], [3.6, 133.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 134.0], [4.1, 134.0], [4.2, 135.0], [4.3, 135.0], [4.4, 135.0], [4.5, 135.0], [4.6, 135.0], [4.7, 136.0], [4.8, 136.0], [4.9, 137.0], [5.0, 137.0], [5.1, 137.0], [5.2, 137.0], [5.3, 137.0], [5.4, 137.0], [5.5, 138.0], [5.6, 138.0], [5.7, 138.0], [5.8, 139.0], [5.9, 139.0], [6.0, 139.0], [6.1, 139.0], [6.2, 139.0], [6.3, 140.0], [6.4, 140.0], [6.5, 140.0], [6.6, 141.0], [6.7, 141.0], [6.8, 141.0], [6.9, 142.0], [7.0, 142.0], [7.1, 142.0], [7.2, 143.0], [7.3, 143.0], [7.4, 143.0], [7.5, 143.0], [7.6, 143.0], [7.7, 144.0], [7.8, 144.0], [7.9, 145.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 147.0], [8.6, 147.0], [8.7, 147.0], [8.8, 147.0], [8.9, 147.0], [9.0, 148.0], [9.1, 149.0], [9.2, 150.0], [9.3, 150.0], [9.4, 150.0], [9.5, 150.0], [9.6, 151.0], [9.7, 151.0], [9.8, 151.0], [9.9, 151.0], [10.0, 151.0], [10.1, 151.0], [10.2, 152.0], [10.3, 153.0], [10.4, 153.0], [10.5, 153.0], [10.6, 153.0], [10.7, 154.0], [10.8, 155.0], [10.9, 155.0], [11.0, 155.0], [11.1, 155.0], [11.2, 155.0], [11.3, 155.0], [11.4, 155.0], [11.5, 156.0], [11.6, 156.0], [11.7, 156.0], [11.8, 157.0], [11.9, 157.0], [12.0, 157.0], [12.1, 158.0], [12.2, 159.0], [12.3, 159.0], [12.4, 159.0], [12.5, 160.0], [12.6, 160.0], [12.7, 160.0], [12.8, 160.0], [12.9, 160.0], [13.0, 161.0], [13.1, 161.0], [13.2, 161.0], [13.3, 161.0], [13.4, 161.0], [13.5, 161.0], [13.6, 162.0], [13.7, 162.0], [13.8, 162.0], [13.9, 162.0], [14.0, 162.0], [14.1, 162.0], [14.2, 163.0], [14.3, 163.0], [14.4, 163.0], [14.5, 164.0], [14.6, 164.0], [14.7, 164.0], [14.8, 165.0], [14.9, 165.0], [15.0, 165.0], [15.1, 165.0], [15.2, 165.0], [15.3, 166.0], [15.4, 166.0], [15.5, 166.0], [15.6, 166.0], [15.7, 166.0], [15.8, 167.0], [15.9, 167.0], [16.0, 167.0], [16.1, 168.0], [16.2, 168.0], [16.3, 168.0], [16.4, 168.0], [16.5, 169.0], [16.6, 169.0], [16.7, 169.0], [16.8, 169.0], [16.9, 169.0], [17.0, 169.0], [17.1, 170.0], [17.2, 170.0], [17.3, 171.0], [17.4, 171.0], [17.5, 171.0], [17.6, 172.0], [17.7, 172.0], [17.8, 172.0], [17.9, 172.0], [18.0, 173.0], [18.1, 173.0], [18.2, 173.0], [18.3, 173.0], [18.4, 173.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 174.0], [18.9, 174.0], [19.0, 174.0], [19.1, 175.0], [19.2, 175.0], [19.3, 175.0], [19.4, 175.0], [19.5, 176.0], [19.6, 176.0], [19.7, 176.0], [19.8, 176.0], [19.9, 176.0], [20.0, 176.0], [20.1, 177.0], [20.2, 177.0], [20.3, 177.0], [20.4, 177.0], [20.5, 178.0], [20.6, 178.0], [20.7, 178.0], [20.8, 179.0], [20.9, 179.0], [21.0, 179.0], [21.1, 179.0], [21.2, 179.0], [21.3, 180.0], [21.4, 180.0], [21.5, 180.0], [21.6, 180.0], [21.7, 180.0], [21.8, 180.0], [21.9, 180.0], [22.0, 180.0], [22.1, 181.0], [22.2, 181.0], [22.3, 181.0], [22.4, 181.0], [22.5, 181.0], [22.6, 181.0], [22.7, 181.0], [22.8, 182.0], [22.9, 182.0], [23.0, 182.0], [23.1, 183.0], [23.2, 183.0], [23.3, 184.0], [23.4, 184.0], [23.5, 185.0], [23.6, 185.0], [23.7, 185.0], [23.8, 185.0], [23.9, 186.0], [24.0, 186.0], [24.1, 186.0], [24.2, 186.0], [24.3, 186.0], [24.4, 186.0], [24.5, 186.0], [24.6, 187.0], [24.7, 187.0], [24.8, 187.0], [24.9, 187.0], [25.0, 188.0], [25.1, 188.0], [25.2, 188.0], [25.3, 189.0], [25.4, 189.0], [25.5, 189.0], [25.6, 189.0], [25.7, 189.0], [25.8, 190.0], [25.9, 190.0], [26.0, 190.0], [26.1, 190.0], [26.2, 191.0], [26.3, 191.0], [26.4, 191.0], [26.5, 192.0], [26.6, 192.0], [26.7, 193.0], [26.8, 194.0], [26.9, 194.0], [27.0, 194.0], [27.1, 194.0], [27.2, 195.0], [27.3, 195.0], [27.4, 195.0], [27.5, 195.0], [27.6, 195.0], [27.7, 196.0], [27.8, 196.0], [27.9, 196.0], [28.0, 196.0], [28.1, 197.0], [28.2, 197.0], [28.3, 197.0], [28.4, 197.0], [28.5, 197.0], [28.6, 197.0], [28.7, 197.0], [28.8, 197.0], [28.9, 197.0], [29.0, 198.0], [29.1, 198.0], [29.2, 198.0], [29.3, 198.0], [29.4, 199.0], [29.5, 199.0], [29.6, 199.0], [29.7, 199.0], [29.8, 199.0], [29.9, 199.0], [30.0, 200.0], [30.1, 200.0], [30.2, 200.0], [30.3, 200.0], [30.4, 200.0], [30.5, 200.0], [30.6, 200.0], [30.7, 201.0], [30.8, 201.0], [30.9, 201.0], [31.0, 201.0], [31.1, 201.0], [31.2, 202.0], [31.3, 202.0], [31.4, 202.0], [31.5, 202.0], [31.6, 202.0], [31.7, 202.0], [31.8, 203.0], [31.9, 203.0], [32.0, 203.0], [32.1, 203.0], [32.2, 203.0], [32.3, 203.0], [32.4, 203.0], [32.5, 204.0], [32.6, 204.0], [32.7, 204.0], [32.8, 204.0], [32.9, 204.0], [33.0, 204.0], [33.1, 204.0], [33.2, 204.0], [33.3, 205.0], [33.4, 205.0], [33.5, 205.0], [33.6, 205.0], [33.7, 205.0], [33.8, 206.0], [33.9, 206.0], [34.0, 206.0], [34.1, 206.0], [34.2, 206.0], [34.3, 206.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 208.0], [35.4, 208.0], [35.5, 208.0], [35.6, 208.0], [35.7, 208.0], [35.8, 208.0], [35.9, 208.0], [36.0, 208.0], [36.1, 208.0], [36.2, 208.0], [36.3, 209.0], [36.4, 209.0], [36.5, 209.0], [36.6, 209.0], [36.7, 209.0], [36.8, 209.0], [36.9, 209.0], [37.0, 209.0], [37.1, 209.0], [37.2, 209.0], [37.3, 210.0], [37.4, 210.0], [37.5, 210.0], [37.6, 210.0], [37.7, 210.0], [37.8, 210.0], [37.9, 211.0], [38.0, 211.0], [38.1, 211.0], [38.2, 211.0], [38.3, 212.0], [38.4, 212.0], [38.5, 212.0], [38.6, 212.0], [38.7, 212.0], [38.8, 212.0], [38.9, 212.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 214.0], [39.4, 214.0], [39.5, 215.0], [39.6, 215.0], [39.7, 215.0], [39.8, 215.0], [39.9, 215.0], [40.0, 216.0], [40.1, 216.0], [40.2, 216.0], [40.3, 216.0], [40.4, 217.0], [40.5, 217.0], [40.6, 217.0], [40.7, 217.0], [40.8, 218.0], [40.9, 218.0], [41.0, 219.0], [41.1, 219.0], [41.2, 219.0], [41.3, 219.0], [41.4, 219.0], [41.5, 219.0], [41.6, 219.0], [41.7, 219.0], [41.8, 220.0], [41.9, 220.0], [42.0, 220.0], [42.1, 220.0], [42.2, 220.0], [42.3, 220.0], [42.4, 220.0], [42.5, 220.0], [42.6, 220.0], [42.7, 220.0], [42.8, 221.0], [42.9, 221.0], [43.0, 221.0], [43.1, 221.0], [43.2, 221.0], [43.3, 221.0], [43.4, 221.0], [43.5, 221.0], [43.6, 222.0], [43.7, 222.0], [43.8, 222.0], [43.9, 223.0], [44.0, 223.0], [44.1, 223.0], [44.2, 223.0], [44.3, 223.0], [44.4, 224.0], [44.5, 224.0], [44.6, 224.0], [44.7, 224.0], [44.8, 224.0], [44.9, 224.0], [45.0, 224.0], [45.1, 225.0], [45.2, 225.0], [45.3, 225.0], [45.4, 225.0], [45.5, 226.0], [45.6, 226.0], [45.7, 226.0], [45.8, 227.0], [45.9, 227.0], [46.0, 227.0], [46.1, 227.0], [46.2, 227.0], [46.3, 227.0], [46.4, 227.0], [46.5, 227.0], [46.6, 228.0], [46.7, 228.0], [46.8, 228.0], [46.9, 228.0], [47.0, 228.0], [47.1, 229.0], [47.2, 229.0], [47.3, 229.0], [47.4, 229.0], [47.5, 230.0], [47.6, 230.0], [47.7, 230.0], [47.8, 230.0], [47.9, 230.0], [48.0, 230.0], [48.1, 230.0], [48.2, 231.0], [48.3, 231.0], [48.4, 231.0], [48.5, 231.0], [48.6, 231.0], [48.7, 231.0], [48.8, 231.0], [48.9, 231.0], [49.0, 232.0], [49.1, 232.0], [49.2, 232.0], [49.3, 232.0], [49.4, 232.0], [49.5, 233.0], [49.6, 233.0], [49.7, 233.0], [49.8, 233.0], [49.9, 233.0], [50.0, 233.0], [50.1, 234.0], [50.2, 234.0], [50.3, 234.0], [50.4, 234.0], [50.5, 234.0], [50.6, 234.0], [50.7, 234.0], [50.8, 235.0], [50.9, 235.0], [51.0, 235.0], [51.1, 235.0], [51.2, 235.0], [51.3, 235.0], [51.4, 236.0], [51.5, 236.0], [51.6, 236.0], [51.7, 237.0], [51.8, 237.0], [51.9, 237.0], [52.0, 237.0], [52.1, 237.0], [52.2, 238.0], [52.3, 238.0], [52.4, 238.0], [52.5, 238.0], [52.6, 238.0], [52.7, 238.0], [52.8, 238.0], [52.9, 238.0], [53.0, 238.0], [53.1, 239.0], [53.2, 239.0], [53.3, 239.0], [53.4, 239.0], [53.5, 239.0], [53.6, 239.0], [53.7, 240.0], [53.8, 240.0], [53.9, 240.0], [54.0, 241.0], [54.1, 241.0], [54.2, 242.0], [54.3, 242.0], [54.4, 242.0], [54.5, 243.0], [54.6, 243.0], [54.7, 244.0], [54.8, 244.0], [54.9, 244.0], [55.0, 245.0], [55.1, 245.0], [55.2, 245.0], [55.3, 245.0], [55.4, 246.0], [55.5, 246.0], [55.6, 246.0], [55.7, 246.0], [55.8, 247.0], [55.9, 247.0], [56.0, 248.0], [56.1, 248.0], [56.2, 248.0], [56.3, 249.0], [56.4, 249.0], [56.5, 249.0], [56.6, 249.0], [56.7, 250.0], [56.8, 250.0], [56.9, 251.0], [57.0, 251.0], [57.1, 251.0], [57.2, 251.0], [57.3, 251.0], [57.4, 251.0], [57.5, 252.0], [57.6, 252.0], [57.7, 252.0], [57.8, 253.0], [57.9, 253.0], [58.0, 253.0], [58.1, 253.0], [58.2, 254.0], [58.3, 254.0], [58.4, 254.0], [58.5, 255.0], [58.6, 255.0], [58.7, 255.0], [58.8, 256.0], [58.9, 256.0], [59.0, 256.0], [59.1, 256.0], [59.2, 256.0], [59.3, 256.0], [59.4, 257.0], [59.5, 257.0], [59.6, 257.0], [59.7, 257.0], [59.8, 257.0], [59.9, 258.0], [60.0, 258.0], [60.1, 258.0], [60.2, 258.0], [60.3, 258.0], [60.4, 259.0], [60.5, 259.0], [60.6, 261.0], [60.7, 261.0], [60.8, 261.0], [60.9, 261.0], [61.0, 261.0], [61.1, 261.0], [61.2, 262.0], [61.3, 262.0], [61.4, 263.0], [61.5, 263.0], [61.6, 263.0], [61.7, 263.0], [61.8, 263.0], [61.9, 264.0], [62.0, 264.0], [62.1, 264.0], [62.2, 265.0], [62.3, 265.0], [62.4, 265.0], [62.5, 265.0], [62.6, 265.0], [62.7, 266.0], [62.8, 266.0], [62.9, 266.0], [63.0, 267.0], [63.1, 267.0], [63.2, 267.0], [63.3, 267.0], [63.4, 268.0], [63.5, 268.0], [63.6, 268.0], [63.7, 268.0], [63.8, 268.0], [63.9, 268.0], [64.0, 269.0], [64.1, 269.0], [64.2, 269.0], [64.3, 270.0], [64.4, 270.0], [64.5, 271.0], [64.6, 271.0], [64.7, 271.0], [64.8, 272.0], [64.9, 272.0], [65.0, 272.0], [65.1, 272.0], [65.2, 273.0], [65.3, 274.0], [65.4, 274.0], [65.5, 274.0], [65.6, 274.0], [65.7, 275.0], [65.8, 277.0], [65.9, 277.0], [66.0, 277.0], [66.1, 278.0], [66.2, 278.0], [66.3, 279.0], [66.4, 280.0], [66.5, 280.0], [66.6, 281.0], [66.7, 281.0], [66.8, 282.0], [66.9, 282.0], [67.0, 283.0], [67.1, 283.0], [67.2, 283.0], [67.3, 284.0], [67.4, 284.0], [67.5, 285.0], [67.6, 287.0], [67.7, 287.0], [67.8, 288.0], [67.9, 288.0], [68.0, 288.0], [68.1, 290.0], [68.2, 290.0], [68.3, 290.0], [68.4, 290.0], [68.5, 290.0], [68.6, 291.0], [68.7, 291.0], [68.8, 292.0], [68.9, 292.0], [69.0, 292.0], [69.1, 293.0], [69.2, 294.0], [69.3, 294.0], [69.4, 294.0], [69.5, 294.0], [69.6, 295.0], [69.7, 296.0], [69.8, 296.0], [69.9, 296.0], [70.0, 297.0], [70.1, 297.0], [70.2, 297.0], [70.3, 297.0], [70.4, 298.0], [70.5, 298.0], [70.6, 299.0], [70.7, 300.0], [70.8, 300.0], [70.9, 300.0], [71.0, 301.0], [71.1, 301.0], [71.2, 301.0], [71.3, 302.0], [71.4, 303.0], [71.5, 305.0], [71.6, 306.0], [71.7, 306.0], [71.8, 307.0], [71.9, 307.0], [72.0, 307.0], [72.1, 308.0], [72.2, 309.0], [72.3, 309.0], [72.4, 309.0], [72.5, 310.0], [72.6, 311.0], [72.7, 311.0], [72.8, 311.0], [72.9, 312.0], [73.0, 312.0], [73.1, 312.0], [73.2, 313.0], [73.3, 315.0], [73.4, 315.0], [73.5, 316.0], [73.6, 316.0], [73.7, 317.0], [73.8, 317.0], [73.9, 317.0], [74.0, 317.0], [74.1, 319.0], [74.2, 319.0], [74.3, 320.0], [74.4, 321.0], [74.5, 321.0], [74.6, 322.0], [74.7, 322.0], [74.8, 322.0], [74.9, 322.0], [75.0, 325.0], [75.1, 325.0], [75.2, 325.0], [75.3, 327.0], [75.4, 327.0], [75.5, 327.0], [75.6, 327.0], [75.7, 328.0], [75.8, 329.0], [75.9, 329.0], [76.0, 329.0], [76.1, 331.0], [76.2, 331.0], [76.3, 331.0], [76.4, 333.0], [76.5, 334.0], [76.6, 334.0], [76.7, 335.0], [76.8, 335.0], [76.9, 336.0], [77.0, 337.0], [77.1, 337.0], [77.2, 337.0], [77.3, 338.0], [77.4, 339.0], [77.5, 339.0], [77.6, 339.0], [77.7, 340.0], [77.8, 341.0], [77.9, 342.0], [78.0, 344.0], [78.1, 346.0], [78.2, 346.0], [78.3, 346.0], [78.4, 347.0], [78.5, 347.0], [78.6, 348.0], [78.7, 350.0], [78.8, 350.0], [78.9, 350.0], [79.0, 351.0], [79.1, 352.0], [79.2, 353.0], [79.3, 355.0], [79.4, 356.0], [79.5, 356.0], [79.6, 357.0], [79.7, 357.0], [79.8, 357.0], [79.9, 357.0], [80.0, 358.0], [80.1, 359.0], [80.2, 359.0], [80.3, 361.0], [80.4, 361.0], [80.5, 364.0], [80.6, 364.0], [80.7, 364.0], [80.8, 364.0], [80.9, 365.0], [81.0, 366.0], [81.1, 367.0], [81.2, 369.0], [81.3, 370.0], [81.4, 370.0], [81.5, 372.0], [81.6, 373.0], [81.7, 373.0], [81.8, 373.0], [81.9, 373.0], [82.0, 374.0], [82.1, 374.0], [82.2, 374.0], [82.3, 374.0], [82.4, 375.0], [82.5, 375.0], [82.6, 376.0], [82.7, 376.0], [82.8, 376.0], [82.9, 377.0], [83.0, 378.0], [83.1, 379.0], [83.2, 380.0], [83.3, 380.0], [83.4, 380.0], [83.5, 380.0], [83.6, 380.0], [83.7, 381.0], [83.8, 381.0], [83.9, 381.0], [84.0, 382.0], [84.1, 383.0], [84.2, 384.0], [84.3, 385.0], [84.4, 385.0], [84.5, 387.0], [84.6, 387.0], [84.7, 387.0], [84.8, 388.0], [84.9, 388.0], [85.0, 389.0], [85.1, 390.0], [85.2, 391.0], [85.3, 391.0], [85.4, 391.0], [85.5, 392.0], [85.6, 393.0], [85.7, 394.0], [85.8, 394.0], [85.9, 394.0], [86.0, 395.0], [86.1, 396.0], [86.2, 397.0], [86.3, 402.0], [86.4, 403.0], [86.5, 404.0], [86.6, 408.0], [86.7, 408.0], [86.8, 408.0], [86.9, 409.0], [87.0, 409.0], [87.1, 409.0], [87.2, 410.0], [87.3, 410.0], [87.4, 410.0], [87.5, 411.0], [87.6, 412.0], [87.7, 412.0], [87.8, 414.0], [87.9, 415.0], [88.0, 416.0], [88.1, 416.0], [88.2, 420.0], [88.3, 428.0], [88.4, 429.0], [88.5, 430.0], [88.6, 433.0], [88.7, 433.0], [88.8, 439.0], [88.9, 444.0], [89.0, 448.0], [89.1, 449.0], [89.2, 451.0], [89.3, 452.0], [89.4, 452.0], [89.5, 453.0], [89.6, 454.0], [89.7, 459.0], [89.8, 461.0], [89.9, 463.0], [90.0, 463.0], [90.1, 464.0], [90.2, 464.0], [90.3, 466.0], [90.4, 468.0], [90.5, 473.0], [90.6, 474.0], [90.7, 475.0], [90.8, 475.0], [90.9, 477.0], [91.0, 477.0], [91.1, 478.0], [91.2, 478.0], [91.3, 478.0], [91.4, 480.0], [91.5, 480.0], [91.6, 481.0], [91.7, 483.0], [91.8, 483.0], [91.9, 483.0], [92.0, 486.0], [92.1, 486.0], [92.2, 487.0], [92.3, 487.0], [92.4, 487.0], [92.5, 488.0], [92.6, 490.0], [92.7, 491.0], [92.8, 493.0], [92.9, 493.0], [93.0, 493.0], [93.1, 496.0], [93.2, 498.0], [93.3, 500.0], [93.4, 501.0], [93.5, 501.0], [93.6, 502.0], [93.7, 502.0], [93.8, 504.0], [93.9, 505.0], [94.0, 505.0], [94.1, 506.0], [94.2, 507.0], [94.3, 507.0], [94.4, 508.0], [94.5, 510.0], [94.6, 511.0], [94.7, 515.0], [94.8, 515.0], [94.9, 518.0], [95.0, 523.0], [95.1, 523.0], [95.2, 525.0], [95.3, 526.0], [95.4, 529.0], [95.5, 530.0], [95.6, 531.0], [95.7, 533.0], [95.8, 534.0], [95.9, 534.0], [96.0, 536.0], [96.1, 537.0], [96.2, 538.0], [96.3, 541.0], [96.4, 545.0], [96.5, 545.0], [96.6, 546.0], [96.7, 547.0], [96.8, 547.0], [96.9, 548.0], [97.0, 548.0], [97.1, 551.0], [97.2, 552.0], [97.3, 557.0], [97.4, 558.0], [97.5, 558.0], [97.6, 560.0], [97.7, 560.0], [97.8, 562.0], [97.9, 568.0], [98.0, 568.0], [98.1, 571.0], [98.2, 572.0], [98.3, 572.0], [98.4, 584.0], [98.5, 586.0], [98.6, 588.0], [98.7, 592.0], [98.8, 600.0], [98.9, 601.0], [99.0, 602.0], [99.1, 605.0], [99.2, 621.0], [99.3, 631.0], [99.4, 632.0], [99.5, 641.0], [99.6, 643.0], [99.7, 646.0], [99.8, 652.0], [99.9, 1101.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 865.0, "series": [{"data": [[0.0, 3.0], [300.0, 2.0], [100.0, 625.0], [200.0, 370.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 865.0], [100.0, 135.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 1.0], [1100.0, 1.0], [300.0, 156.0], [600.0, 11.0], [200.0, 407.0], [100.0, 299.0], [400.0, 70.0], [500.0, 55.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2000.0, "series": [{"data": [[0.0, 1000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 79.15800000000003, "minX": 1.67222736E12, "maxY": 230.32000000000002, "series": [{"data": [[1.67222736E12, 79.15800000000003]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}, {"data": [[1.67222736E12, 180.1759999999999]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}, {"data": [[1.67222736E12, 230.32000000000002]], "isOverall": false, "label": "client-to-application (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67222736E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.0, "maxY": 1101.0, "series": [{"data": [[4.0, 218.0], [5.0, 196.0], [6.0, 220.25], [9.0, 230.66666666666666], [12.0, 267.3333333333333], [14.0, 225.0], [16.0, 263.5], [17.0, 253.0], [19.0, 219.0], [22.0, 206.66666666666666], [25.0, 204.0], [26.0, 207.0], [28.0, 211.33333333333334], [29.0, 205.0], [31.0, 200.5], [33.0, 234.0], [32.0, 186.0], [35.0, 194.0], [37.0, 184.0], [36.0, 227.0], [39.0, 194.0], [41.0, 216.0], [42.0, 223.0], [45.0, 192.5], [47.0, 191.0], [51.0, 176.0], [50.0, 187.0], [53.0, 243.0], [52.0, 193.0], [54.0, 262.0], [56.0, 209.5], [58.0, 178.5], [60.0, 234.0], [63.0, 186.5], [62.0, 179.0], [66.0, 221.0], [65.0, 266.0], [70.0, 127.5], [71.0, 207.33333333333334], [69.0, 240.0], [68.0, 178.0], [75.0, 180.0], [74.0, 194.0], [73.0, 221.0], [79.0, 194.0], [76.0, 204.0], [83.0, 209.0], [82.0, 167.0], [81.0, 191.0], [80.0, 218.0], [87.0, 57.0], [86.0, 193.0], [91.0, 171.0], [90.0, 160.5], [88.0, 197.66666666666666], [93.0, 125.33333333333333], [94.0, 215.0], [97.0, 229.0], [96.0, 181.0], [102.0, 189.0], [101.0, 208.0], [100.0, 203.5], [107.0, 196.0], [106.0, 199.0], [105.0, 208.0], [111.0, 183.0], [109.0, 184.0], [108.0, 168.0], [114.0, 176.0], [113.0, 181.0], [119.0, 190.0], [118.0, 171.0], [116.0, 223.0], [121.0, 214.0], [126.0, 220.5], [124.0, 184.0], [135.0, 156.0], [131.0, 168.16666666666666], [129.0, 154.875], [132.0, 155.5], [130.0, 167.0], [128.0, 195.33333333333334], [133.0, 188.0], [143.0, 182.4], [142.0, 179.92857142857142], [141.0, 198.2857142857143], [140.0, 194.8], [139.0, 187.66666666666666], [136.0, 164.0909090909091], [137.0, 175.0], [151.0, 153.5], [150.0, 153.375], [149.0, 155.2], [147.0, 206.25], [148.0, 189.33333333333334], [146.0, 166.66666666666669], [144.0, 162.0], [145.0, 223.5], [157.0, 178.4], [156.0, 179.2857142857143], [158.0, 176.66666666666666], [155.0, 168.16666666666666], [154.0, 155.28571428571428], [153.0, 164.4], [152.0, 163.125], [159.0, 147.66666666666666], [167.0, 171.85714285714286], [166.0, 163.0], [164.0, 166.33333333333334], [163.0, 171.9090909090909], [162.0, 162.0], [161.0, 171.71428571428572], [165.0, 168.0], [160.0, 156.33333333333334], [175.0, 182.25], [174.0, 182.71428571428572], [172.0, 188.0], [171.0, 192.16666666666669], [169.0, 186.7142857142857], [168.0, 191.0], [173.0, 197.0], [170.0, 169.0], [183.0, 220.0], [182.0, 177.75], [181.0, 180.33333333333334], [180.0, 221.0], [179.0, 183.0], [178.0, 197.91666666666666], [177.0, 209.25], [176.0, 201.33333333333334], [188.0, 197.66666666666666], [189.0, 213.0], [186.0, 185.6], [185.0, 187.16666666666666], [184.0, 200.66666666666666], [187.0, 182.57142857142856], [191.0, 168.0], [190.0, 179.0], [196.0, 180.625], [195.0, 169.8], [194.0, 175.66666666666666], [198.0, 203.42857142857142], [197.0, 209.4], [199.0, 204.0], [193.0, 197.0], [192.0, 186.42857142857142], [202.0, 182.1875], [201.0, 189.83333333333334], [200.0, 188.0], [207.0, 188.50000000000003], [206.0, 172.7], [205.0, 196.8421052631579], [204.0, 186.14285714285714], [203.0, 177.625], [215.0, 193.125], [214.0, 199.42857142857142], [213.0, 192.57894736842104], [212.0, 189.83333333333331], [211.0, 199.5625], [210.0, 187.4375], [209.0, 195.26666666666668], [208.0, 190.63636363636363], [223.0, 183.0], [222.0, 171.28571428571428], [221.0, 186.0], [220.0, 181.55555555555554], [219.0, 196.22222222222223], [218.0, 185.74999999999997], [217.0, 185.00000000000003], [216.0, 199.3], [231.0, 180.0], [229.0, 161.25], [227.0, 187.66666666666666], [226.0, 177.33333333333334], [225.0, 175.74999999999997], [224.0, 182.5], [230.0, 172.2], [228.0, 184.4], [233.0, 175.25], [232.0, 189.0], [238.0, 185.66666666666666], [236.0, 206.75], [235.0, 178.0], [234.0, 176.5], [239.0, 192.0], [237.0, 223.66666666666666], [244.0, 186.5], [243.0, 215.0], [242.0, 193.5], [240.0, 208.66666666666669], [245.0, 173.0], [241.0, 216.0], [247.0, 175.0], [246.0, 163.0], [255.0, 241.83333333333334], [254.0, 223.8], [253.0, 174.0], [251.0, 220.75], [250.0, 160.5], [249.0, 230.0], [252.0, 175.0], [257.0, 220.5], [263.0, 206.54545454545453], [256.0, 231.60000000000002], [261.0, 230.625], [260.0, 221.30000000000004], [258.0, 221.0], [259.0, 207.7], [262.0, 211.375], [266.0, 216.0], [267.0, 180.66666666666666], [265.0, 203.875], [264.0, 211.66666666666666], [270.0, 156.0], [269.0, 176.5], [272.0, 189.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[180.17499999999984, 189.61100000000013]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 113.5], [3.0, 116.0], [5.0, 100.5], [9.0, 94.25], [10.0, 97.0], [12.0, 93.5], [13.0, 110.0], [14.0, 101.0], [15.0, 108.0], [16.0, 101.0], [18.0, 74.0], [20.0, 89.0], [24.0, 91.75], [26.0, 73.5], [29.0, 91.33333333333333], [35.0, 75.6], [34.0, 73.0], [37.0, 49.0], [36.0, 78.0], [39.0, 68.8], [38.0, 55.5], [41.0, 42.0], [40.0, 82.66666666666667], [43.0, 54.0], [42.0, 60.333333333333336], [45.0, 50.5], [44.0, 60.83333333333333], [47.0, 47.53846153846154], [46.0, 45.78571428571429], [49.0, 46.5], [48.0, 38.705882352941174], [51.0, 51.29629629629629], [50.0, 45.16666666666667], [52.0, 50.2608695652174], [53.0, 60.0], [55.0, 33.07692307692308], [54.0, 44.45833333333333], [56.0, 51.37931034482758], [57.0, 44.63636363636363], [59.0, 50.133333333333326], [58.0, 43.62499999999999], [61.0, 47.583333333333336], [60.0, 40.434782608695656], [62.0, 43.19047619047618], [63.0, 45.800000000000004], [67.0, 40.5], [64.0, 41.00000000000001], [66.0, 38.166666666666664], [65.0, 55.57142857142858], [70.0, 47.64705882352941], [69.0, 37.800000000000004], [68.0, 40.55555555555556], [71.0, 63.22222222222222], [72.0, 40.900000000000006], [74.0, 45.85294117647059], [75.0, 43.333333333333336], [73.0, 45.4375], [79.0, 36.625], [78.0, 56.18181818181819], [76.0, 50.6], [77.0, 50.857142857142854], [83.0, 42.5], [82.0, 32.0], [81.0, 69.5], [80.0, 37.333333333333336], [84.0, 54.6], [87.0, 53.0], [86.0, 70.0], [85.0, 73.5], [91.0, 68.14285714285714], [90.0, 63.285714285714285], [89.0, 51.0], [88.0, 68.62500000000001], [94.0, 66.74999999999999], [92.0, 58.44444444444444], [95.0, 53.99999999999999], [93.0, 67.54545454545456], [96.0, 58.0], [99.0, 85.11111111111111], [98.0, 54.833333333333336], [97.0, 55.333333333333336], [100.0, 60.199999999999996], [102.0, 86.6], [101.0, 91.66666666666667], [103.0, 95.5], [107.0, 74.49999999999999], [106.0, 84.57142857142857], [104.0, 71.2], [105.0, 91.24999999999999], [108.0, 62.57142857142858], [111.0, 78.62499999999999], [110.0, 69.875], [109.0, 77.54545454545455], [114.0, 58.5], [112.0, 88.28571428571429], [115.0, 86.6], [113.0, 97.25], [118.0, 82.44444444444444], [117.0, 69.66666666666667], [116.0, 81.375], [119.0, 93.75], [122.0, 86.25], [121.0, 98.42857142857143], [120.0, 92.0], [123.0, 101.8], [124.0, 93.09090909090908], [126.0, 101.0], [127.0, 107.969696969697], [129.0, 106.92307692307693], [128.0, 109.88888888888889], [132.0, 112.44444444444444], [130.0, 96.89999999999999], [135.0, 126.66666666666667], [134.0, 122.66666666666667], [131.0, 128.0], [136.0, 120.0], [138.0, 138.0], [137.0, 122.33333333333333], [142.0, 129.5], [140.0, 130.2], [139.0, 130.5], [144.0, 127.66666666666667]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[79.15700000000001, 63.67299999999999]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[3.0, 201.0], [4.0, 322.0], [5.0, 268.0], [6.0, 217.0], [7.0, 294.0], [8.0, 238.0], [9.0, 300.0], [10.0, 262.0], [12.0, 254.5], [13.0, 237.0], [14.0, 225.0], [15.0, 272.0], [16.0, 340.0], [17.0, 233.0], [19.0, 281.0], [20.0, 231.0], [21.0, 227.0], [22.0, 269.0], [24.0, 259.5], [25.0, 226.0], [27.0, 316.5], [30.0, 275.0], [33.0, 279.3333333333333], [35.0, 230.5], [37.0, 263.0], [36.0, 208.0], [39.0, 205.0], [38.0, 1101.0], [41.0, 235.0], [40.0, 204.0], [43.0, 256.0], [42.0, 212.0], [45.0, 233.0], [44.0, 187.0], [47.0, 225.0], [46.0, 212.0], [49.0, 195.0], [48.0, 174.0], [51.0, 188.0], [50.0, 188.0], [52.0, 185.0], [55.0, 165.0], [54.0, 178.5], [57.0, 174.0], [56.0, 166.0], [59.0, 180.0], [58.0, 162.0], [61.0, 160.0], [60.0, 164.0], [63.0, 160.0], [62.0, 161.0], [67.0, 171.0], [66.0, 155.0], [65.0, 156.0], [64.0, 165.0], [71.0, 275.5], [69.0, 272.0], [68.0, 298.0], [75.0, 303.0], [74.0, 243.0], [73.0, 267.0], [72.0, 290.0], [79.0, 169.33333333333334], [78.0, 174.66666666666666], [76.0, 195.5], [77.0, 234.0], [83.0, 187.0], [82.0, 196.66666666666666], [81.0, 222.33333333333334], [80.0, 190.5], [86.0, 198.0], [85.0, 150.42857142857144], [84.0, 155.625], [87.0, 293.0], [90.0, 252.66666666666666], [89.0, 170.33333333333334], [88.0, 152.33333333333334], [91.0, 166.0], [95.0, 283.5], [94.0, 359.25], [92.0, 224.66666666666666], [93.0, 178.0], [99.0, 218.71428571428572], [98.0, 317.5], [97.0, 130.66666666666666], [96.0, 118.0], [103.0, 308.5], [102.0, 197.0], [101.0, 256.0], [100.0, 231.66666666666666], [107.0, 307.16666666666663], [106.0, 257.33333333333337], [105.0, 326.5], [104.0, 215.0], [111.0, 303.0], [110.0, 259.75], [109.0, 304.83333333333337], [108.0, 293.85714285714283], [115.0, 208.7142857142857], [113.0, 186.85714285714286], [112.0, 178.66666666666669], [114.0, 187.22222222222223], [119.0, 243.66666666666666], [118.0, 196.36363636363635], [117.0, 161.0], [116.0, 187.83333333333334], [123.0, 196.0], [122.0, 256.0], [121.0, 289.0], [120.0, 230.5], [127.0, 219.0], [126.0, 229.0], [124.0, 243.5], [125.0, 137.0], [135.0, 158.33333333333334], [134.0, 157.0], [133.0, 186.0], [132.0, 211.5], [131.0, 184.66666666666666], [130.0, 211.66666666666666], [129.0, 161.75], [128.0, 176.5], [142.0, 203.0], [141.0, 175.0], [140.0, 149.0], [139.0, 176.5], [138.0, 224.5], [137.0, 165.0], [136.0, 175.5], [143.0, 201.0], [151.0, 307.3333333333333], [150.0, 572.0], [149.0, 375.5], [148.0, 171.5], [147.0, 283.3333333333333], [146.0, 185.5], [145.0, 194.0], [144.0, 170.0], [159.0, 280.6666666666667], [158.0, 431.6666666666667], [156.0, 374.5], [155.0, 415.5], [154.0, 401.5], [153.0, 385.0], [152.0, 407.5], [157.0, 171.0], [165.0, 316.0], [164.0, 405.3333333333333], [162.0, 488.75], [161.0, 406.0], [160.0, 367.0], [167.0, 197.0], [166.0, 187.0], [163.0, 217.0], [175.0, 271.3333333333333], [173.0, 399.2], [169.0, 474.8], [171.0, 373.75], [174.0, 215.0], [172.0, 221.0], [170.0, 197.0], [168.0, 190.0], [183.0, 430.75], [180.0, 392.5], [178.0, 362.0], [177.0, 392.4285714285714], [176.0, 376.5], [182.0, 169.0], [181.0, 162.0], [179.0, 211.0], [191.0, 325.6666666666667], [190.0, 319.0], [189.0, 406.6666666666667], [187.0, 320.3333333333333], [186.0, 241.33333333333334], [185.0, 305.4], [184.0, 316.5], [188.0, 169.0], [198.0, 379.5], [197.0, 372.3333333333333], [196.0, 428.8], [194.0, 416.0], [192.0, 355.0], [199.0, 153.0], [195.0, 157.0], [193.0, 178.0], [207.0, 359.0], [205.0, 361.25], [202.0, 347.0], [201.0, 329.0], [206.0, 358.0], [203.0, 303.5], [204.0, 210.5], [200.0, 328.0], [215.0, 334.5], [214.0, 206.5], [213.0, 255.5], [212.0, 304.5], [211.0, 338.0], [210.0, 315.0], [209.0, 449.6666666666667], [208.0, 196.0], [223.0, 264.6666666666667], [222.0, 229.0], [221.0, 287.5], [220.0, 463.0], [219.0, 227.0], [218.0, 212.0], [217.0, 253.33333333333334], [216.0, 142.0], [230.0, 233.0], [229.0, 232.625], [228.0, 283.1428571428571], [227.0, 215.53846153846152], [226.0, 260.8333333333333], [224.0, 241.75], [225.0, 197.9230769230769], [231.0, 207.0], [238.0, 224.375], [237.0, 227.5], [235.0, 314.0], [234.0, 318.75], [233.0, 315.5], [232.0, 347.25], [236.0, 217.5], [247.0, 294.5], [246.0, 301.0], [245.0, 257.0], [244.0, 224.2], [243.0, 265.0], [242.0, 205.66666666666666], [241.0, 255.0], [240.0, 247.0], [255.0, 232.0], [254.0, 523.0], [253.0, 327.0], [252.0, 245.33333333333334], [250.0, 258.0], [249.0, 461.0], [248.0, 300.0], [269.0, 480.0], [270.0, 329.5], [268.0, 454.0], [258.0, 224.5], [257.0, 231.0], [256.0, 243.0], [267.0, 525.0], [266.0, 493.0], [265.0, 221.0], [264.0, 225.0], [263.0, 394.6666666666667], [261.0, 372.25], [260.0, 487.0], [284.0, 184.0], [283.0, 316.1111111111111], [282.0, 348.0], [281.0, 350.0], [287.0, 455.3333333333333], [285.0, 450.0], [286.0, 406.0], [277.0, 288.0], [276.0, 374.0], [275.0, 342.5], [274.0, 359.0], [273.0, 359.0], [272.0, 250.0], [302.0, 318.8], [297.0, 361.0], [303.0, 312.0], [296.0, 240.5], [298.0, 415.5], [294.0, 454.3333333333333], [293.0, 394.0], [291.0, 478.0], [290.0, 449.0], [289.0, 486.0], [288.0, 439.0], [319.0, 300.0], [317.0, 382.5], [312.0, 286.5], [310.0, 271.0], [305.0, 212.66666666666666], [321.0, 305.42857142857144], [334.0, 297.0], [330.0, 307.0], [326.0, 328.5], [325.0, 320.3333333333333], [324.0, 294.57142857142856], [322.0, 308.25], [320.0, 320.0], [323.0, 354.0], [346.0, 257.0], [364.0, 380.0], [367.0, 342.0], [380.0, 239.0], [383.0, 272.0], [396.0, 263.5], [398.0, 325.0], [395.0, 180.0], [391.0, 256.0], [415.0, 262.68181818181824], [414.0, 287.375], [411.0, 294.5], [413.0, 282.8571428571429], [404.0, 329.0], [425.0, 249.75000000000003], [416.0, 238.0], [451.0, 296.0], [452.0, 373.0], [460.0, 258.0], [463.0, 277.0], [468.0, 180.0], [466.0, 259.22222222222223], [475.0, 346.0], [472.0, 347.0], [467.0, 276.625], [481.0, 219.66666666666666], [484.0, 211.0], [494.0, 245.0], [495.0, 191.66666666666666], [492.0, 219.0], [487.0, 216.0], [483.0, 279.0], [493.0, 226.5], [510.0, 266.2499999999999], [511.0, 246.0], [509.0, 213.0], [504.0, 217.5], [505.0, 236.0], [497.0, 225.5], [496.0, 237.5], [501.0, 209.0], [500.0, 274.25], [513.0, 205.0], [514.0, 276.5], [512.0, 268.0], [1.0, 202.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[230.32000000000002, 269.3669999999995]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 514.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9583.333333333334, "minX": 1.67222736E12, "maxY": 25783.333333333332, "series": [{"data": [[1.67222736E12, 9583.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67222736E12, 25783.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67222736E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 63.67299999999999, "minX": 1.67222736E12, "maxY": 269.3669999999995, "series": [{"data": [[1.67222736E12, 189.61100000000013]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.67222736E12, 63.67299999999999]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.67222736E12, 269.3669999999995]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67222736E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 63.34899999999995, "minX": 1.67222736E12, "maxY": 268.8260000000005, "series": [{"data": [[1.67222736E12, 189.37600000000012]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.67222736E12, 63.34899999999995]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.67222736E12, 268.8260000000005]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67222736E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.9, "minX": 1.67222736E12, "maxY": 13.933000000000016, "series": [{"data": [[1.67222736E12, 5.9]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.67222736E12, 7.095999999999992]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.67222736E12, 13.933000000000016]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67222736E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.67222736E12, "maxY": 142.0, "series": [{"data": [[1.67222736E12, 142.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67222736E12, 105.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67222736E12, 132.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67222736E12, 118.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.67222736E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67222736E12, 59.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67222736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 492.0, "maxY": 287.0, "series": [{"data": [[1134.0, 43.0], [492.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1134.0, 189.0], [614.0, 287.0], [760.0, 189.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1134.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 492.0, "maxY": 286.0, "series": [{"data": [[1134.0, 43.0], [492.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1134.0, 189.0], [614.0, 286.0], [760.0, 189.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1134.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.67222736E12, "maxY": 50.0, "series": [{"data": [[1.67222736E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67222736E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.67222736E12, "maxY": 33.333333333333336, "series": [{"data": [[1.67222736E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.67222736E12, 33.333333333333336]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67222736E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.67222736E12, "maxY": 16.666666666666668, "series": [{"data": [[1.67222736E12, 16.666666666666668]], "isOverall": false, "label": "Monolithic-based client-failure", "isController": false}, {"data": [[1.67222736E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.67222736E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67222736E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.67222736E12, "maxY": 33.333333333333336, "series": [{"data": [[1.67222736E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.67222736E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67222736E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

