/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 4149.0, "series": [{"data": [[0.0, 11.0], [0.1, 15.0], [0.2, 18.0], [0.3, 22.0], [0.4, 24.0], [0.5, 27.0], [0.6, 31.0], [0.7, 35.0], [0.8, 39.0], [0.9, 42.0], [1.0, 45.0], [1.1, 47.0], [1.2, 48.0], [1.3, 49.0], [1.4, 51.0], [1.5, 52.0], [1.6, 53.0], [1.7, 54.0], [1.8, 55.0], [1.9, 56.0], [2.0, 56.0], [2.1, 57.0], [2.2, 58.0], [2.3, 59.0], [2.4, 59.0], [2.5, 60.0], [2.6, 61.0], [2.7, 62.0], [2.8, 63.0], [2.9, 63.0], [3.0, 64.0], [3.1, 64.0], [3.2, 65.0], [3.3, 65.0], [3.4, 66.0], [3.5, 66.0], [3.6, 67.0], [3.7, 68.0], [3.8, 68.0], [3.9, 69.0], [4.0, 69.0], [4.1, 70.0], [4.2, 70.0], [4.3, 71.0], [4.4, 72.0], [4.5, 73.0], [4.6, 73.0], [4.7, 74.0], [4.8, 74.0], [4.9, 75.0], [5.0, 76.0], [5.1, 77.0], [5.2, 78.0], [5.3, 78.0], [5.4, 79.0], [5.5, 79.0], [5.6, 80.0], [5.7, 80.0], [5.8, 81.0], [5.9, 81.0], [6.0, 81.0], [6.1, 82.0], [6.2, 82.0], [6.3, 83.0], [6.4, 83.0], [6.5, 84.0], [6.6, 84.0], [6.7, 85.0], [6.8, 86.0], [6.9, 86.0], [7.0, 87.0], [7.1, 88.0], [7.2, 88.0], [7.3, 89.0], [7.4, 90.0], [7.5, 91.0], [7.6, 91.0], [7.7, 92.0], [7.8, 92.0], [7.9, 92.0], [8.0, 92.0], [8.1, 93.0], [8.2, 93.0], [8.3, 94.0], [8.4, 94.0], [8.5, 94.0], [8.6, 95.0], [8.7, 96.0], [8.8, 96.0], [8.9, 97.0], [9.0, 97.0], [9.1, 98.0], [9.2, 98.0], [9.3, 98.0], [9.4, 99.0], [9.5, 99.0], [9.6, 100.0], [9.7, 100.0], [9.8, 101.0], [9.9, 101.0], [10.0, 101.0], [10.1, 101.0], [10.2, 102.0], [10.3, 102.0], [10.4, 102.0], [10.5, 103.0], [10.6, 103.0], [10.7, 103.0], [10.8, 104.0], [10.9, 104.0], [11.0, 105.0], [11.1, 105.0], [11.2, 105.0], [11.3, 106.0], [11.4, 106.0], [11.5, 106.0], [11.6, 107.0], [11.7, 107.0], [11.8, 107.0], [11.9, 108.0], [12.0, 108.0], [12.1, 108.0], [12.2, 108.0], [12.3, 109.0], [12.4, 109.0], [12.5, 109.0], [12.6, 109.0], [12.7, 110.0], [12.8, 110.0], [12.9, 111.0], [13.0, 111.0], [13.1, 111.0], [13.2, 112.0], [13.3, 112.0], [13.4, 113.0], [13.5, 113.0], [13.6, 113.0], [13.7, 114.0], [13.8, 114.0], [13.9, 115.0], [14.0, 115.0], [14.1, 115.0], [14.2, 116.0], [14.3, 116.0], [14.4, 116.0], [14.5, 116.0], [14.6, 117.0], [14.7, 117.0], [14.8, 117.0], [14.9, 118.0], [15.0, 118.0], [15.1, 118.0], [15.2, 119.0], [15.3, 119.0], [15.4, 119.0], [15.5, 119.0], [15.6, 120.0], [15.7, 120.0], [15.8, 120.0], [15.9, 120.0], [16.0, 121.0], [16.1, 121.0], [16.2, 121.0], [16.3, 122.0], [16.4, 122.0], [16.5, 122.0], [16.6, 123.0], [16.7, 123.0], [16.8, 123.0], [16.9, 124.0], [17.0, 124.0], [17.1, 124.0], [17.2, 124.0], [17.3, 125.0], [17.4, 125.0], [17.5, 125.0], [17.6, 126.0], [17.7, 126.0], [17.8, 126.0], [17.9, 126.0], [18.0, 127.0], [18.1, 127.0], [18.2, 127.0], [18.3, 128.0], [18.4, 128.0], [18.5, 129.0], [18.6, 129.0], [18.7, 129.0], [18.8, 129.0], [18.9, 129.0], [19.0, 130.0], [19.1, 130.0], [19.2, 130.0], [19.3, 130.0], [19.4, 131.0], [19.5, 131.0], [19.6, 132.0], [19.7, 132.0], [19.8, 133.0], [19.9, 133.0], [20.0, 133.0], [20.1, 134.0], [20.2, 134.0], [20.3, 134.0], [20.4, 135.0], [20.5, 135.0], [20.6, 136.0], [20.7, 136.0], [20.8, 136.0], [20.9, 136.0], [21.0, 137.0], [21.1, 137.0], [21.2, 137.0], [21.3, 137.0], [21.4, 138.0], [21.5, 138.0], [21.6, 138.0], [21.7, 139.0], [21.8, 139.0], [21.9, 139.0], [22.0, 139.0], [22.1, 140.0], [22.2, 140.0], [22.3, 141.0], [22.4, 142.0], [22.5, 142.0], [22.6, 143.0], [22.7, 143.0], [22.8, 143.0], [22.9, 144.0], [23.0, 144.0], [23.1, 144.0], [23.2, 145.0], [23.3, 145.0], [23.4, 146.0], [23.5, 146.0], [23.6, 146.0], [23.7, 147.0], [23.8, 147.0], [23.9, 147.0], [24.0, 148.0], [24.1, 149.0], [24.2, 149.0], [24.3, 150.0], [24.4, 151.0], [24.5, 151.0], [24.6, 152.0], [24.7, 152.0], [24.8, 153.0], [24.9, 153.0], [25.0, 154.0], [25.1, 155.0], [25.2, 155.0], [25.3, 155.0], [25.4, 156.0], [25.5, 157.0], [25.6, 157.0], [25.7, 158.0], [25.8, 158.0], [25.9, 159.0], [26.0, 159.0], [26.1, 160.0], [26.2, 160.0], [26.3, 160.0], [26.4, 161.0], [26.5, 161.0], [26.6, 162.0], [26.7, 162.0], [26.8, 163.0], [26.9, 163.0], [27.0, 164.0], [27.1, 164.0], [27.2, 165.0], [27.3, 165.0], [27.4, 166.0], [27.5, 166.0], [27.6, 166.0], [27.7, 167.0], [27.8, 167.0], [27.9, 168.0], [28.0, 168.0], [28.1, 168.0], [28.2, 169.0], [28.3, 169.0], [28.4, 169.0], [28.5, 170.0], [28.6, 170.0], [28.7, 171.0], [28.8, 171.0], [28.9, 172.0], [29.0, 172.0], [29.1, 173.0], [29.2, 174.0], [29.3, 174.0], [29.4, 175.0], [29.5, 175.0], [29.6, 175.0], [29.7, 176.0], [29.8, 176.0], [29.9, 177.0], [30.0, 177.0], [30.1, 178.0], [30.2, 178.0], [30.3, 179.0], [30.4, 179.0], [30.5, 180.0], [30.6, 180.0], [30.7, 181.0], [30.8, 181.0], [30.9, 182.0], [31.0, 182.0], [31.1, 183.0], [31.2, 183.0], [31.3, 183.0], [31.4, 184.0], [31.5, 184.0], [31.6, 185.0], [31.7, 185.0], [31.8, 186.0], [31.9, 186.0], [32.0, 187.0], [32.1, 187.0], [32.2, 188.0], [32.3, 188.0], [32.4, 189.0], [32.5, 189.0], [32.6, 190.0], [32.7, 190.0], [32.8, 191.0], [32.9, 192.0], [33.0, 193.0], [33.1, 193.0], [33.2, 194.0], [33.3, 195.0], [33.4, 195.0], [33.5, 196.0], [33.6, 196.0], [33.7, 197.0], [33.8, 198.0], [33.9, 198.0], [34.0, 199.0], [34.1, 200.0], [34.2, 201.0], [34.3, 202.0], [34.4, 202.0], [34.5, 203.0], [34.6, 204.0], [34.7, 205.0], [34.8, 205.0], [34.9, 206.0], [35.0, 207.0], [35.1, 207.0], [35.2, 208.0], [35.3, 209.0], [35.4, 209.0], [35.5, 210.0], [35.6, 210.0], [35.7, 211.0], [35.8, 213.0], [35.9, 214.0], [36.0, 214.0], [36.1, 215.0], [36.2, 216.0], [36.3, 217.0], [36.4, 218.0], [36.5, 219.0], [36.6, 220.0], [36.7, 221.0], [36.8, 221.0], [36.9, 222.0], [37.0, 222.0], [37.1, 223.0], [37.2, 224.0], [37.3, 225.0], [37.4, 226.0], [37.5, 227.0], [37.6, 228.0], [37.7, 229.0], [37.8, 229.0], [37.9, 230.0], [38.0, 230.0], [38.1, 231.0], [38.2, 232.0], [38.3, 233.0], [38.4, 234.0], [38.5, 235.0], [38.6, 236.0], [38.7, 237.0], [38.8, 237.0], [38.9, 238.0], [39.0, 239.0], [39.1, 240.0], [39.2, 241.0], [39.3, 241.0], [39.4, 242.0], [39.5, 243.0], [39.6, 244.0], [39.7, 245.0], [39.8, 245.0], [39.9, 247.0], [40.0, 247.0], [40.1, 248.0], [40.2, 248.0], [40.3, 249.0], [40.4, 250.0], [40.5, 251.0], [40.6, 252.0], [40.7, 254.0], [40.8, 255.0], [40.9, 256.0], [41.0, 257.0], [41.1, 257.0], [41.2, 258.0], [41.3, 258.0], [41.4, 258.0], [41.5, 259.0], [41.6, 260.0], [41.7, 261.0], [41.8, 261.0], [41.9, 262.0], [42.0, 263.0], [42.1, 264.0], [42.2, 264.0], [42.3, 265.0], [42.4, 266.0], [42.5, 266.0], [42.6, 267.0], [42.7, 268.0], [42.8, 268.0], [42.9, 269.0], [43.0, 270.0], [43.1, 271.0], [43.2, 272.0], [43.3, 273.0], [43.4, 274.0], [43.5, 275.0], [43.6, 275.0], [43.7, 276.0], [43.8, 277.0], [43.9, 278.0], [44.0, 278.0], [44.1, 279.0], [44.2, 280.0], [44.3, 281.0], [44.4, 282.0], [44.5, 282.0], [44.6, 283.0], [44.7, 284.0], [44.8, 285.0], [44.9, 286.0], [45.0, 287.0], [45.1, 288.0], [45.2, 289.0], [45.3, 290.0], [45.4, 291.0], [45.5, 293.0], [45.6, 294.0], [45.7, 295.0], [45.8, 296.0], [45.9, 297.0], [46.0, 298.0], [46.1, 299.0], [46.2, 302.0], [46.3, 303.0], [46.4, 304.0], [46.5, 305.0], [46.6, 306.0], [46.7, 308.0], [46.8, 309.0], [46.9, 311.0], [47.0, 312.0], [47.1, 314.0], [47.2, 314.0], [47.3, 316.0], [47.4, 317.0], [47.5, 318.0], [47.6, 320.0], [47.7, 321.0], [47.8, 321.0], [47.9, 323.0], [48.0, 324.0], [48.1, 325.0], [48.2, 325.0], [48.3, 327.0], [48.4, 328.0], [48.5, 329.0], [48.6, 329.0], [48.7, 331.0], [48.8, 332.0], [48.9, 333.0], [49.0, 334.0], [49.1, 336.0], [49.2, 336.0], [49.3, 338.0], [49.4, 339.0], [49.5, 340.0], [49.6, 341.0], [49.7, 341.0], [49.8, 343.0], [49.9, 344.0], [50.0, 345.0], [50.1, 347.0], [50.2, 348.0], [50.3, 349.0], [50.4, 350.0], [50.5, 351.0], [50.6, 352.0], [50.7, 354.0], [50.8, 356.0], [50.9, 357.0], [51.0, 358.0], [51.1, 359.0], [51.2, 360.0], [51.3, 361.0], [51.4, 363.0], [51.5, 364.0], [51.6, 365.0], [51.7, 366.0], [51.8, 367.0], [51.9, 368.0], [52.0, 370.0], [52.1, 371.0], [52.2, 373.0], [52.3, 374.0], [52.4, 376.0], [52.5, 379.0], [52.6, 381.0], [52.7, 383.0], [52.8, 384.0], [52.9, 385.0], [53.0, 386.0], [53.1, 389.0], [53.2, 391.0], [53.3, 394.0], [53.4, 396.0], [53.5, 399.0], [53.6, 401.0], [53.7, 402.0], [53.8, 405.0], [53.9, 406.0], [54.0, 409.0], [54.1, 410.0], [54.2, 411.0], [54.3, 411.0], [54.4, 413.0], [54.5, 415.0], [54.6, 417.0], [54.7, 418.0], [54.8, 419.0], [54.9, 421.0], [55.0, 421.0], [55.1, 423.0], [55.2, 425.0], [55.3, 426.0], [55.4, 428.0], [55.5, 430.0], [55.6, 430.0], [55.7, 433.0], [55.8, 435.0], [55.9, 436.0], [56.0, 438.0], [56.1, 440.0], [56.2, 442.0], [56.3, 443.0], [56.4, 445.0], [56.5, 448.0], [56.6, 449.0], [56.7, 451.0], [56.8, 452.0], [56.9, 455.0], [57.0, 456.0], [57.1, 458.0], [57.2, 459.0], [57.3, 461.0], [57.4, 463.0], [57.5, 466.0], [57.6, 467.0], [57.7, 469.0], [57.8, 470.0], [57.9, 471.0], [58.0, 472.0], [58.1, 473.0], [58.2, 474.0], [58.3, 475.0], [58.4, 477.0], [58.5, 478.0], [58.6, 479.0], [58.7, 481.0], [58.8, 482.0], [58.9, 483.0], [59.0, 485.0], [59.1, 487.0], [59.2, 488.0], [59.3, 490.0], [59.4, 492.0], [59.5, 495.0], [59.6, 496.0], [59.7, 497.0], [59.8, 499.0], [59.9, 501.0], [60.0, 505.0], [60.1, 507.0], [60.2, 509.0], [60.3, 512.0], [60.4, 514.0], [60.5, 517.0], [60.6, 519.0], [60.7, 521.0], [60.8, 523.0], [60.9, 524.0], [61.0, 526.0], [61.1, 528.0], [61.2, 530.0], [61.3, 532.0], [61.4, 534.0], [61.5, 539.0], [61.6, 541.0], [61.7, 543.0], [61.8, 544.0], [61.9, 549.0], [62.0, 553.0], [62.1, 556.0], [62.2, 558.0], [62.3, 561.0], [62.4, 566.0], [62.5, 572.0], [62.6, 575.0], [62.7, 581.0], [62.8, 583.0], [62.9, 587.0], [63.0, 590.0], [63.1, 595.0], [63.2, 597.0], [63.3, 604.0], [63.4, 609.0], [63.5, 612.0], [63.6, 614.0], [63.7, 616.0], [63.8, 618.0], [63.9, 621.0], [64.0, 624.0], [64.1, 630.0], [64.2, 633.0], [64.3, 636.0], [64.4, 641.0], [64.5, 644.0], [64.6, 649.0], [64.7, 652.0], [64.8, 657.0], [64.9, 659.0], [65.0, 662.0], [65.1, 665.0], [65.2, 668.0], [65.3, 673.0], [65.4, 675.0], [65.5, 679.0], [65.6, 681.0], [65.7, 685.0], [65.8, 688.0], [65.9, 690.0], [66.0, 693.0], [66.1, 696.0], [66.2, 700.0], [66.3, 706.0], [66.4, 708.0], [66.5, 713.0], [66.6, 715.0], [66.7, 719.0], [66.8, 723.0], [66.9, 724.0], [67.0, 728.0], [67.1, 731.0], [67.2, 735.0], [67.3, 741.0], [67.4, 744.0], [67.5, 748.0], [67.6, 753.0], [67.7, 757.0], [67.8, 760.0], [67.9, 765.0], [68.0, 768.0], [68.1, 772.0], [68.2, 774.0], [68.3, 778.0], [68.4, 782.0], [68.5, 785.0], [68.6, 787.0], [68.7, 791.0], [68.8, 795.0], [68.9, 798.0], [69.0, 800.0], [69.1, 804.0], [69.2, 813.0], [69.3, 817.0], [69.4, 820.0], [69.5, 822.0], [69.6, 826.0], [69.7, 834.0], [69.8, 839.0], [69.9, 844.0], [70.0, 846.0], [70.1, 849.0], [70.2, 852.0], [70.3, 858.0], [70.4, 861.0], [70.5, 866.0], [70.6, 868.0], [70.7, 871.0], [70.8, 874.0], [70.9, 876.0], [71.0, 880.0], [71.1, 883.0], [71.2, 888.0], [71.3, 891.0], [71.4, 897.0], [71.5, 900.0], [71.6, 904.0], [71.7, 907.0], [71.8, 912.0], [71.9, 918.0], [72.0, 922.0], [72.1, 926.0], [72.2, 930.0], [72.3, 933.0], [72.4, 939.0], [72.5, 944.0], [72.6, 948.0], [72.7, 952.0], [72.8, 958.0], [72.9, 961.0], [73.0, 965.0], [73.1, 968.0], [73.2, 973.0], [73.3, 976.0], [73.4, 981.0], [73.5, 985.0], [73.6, 991.0], [73.7, 995.0], [73.8, 1001.0], [73.9, 1008.0], [74.0, 1013.0], [74.1, 1019.0], [74.2, 1023.0], [74.3, 1027.0], [74.4, 1032.0], [74.5, 1035.0], [74.6, 1040.0], [74.7, 1043.0], [74.8, 1046.0], [74.9, 1051.0], [75.0, 1057.0], [75.1, 1063.0], [75.2, 1071.0], [75.3, 1075.0], [75.4, 1078.0], [75.5, 1081.0], [75.6, 1086.0], [75.7, 1092.0], [75.8, 1097.0], [75.9, 1103.0], [76.0, 1109.0], [76.1, 1113.0], [76.2, 1120.0], [76.3, 1125.0], [76.4, 1130.0], [76.5, 1136.0], [76.6, 1140.0], [76.7, 1143.0], [76.8, 1147.0], [76.9, 1149.0], [77.0, 1157.0], [77.1, 1162.0], [77.2, 1165.0], [77.3, 1170.0], [77.4, 1173.0], [77.5, 1179.0], [77.6, 1181.0], [77.7, 1183.0], [77.8, 1186.0], [77.9, 1190.0], [78.0, 1192.0], [78.1, 1198.0], [78.2, 1201.0], [78.3, 1204.0], [78.4, 1211.0], [78.5, 1218.0], [78.6, 1222.0], [78.7, 1228.0], [78.8, 1233.0], [78.9, 1238.0], [79.0, 1247.0], [79.1, 1255.0], [79.2, 1266.0], [79.3, 1270.0], [79.4, 1276.0], [79.5, 1284.0], [79.6, 1292.0], [79.7, 1300.0], [79.8, 1305.0], [79.9, 1314.0], [80.0, 1329.0], [80.1, 1337.0], [80.2, 1354.0], [80.3, 1371.0], [80.4, 1382.0], [80.5, 1389.0], [80.6, 1401.0], [80.7, 1408.0], [80.8, 1423.0], [80.9, 1436.0], [81.0, 1445.0], [81.1, 1456.0], [81.2, 1472.0], [81.3, 1485.0], [81.4, 1491.0], [81.5, 1504.0], [81.6, 1519.0], [81.7, 1530.0], [81.8, 1538.0], [81.9, 1545.0], [82.0, 1553.0], [82.1, 1561.0], [82.2, 1566.0], [82.3, 1576.0], [82.4, 1579.0], [82.5, 1585.0], [82.6, 1597.0], [82.7, 1600.0], [82.8, 1606.0], [82.9, 1613.0], [83.0, 1617.0], [83.1, 1623.0], [83.2, 1627.0], [83.3, 1634.0], [83.4, 1637.0], [83.5, 1640.0], [83.6, 1641.0], [83.7, 1644.0], [83.8, 1647.0], [83.9, 1651.0], [84.0, 1653.0], [84.1, 1656.0], [84.2, 1659.0], [84.3, 1661.0], [84.4, 1664.0], [84.5, 1667.0], [84.6, 1669.0], [84.7, 1674.0], [84.8, 1677.0], [84.9, 1683.0], [85.0, 1686.0], [85.1, 1690.0], [85.2, 1692.0], [85.3, 1697.0], [85.4, 1702.0], [85.5, 1705.0], [85.6, 1712.0], [85.7, 1715.0], [85.8, 1724.0], [85.9, 1729.0], [86.0, 1737.0], [86.1, 1741.0], [86.2, 1748.0], [86.3, 1752.0], [86.4, 1759.0], [86.5, 1763.0], [86.6, 1767.0], [86.7, 1771.0], [86.8, 1773.0], [86.9, 1777.0], [87.0, 1780.0], [87.1, 1785.0], [87.2, 1788.0], [87.3, 1793.0], [87.4, 1796.0], [87.5, 1800.0], [87.6, 1802.0], [87.7, 1806.0], [87.8, 1809.0], [87.9, 1814.0], [88.0, 1816.0], [88.1, 1819.0], [88.2, 1825.0], [88.3, 1827.0], [88.4, 1831.0], [88.5, 1838.0], [88.6, 1843.0], [88.7, 1854.0], [88.8, 1860.0], [88.9, 1863.0], [89.0, 1866.0], [89.1, 1870.0], [89.2, 1876.0], [89.3, 1882.0], [89.4, 1885.0], [89.5, 1889.0], [89.6, 1894.0], [89.7, 1897.0], [89.8, 1901.0], [89.9, 1908.0], [90.0, 1909.0], [90.1, 1916.0], [90.2, 1919.0], [90.3, 1925.0], [90.4, 1929.0], [90.5, 1936.0], [90.6, 1939.0], [90.7, 1946.0], [90.8, 1950.0], [90.9, 1956.0], [91.0, 1963.0], [91.1, 1969.0], [91.2, 1975.0], [91.3, 1979.0], [91.4, 1986.0], [91.5, 1991.0], [91.6, 1996.0], [91.7, 2001.0], [91.8, 2004.0], [91.9, 2009.0], [92.0, 2017.0], [92.1, 2023.0], [92.2, 2031.0], [92.3, 2040.0], [92.4, 2057.0], [92.5, 2066.0], [92.6, 2072.0], [92.7, 2077.0], [92.8, 2087.0], [92.9, 2096.0], [93.0, 2100.0], [93.1, 2106.0], [93.2, 2111.0], [93.3, 2120.0], [93.4, 2125.0], [93.5, 2129.0], [93.6, 2133.0], [93.7, 2138.0], [93.8, 2144.0], [93.9, 2149.0], [94.0, 2155.0], [94.1, 2163.0], [94.2, 2166.0], [94.3, 2173.0], [94.4, 2180.0], [94.5, 2185.0], [94.6, 2192.0], [94.7, 2198.0], [94.8, 2208.0], [94.9, 2219.0], [95.0, 2223.0], [95.1, 2228.0], [95.2, 2235.0], [95.3, 2242.0], [95.4, 2251.0], [95.5, 2257.0], [95.6, 2265.0], [95.7, 2278.0], [95.8, 2288.0], [95.9, 2295.0], [96.0, 2303.0], [96.1, 2312.0], [96.2, 2319.0], [96.3, 2328.0], [96.4, 2334.0], [96.5, 2339.0], [96.6, 2344.0], [96.7, 2354.0], [96.8, 2364.0], [96.9, 2394.0], [97.0, 2412.0], [97.1, 2436.0], [97.2, 2457.0], [97.3, 2473.0], [97.4, 2497.0], [97.5, 2522.0], [97.6, 2548.0], [97.7, 2566.0], [97.8, 2579.0], [97.9, 2597.0], [98.0, 2612.0], [98.1, 2636.0], [98.2, 2649.0], [98.3, 2678.0], [98.4, 2710.0], [98.5, 2745.0], [98.6, 2797.0], [98.7, 2824.0], [98.8, 2872.0], [98.9, 2914.0], [99.0, 2965.0], [99.1, 3000.0], [99.2, 3016.0], [99.3, 3032.0], [99.4, 3040.0], [99.5, 3050.0], [99.6, 3082.0], [99.7, 3143.0], [99.8, 3515.0], [99.9, 3769.0], [100.0, 4149.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2455.0, "series": [{"data": [[0.0, 951.0], [600.0, 292.0], [700.0, 282.0], [800.0, 251.0], [900.0, 226.0], [1000.0, 209.0], [1100.0, 232.0], [1200.0, 154.0], [1300.0, 90.0], [1400.0, 87.0], [1500.0, 123.0], [1600.0, 265.0], [100.0, 2455.0], [1700.0, 215.0], [1800.0, 226.0], [1900.0, 192.0], [2000.0, 131.0], [2100.0, 173.0], [2200.0, 125.0], [2300.0, 96.0], [2400.0, 51.0], [2500.0, 47.0], [2600.0, 44.0], [2700.0, 28.0], [2800.0, 26.0], [2900.0, 21.0], [3000.0, 51.0], [3100.0, 18.0], [200.0, 1205.0], [3500.0, 4.0], [3700.0, 4.0], [3600.0, 5.0], [3800.0, 3.0], [4000.0, 2.0], [4100.0, 4.0], [300.0, 744.0], [400.0, 625.0], [500.0, 343.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1854.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5987.0, "series": [{"data": [[0.0, 5987.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2159.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1854.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 848.403799999998, "minX": 1.66956702E12, "maxY": 848.403799999998, "series": [{"data": [[1.66956702E12, 848.403799999998]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.666666666666666, "minX": 4.0, "maxY": 2012.5, "series": [{"data": [[4.0, 13.0], [6.0, 21.0], [7.0, 18.0], [8.0, 18.0], [10.0, 18.0], [11.0, 19.333333333333332], [12.0, 18.5], [14.0, 19.5], [16.0, 15.5], [17.0, 17.0], [19.0, 15.333333333333334], [20.0, 12.666666666666666], [26.0, 27.0], [27.0, 30.666666666666664], [28.0, 25.5], [30.0, 32.0], [43.0, 30.0], [45.0, 26.0], [47.0, 49.0], [48.0, 47.78947368421053], [51.0, 56.833333333333336], [53.0, 48.25], [52.0, 39.5], [55.0, 58.75], [57.0, 39.5], [56.0, 35.0], [59.0, 58.0], [58.0, 59.0], [61.0, 64.0], [60.0, 71.0], [63.0, 64.0], [62.0, 66.0], [67.0, 64.5], [65.0, 56.0], [64.0, 70.0], [71.0, 66.0], [70.0, 68.0], [69.0, 65.4], [74.0, 59.0], [73.0, 62.75], [72.0, 58.0], [87.0, 60.0], [86.0, 48.0], [85.0, 53.89999999999999], [84.0, 60.0], [91.0, 61.0], [90.0, 60.0], [88.0, 72.0], [95.0, 69.5], [93.0, 94.0], [92.0, 65.6], [98.0, 57.333333333333336], [97.0, 63.0], [103.0, 57.0], [102.0, 62.0], [101.0, 60.333333333333336], [100.0, 63.0], [107.0, 59.0], [105.0, 58.25], [104.0, 72.0], [111.0, 70.0], [110.0, 55.333333333333336], [109.0, 61.0], [108.0, 64.5], [114.0, 50.0], [113.0, 65.0], [112.0, 67.0], [119.0, 53.0], [118.0, 99.0], [117.0, 54.0], [116.0, 101.5], [123.0, 54.0], [121.0, 57.666666666666664], [120.0, 101.0], [127.0, 98.75], [125.0, 56.0], [124.0, 122.6], [135.0, 68.5], [134.0, 100.0], [133.0, 69.0], [131.0, 58.0], [142.0, 66.66666666666667], [141.0, 59.0], [139.0, 78.75], [138.0, 64.33333333333333], [151.0, 133.5], [150.0, 67.0], [149.0, 81.33333333333333], [148.0, 82.0], [147.0, 105.0], [144.0, 68.66666666666667], [159.0, 76.0], [158.0, 69.0], [157.0, 105.0], [156.0, 162.0], [155.0, 72.8], [154.0, 91.0], [153.0, 99.33333333333333], [152.0, 106.66666666666666], [166.0, 65.0], [165.0, 100.5], [163.0, 129.66666666666666], [162.0, 203.0], [161.0, 81.0], [160.0, 65.0], [171.0, 103.0], [170.0, 129.66666666666669], [168.0, 63.5], [183.0, 113.33333333333333], [182.0, 125.5], [180.0, 127.53846153846153], [179.0, 95.4], [178.0, 69.0], [190.0, 160.0], [189.0, 101.0], [187.0, 111.14285714285715], [184.0, 96.0], [186.0, 119.0], [185.0, 95.0], [199.0, 100.25], [198.0, 98.25], [197.0, 130.0], [196.0, 93.33333333333333], [195.0, 86.0], [194.0, 76.0], [193.0, 79.0], [192.0, 127.0], [207.0, 122.8], [205.0, 151.0], [204.0, 100.5], [203.0, 55.0], [202.0, 156.0], [201.0, 127.0], [200.0, 81.5], [215.0, 86.0], [214.0, 130.85714285714286], [212.0, 128.0], [211.0, 119.2], [210.0, 135.2], [223.0, 116.85714285714286], [222.0, 123.83333333333333], [220.0, 118.0], [221.0, 131.0], [219.0, 105.5], [216.0, 125.0], [231.0, 149.0], [230.0, 134.6], [229.0, 122.33333333333333], [227.0, 120.0], [226.0, 137.0], [225.0, 133.0], [224.0, 147.5], [239.0, 131.75], [238.0, 127.0], [237.0, 126.0], [236.0, 120.0], [235.0, 145.5], [234.0, 150.0], [233.0, 130.83333333333334], [247.0, 116.66666666666667], [246.0, 132.25], [245.0, 126.875], [243.0, 126.49999999999999], [244.0, 124.5], [242.0, 125.66666666666667], [240.0, 146.0], [255.0, 122.0], [254.0, 129.0], [252.0, 130.8], [251.0, 128.66666666666666], [250.0, 109.5], [249.0, 122.5], [248.0, 111.5], [270.0, 119.66666666666667], [271.0, 162.0], [269.0, 123.5], [259.0, 122.00000000000001], [258.0, 119.0], [257.0, 133.25], [256.0, 131.0], [267.0, 132.83333333333331], [266.0, 150.5], [265.0, 110.33333333333333], [264.0, 107.0], [263.0, 136.0], [262.0, 106.5], [261.0, 120.0], [260.0, 122.0], [285.0, 122.0], [284.0, 136.5], [275.0, 121.25], [273.0, 100.5], [272.0, 128.0], [283.0, 135.0], [282.0, 126.66666666666667], [281.0, 130.33333333333334], [280.0, 156.0], [279.0, 143.0], [278.0, 138.6], [277.0, 128.0], [276.0, 97.0], [291.0, 119.0], [303.0, 104.66666666666667], [302.0, 107.5], [297.0, 82.0], [296.0, 99.14285714285715], [293.0, 99.33333333333333], [292.0, 124.0], [290.0, 100.75], [289.0, 122.86666666666666], [317.0, 133.0], [319.0, 123.33333333333333], [316.0, 159.11111111111111], [307.0, 128.33333333333331], [306.0, 75.0], [305.0, 87.5], [304.0, 94.0], [315.0, 207.5], [313.0, 356.75], [312.0, 121.75], [311.0, 93.0], [310.0, 94.0], [308.0, 150.66666666666666], [323.0, 548.6666666666666], [333.0, 205.0], [332.0, 324.0], [331.0, 697.0], [330.0, 291.5], [325.0, 592.0], [324.0, 537.0], [322.0, 423.0], [321.0, 584.0], [320.0, 601.5], [351.0, 443.6666666666667], [350.0, 375.22222222222223], [349.0, 404.0], [348.0, 517.3181818181818], [347.0, 355.3529411764706], [345.0, 143.0], [346.0, 137.31250000000003], [367.0, 161.2], [365.0, 101.8], [364.0, 415.66666666666663], [363.0, 120.0], [362.0, 119.0], [361.0, 223.41176470588235], [360.0, 127.0], [352.0, 126.66666666666667], [378.0, 197.33333333333334], [376.0, 337.00000000000006], [375.0, 140.5], [369.0, 545.5], [368.0, 591.1428571428572], [398.0, 590.75], [399.0, 264.125], [396.0, 598.5], [395.0, 605.375], [394.0, 784.8], [393.0, 621.25], [392.0, 562.7272727272727], [391.0, 410.09756097560984], [390.0, 1323.0], [414.0, 459.8], [415.0, 115.0], [413.0, 665.5], [412.0, 644.0], [411.0, 965.0], [410.0, 218.8], [408.0, 412.0], [404.0, 172.28571428571428], [400.0, 325.8333333333333], [403.0, 115.8], [401.0, 116.0], [430.0, 568.1500000000001], [431.0, 86.0], [429.0, 117.0], [428.0, 476.5], [426.0, 221.22222222222223], [427.0, 654.5], [420.0, 960.125], [419.0, 265.3333333333333], [418.0, 123.5], [446.0, 491.5], [447.0, 752.75], [444.0, 828.6], [435.0, 113.2], [433.0, 109.0], [432.0, 488.5], [442.0, 350.0], [441.0, 82.0], [440.0, 137.0], [439.0, 894.0], [438.0, 345.20000000000005], [437.0, 91.0], [436.0, 188.55555555555554], [462.0, 277.2], [463.0, 102.0], [461.0, 119.33333333333333], [460.0, 168.5], [459.0, 1862.0], [457.0, 116.0], [456.0, 154.0], [454.0, 288.75], [448.0, 1409.5], [450.0, 121.0], [449.0, 348.6], [453.0, 131.5], [452.0, 187.0], [467.0, 180.0], [479.0, 147.5], [478.0, 232.9047619047619], [474.0, 203.33333333333334], [472.0, 219.29999999999998], [471.0, 334.70000000000005], [469.0, 109.4], [468.0, 294.7647058823529], [466.0, 157.0], [465.0, 101.0], [494.0, 327.1666666666667], [495.0, 152.5], [493.0, 118.6], [492.0, 150.5], [491.0, 772.0], [490.0, 103.0], [489.0, 365.33333333333337], [487.0, 123.0], [483.0, 94.0], [480.0, 117.5], [486.0, 255.2], [484.0, 227.1052631578947], [510.0, 222.0], [511.0, 400.6], [509.0, 136.0], [498.0, 376.99999999999994], [497.0, 715.5], [496.0, 134.0], [507.0, 409.7368421052631], [506.0, 716.0], [504.0, 173.0909090909091], [505.0, 304.0], [503.0, 135.0], [502.0, 141.0], [539.0, 95.0], [532.0, 198.83333333333331], [543.0, 108.0], [529.0, 391.5], [528.0, 92.0], [538.0, 137.5], [536.0, 84.0], [527.0, 297.83333333333337], [513.0, 292.33333333333337], [517.0, 580.6], [515.0, 98.66666666666667], [519.0, 340.125], [518.0, 311.8571428571429], [526.0, 667.0], [525.0, 296.0], [524.0, 108.5], [523.0, 236.33333333333337], [522.0, 107.0], [521.0, 128.0], [520.0, 331.875], [535.0, 333.6666666666667], [534.0, 650.0], [533.0, 288.5], [531.0, 116.0], [530.0, 116.0], [573.0, 128.5], [574.0, 419.6666666666667], [572.0, 255.75], [571.0, 276.42105263157896], [570.0, 283.3], [569.0, 214.6], [559.0, 81.0], [544.0, 632.0], [547.0, 103.0], [545.0, 154.55555555555554], [551.0, 104.8], [548.0, 323.33333333333337], [555.0, 115.66666666666667], [553.0, 236.55555555555557], [552.0, 159.22222222222223], [562.0, 298.3333333333333], [561.0, 151.0], [560.0, 375.3571428571429], [603.0, 190.0], [593.0, 196.0], [605.0, 130.5], [606.0, 486.0], [592.0, 148.33333333333334], [604.0, 799.0], [602.0, 189.7142857142857], [583.0, 281.0], [582.0, 319.33333333333337], [581.0, 178.66666666666666], [580.0, 110.0], [579.0, 130.0], [578.0, 167.4], [577.0, 355.5], [576.0, 148.75], [591.0, 393.11111111111114], [590.0, 159.66666666666666], [589.0, 150.75], [588.0, 164.0], [587.0, 267.1333333333333], [585.0, 168.0], [597.0, 467.8], [596.0, 209.0], [595.0, 215.0], [622.0, 447.7647058823529], [637.0, 622.4375], [636.0, 427.21052631578954], [635.0, 1094.0], [615.0, 475.8], [613.0, 415.84210526315786], [612.0, 236.6842105263159], [610.0, 160.0], [608.0, 157.42857142857144], [621.0, 1191.6666666666667], [620.0, 775.3000000000001], [619.0, 134.33333333333334], [618.0, 134.33333333333334], [616.0, 2012.5], [668.0, 176.5], [671.0, 820.5], [656.0, 1016.7142857142856], [658.0, 191.0], [657.0, 532.375], [661.0, 1295.5], [660.0, 800.1875000000001], [670.0, 184.0], [669.0, 119.0], [667.0, 837.4444444444445], [665.0, 161.14285714285714], [664.0, 515.7058823529412], [646.0, 169.5], [645.0, 849.0], [643.0, 625.0], [642.0, 196.4], [641.0, 222.33333333333334], [640.0, 325.09999999999997], [655.0, 1260.142857142857], [653.0, 1346.3333333333335], [652.0, 610.0], [650.0, 258.0], [649.0, 401.22222222222223], [648.0, 316.77777777777777], [666.0, 213.5], [663.0, 154.5], [662.0, 175.0], [696.0, 129.66666666666666], [702.0, 490.0], [703.0, 1201.0], [690.0, 653.25], [689.0, 145.0], [700.0, 315.8571428571429], [699.0, 500.75], [697.0, 318.8333333333333], [687.0, 668.5], [672.0, 1200.5], [674.0, 252.3], [673.0, 549.2727272727273], [676.0, 918.3333333333334], [675.0, 375.8571428571429], [679.0, 130.0], [677.0, 140.66666666666666], [686.0, 1141.3333333333333], [685.0, 1094.5], [684.0, 568.2], [683.0, 103.0], [682.0, 589.7333333333333], [681.0, 1261.0], [680.0, 543.0909090909091], [695.0, 515.0], [693.0, 757.9285714285713], [692.0, 869.5714285714286], [691.0, 497.6666666666667], [732.0, 156.0], [735.0, 529.0], [720.0, 390.3333333333333], [722.0, 991.6666666666667], [721.0, 332.8], [725.0, 95.0], [724.0, 576.5555555555555], [734.0, 687.75], [733.0, 497.33333333333337], [730.0, 780.6666666666667], [731.0, 121.0], [729.0, 230.0], [728.0, 112.75], [719.0, 499.5], [704.0, 134.0], [706.0, 913.0], [705.0, 160.0], [709.0, 407.625], [708.0, 659.6666666666666], [711.0, 176.0], [710.0, 391.75], [718.0, 955.375], [717.0, 450.71428571428567], [716.0, 424.25], [715.0, 369.6], [713.0, 803.3333333333334], [727.0, 201.0], [726.0, 169.0], [743.0, 898.8823529411762], [754.0, 512.0], [761.0, 382.75], [760.0, 183.0], [742.0, 460.44444444444446], [741.0, 524.8], [740.0, 929.0], [739.0, 406.14285714285717], [737.0, 1275.5], [736.0, 545.3636363636364], [759.0, 155.0], [758.0, 958.8], [756.0, 564.1428571428571], [753.0, 780.8333333333333], [752.0, 861.3], [750.0, 132.33333333333334], [749.0, 158.75], [747.0, 383.16666666666663], [746.0, 1153.3333333333335], [745.0, 724.5], [744.0, 557.2], [792.0, 124.8], [796.0, 420.0], [799.0, 442.44444444444446], [785.0, 390.1666666666667], [784.0, 115.0], [788.0, 493.18181818181836], [786.0, 596.25], [798.0, 134.0], [797.0, 328.2], [795.0, 671.3636363636365], [794.0, 1019.0], [793.0, 125.66666666666667], [783.0, 152.66666666666666], [769.0, 383.8695652173913], [772.0, 95.0], [771.0, 98.0], [775.0, 121.25], [773.0, 353.5], [782.0, 143.0], [781.0, 109.0], [780.0, 414.3809523809524], [779.0, 147.0], [777.0, 164.0], [776.0, 444.33333333333337], [790.0, 944.3333333333334], [789.0, 685.0], [824.0, 776.6], [830.0, 268.5], [831.0, 226.33333333333331], [816.0, 424.8], [818.0, 412.15384615384613], [817.0, 316.66666666666663], [829.0, 419.49999999999994], [828.0, 494.75], [827.0, 295.0526315789473], [815.0, 120.33333333333333], [801.0, 545.6666666666666], [800.0, 542.6111111111112], [803.0, 440.33333333333337], [802.0, 287.24999999999994], [805.0, 389.3333333333333], [804.0, 278.25], [807.0, 687.8666666666667], [806.0, 500.9], [814.0, 178.0], [813.0, 120.45454545454547], [812.0, 115.0], [809.0, 632.3333333333334], [808.0, 607.1666666666666], [823.0, 412.0], [822.0, 338.5], [820.0, 574.4444444444445], [819.0, 512.1666666666667], [857.0, 71.0], [862.0, 80.25], [863.0, 300.1], [849.0, 76.5], [848.0, 363.16666666666663], [851.0, 319.08000000000004], [850.0, 450.4], [853.0, 85.0], [852.0, 820.5], [861.0, 79.0], [860.0, 474.66666666666663], [858.0, 313.0], [856.0, 201.41666666666666], [839.0, 195.05882352941177], [838.0, 198.16666666666669], [836.0, 237.16666666666666], [835.0, 85.0], [834.0, 352.46153846153845], [833.0, 445.0], [832.0, 419.0217391304347], [847.0, 102.16666666666666], [846.0, 468.6], [845.0, 258.3636363636363], [844.0, 185.0], [842.0, 674.6666666666666], [841.0, 224.5], [840.0, 367.6], [855.0, 191.66666666666666], [854.0, 183.3529411764706], [889.0, 234.0], [894.0, 206.6], [895.0, 318.16666666666663], [881.0, 413.5], [880.0, 237.5], [883.0, 353.0], [882.0, 638.5], [885.0, 573.0], [884.0, 441.4285714285714], [893.0, 493.2], [891.0, 286.5], [890.0, 1771.0], [888.0, 308.75000000000006], [870.0, 317.4117647058824], [869.0, 218.5], [868.0, 205.0], [867.0, 236.3953488372093], [866.0, 159.0], [865.0, 177.25], [864.0, 218.57142857142856], [879.0, 495.77777777777777], [878.0, 328.8], [876.0, 338.19999999999993], [887.0, 487.6666666666667], [886.0, 248.30000000000004], [921.0, 319.0], [926.0, 560.7741935483872], [927.0, 610.0], [913.0, 465.16666666666663], [912.0, 599.090909090909], [916.0, 113.0], [915.0, 449.75], [925.0, 436.25], [924.0, 450.09523809523813], [922.0, 319.125], [920.0, 758.3333333333334], [903.0, 451.6333333333332], [902.0, 545.0], [900.0, 185.5], [899.0, 205.4], [898.0, 619.0000000000001], [897.0, 776.3333333333334], [896.0, 602.2941176470588], [911.0, 446.0000000000001], [910.0, 573.6666666666666], [909.0, 712.0], [908.0, 551.25], [907.0, 385.5], [906.0, 520.2105263157895], [905.0, 491.0], [904.0, 334.0], [919.0, 429.7777777777777], [917.0, 340.25], [958.0, 1169.3529411764705], [948.0, 564.611111111111], [959.0, 494.7037037037037], [944.0, 589.4807692307692], [947.0, 516.6], [946.0, 1026.5], [957.0, 1116.9545454545455], [956.0, 730.9166666666665], [954.0, 939.0], [934.0, 230.57142857142858], [933.0, 891.8], [932.0, 540.8666666666666], [930.0, 1150.0], [929.0, 716.3333333333334], [928.0, 318.09090909090907], [943.0, 541.0], [942.0, 271.6666666666667], [941.0, 239.0], [951.0, 248.66666666666666], [950.0, 884.7], [949.0, 338.7692307692308], [984.0, 660.8666666666667], [988.0, 612.8723404255319], [991.0, 396.37599999999986], [977.0, 393.8666666666666], [976.0, 170.0], [980.0, 254.375], [978.0, 276.70000000000005], [990.0, 477.06666666666655], [989.0, 394.0], [987.0, 757.1666666666666], [986.0, 775.7499999999999], [985.0, 469.0], [975.0, 348.1818181818182], [961.0, 585.4222222222222], [960.0, 361.1428571428571], [963.0, 488.6000000000001], [962.0, 620.4642857142858], [965.0, 246.76470588235293], [964.0, 282.6], [967.0, 807.625], [966.0, 253.0], [974.0, 789.5], [973.0, 375.55555555555554], [971.0, 474.34782608695645], [970.0, 325.41666666666674], [969.0, 283.4], [968.0, 378.0], [983.0, 274.625], [982.0, 264.3333333333333], [1000.0, 1035.3234434704443], [999.0, 314.26153846153863], [998.0, 620.0360824742265], [997.0, 644.7826086956522], [996.0, 914.4888888888889], [995.0, 683.2222222222222], [994.0, 476.6379310344827], [993.0, 314.6], [992.0, 474.61111111111103]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[848.4035000000015, 701.0806999999984]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22333.333333333332, "minX": 1.66956702E12, "maxY": 57666.666666666664, "series": [{"data": [[1.66956702E12, 22333.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956702E12, 57666.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 701.0806999999984, "minX": 1.66956702E12, "maxY": 701.0806999999984, "series": [{"data": [[1.66956702E12, 701.0806999999984]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 700.9435000000016, "minX": 1.66956702E12, "maxY": 700.9435000000016, "series": [{"data": [[1.66956702E12, 700.9435000000016]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.7748999999999987, "minX": 1.66956702E12, "maxY": 0.7748999999999987, "series": [{"data": [[1.66956702E12, 0.7748999999999987]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.66956702E12, "maxY": 4149.0, "series": [{"data": [[1.66956702E12, 4149.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956702E12, 1909.8999999999996]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956702E12, 2969.949999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956702E12, 2223.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956702E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956702E12, 345.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 83.5, "minX": 540.0, "maxY": 1899.0, "series": [{"data": [[2083.0, 319.0], [540.0, 83.5], [659.0, 523.0], [1337.0, 1176.0], [2940.0, 163.0], [1580.0, 517.0], [861.0, 1899.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2940.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 83.5, "minX": 540.0, "maxY": 1897.0, "series": [{"data": [[2083.0, 319.0], [540.0, 83.5], [659.0, 523.0], [1337.0, 1176.0], [2940.0, 163.0], [1580.0, 517.0], [861.0, 1897.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2940.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956702E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956702E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956702E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956702E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

