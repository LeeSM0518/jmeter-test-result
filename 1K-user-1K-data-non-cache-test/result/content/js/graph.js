/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 2756.0, "series": [{"data": [[0.0, 11.0], [0.1, 23.0], [0.2, 35.0], [0.3, 48.0], [0.4, 54.0], [0.5, 65.0], [0.6, 70.0], [0.7, 81.0], [0.8, 84.0], [0.9, 87.0], [1.0, 89.0], [1.1, 93.0], [1.2, 95.0], [1.3, 98.0], [1.4, 99.0], [1.5, 101.0], [1.6, 103.0], [1.7, 104.0], [1.8, 106.0], [1.9, 107.0], [2.0, 108.0], [2.1, 110.0], [2.2, 112.0], [2.3, 114.0], [2.4, 116.0], [2.5, 118.0], [2.6, 121.0], [2.7, 122.0], [2.8, 124.0], [2.9, 126.0], [3.0, 129.0], [3.1, 132.0], [3.2, 134.0], [3.3, 135.0], [3.4, 137.0], [3.5, 139.0], [3.6, 142.0], [3.7, 142.0], [3.8, 144.0], [3.9, 145.0], [4.0, 146.0], [4.1, 148.0], [4.2, 150.0], [4.3, 152.0], [4.4, 153.0], [4.5, 154.0], [4.6, 155.0], [4.7, 156.0], [4.8, 157.0], [4.9, 159.0], [5.0, 160.0], [5.1, 161.0], [5.2, 162.0], [5.3, 162.0], [5.4, 163.0], [5.5, 163.0], [5.6, 164.0], [5.7, 165.0], [5.8, 166.0], [5.9, 167.0], [6.0, 168.0], [6.1, 168.0], [6.2, 170.0], [6.3, 171.0], [6.4, 172.0], [6.5, 172.0], [6.6, 173.0], [6.7, 174.0], [6.8, 175.0], [6.9, 176.0], [7.0, 176.0], [7.1, 177.0], [7.2, 178.0], [7.3, 179.0], [7.4, 179.0], [7.5, 180.0], [7.6, 181.0], [7.7, 182.0], [7.8, 182.0], [7.9, 183.0], [8.0, 183.0], [8.1, 184.0], [8.2, 185.0], [8.3, 185.0], [8.4, 187.0], [8.5, 187.0], [8.6, 188.0], [8.7, 188.0], [8.8, 189.0], [8.9, 190.0], [9.0, 190.0], [9.1, 191.0], [9.2, 191.0], [9.3, 192.0], [9.4, 192.0], [9.5, 193.0], [9.6, 194.0], [9.7, 194.0], [9.8, 195.0], [9.9, 196.0], [10.0, 197.0], [10.1, 198.0], [10.2, 199.0], [10.3, 199.0], [10.4, 200.0], [10.5, 201.0], [10.6, 201.0], [10.7, 202.0], [10.8, 203.0], [10.9, 204.0], [11.0, 204.0], [11.1, 205.0], [11.2, 205.0], [11.3, 206.0], [11.4, 207.0], [11.5, 208.0], [11.6, 208.0], [11.7, 208.0], [11.8, 209.0], [11.9, 210.0], [12.0, 210.0], [12.1, 211.0], [12.2, 212.0], [12.3, 212.0], [12.4, 213.0], [12.5, 213.0], [12.6, 214.0], [12.7, 215.0], [12.8, 216.0], [12.9, 216.0], [13.0, 217.0], [13.1, 217.0], [13.2, 218.0], [13.3, 218.0], [13.4, 219.0], [13.5, 219.0], [13.6, 220.0], [13.7, 220.0], [13.8, 221.0], [13.9, 222.0], [14.0, 222.0], [14.1, 223.0], [14.2, 223.0], [14.3, 224.0], [14.4, 224.0], [14.5, 225.0], [14.6, 225.0], [14.7, 226.0], [14.8, 227.0], [14.9, 228.0], [15.0, 228.0], [15.1, 229.0], [15.2, 230.0], [15.3, 230.0], [15.4, 231.0], [15.5, 231.0], [15.6, 232.0], [15.7, 232.0], [15.8, 233.0], [15.9, 233.0], [16.0, 234.0], [16.1, 234.0], [16.2, 235.0], [16.3, 236.0], [16.4, 236.0], [16.5, 237.0], [16.6, 237.0], [16.7, 237.0], [16.8, 238.0], [16.9, 238.0], [17.0, 239.0], [17.1, 239.0], [17.2, 240.0], [17.3, 240.0], [17.4, 241.0], [17.5, 241.0], [17.6, 241.0], [17.7, 242.0], [17.8, 242.0], [17.9, 242.0], [18.0, 243.0], [18.1, 244.0], [18.2, 244.0], [18.3, 244.0], [18.4, 245.0], [18.5, 245.0], [18.6, 245.0], [18.7, 246.0], [18.8, 246.0], [18.9, 247.0], [19.0, 247.0], [19.1, 247.0], [19.2, 247.0], [19.3, 248.0], [19.4, 248.0], [19.5, 248.0], [19.6, 249.0], [19.7, 249.0], [19.8, 249.0], [19.9, 250.0], [20.0, 250.0], [20.1, 250.0], [20.2, 251.0], [20.3, 251.0], [20.4, 251.0], [20.5, 252.0], [20.6, 252.0], [20.7, 252.0], [20.8, 253.0], [20.9, 253.0], [21.0, 253.0], [21.1, 254.0], [21.2, 254.0], [21.3, 255.0], [21.4, 255.0], [21.5, 255.0], [21.6, 256.0], [21.7, 256.0], [21.8, 256.0], [21.9, 257.0], [22.0, 257.0], [22.1, 257.0], [22.2, 257.0], [22.3, 258.0], [22.4, 258.0], [22.5, 258.0], [22.6, 259.0], [22.7, 259.0], [22.8, 259.0], [22.9, 259.0], [23.0, 259.0], [23.1, 260.0], [23.2, 260.0], [23.3, 260.0], [23.4, 260.0], [23.5, 261.0], [23.6, 261.0], [23.7, 261.0], [23.8, 262.0], [23.9, 263.0], [24.0, 263.0], [24.1, 263.0], [24.2, 264.0], [24.3, 264.0], [24.4, 264.0], [24.5, 265.0], [24.6, 265.0], [24.7, 265.0], [24.8, 266.0], [24.9, 266.0], [25.0, 266.0], [25.1, 267.0], [25.2, 267.0], [25.3, 267.0], [25.4, 267.0], [25.5, 268.0], [25.6, 268.0], [25.7, 268.0], [25.8, 269.0], [25.9, 269.0], [26.0, 269.0], [26.1, 270.0], [26.2, 270.0], [26.3, 270.0], [26.4, 271.0], [26.5, 271.0], [26.6, 271.0], [26.7, 272.0], [26.8, 272.0], [26.9, 272.0], [27.0, 273.0], [27.1, 273.0], [27.2, 273.0], [27.3, 274.0], [27.4, 274.0], [27.5, 274.0], [27.6, 274.0], [27.7, 275.0], [27.8, 275.0], [27.9, 276.0], [28.0, 276.0], [28.1, 276.0], [28.2, 277.0], [28.3, 277.0], [28.4, 277.0], [28.5, 278.0], [28.6, 278.0], [28.7, 278.0], [28.8, 279.0], [28.9, 279.0], [29.0, 280.0], [29.1, 280.0], [29.2, 281.0], [29.3, 281.0], [29.4, 281.0], [29.5, 282.0], [29.6, 282.0], [29.7, 282.0], [29.8, 282.0], [29.9, 283.0], [30.0, 283.0], [30.1, 283.0], [30.2, 284.0], [30.3, 284.0], [30.4, 284.0], [30.5, 284.0], [30.6, 285.0], [30.7, 285.0], [30.8, 285.0], [30.9, 285.0], [31.0, 286.0], [31.1, 286.0], [31.2, 286.0], [31.3, 287.0], [31.4, 287.0], [31.5, 287.0], [31.6, 287.0], [31.7, 288.0], [31.8, 288.0], [31.9, 288.0], [32.0, 289.0], [32.1, 289.0], [32.2, 289.0], [32.3, 290.0], [32.4, 290.0], [32.5, 290.0], [32.6, 291.0], [32.7, 291.0], [32.8, 291.0], [32.9, 292.0], [33.0, 292.0], [33.1, 292.0], [33.2, 293.0], [33.3, 293.0], [33.4, 294.0], [33.5, 294.0], [33.6, 294.0], [33.7, 295.0], [33.8, 295.0], [33.9, 296.0], [34.0, 296.0], [34.1, 296.0], [34.2, 297.0], [34.3, 297.0], [34.4, 297.0], [34.5, 297.0], [34.6, 298.0], [34.7, 298.0], [34.8, 298.0], [34.9, 299.0], [35.0, 300.0], [35.1, 300.0], [35.2, 300.0], [35.3, 300.0], [35.4, 301.0], [35.5, 301.0], [35.6, 301.0], [35.7, 302.0], [35.8, 302.0], [35.9, 303.0], [36.0, 303.0], [36.1, 303.0], [36.2, 304.0], [36.3, 304.0], [36.4, 305.0], [36.5, 305.0], [36.6, 305.0], [36.7, 306.0], [36.8, 306.0], [36.9, 306.0], [37.0, 307.0], [37.1, 307.0], [37.2, 307.0], [37.3, 307.0], [37.4, 308.0], [37.5, 308.0], [37.6, 308.0], [37.7, 309.0], [37.8, 309.0], [37.9, 310.0], [38.0, 310.0], [38.1, 310.0], [38.2, 311.0], [38.3, 311.0], [38.4, 311.0], [38.5, 312.0], [38.6, 312.0], [38.7, 312.0], [38.8, 313.0], [38.9, 313.0], [39.0, 313.0], [39.1, 314.0], [39.2, 314.0], [39.3, 314.0], [39.4, 315.0], [39.5, 315.0], [39.6, 315.0], [39.7, 316.0], [39.8, 316.0], [39.9, 316.0], [40.0, 316.0], [40.1, 317.0], [40.2, 317.0], [40.3, 317.0], [40.4, 318.0], [40.5, 318.0], [40.6, 318.0], [40.7, 319.0], [40.8, 319.0], [40.9, 319.0], [41.0, 320.0], [41.1, 320.0], [41.2, 320.0], [41.3, 321.0], [41.4, 321.0], [41.5, 321.0], [41.6, 321.0], [41.7, 322.0], [41.8, 322.0], [41.9, 322.0], [42.0, 323.0], [42.1, 323.0], [42.2, 323.0], [42.3, 324.0], [42.4, 324.0], [42.5, 325.0], [42.6, 325.0], [42.7, 325.0], [42.8, 326.0], [42.9, 326.0], [43.0, 326.0], [43.1, 327.0], [43.2, 327.0], [43.3, 327.0], [43.4, 327.0], [43.5, 328.0], [43.6, 328.0], [43.7, 329.0], [43.8, 329.0], [43.9, 329.0], [44.0, 330.0], [44.1, 330.0], [44.2, 330.0], [44.3, 331.0], [44.4, 331.0], [44.5, 331.0], [44.6, 331.0], [44.7, 332.0], [44.8, 332.0], [44.9, 333.0], [45.0, 333.0], [45.1, 333.0], [45.2, 334.0], [45.3, 334.0], [45.4, 334.0], [45.5, 335.0], [45.6, 335.0], [45.7, 336.0], [45.8, 336.0], [45.9, 336.0], [46.0, 336.0], [46.1, 336.0], [46.2, 337.0], [46.3, 337.0], [46.4, 338.0], [46.5, 338.0], [46.6, 339.0], [46.7, 339.0], [46.8, 340.0], [46.9, 340.0], [47.0, 340.0], [47.1, 341.0], [47.2, 341.0], [47.3, 342.0], [47.4, 342.0], [47.5, 342.0], [47.6, 343.0], [47.7, 343.0], [47.8, 343.0], [47.9, 344.0], [48.0, 344.0], [48.1, 344.0], [48.2, 344.0], [48.3, 345.0], [48.4, 345.0], [48.5, 346.0], [48.6, 346.0], [48.7, 346.0], [48.8, 347.0], [48.9, 347.0], [49.0, 348.0], [49.1, 348.0], [49.2, 348.0], [49.3, 349.0], [49.4, 349.0], [49.5, 349.0], [49.6, 350.0], [49.7, 350.0], [49.8, 351.0], [49.9, 351.0], [50.0, 351.0], [50.1, 352.0], [50.2, 352.0], [50.3, 352.0], [50.4, 353.0], [50.5, 353.0], [50.6, 353.0], [50.7, 354.0], [50.8, 354.0], [50.9, 354.0], [51.0, 355.0], [51.1, 356.0], [51.2, 356.0], [51.3, 357.0], [51.4, 357.0], [51.5, 358.0], [51.6, 358.0], [51.7, 359.0], [51.8, 359.0], [51.9, 359.0], [52.0, 359.0], [52.1, 360.0], [52.2, 360.0], [52.3, 360.0], [52.4, 361.0], [52.5, 361.0], [52.6, 362.0], [52.7, 362.0], [52.8, 363.0], [52.9, 363.0], [53.0, 364.0], [53.1, 364.0], [53.2, 365.0], [53.3, 365.0], [53.4, 365.0], [53.5, 366.0], [53.6, 366.0], [53.7, 367.0], [53.8, 367.0], [53.9, 367.0], [54.0, 368.0], [54.1, 368.0], [54.2, 368.0], [54.3, 369.0], [54.4, 369.0], [54.5, 370.0], [54.6, 370.0], [54.7, 371.0], [54.8, 371.0], [54.9, 371.0], [55.0, 372.0], [55.1, 372.0], [55.2, 373.0], [55.3, 373.0], [55.4, 373.0], [55.5, 374.0], [55.6, 374.0], [55.7, 375.0], [55.8, 375.0], [55.9, 376.0], [56.0, 376.0], [56.1, 377.0], [56.2, 377.0], [56.3, 377.0], [56.4, 378.0], [56.5, 378.0], [56.6, 379.0], [56.7, 379.0], [56.8, 379.0], [56.9, 380.0], [57.0, 381.0], [57.1, 381.0], [57.2, 381.0], [57.3, 382.0], [57.4, 383.0], [57.5, 383.0], [57.6, 383.0], [57.7, 384.0], [57.8, 384.0], [57.9, 385.0], [58.0, 385.0], [58.1, 385.0], [58.2, 385.0], [58.3, 386.0], [58.4, 386.0], [58.5, 387.0], [58.6, 387.0], [58.7, 388.0], [58.8, 388.0], [58.9, 389.0], [59.0, 389.0], [59.1, 390.0], [59.2, 390.0], [59.3, 391.0], [59.4, 391.0], [59.5, 392.0], [59.6, 392.0], [59.7, 393.0], [59.8, 393.0], [59.9, 393.0], [60.0, 394.0], [60.1, 395.0], [60.2, 395.0], [60.3, 395.0], [60.4, 396.0], [60.5, 396.0], [60.6, 397.0], [60.7, 397.0], [60.8, 398.0], [60.9, 398.0], [61.0, 399.0], [61.1, 399.0], [61.2, 400.0], [61.3, 400.0], [61.4, 400.0], [61.5, 401.0], [61.6, 401.0], [61.7, 402.0], [61.8, 402.0], [61.9, 403.0], [62.0, 403.0], [62.1, 404.0], [62.2, 405.0], [62.3, 405.0], [62.4, 406.0], [62.5, 407.0], [62.6, 407.0], [62.7, 408.0], [62.8, 408.0], [62.9, 409.0], [63.0, 410.0], [63.1, 410.0], [63.2, 411.0], [63.3, 411.0], [63.4, 411.0], [63.5, 412.0], [63.6, 412.0], [63.7, 413.0], [63.8, 413.0], [63.9, 414.0], [64.0, 415.0], [64.1, 416.0], [64.2, 416.0], [64.3, 416.0], [64.4, 417.0], [64.5, 417.0], [64.6, 418.0], [64.7, 418.0], [64.8, 419.0], [64.9, 419.0], [65.0, 420.0], [65.1, 421.0], [65.2, 422.0], [65.3, 422.0], [65.4, 423.0], [65.5, 424.0], [65.6, 425.0], [65.7, 425.0], [65.8, 426.0], [65.9, 426.0], [66.0, 426.0], [66.1, 427.0], [66.2, 428.0], [66.3, 428.0], [66.4, 429.0], [66.5, 429.0], [66.6, 430.0], [66.7, 431.0], [66.8, 432.0], [66.9, 432.0], [67.0, 433.0], [67.1, 433.0], [67.2, 434.0], [67.3, 435.0], [67.4, 435.0], [67.5, 436.0], [67.6, 437.0], [67.7, 438.0], [67.8, 439.0], [67.9, 440.0], [68.0, 440.0], [68.1, 441.0], [68.2, 442.0], [68.3, 443.0], [68.4, 443.0], [68.5, 444.0], [68.6, 445.0], [68.7, 446.0], [68.8, 447.0], [68.9, 448.0], [69.0, 448.0], [69.1, 449.0], [69.2, 450.0], [69.3, 451.0], [69.4, 452.0], [69.5, 453.0], [69.6, 453.0], [69.7, 454.0], [69.8, 454.0], [69.9, 455.0], [70.0, 457.0], [70.1, 458.0], [70.2, 459.0], [70.3, 460.0], [70.4, 461.0], [70.5, 461.0], [70.6, 463.0], [70.7, 464.0], [70.8, 466.0], [70.9, 466.0], [71.0, 467.0], [71.1, 468.0], [71.2, 469.0], [71.3, 471.0], [71.4, 471.0], [71.5, 473.0], [71.6, 474.0], [71.7, 475.0], [71.8, 476.0], [71.9, 477.0], [72.0, 477.0], [72.1, 479.0], [72.2, 479.0], [72.3, 480.0], [72.4, 481.0], [72.5, 482.0], [72.6, 483.0], [72.7, 484.0], [72.8, 485.0], [72.9, 485.0], [73.0, 487.0], [73.1, 488.0], [73.2, 489.0], [73.3, 490.0], [73.4, 491.0], [73.5, 492.0], [73.6, 493.0], [73.7, 494.0], [73.8, 496.0], [73.9, 498.0], [74.0, 499.0], [74.1, 500.0], [74.2, 501.0], [74.3, 503.0], [74.4, 505.0], [74.5, 506.0], [74.6, 506.0], [74.7, 507.0], [74.8, 508.0], [74.9, 509.0], [75.0, 510.0], [75.1, 511.0], [75.2, 512.0], [75.3, 514.0], [75.4, 515.0], [75.5, 516.0], [75.6, 517.0], [75.7, 519.0], [75.8, 520.0], [75.9, 522.0], [76.0, 523.0], [76.1, 526.0], [76.2, 528.0], [76.3, 530.0], [76.4, 531.0], [76.5, 532.0], [76.6, 535.0], [76.7, 537.0], [76.8, 539.0], [76.9, 541.0], [77.0, 542.0], [77.1, 544.0], [77.2, 546.0], [77.3, 548.0], [77.4, 549.0], [77.5, 550.0], [77.6, 553.0], [77.7, 555.0], [77.8, 557.0], [77.9, 559.0], [78.0, 560.0], [78.1, 563.0], [78.2, 564.0], [78.3, 567.0], [78.4, 568.0], [78.5, 569.0], [78.6, 571.0], [78.7, 574.0], [78.8, 577.0], [78.9, 578.0], [79.0, 580.0], [79.1, 581.0], [79.2, 583.0], [79.3, 585.0], [79.4, 587.0], [79.5, 589.0], [79.6, 592.0], [79.7, 593.0], [79.8, 595.0], [79.9, 598.0], [80.0, 599.0], [80.1, 602.0], [80.2, 604.0], [80.3, 606.0], [80.4, 610.0], [80.5, 614.0], [80.6, 617.0], [80.7, 622.0], [80.8, 624.0], [80.9, 626.0], [81.0, 631.0], [81.1, 636.0], [81.2, 641.0], [81.3, 643.0], [81.4, 646.0], [81.5, 649.0], [81.6, 652.0], [81.7, 655.0], [81.8, 658.0], [81.9, 660.0], [82.0, 663.0], [82.1, 666.0], [82.2, 671.0], [82.3, 675.0], [82.4, 679.0], [82.5, 686.0], [82.6, 689.0], [82.7, 693.0], [82.8, 700.0], [82.9, 704.0], [83.0, 708.0], [83.1, 713.0], [83.2, 717.0], [83.3, 719.0], [83.4, 724.0], [83.5, 726.0], [83.6, 730.0], [83.7, 734.0], [83.8, 735.0], [83.9, 739.0], [84.0, 741.0], [84.1, 744.0], [84.2, 750.0], [84.3, 754.0], [84.4, 756.0], [84.5, 759.0], [84.6, 764.0], [84.7, 767.0], [84.8, 770.0], [84.9, 773.0], [85.0, 776.0], [85.1, 781.0], [85.2, 786.0], [85.3, 791.0], [85.4, 799.0], [85.5, 802.0], [85.6, 806.0], [85.7, 811.0], [85.8, 815.0], [85.9, 820.0], [86.0, 823.0], [86.1, 829.0], [86.2, 835.0], [86.3, 845.0], [86.4, 849.0], [86.5, 857.0], [86.6, 865.0], [86.7, 870.0], [86.8, 874.0], [86.9, 886.0], [87.0, 893.0], [87.1, 902.0], [87.2, 911.0], [87.3, 922.0], [87.4, 929.0], [87.5, 934.0], [87.6, 946.0], [87.7, 956.0], [87.8, 971.0], [87.9, 979.0], [88.0, 988.0], [88.1, 996.0], [88.2, 1016.0], [88.3, 1021.0], [88.4, 1037.0], [88.5, 1050.0], [88.6, 1058.0], [88.7, 1075.0], [88.8, 1104.0], [88.9, 1119.0], [89.0, 1129.0], [89.1, 1134.0], [89.2, 1142.0], [89.3, 1149.0], [89.4, 1163.0], [89.5, 1178.0], [89.6, 1192.0], [89.7, 1201.0], [89.8, 1226.0], [89.9, 1251.0], [90.0, 1265.0], [90.1, 1281.0], [90.2, 1288.0], [90.3, 1298.0], [90.4, 1304.0], [90.5, 1308.0], [90.6, 1312.0], [90.7, 1316.0], [90.8, 1320.0], [90.9, 1322.0], [91.0, 1325.0], [91.1, 1329.0], [91.2, 1333.0], [91.3, 1336.0], [91.4, 1340.0], [91.5, 1346.0], [91.6, 1349.0], [91.7, 1353.0], [91.8, 1360.0], [91.9, 1364.0], [92.0, 1372.0], [92.1, 1382.0], [92.2, 1399.0], [92.3, 1409.0], [92.4, 1417.0], [92.5, 1423.0], [92.6, 1428.0], [92.7, 1433.0], [92.8, 1440.0], [92.9, 1447.0], [93.0, 1459.0], [93.1, 1470.0], [93.2, 1478.0], [93.3, 1484.0], [93.4, 1493.0], [93.5, 1511.0], [93.6, 1528.0], [93.7, 1536.0], [93.8, 1545.0], [93.9, 1554.0], [94.0, 1565.0], [94.1, 1577.0], [94.2, 1594.0], [94.3, 1602.0], [94.4, 1611.0], [94.5, 1625.0], [94.6, 1632.0], [94.7, 1637.0], [94.8, 1642.0], [94.9, 1652.0], [95.0, 1658.0], [95.1, 1666.0], [95.2, 1673.0], [95.3, 1681.0], [95.4, 1689.0], [95.5, 1700.0], [95.6, 1706.0], [95.7, 1728.0], [95.8, 1750.0], [95.9, 1782.0], [96.0, 1803.0], [96.1, 1823.0], [96.2, 1846.0], [96.3, 1878.0], [96.4, 1908.0], [96.5, 1930.0], [96.6, 1958.0], [96.7, 1967.0], [96.8, 1976.0], [96.9, 1987.0], [97.0, 2000.0], [97.1, 2015.0], [97.2, 2036.0], [97.3, 2054.0], [97.4, 2067.0], [97.5, 2087.0], [97.6, 2113.0], [97.7, 2131.0], [97.8, 2147.0], [97.9, 2165.0], [98.0, 2183.0], [98.1, 2199.0], [98.2, 2215.0], [98.3, 2225.0], [98.4, 2238.0], [98.5, 2256.0], [98.6, 2277.0], [98.7, 2291.0], [98.8, 2314.0], [98.9, 2336.0], [99.0, 2366.0], [99.1, 2390.0], [99.2, 2421.0], [99.3, 2464.0], [99.4, 2534.0], [99.5, 2569.0], [99.6, 2597.0], [99.7, 2636.0], [99.8, 2685.0], [99.9, 2718.0], [100.0, 2756.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 2619.0, "series": [{"data": [[0.0, 140.0], [600.0, 279.0], [700.0, 263.0], [800.0, 164.0], [900.0, 106.0], [1000.0, 65.0], [1100.0, 86.0], [1200.0, 69.0], [1300.0, 187.0], [1400.0, 122.0], [1500.0, 80.0], [1600.0, 125.0], [100.0, 893.0], [1700.0, 52.0], [1800.0, 39.0], [1900.0, 61.0], [2000.0, 54.0], [2100.0, 58.0], [2200.0, 65.0], [2300.0, 36.0], [2400.0, 25.0], [2500.0, 25.0], [2600.0, 23.0], [2700.0, 15.0], [200.0, 2466.0], [300.0, 2619.0], [400.0, 1285.0], [500.0, 598.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 657.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7416.0, "series": [{"data": [[0.0, 7416.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1927.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 657.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 907.8137999999994, "minX": 1.66956486E12, "maxY": 907.8137999999994, "series": [{"data": [[1.66956486E12, 907.8137999999994]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956486E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 641.1806066176457, "series": [{"data": [[2.0, 18.0], [3.0, 19.0], [4.0, 12.0], [5.0, 17.0], [6.0, 13.0], [7.0, 11.0], [8.0, 11.0], [9.0, 13.0], [10.0, 25.0], [13.0, 40.666666666666664], [19.0, 38.0], [20.0, 45.0], [21.0, 35.0], [23.0, 30.5], [24.0, 27.0], [25.0, 51.0], [27.0, 28.0], [29.0, 27.0], [30.0, 24.0], [31.0, 34.5], [37.0, 82.25], [38.0, 141.5], [40.0, 53.0], [41.0, 83.0], [43.0, 150.85714285714286], [42.0, 101.0], [45.0, 87.5], [46.0, 108.33333333333334], [48.0, 75.66666666666667], [50.0, 51.5], [53.0, 112.0], [55.0, 144.5], [54.0, 130.75], [57.0, 173.5], [59.0, 83.0], [58.0, 227.0], [60.0, 49.5], [86.0, 241.0], [85.0, 211.0], [88.0, 129.33333333333334], [94.0, 156.82608695652172], [95.0, 159.85714285714283], [93.0, 109.0], [99.0, 165.5], [96.0, 183.0], [103.0, 177.0], [102.0, 142.66666666666666], [100.0, 219.5], [107.0, 211.0], [106.0, 224.0], [105.0, 232.0], [110.0, 204.0], [109.0, 213.33333333333334], [108.0, 241.0], [115.0, 114.0], [113.0, 215.5], [112.0, 235.0], [117.0, 229.0], [116.0, 229.0], [127.0, 213.5], [126.0, 182.55555555555554], [124.0, 179.5], [135.0, 226.75], [133.0, 225.0], [132.0, 160.75], [131.0, 194.0], [130.0, 183.5], [129.0, 145.0], [143.0, 188.66666666666666], [142.0, 213.0], [140.0, 205.0], [137.0, 99.0], [136.0, 224.0], [151.0, 175.33333333333334], [148.0, 195.6], [146.0, 188.0], [145.0, 164.0], [157.0, 183.0], [156.0, 151.0], [155.0, 180.0], [154.0, 219.0], [153.0, 167.0], [167.0, 203.0], [165.0, 81.0], [164.0, 177.0], [175.0, 182.5], [173.0, 185.5], [171.0, 205.0], [170.0, 150.1818181818182], [169.0, 168.75], [182.0, 140.0], [181.0, 116.0], [180.0, 159.66666666666666], [178.0, 163.0], [177.0, 161.0], [191.0, 162.5], [190.0, 70.0], [189.0, 192.0], [188.0, 192.0], [187.0, 162.33333333333334], [184.0, 174.66666666666666], [199.0, 122.0], [197.0, 189.0], [196.0, 183.5], [195.0, 152.0], [194.0, 155.0], [193.0, 153.0], [192.0, 123.0], [206.0, 179.0], [205.0, 182.0], [203.0, 180.0], [202.0, 191.0], [201.0, 192.0], [200.0, 144.0], [215.0, 180.0], [214.0, 185.0], [212.0, 181.0], [211.0, 188.0], [210.0, 194.0], [209.0, 192.5], [208.0, 174.0], [231.0, 174.83333333333334], [230.0, 178.7692307692308], [228.0, 170.5], [226.0, 173.0], [238.0, 177.5], [237.0, 188.33333333333334], [236.0, 164.0], [235.0, 170.16666666666666], [234.0, 163.0], [233.0, 171.5], [232.0, 185.0], [247.0, 162.0], [246.0, 176.57142857142858], [245.0, 163.0], [254.0, 168.0], [252.0, 173.0], [251.0, 179.33333333333334], [250.0, 189.0], [248.0, 163.66666666666666], [249.0, 156.0], [270.0, 238.25], [271.0, 183.0], [269.0, 200.66666666666666], [259.0, 156.0], [258.0, 153.0], [257.0, 198.0], [256.0, 165.0], [267.0, 185.5], [266.0, 169.0], [264.0, 197.0], [263.0, 194.0], [262.0, 187.0], [261.0, 161.0], [260.0, 205.0], [285.0, 173.0], [287.0, 172.5], [284.0, 231.0], [283.0, 166.0], [282.0, 198.66666666666666], [280.0, 186.0], [279.0, 189.0], [278.0, 224.6], [273.0, 218.33333333333334], [272.0, 175.0], [294.0, 120.0], [292.0, 207.0], [291.0, 226.0], [290.0, 208.71428571428572], [289.0, 183.0], [288.0, 284.0], [333.0, 151.0], [335.0, 204.25], [330.0, 142.09999999999997], [334.0, 137.0], [329.0, 185.0], [341.0, 97.0], [338.0, 175.2], [337.0, 165.0], [336.0, 138.0], [339.0, 241.0], [364.0, 130.0], [367.0, 136.64285714285717], [361.0, 145.42857142857142], [360.0, 156.66666666666666], [358.0, 164.2], [366.0, 97.0], [354.0, 144.19512195121945], [355.0, 226.83333333333334], [356.0, 151.0], [373.0, 166.0], [376.0, 209.0], [372.0, 199.5], [371.0, 169.5], [368.0, 88.0], [397.0, 134.33333333333334], [399.0, 180.33333333333334], [396.0, 110.0], [393.0, 188.0], [392.0, 155.13333333333333], [386.0, 151.5], [391.0, 140.0], [384.0, 169.45454545454547], [385.0, 182.0], [415.0, 176.0], [401.0, 184.0], [400.0, 124.0], [430.0, 354.0], [431.0, 244.5], [428.0, 213.8], [418.0, 163.0], [417.0, 194.83333333333331], [416.0, 217.6], [427.0, 191.66666666666666], [426.0, 214.33333333333334], [423.0, 257.5], [424.0, 166.0], [422.0, 196.8], [420.0, 164.66666666666666], [444.0, 308.0], [446.0, 192.0666666666667], [441.0, 205.0], [445.0, 148.5], [439.0, 234.33333333333334], [432.0, 250.0], [436.0, 130.33333333333334], [438.0, 162.0], [435.0, 152.0], [433.0, 114.0], [463.0, 201.0], [473.0, 222.0], [475.0, 264.0], [478.0, 222.0], [471.0, 194.0], [479.0, 175.5], [482.0, 208.62962962962962], [504.0, 251.64285714285714], [503.0, 163.0], [519.0, 250.25], [531.0, 298.0], [535.0, 280.8], [536.0, 229.0], [530.0, 257.0], [518.0, 253.11111111111111], [569.0, 262.0], [568.0, 256.0], [573.0, 285.5], [571.0, 139.0], [555.0, 262.5], [554.0, 201.0], [553.0, 243.64285714285714], [552.0, 243.96341463414632], [550.0, 208.75], [551.0, 228.33333333333331], [589.0, 275.0], [607.0, 352.6], [588.0, 289.3333333333333], [586.0, 247.2], [585.0, 314.75], [584.0, 377.0], [583.0, 295.0], [581.0, 197.8], [579.0, 311.0], [578.0, 249.91666666666663], [633.0, 403.0], [638.0, 333.3333333333333], [639.0, 229.0], [625.0, 266.14285714285717], [624.0, 305.5], [636.0, 251.5], [635.0, 344.2], [634.0, 272.3333333333333], [632.0, 294.875], [615.0, 268.0], [613.0, 337.0], [612.0, 264.0], [611.0, 229.0], [610.0, 309.0], [609.0, 314.44444444444446], [608.0, 297.1428571428571], [623.0, 370.5], [622.0, 300.5], [621.0, 210.0], [620.0, 245.0], [619.0, 352.0], [618.0, 330.0], [617.0, 242.0], [616.0, 340.1666666666667], [627.0, 267.3333333333333], [626.0, 348.0], [660.0, 331.3333333333333], [670.0, 259.0], [671.0, 289.25], [657.0, 407.4], [656.0, 378.5], [659.0, 315.4], [658.0, 313.42307692307696], [669.0, 319.6666666666667], [666.0, 297.6666666666667], [665.0, 198.0], [646.0, 273.5], [645.0, 301.99999999999994], [644.0, 352.0], [643.0, 439.6], [641.0, 321.8], [640.0, 196.0], [663.0, 244.0], [662.0, 336.87499999999994], [661.0, 400.0], [700.0, 196.0], [703.0, 276.5], [689.0, 294.0], [692.0, 250.33333333333334], [690.0, 303.5], [702.0, 285.6666666666667], [701.0, 290.5], [699.0, 221.0], [698.0, 231.8], [697.0, 272.5], [696.0, 366.0], [687.0, 294.57142857142856], [679.0, 314.3], [685.0, 286.6666666666667], [682.0, 253.5], [681.0, 289.6666666666667], [680.0, 351.0], [695.0, 366.0], [694.0, 214.0], [730.0, 258.0], [734.0, 262.5], [735.0, 282.6666666666667], [721.0, 330.375], [720.0, 336.6666666666667], [733.0, 328.6666666666667], [731.0, 312.0], [732.0, 235.0], [719.0, 332.5625], [705.0, 231.66666666666666], [704.0, 282.0], [707.0, 267.25], [706.0, 149.0], [711.0, 277.44444444444446], [710.0, 177.0], [718.0, 315.0], [717.0, 425.0], [716.0, 311.0], [715.0, 370.75], [714.0, 310.0], [713.0, 298.0], [712.0, 293.8571428571429], [726.0, 322.5], [725.0, 442.75], [723.0, 353.0], [722.0, 343.0], [756.0, 260.5], [766.0, 335.5862068965518], [761.0, 279.5], [742.0, 278.0], [740.0, 297.0], [736.0, 326.6666666666667], [759.0, 306.75], [758.0, 322.6666666666667], [757.0, 280.0], [755.0, 329.1176470588235], [754.0, 297.0], [750.0, 297.0], [749.0, 293.0], [748.0, 346.2], [747.0, 286.0], [745.0, 326.0], [792.0, 394.3333333333333], [798.0, 385.0], [799.0, 365.5], [784.0, 330.0], [786.0, 362.0], [785.0, 308.6153846153846], [797.0, 278.0], [796.0, 271.5], [794.0, 324.3], [783.0, 373.75], [769.0, 354.2857142857143], [771.0, 298.3333333333333], [770.0, 306.5], [773.0, 292.0], [772.0, 280.0], [775.0, 288.6666666666667], [774.0, 304.0], [782.0, 347.25], [781.0, 361.18749999999994], [779.0, 330.875], [778.0, 250.0], [777.0, 331.5], [776.0, 282.0], [791.0, 292.0], [790.0, 280.0], [789.0, 298.0], [788.0, 307.5], [830.0, 336.0], [819.0, 344.1666666666667], [831.0, 307.7142857142857], [816.0, 370.79999999999995], [829.0, 426.0], [824.0, 371.5], [815.0, 354.0], [805.0, 345.3157894736842], [807.0, 436.5], [806.0, 332.8181818181818], [814.0, 392.55172413793105], [813.0, 294.0], [812.0, 363.57142857142856], [811.0, 365.2857142857143], [810.0, 276.5], [808.0, 362.0], [822.0, 346.6], [821.0, 277.0], [820.0, 354.0], [818.0, 415.3333333333333], [817.0, 343.875], [857.0, 210.33333333333334], [861.0, 208.0], [863.0, 277.6], [849.0, 311.0], [848.0, 228.77777777777777], [851.0, 271.625], [850.0, 250.66666666666666], [853.0, 213.0], [852.0, 257.4], [860.0, 232.33333333333334], [858.0, 260.2], [859.0, 210.0], [856.0, 306.1111111111111], [838.0, 303.6666666666667], [837.0, 260.0], [836.0, 311.7142857142857], [835.0, 344.8], [834.0, 307.77777777777777], [833.0, 348.0322580645162], [832.0, 297.8], [847.0, 230.0], [846.0, 314.0], [845.0, 313.7272727272727], [844.0, 318.99999999999994], [843.0, 315.0909090909091], [842.0, 297.25], [841.0, 250.0], [840.0, 333.0], [855.0, 267.6], [854.0, 247.4], [894.0, 165.0], [884.0, 234.5], [895.0, 236.0], [881.0, 225.66666666666666], [880.0, 209.25], [893.0, 225.57142857142858], [891.0, 145.0], [879.0, 227.0], [864.0, 271.66666666666663], [866.0, 246.0], [865.0, 245.25], [868.0, 206.6875], [867.0, 215.33333333333334], [871.0, 251.5], [870.0, 276.3333333333333], [878.0, 216.16666666666666], [877.0, 237.0], [876.0, 244.14285714285714], [875.0, 260.2], [874.0, 221.5], [873.0, 235.33333333333334], [887.0, 183.5], [886.0, 225.0], [885.0, 249.5], [883.0, 203.44444444444443], [882.0, 263.0], [921.0, 251.25], [926.0, 236.08], [927.0, 256.33333333333326], [912.0, 184.33333333333334], [915.0, 133.33333333333334], [913.0, 173.5], [925.0, 164.4], [924.0, 320.0], [923.0, 206.78947368421052], [911.0, 245.33333333333334], [897.0, 245.33333333333334], [896.0, 269.0833333333333], [901.0, 219.0], [900.0, 239.69999999999996], [903.0, 265.6], [902.0, 198.25], [910.0, 139.5], [909.0, 158.66666666666666], [908.0, 180.5], [907.0, 207.75], [906.0, 188.5], [905.0, 187.0], [904.0, 190.0], [919.0, 211.875], [918.0, 212.57142857142856], [917.0, 202.0], [916.0, 196.66666666666666], [954.0, 252.0], [958.0, 369.5], [959.0, 369.47058823529414], [944.0, 303.9310344827586], [946.0, 332.43243243243245], [945.0, 284.0], [949.0, 375.79999999999995], [947.0, 350.0], [957.0, 295.33333333333337], [956.0, 302.3333333333333], [955.0, 347.5263157894737], [952.0, 385.8], [935.0, 286.6666666666667], [934.0, 369.3333333333333], [932.0, 304.5], [931.0, 448.0], [930.0, 355.46666666666664], [929.0, 343.1111111111111], [928.0, 194.45454545454544], [943.0, 270.5], [942.0, 339.42857142857144], [941.0, 296.7], [940.0, 279.09999999999997], [939.0, 311.6046511627908], [938.0, 189.0], [936.0, 307.90476190476187], [937.0, 485.0], [951.0, 323.11111111111114], [950.0, 338.95], [984.0, 310.16666666666663], [988.0, 357.15000000000003], [991.0, 334.7647058823529], [978.0, 331.53125000000006], [976.0, 263.6666666666667], [980.0, 298.2], [979.0, 347.0], [990.0, 296.2222222222223], [989.0, 333.92307692307696], [987.0, 334.2], [986.0, 326.5], [985.0, 334.5], [975.0, 362.69999999999993], [960.0, 338.5], [962.0, 386.77777777777777], [961.0, 409.0], [965.0, 397.5], [964.0, 376.6666666666667], [967.0, 349.4285714285714], [966.0, 400.85714285714283], [974.0, 336.7586206896552], [973.0, 322.8], [972.0, 369.2307692307693], [971.0, 323.94117647058823], [970.0, 362.75], [969.0, 401.0], [968.0, 365.375], [983.0, 299.6818181818183], [982.0, 293.0952380952381], [1000.0, 641.1806066176457], [999.0, 334.35294117647067], [998.0, 374.2704918032788], [997.0, 432.9310344827586], [996.0, 403.7272727272727], [995.0, 404.62686567164184], [994.0, 398.49367088607596], [993.0, 339.83333333333326], [992.0, 383.54545454545456], [1.0, 23.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[907.8136000000001, 518.4911999999998]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22333.333333333332, "minX": 1.66956486E12, "maxY": 50000.0, "series": [{"data": [[1.66956486E12, 22333.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956486E12, 50000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956486E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 518.4911999999998, "minX": 1.66956486E12, "maxY": 518.4911999999998, "series": [{"data": [[1.66956486E12, 518.4911999999998]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956486E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 518.4078999999998, "minX": 1.66956486E12, "maxY": 518.4078999999998, "series": [{"data": [[1.66956486E12, 518.4078999999998]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956486E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.7113000000000039, "minX": 1.66956486E12, "maxY": 0.7113000000000039, "series": [{"data": [[1.66956486E12, 0.7113000000000039]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956486E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.66956486E12, "maxY": 2756.0, "series": [{"data": [[1.66956486E12, 2756.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956486E12, 1265.8999999999996]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956486E12, 2367.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956486E12, 1658.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956486E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956486E12, 351.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956486E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 231.0, "minX": 853.0, "maxY": 1417.0, "series": [{"data": [[2127.0, 457.0], [2338.0, 371.0], [3077.0, 326.0], [1605.0, 231.0], [853.0, 1417.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3077.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 231.0, "minX": 853.0, "maxY": 1416.0, "series": [{"data": [[2127.0, 457.0], [2338.0, 371.0], [3077.0, 326.0], [1605.0, 231.0], [853.0, 1416.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3077.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956486E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956486E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956486E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956486E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956486E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956486E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956486E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956486E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956486E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956486E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956486E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

