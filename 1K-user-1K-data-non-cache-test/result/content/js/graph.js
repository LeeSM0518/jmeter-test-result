/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 5876.0, "series": [{"data": [[0.0, 22.0], [0.1, 25.0], [0.2, 29.0], [0.3, 31.0], [0.4, 33.0], [0.5, 34.0], [0.6, 38.0], [0.7, 39.0], [0.8, 39.0], [0.9, 40.0], [1.0, 40.0], [1.1, 40.0], [1.2, 41.0], [1.3, 41.0], [1.4, 42.0], [1.5, 42.0], [1.6, 42.0], [1.7, 43.0], [1.8, 44.0], [1.9, 46.0], [2.0, 46.0], [2.1, 47.0], [2.2, 47.0], [2.3, 47.0], [2.4, 47.0], [2.5, 48.0], [2.6, 48.0], [2.7, 48.0], [2.8, 48.0], [2.9, 48.0], [3.0, 48.0], [3.1, 48.0], [3.2, 48.0], [3.3, 49.0], [3.4, 49.0], [3.5, 49.0], [3.6, 49.0], [3.7, 49.0], [3.8, 49.0], [3.9, 49.0], [4.0, 49.0], [4.1, 50.0], [4.2, 50.0], [4.3, 50.0], [4.4, 50.0], [4.5, 50.0], [4.6, 50.0], [4.7, 51.0], [4.8, 51.0], [4.9, 51.0], [5.0, 52.0], [5.1, 53.0], [5.2, 53.0], [5.3, 53.0], [5.4, 54.0], [5.5, 54.0], [5.6, 54.0], [5.7, 54.0], [5.8, 54.0], [5.9, 55.0], [6.0, 55.0], [6.1, 55.0], [6.2, 55.0], [6.3, 55.0], [6.4, 55.0], [6.5, 55.0], [6.6, 55.0], [6.7, 55.0], [6.8, 56.0], [6.9, 56.0], [7.0, 56.0], [7.1, 56.0], [7.2, 56.0], [7.3, 56.0], [7.4, 56.0], [7.5, 56.0], [7.6, 56.0], [7.7, 56.0], [7.8, 56.0], [7.9, 56.0], [8.0, 56.0], [8.1, 56.0], [8.2, 57.0], [8.3, 57.0], [8.4, 57.0], [8.5, 57.0], [8.6, 57.0], [8.7, 57.0], [8.8, 57.0], [8.9, 57.0], [9.0, 57.0], [9.1, 57.0], [9.2, 57.0], [9.3, 58.0], [9.4, 58.0], [9.5, 58.0], [9.6, 58.0], [9.7, 58.0], [9.8, 58.0], [9.9, 58.0], [10.0, 58.0], [10.1, 59.0], [10.2, 59.0], [10.3, 59.0], [10.4, 59.0], [10.5, 60.0], [10.6, 60.0], [10.7, 60.0], [10.8, 61.0], [10.9, 61.0], [11.0, 61.0], [11.1, 62.0], [11.2, 62.0], [11.3, 62.0], [11.4, 62.0], [11.5, 62.0], [11.6, 62.0], [11.7, 62.0], [11.8, 63.0], [11.9, 63.0], [12.0, 63.0], [12.1, 63.0], [12.2, 63.0], [12.3, 63.0], [12.4, 63.0], [12.5, 63.0], [12.6, 63.0], [12.7, 63.0], [12.8, 63.0], [12.9, 64.0], [13.0, 64.0], [13.1, 64.0], [13.2, 64.0], [13.3, 64.0], [13.4, 64.0], [13.5, 64.0], [13.6, 64.0], [13.7, 64.0], [13.8, 64.0], [13.9, 64.0], [14.0, 64.0], [14.1, 64.0], [14.2, 65.0], [14.3, 65.0], [14.4, 65.0], [14.5, 65.0], [14.6, 65.0], [14.7, 65.0], [14.8, 65.0], [14.9, 65.0], [15.0, 65.0], [15.1, 66.0], [15.2, 66.0], [15.3, 66.0], [15.4, 66.0], [15.5, 66.0], [15.6, 67.0], [15.7, 67.0], [15.8, 67.0], [15.9, 67.0], [16.0, 67.0], [16.1, 68.0], [16.2, 68.0], [16.3, 69.0], [16.4, 69.0], [16.5, 69.0], [16.6, 70.0], [16.7, 70.0], [16.8, 70.0], [16.9, 70.0], [17.0, 70.0], [17.1, 70.0], [17.2, 70.0], [17.3, 71.0], [17.4, 71.0], [17.5, 71.0], [17.6, 71.0], [17.7, 71.0], [17.8, 71.0], [17.9, 71.0], [18.0, 71.0], [18.1, 72.0], [18.2, 72.0], [18.3, 72.0], [18.4, 72.0], [18.5, 72.0], [18.6, 72.0], [18.7, 72.0], [18.8, 73.0], [18.9, 73.0], [19.0, 73.0], [19.1, 73.0], [19.2, 73.0], [19.3, 73.0], [19.4, 74.0], [19.5, 74.0], [19.6, 74.0], [19.7, 75.0], [19.8, 75.0], [19.9, 75.0], [20.0, 76.0], [20.1, 77.0], [20.2, 77.0], [20.3, 77.0], [20.4, 78.0], [20.5, 78.0], [20.6, 78.0], [20.7, 78.0], [20.8, 79.0], [20.9, 79.0], [21.0, 79.0], [21.1, 79.0], [21.2, 80.0], [21.3, 80.0], [21.4, 80.0], [21.5, 80.0], [21.6, 80.0], [21.7, 81.0], [21.8, 81.0], [21.9, 81.0], [22.0, 81.0], [22.1, 82.0], [22.2, 82.0], [22.3, 83.0], [22.4, 83.0], [22.5, 84.0], [22.6, 84.0], [22.7, 85.0], [22.8, 85.0], [22.9, 86.0], [23.0, 86.0], [23.1, 87.0], [23.2, 87.0], [23.3, 87.0], [23.4, 88.0], [23.5, 88.0], [23.6, 89.0], [23.7, 89.0], [23.8, 90.0], [23.9, 91.0], [24.0, 92.0], [24.1, 93.0], [24.2, 93.0], [24.3, 94.0], [24.4, 95.0], [24.5, 95.0], [24.6, 96.0], [24.7, 96.0], [24.8, 97.0], [24.9, 98.0], [25.0, 98.0], [25.1, 100.0], [25.2, 101.0], [25.3, 102.0], [25.4, 103.0], [25.5, 104.0], [25.6, 104.0], [25.7, 106.0], [25.8, 107.0], [25.9, 108.0], [26.0, 110.0], [26.1, 111.0], [26.2, 112.0], [26.3, 112.0], [26.4, 114.0], [26.5, 115.0], [26.6, 117.0], [26.7, 119.0], [26.8, 121.0], [26.9, 123.0], [27.0, 124.0], [27.1, 125.0], [27.2, 127.0], [27.3, 128.0], [27.4, 130.0], [27.5, 132.0], [27.6, 133.0], [27.7, 135.0], [27.8, 136.0], [27.9, 137.0], [28.0, 140.0], [28.1, 141.0], [28.2, 144.0], [28.3, 145.0], [28.4, 148.0], [28.5, 149.0], [28.6, 151.0], [28.7, 152.0], [28.8, 154.0], [28.9, 156.0], [29.0, 159.0], [29.1, 161.0], [29.2, 163.0], [29.3, 165.0], [29.4, 167.0], [29.5, 169.0], [29.6, 172.0], [29.7, 174.0], [29.8, 176.0], [29.9, 178.0], [30.0, 180.0], [30.1, 183.0], [30.2, 185.0], [30.3, 186.0], [30.4, 189.0], [30.5, 192.0], [30.6, 194.0], [30.7, 197.0], [30.8, 200.0], [30.9, 202.0], [31.0, 204.0], [31.1, 206.0], [31.2, 207.0], [31.3, 209.0], [31.4, 212.0], [31.5, 214.0], [31.6, 216.0], [31.7, 219.0], [31.8, 221.0], [31.9, 222.0], [32.0, 224.0], [32.1, 225.0], [32.2, 228.0], [32.3, 231.0], [32.4, 234.0], [32.5, 237.0], [32.6, 240.0], [32.7, 241.0], [32.8, 244.0], [32.9, 247.0], [33.0, 249.0], [33.1, 251.0], [33.2, 253.0], [33.3, 255.0], [33.4, 258.0], [33.5, 260.0], [33.6, 263.0], [33.7, 267.0], [33.8, 268.0], [33.9, 270.0], [34.0, 273.0], [34.1, 274.0], [34.2, 278.0], [34.3, 280.0], [34.4, 281.0], [34.5, 285.0], [34.6, 288.0], [34.7, 291.0], [34.8, 295.0], [34.9, 296.0], [35.0, 298.0], [35.1, 301.0], [35.2, 304.0], [35.3, 306.0], [35.4, 309.0], [35.5, 313.0], [35.6, 314.0], [35.7, 319.0], [35.8, 320.0], [35.9, 321.0], [36.0, 323.0], [36.1, 326.0], [36.2, 331.0], [36.3, 333.0], [36.4, 336.0], [36.5, 338.0], [36.6, 344.0], [36.7, 345.0], [36.8, 349.0], [36.9, 352.0], [37.0, 356.0], [37.1, 359.0], [37.2, 361.0], [37.3, 364.0], [37.4, 367.0], [37.5, 369.0], [37.6, 373.0], [37.7, 375.0], [37.8, 377.0], [37.9, 380.0], [38.0, 382.0], [38.1, 386.0], [38.2, 389.0], [38.3, 391.0], [38.4, 392.0], [38.5, 395.0], [38.6, 398.0], [38.7, 399.0], [38.8, 401.0], [38.9, 404.0], [39.0, 407.0], [39.1, 408.0], [39.2, 411.0], [39.3, 414.0], [39.4, 418.0], [39.5, 420.0], [39.6, 424.0], [39.7, 427.0], [39.8, 430.0], [39.9, 432.0], [40.0, 434.0], [40.1, 435.0], [40.2, 440.0], [40.3, 441.0], [40.4, 448.0], [40.5, 449.0], [40.6, 452.0], [40.7, 456.0], [40.8, 459.0], [40.9, 464.0], [41.0, 466.0], [41.1, 471.0], [41.2, 472.0], [41.3, 474.0], [41.4, 476.0], [41.5, 479.0], [41.6, 480.0], [41.7, 482.0], [41.8, 487.0], [41.9, 488.0], [42.0, 490.0], [42.1, 493.0], [42.2, 495.0], [42.3, 497.0], [42.4, 500.0], [42.5, 502.0], [42.6, 503.0], [42.7, 505.0], [42.8, 506.0], [42.9, 511.0], [43.0, 513.0], [43.1, 516.0], [43.2, 519.0], [43.3, 520.0], [43.4, 521.0], [43.5, 522.0], [43.6, 525.0], [43.7, 528.0], [43.8, 529.0], [43.9, 530.0], [44.0, 534.0], [44.1, 536.0], [44.2, 540.0], [44.3, 542.0], [44.4, 546.0], [44.5, 549.0], [44.6, 552.0], [44.7, 553.0], [44.8, 558.0], [44.9, 560.0], [45.0, 565.0], [45.1, 568.0], [45.2, 573.0], [45.3, 578.0], [45.4, 582.0], [45.5, 586.0], [45.6, 587.0], [45.7, 591.0], [45.8, 593.0], [45.9, 595.0], [46.0, 596.0], [46.1, 601.0], [46.2, 606.0], [46.3, 609.0], [46.4, 612.0], [46.5, 613.0], [46.6, 616.0], [46.7, 620.0], [46.8, 622.0], [46.9, 623.0], [47.0, 628.0], [47.1, 631.0], [47.2, 637.0], [47.3, 640.0], [47.4, 642.0], [47.5, 646.0], [47.6, 650.0], [47.7, 653.0], [47.8, 657.0], [47.9, 660.0], [48.0, 664.0], [48.1, 668.0], [48.2, 671.0], [48.3, 675.0], [48.4, 677.0], [48.5, 681.0], [48.6, 683.0], [48.7, 685.0], [48.8, 689.0], [48.9, 692.0], [49.0, 696.0], [49.1, 700.0], [49.2, 703.0], [49.3, 707.0], [49.4, 708.0], [49.5, 711.0], [49.6, 713.0], [49.7, 716.0], [49.8, 718.0], [49.9, 721.0], [50.0, 724.0], [50.1, 729.0], [50.2, 731.0], [50.3, 736.0], [50.4, 737.0], [50.5, 740.0], [50.6, 741.0], [50.7, 743.0], [50.8, 745.0], [50.9, 748.0], [51.0, 751.0], [51.1, 755.0], [51.2, 757.0], [51.3, 760.0], [51.4, 762.0], [51.5, 765.0], [51.6, 768.0], [51.7, 775.0], [51.8, 777.0], [51.9, 782.0], [52.0, 784.0], [52.1, 787.0], [52.2, 791.0], [52.3, 794.0], [52.4, 797.0], [52.5, 801.0], [52.6, 804.0], [52.7, 808.0], [52.8, 810.0], [52.9, 812.0], [53.0, 814.0], [53.1, 816.0], [53.2, 818.0], [53.3, 821.0], [53.4, 823.0], [53.5, 826.0], [53.6, 827.0], [53.7, 829.0], [53.8, 831.0], [53.9, 833.0], [54.0, 835.0], [54.1, 839.0], [54.2, 842.0], [54.3, 847.0], [54.4, 849.0], [54.5, 851.0], [54.6, 855.0], [54.7, 857.0], [54.8, 859.0], [54.9, 865.0], [55.0, 869.0], [55.1, 872.0], [55.2, 873.0], [55.3, 876.0], [55.4, 879.0], [55.5, 881.0], [55.6, 882.0], [55.7, 886.0], [55.8, 887.0], [55.9, 891.0], [56.0, 892.0], [56.1, 894.0], [56.2, 898.0], [56.3, 902.0], [56.4, 904.0], [56.5, 908.0], [56.6, 910.0], [56.7, 912.0], [56.8, 915.0], [56.9, 917.0], [57.0, 919.0], [57.1, 925.0], [57.2, 926.0], [57.3, 929.0], [57.4, 933.0], [57.5, 936.0], [57.6, 937.0], [57.7, 940.0], [57.8, 943.0], [57.9, 946.0], [58.0, 950.0], [58.1, 953.0], [58.2, 957.0], [58.3, 960.0], [58.4, 962.0], [58.5, 964.0], [58.6, 964.0], [58.7, 967.0], [58.8, 969.0], [58.9, 970.0], [59.0, 971.0], [59.1, 973.0], [59.2, 975.0], [59.3, 978.0], [59.4, 982.0], [59.5, 986.0], [59.6, 990.0], [59.7, 994.0], [59.8, 996.0], [59.9, 999.0], [60.0, 1001.0], [60.1, 1003.0], [60.2, 1005.0], [60.3, 1009.0], [60.4, 1012.0], [60.5, 1015.0], [60.6, 1019.0], [60.7, 1021.0], [60.8, 1025.0], [60.9, 1029.0], [61.0, 1033.0], [61.1, 1035.0], [61.2, 1039.0], [61.3, 1043.0], [61.4, 1047.0], [61.5, 1051.0], [61.6, 1056.0], [61.7, 1058.0], [61.8, 1062.0], [61.9, 1064.0], [62.0, 1071.0], [62.1, 1073.0], [62.2, 1076.0], [62.3, 1082.0], [62.4, 1087.0], [62.5, 1091.0], [62.6, 1093.0], [62.7, 1098.0], [62.8, 1099.0], [62.9, 1102.0], [63.0, 1105.0], [63.1, 1108.0], [63.2, 1116.0], [63.3, 1120.0], [63.4, 1126.0], [63.5, 1131.0], [63.6, 1134.0], [63.7, 1137.0], [63.8, 1140.0], [63.9, 1145.0], [64.0, 1148.0], [64.1, 1152.0], [64.2, 1156.0], [64.3, 1160.0], [64.4, 1166.0], [64.5, 1170.0], [64.6, 1175.0], [64.7, 1179.0], [64.8, 1183.0], [64.9, 1188.0], [65.0, 1190.0], [65.1, 1196.0], [65.2, 1199.0], [65.3, 1203.0], [65.4, 1207.0], [65.5, 1210.0], [65.6, 1212.0], [65.7, 1214.0], [65.8, 1217.0], [65.9, 1219.0], [66.0, 1221.0], [66.1, 1224.0], [66.2, 1228.0], [66.3, 1230.0], [66.4, 1233.0], [66.5, 1235.0], [66.6, 1237.0], [66.7, 1241.0], [66.8, 1246.0], [66.9, 1249.0], [67.0, 1253.0], [67.1, 1256.0], [67.2, 1261.0], [67.3, 1264.0], [67.4, 1268.0], [67.5, 1272.0], [67.6, 1273.0], [67.7, 1276.0], [67.8, 1279.0], [67.9, 1283.0], [68.0, 1288.0], [68.1, 1294.0], [68.2, 1298.0], [68.3, 1300.0], [68.4, 1304.0], [68.5, 1307.0], [68.6, 1311.0], [68.7, 1314.0], [68.8, 1319.0], [68.9, 1321.0], [69.0, 1324.0], [69.1, 1328.0], [69.2, 1330.0], [69.3, 1331.0], [69.4, 1338.0], [69.5, 1339.0], [69.6, 1344.0], [69.7, 1347.0], [69.8, 1352.0], [69.9, 1355.0], [70.0, 1359.0], [70.1, 1361.0], [70.2, 1364.0], [70.3, 1367.0], [70.4, 1369.0], [70.5, 1372.0], [70.6, 1375.0], [70.7, 1377.0], [70.8, 1380.0], [70.9, 1383.0], [71.0, 1385.0], [71.1, 1387.0], [71.2, 1392.0], [71.3, 1395.0], [71.4, 1401.0], [71.5, 1403.0], [71.6, 1407.0], [71.7, 1409.0], [71.8, 1413.0], [71.9, 1418.0], [72.0, 1423.0], [72.1, 1427.0], [72.2, 1433.0], [72.3, 1435.0], [72.4, 1441.0], [72.5, 1444.0], [72.6, 1451.0], [72.7, 1452.0], [72.8, 1458.0], [72.9, 1463.0], [73.0, 1469.0], [73.1, 1472.0], [73.2, 1474.0], [73.3, 1476.0], [73.4, 1481.0], [73.5, 1484.0], [73.6, 1489.0], [73.7, 1492.0], [73.8, 1495.0], [73.9, 1498.0], [74.0, 1501.0], [74.1, 1506.0], [74.2, 1509.0], [74.3, 1513.0], [74.4, 1516.0], [74.5, 1520.0], [74.6, 1522.0], [74.7, 1527.0], [74.8, 1530.0], [74.9, 1535.0], [75.0, 1542.0], [75.1, 1545.0], [75.2, 1549.0], [75.3, 1554.0], [75.4, 1558.0], [75.5, 1564.0], [75.6, 1567.0], [75.7, 1571.0], [75.8, 1574.0], [75.9, 1577.0], [76.0, 1581.0], [76.1, 1586.0], [76.2, 1591.0], [76.3, 1595.0], [76.4, 1599.0], [76.5, 1604.0], [76.6, 1610.0], [76.7, 1614.0], [76.8, 1618.0], [76.9, 1620.0], [77.0, 1626.0], [77.1, 1630.0], [77.2, 1637.0], [77.3, 1644.0], [77.4, 1645.0], [77.5, 1651.0], [77.6, 1654.0], [77.7, 1660.0], [77.8, 1663.0], [77.9, 1667.0], [78.0, 1669.0], [78.1, 1674.0], [78.2, 1679.0], [78.3, 1688.0], [78.4, 1693.0], [78.5, 1700.0], [78.6, 1705.0], [78.7, 1711.0], [78.8, 1715.0], [78.9, 1716.0], [79.0, 1719.0], [79.1, 1725.0], [79.2, 1731.0], [79.3, 1735.0], [79.4, 1741.0], [79.5, 1745.0], [79.6, 1748.0], [79.7, 1750.0], [79.8, 1754.0], [79.9, 1759.0], [80.0, 1763.0], [80.1, 1767.0], [80.2, 1772.0], [80.3, 1779.0], [80.4, 1785.0], [80.5, 1792.0], [80.6, 1794.0], [80.7, 1801.0], [80.8, 1805.0], [80.9, 1811.0], [81.0, 1816.0], [81.1, 1819.0], [81.2, 1822.0], [81.3, 1830.0], [81.4, 1837.0], [81.5, 1841.0], [81.6, 1849.0], [81.7, 1854.0], [81.8, 1859.0], [81.9, 1870.0], [82.0, 1873.0], [82.1, 1878.0], [82.2, 1888.0], [82.3, 1893.0], [82.4, 1902.0], [82.5, 1913.0], [82.6, 1919.0], [82.7, 1929.0], [82.8, 1937.0], [82.9, 1950.0], [83.0, 1962.0], [83.1, 1974.0], [83.2, 1989.0], [83.3, 1998.0], [83.4, 2003.0], [83.5, 2012.0], [83.6, 2022.0], [83.7, 2027.0], [83.8, 2035.0], [83.9, 2043.0], [84.0, 2050.0], [84.1, 2057.0], [84.2, 2068.0], [84.3, 2076.0], [84.4, 2085.0], [84.5, 2094.0], [84.6, 2101.0], [84.7, 2105.0], [84.8, 2113.0], [84.9, 2122.0], [85.0, 2127.0], [85.1, 2134.0], [85.2, 2137.0], [85.3, 2144.0], [85.4, 2148.0], [85.5, 2154.0], [85.6, 2162.0], [85.7, 2167.0], [85.8, 2175.0], [85.9, 2180.0], [86.0, 2186.0], [86.1, 2193.0], [86.2, 2198.0], [86.3, 2206.0], [86.4, 2212.0], [86.5, 2225.0], [86.6, 2239.0], [86.7, 2242.0], [86.8, 2249.0], [86.9, 2257.0], [87.0, 2265.0], [87.1, 2273.0], [87.2, 2280.0], [87.3, 2288.0], [87.4, 2297.0], [87.5, 2304.0], [87.6, 2306.0], [87.7, 2315.0], [87.8, 2318.0], [87.9, 2323.0], [88.0, 2332.0], [88.1, 2337.0], [88.2, 2348.0], [88.3, 2355.0], [88.4, 2360.0], [88.5, 2371.0], [88.6, 2383.0], [88.7, 2390.0], [88.8, 2402.0], [88.9, 2409.0], [89.0, 2416.0], [89.1, 2424.0], [89.2, 2429.0], [89.3, 2441.0], [89.4, 2450.0], [89.5, 2459.0], [89.6, 2471.0], [89.7, 2476.0], [89.8, 2483.0], [89.9, 2489.0], [90.0, 2500.0], [90.1, 2506.0], [90.2, 2512.0], [90.3, 2520.0], [90.4, 2526.0], [90.5, 2534.0], [90.6, 2551.0], [90.7, 2562.0], [90.8, 2576.0], [90.9, 2583.0], [91.0, 2589.0], [91.1, 2600.0], [91.2, 2606.0], [91.3, 2617.0], [91.4, 2623.0], [91.5, 2630.0], [91.6, 2638.0], [91.7, 2642.0], [91.8, 2654.0], [91.9, 2662.0], [92.0, 2682.0], [92.1, 2689.0], [92.2, 2702.0], [92.3, 2716.0], [92.4, 2735.0], [92.5, 2746.0], [92.6, 2754.0], [92.7, 2768.0], [92.8, 2779.0], [92.9, 2797.0], [93.0, 2805.0], [93.1, 2819.0], [93.2, 2830.0], [93.3, 2845.0], [93.4, 2866.0], [93.5, 2887.0], [93.6, 2905.0], [93.7, 2928.0], [93.8, 2938.0], [93.9, 2947.0], [94.0, 2965.0], [94.1, 2983.0], [94.2, 3009.0], [94.3, 3028.0], [94.4, 3039.0], [94.5, 3051.0], [94.6, 3071.0], [94.7, 3090.0], [94.8, 3117.0], [94.9, 3153.0], [95.0, 3163.0], [95.1, 3186.0], [95.2, 3199.0], [95.3, 3215.0], [95.4, 3223.0], [95.5, 3239.0], [95.6, 3263.0], [95.7, 3284.0], [95.8, 3309.0], [95.9, 3324.0], [96.0, 3348.0], [96.1, 3391.0], [96.2, 3415.0], [96.3, 3454.0], [96.4, 3472.0], [96.5, 3492.0], [96.6, 3515.0], [96.7, 3540.0], [96.8, 3557.0], [96.9, 3580.0], [97.0, 3611.0], [97.1, 3640.0], [97.2, 3653.0], [97.3, 3677.0], [97.4, 3702.0], [97.5, 3720.0], [97.6, 3735.0], [97.7, 3745.0], [97.8, 3773.0], [97.9, 3787.0], [98.0, 3820.0], [98.1, 3846.0], [98.2, 3901.0], [98.3, 3956.0], [98.4, 3991.0], [98.5, 4033.0], [98.6, 4090.0], [98.7, 4127.0], [98.8, 4178.0], [98.9, 4215.0], [99.0, 4269.0], [99.1, 4304.0], [99.2, 4315.0], [99.3, 4372.0], [99.4, 4396.0], [99.5, 4448.0], [99.6, 4563.0], [99.7, 4662.0], [99.8, 4701.0], [99.9, 5573.0], [100.0, 5876.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2506.0, "series": [{"data": [[0.0, 2506.0], [600.0, 305.0], [700.0, 337.0], [800.0, 379.0], [900.0, 370.0], [1000.0, 285.0], [1100.0, 240.0], [1200.0, 305.0], [1300.0, 311.0], [1400.0, 262.0], [1500.0, 245.0], [1600.0, 206.0], [1700.0, 218.0], [1800.0, 171.0], [1900.0, 94.0], [2000.0, 125.0], [2100.0, 163.0], [2300.0, 133.0], [2200.0, 123.0], [2400.0, 123.0], [2500.0, 110.0], [2600.0, 109.0], [2700.0, 73.0], [2800.0, 62.0], [2900.0, 60.0], [3000.0, 64.0], [3100.0, 44.0], [3200.0, 55.0], [3300.0, 37.0], [3400.0, 38.0], [3500.0, 45.0], [3600.0, 43.0], [3700.0, 56.0], [3800.0, 24.0], [3900.0, 22.0], [4000.0, 21.0], [4100.0, 26.0], [4200.0, 19.0], [4300.0, 33.0], [4500.0, 10.0], [4600.0, 16.0], [4400.0, 13.0], [4700.0, 4.0], [5400.0, 2.0], [5500.0, 5.0], [5600.0, 3.0], [5700.0, 2.0], [5800.0, 5.0], [100.0, 573.0], [200.0, 429.0], [300.0, 363.0], [400.0, 368.0], [500.0, 365.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 854.5084999999989, "minX": 1.66956852E12, "maxY": 854.5084999999989, "series": [{"data": [[1.66956852E12, 854.5084999999989]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956852E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 3.0, "maxY": 1786.1248927038632, "series": [{"data": [[3.0, 24.5], [4.0, 24.5], [6.0, 35.0], [7.0, 23.0], [9.0, 24.0], [10.0, 28.0], [12.0, 27.5], [13.0, 33.0], [14.0, 33.5], [16.0, 32.0], [17.0, 51.99999999999999], [18.0, 39.0], [19.0, 39.0], [20.0, 45.0], [21.0, 56.0], [23.0, 39.0], [24.0, 44.0], [25.0, 63.0], [27.0, 42.5], [28.0, 57.5], [31.0, 59.285714285714285], [33.0, 58.66666666666667], [35.0, 64.0], [34.0, 52.333333333333336], [37.0, 65.0], [39.0, 64.5], [38.0, 59.0], [41.0, 57.0], [40.0, 65.0], [43.0, 66.33333333333333], [42.0, 75.0], [45.0, 88.0], [47.0, 70.0], [46.0, 64.66666666666666], [49.0, 76.0], [48.0, 69.0], [51.0, 84.0], [50.0, 67.125], [53.0, 81.33333333333333], [52.0, 65.33333333333333], [55.0, 71.0], [54.0, 72.0], [57.0, 65.5], [59.0, 68.25], [60.0, 72.0], [63.0, 77.33333333333333], [62.0, 78.0], [67.0, 74.4], [66.0, 72.5], [65.0, 70.0], [64.0, 72.66666666666667], [70.0, 81.2], [69.0, 85.0], [75.0, 75.0], [73.0, 89.5], [72.0, 71.0], [78.0, 59.5], [77.0, 66.33333333333333], [76.0, 67.77777777777777], [83.0, 83.0], [82.0, 74.0], [81.0, 78.5], [87.0, 134.0], [85.0, 131.42857142857144], [84.0, 128.25], [91.0, 98.66666666666667], [90.0, 102.5], [89.0, 121.4], [88.0, 127.0], [95.0, 177.5], [94.0, 55.83333333333333], [93.0, 53.0], [92.0, 75.0], [99.0, 285.0], [98.0, 223.0], [97.0, 75.0], [96.0, 144.66666666666666], [103.0, 273.0], [102.0, 174.16666666666666], [100.0, 251.33333333333331], [107.0, 228.14285714285714], [106.0, 205.0], [105.0, 260.0], [104.0, 227.0], [110.0, 194.83333333333334], [109.0, 235.83333333333331], [108.0, 133.66666666666666], [115.0, 150.33333333333334], [114.0, 197.0], [113.0, 198.5], [112.0, 163.55555555555554], [119.0, 195.5], [118.0, 187.0], [117.0, 193.0], [123.0, 160.0], [122.0, 167.0], [121.0, 175.0], [120.0, 192.0], [125.0, 175.0], [135.0, 141.5], [132.0, 103.5], [131.0, 154.0], [143.0, 106.5], [142.0, 106.0], [140.0, 108.0], [139.0, 124.0], [138.0, 120.0], [137.0, 61.0], [136.0, 101.0], [151.0, 66.25], [148.0, 61.0], [147.0, 76.0], [145.0, 64.0], [159.0, 532.0], [158.0, 531.25], [157.0, 546.3636363636363], [156.0, 575.0], [155.0, 424.75], [154.0, 71.0], [153.0, 56.0], [152.0, 60.0], [167.0, 378.5], [166.0, 500.5], [164.0, 269.25], [163.0, 502.0], [162.0, 53.0], [161.0, 520.75], [160.0, 537.0], [175.0, 451.5], [173.0, 451.3333333333333], [171.0, 471.0], [170.0, 331.44444444444446], [169.0, 311.2], [183.0, 240.0], [182.0, 178.66666666666669], [181.0, 440.0], [180.0, 431.5], [179.0, 435.0], [178.0, 71.0], [177.0, 255.5], [176.0, 333.0], [190.0, 275.6666666666667], [188.0, 361.0], [187.0, 398.0], [186.0, 391.0], [185.0, 400.0], [184.0, 396.5], [199.0, 201.0], [198.0, 296.0], [197.0, 335.0], [196.0, 219.5], [195.0, 343.0], [194.0, 302.2], [193.0, 367.5], [192.0, 393.0], [207.0, 280.0], [206.0, 399.0], [205.0, 295.0], [204.0, 300.0], [203.0, 399.0], [202.0, 320.0], [201.0, 337.5], [215.0, 56.5], [213.0, 165.0], [211.0, 270.0], [210.0, 276.5], [209.0, 176.0], [208.0, 168.5], [223.0, 254.0], [222.0, 80.0], [220.0, 162.5], [221.0, 71.0], [218.0, 263.0], [217.0, 272.0], [216.0, 270.0], [231.0, 223.0], [230.0, 248.0], [228.0, 224.0], [226.0, 195.0], [224.0, 155.0], [239.0, 195.33333333333334], [238.0, 207.0], [237.0, 141.5], [236.0, 216.0], [235.0, 193.0], [233.0, 214.0], [232.0, 228.75], [247.0, 143.2857142857143], [246.0, 136.0], [245.0, 175.0], [244.0, 180.5], [243.0, 150.0], [242.0, 76.0], [241.0, 198.66666666666666], [255.0, 62.333333333333336], [254.0, 128.0], [253.0, 115.0], [252.0, 91.5], [251.0, 113.0], [250.0, 152.0], [249.0, 155.5], [248.0, 150.0], [269.0, 763.75], [270.0, 717.5714285714286], [268.0, 68.0], [258.0, 87.0], [257.0, 85.5], [256.0, 48.0], [267.0, 377.33333333333337], [266.0, 56.0], [265.0, 70.0], [264.0, 69.5], [263.0, 1022.0], [262.0, 86.5], [260.0, 86.0], [286.0, 911.5], [287.0, 915.0], [285.0, 920.0999999999999], [284.0, 57.0], [283.0, 491.5], [282.0, 938.6666666666666], [280.0, 492.5], [278.0, 54.0], [273.0, 836.0], [272.0, 807.7272727272726], [275.0, 501.0], [274.0, 957.5], [277.0, 940.3333333333333], [276.0, 732.0], [291.0, 794.2608695652174], [301.0, 718.5], [303.0, 295.66666666666663], [300.0, 663.6], [290.0, 768.5714285714286], [289.0, 898.25], [298.0, 824.25], [297.0, 552.0], [295.0, 839.0], [294.0, 434.0], [293.0, 40.0], [292.0, 431.0], [318.0, 528.3333333333334], [319.0, 749.0], [317.0, 760.6666666666666], [316.0, 783.0], [315.0, 760.0], [314.0, 408.5], [313.0, 673.0], [312.0, 290.0], [311.0, 776.0], [304.0, 802.3333333333334], [307.0, 784.0], [306.0, 424.75], [310.0, 801.0], [309.0, 791.0], [308.0, 798.0], [334.0, 688.0], [335.0, 70.0], [333.0, 689.6666666666666], [332.0, 447.0], [331.0, 703.0], [330.0, 385.0], [328.0, 506.0], [327.0, 724.5], [321.0, 743.0], [320.0, 746.0], [323.0, 567.0], [322.0, 522.3333333333334], [326.0, 714.25], [325.0, 55.0], [351.0, 635.0], [348.0, 66.0], [337.0, 530.5], [347.0, 654.2], [346.0, 656.0], [345.0, 662.0], [344.0, 460.0], [343.0, 214.5], [341.0, 671.0], [340.0, 469.16666666666663], [365.0, 586.0], [366.0, 408.0], [364.0, 493.2], [355.0, 439.6666666666667], [354.0, 348.5], [353.0, 357.5], [363.0, 389.4], [361.0, 615.5], [360.0, 625.6666666666666], [359.0, 434.6666666666667], [358.0, 640.0], [357.0, 631.0], [356.0, 635.5], [381.0, 536.0], [383.0, 300.0], [380.0, 308.0], [368.0, 575.0], [379.0, 553.0], [378.0, 212.0], [376.0, 552.0], [375.0, 470.6], [373.0, 333.5], [372.0, 450.25], [396.0, 421.0], [398.0, 518.0], [399.0, 457.0], [397.0, 411.0], [394.0, 458.0], [393.0, 343.6666666666667], [391.0, 429.8], [388.0, 187.66666666666669], [386.0, 274.0], [385.0, 534.5], [384.0, 477.0], [415.0, 55.0], [413.0, 407.0], [402.0, 409.7142857142857], [411.0, 322.16666666666663], [410.0, 88.0], [409.0, 455.0], [408.0, 396.5], [407.0, 438.3333333333333], [406.0, 382.0], [404.0, 444.2], [419.0, 453.3333333333333], [430.0, 411.0], [429.0, 397.6666666666667], [427.0, 455.5], [426.0, 256.5], [424.0, 261.5], [423.0, 262.0], [422.0, 440.4], [421.0, 393.5], [418.0, 364.0], [417.0, 496.0], [416.0, 433.5], [435.0, 367.6666666666667], [445.0, 286.0], [444.0, 306.0], [434.0, 330.25], [432.0, 301.0], [443.0, 306.0], [442.0, 312.0], [440.0, 312.0], [439.0, 312.0], [438.0, 331.0], [437.0, 173.2], [436.0, 355.0], [462.0, 260.0], [463.0, 114.25], [461.0, 268.0], [460.0, 252.0], [458.0, 254.66666666666666], [457.0, 264.75], [456.0, 268.0], [455.0, 141.4], [448.0, 299.0], [451.0, 185.5], [450.0, 252.0], [454.0, 270.3333333333333], [453.0, 213.0], [452.0, 281.0], [477.0, 175.0], [479.0, 177.0], [476.0, 187.0], [466.0, 173.33333333333334], [465.0, 57.0], [475.0, 194.0], [474.0, 195.33333333333334], [473.0, 133.5], [472.0, 196.0], [469.0, 174.5], [468.0, 214.33333333333334], [494.0, 74.85714285714286], [495.0, 91.0], [493.0, 76.83333333333333], [492.0, 58.333333333333336], [491.0, 115.0], [490.0, 109.33333333333333], [489.0, 92.5], [487.0, 136.6], [481.0, 169.0], [480.0, 179.0], [483.0, 158.5], [482.0, 160.0], [486.0, 146.0], [485.0, 142.2], [510.0, 670.0], [511.0, 1288.3333333333333], [509.0, 1297.857142857143], [508.0, 1217.0714285714287], [507.0, 866.7272727272726], [506.0, 60.0], [504.0, 695.0], [503.0, 687.5], [496.0, 925.1000000000001], [499.0, 1376.0], [498.0, 720.0], [502.0, 707.0], [501.0, 916.0], [500.0, 977.7058823529412], [537.0, 588.0], [542.0, 1136.3333333333333], [543.0, 321.75], [529.0, 54.0], [528.0, 807.3333333333334], [532.0, 426.6666666666667], [530.0, 1066.909090909091], [540.0, 868.75], [539.0, 1144.0], [538.0, 1143.8], [536.0, 789.3333333333334], [519.0, 853.6666666666666], [518.0, 1047.0], [516.0, 859.4444444444443], [514.0, 52.0], [513.0, 57.0], [512.0, 665.0], [527.0, 1028.0], [526.0, 1209.25], [525.0, 1212.5], [524.0, 1221.5], [523.0, 930.25], [522.0, 1059.1428571428573], [521.0, 451.0], [535.0, 785.8333333333334], [534.0, 65.5], [569.0, 1004.5], [574.0, 511.6666666666667], [575.0, 49.0], [560.0, 53.0], [564.0, 1030.0], [561.0, 705.0], [573.0, 49.0], [571.0, 974.5], [570.0, 979.2857142857142], [568.0, 1000.4545454545455], [550.0, 968.0], [549.0, 1092.3333333333333], [547.0, 1100.0], [546.0, 871.7777777777778], [559.0, 394.6666666666667], [558.0, 1042.25], [557.0, 803.5], [556.0, 1058.0], [555.0, 564.5], [554.0, 1052.0], [553.0, 902.1666666666666], [552.0, 395.0], [566.0, 1018.5], [565.0, 55.0], [606.0, 430.0], [607.0, 314.3333333333333], [592.0, 894.0], [594.0, 644.4285714285714], [593.0, 881.0], [605.0, 566.6666666666667], [603.0, 825.5], [602.0, 64.0], [600.0, 749.5], [591.0, 610.0], [577.0, 964.0], [576.0, 961.3333333333334], [579.0, 958.5], [578.0, 952.0], [583.0, 930.6], [582.0, 927.0], [590.0, 259.5], [587.0, 916.0], [585.0, 917.0], [584.0, 911.0], [599.0, 859.0], [597.0, 858.0], [596.0, 580.1111111111111], [595.0, 869.0], [632.0, 507.33333333333337], [637.0, 446.6666666666667], [639.0, 644.0], [624.0, 726.6666666666666], [627.0, 744.0], [625.0, 745.25], [635.0, 529.25], [634.0, 540.5], [633.0, 702.5], [622.0, 754.5], [609.0, 472.0], [611.0, 819.0], [610.0, 818.0], [613.0, 812.5], [612.0, 564.1666666666667], [615.0, 791.0], [614.0, 445.25], [621.0, 543.1666666666666], [620.0, 549.3333333333334], [617.0, 775.6], [631.0, 107.0], [630.0, 708.375], [629.0, 717.0], [628.0, 731.1666666666667], [670.0, 528.0], [671.0, 510.5], [656.0, 238.33333333333331], [658.0, 506.8888888888888], [657.0, 455.25], [660.0, 529.0], [659.0, 469.125], [669.0, 508.0], [668.0, 354.0], [666.0, 363.6666666666667], [665.0, 516.5], [664.0, 54.0], [645.0, 622.0], [644.0, 615.1428571428572], [643.0, 625.25], [641.0, 632.0], [640.0, 352.0], [655.0, 192.75], [653.0, 600.7777777777778], [651.0, 595.6666666666666], [650.0, 172.4], [663.0, 407.5], [662.0, 437.2], [700.0, 307.4], [703.0, 288.0], [688.0, 417.0], [690.0, 332.6], [689.0, 355.5], [692.0, 310.18181818181813], [691.0, 393.3333333333333], [702.0, 68.5], [701.0, 306.0], [699.0, 180.0], [698.0, 215.6], [697.0, 322.4210526315789], [696.0, 176.6], [687.0, 337.5], [673.0, 56.0], [672.0, 488.0], [677.0, 495.6666666666667], [674.0, 493.6666666666667], [679.0, 480.0], [678.0, 356.6666666666667], [686.0, 359.4], [685.0, 339.8888888888889], [684.0, 326.33333333333337], [683.0, 51.0], [682.0, 343.66666666666663], [681.0, 511.0], [680.0, 267.0], [695.0, 210.75], [694.0, 214.5], [732.0, 75.66666666666667], [735.0, 518.4705882352941], [721.0, 116.9090909090909], [720.0, 133.33333333333334], [723.0, 130.25], [722.0, 93.53846153846155], [725.0, 91.33333333333333], [724.0, 113.5], [734.0, 62.375], [733.0, 68.0], [731.0, 68.0], [730.0, 87.5], [729.0, 109.0], [728.0, 85.0], [719.0, 159.76923076923077], [704.0, 277.3636363636364], [706.0, 188.66666666666666], [705.0, 209.75], [709.0, 73.0], [707.0, 156.5], [711.0, 255.0], [710.0, 137.2], [718.0, 192.0], [717.0, 188.5], [716.0, 145.75000000000003], [714.0, 218.8], [713.0, 235.875], [712.0, 226.0], [727.0, 111.0], [726.0, 89.0], [764.0, 1216.4], [767.0, 975.1999999999999], [753.0, 674.0], [752.0, 806.6], [755.0, 1119.5], [754.0, 671.5], [757.0, 1003.6428571428572], [756.0, 861.6666666666666], [766.0, 1206.0], [765.0, 1206.5], [763.0, 637.5], [762.0, 938.4999999999999], [761.0, 449.33333333333337], [760.0, 936.125], [751.0, 825.4250000000001], [736.0, 1247.6363636363635], [739.0, 570.8333333333333], [737.0, 924.1428571428572], [741.0, 1341.4285714285713], [740.0, 803.5], [743.0, 947.375], [742.0, 1199.5714285714287], [749.0, 703.5], [748.0, 970.4102564102565], [746.0, 1358.6956521739132], [745.0, 1134.111111111111], [744.0, 1031.1153846153845], [759.0, 1042.1666666666667], [758.0, 56.0], [796.0, 554.4], [799.0, 691.2], [784.0, 554.0], [787.0, 759.0434782608694], [785.0, 792.8333333333333], [789.0, 959.0], [788.0, 668.4444444444446], [798.0, 858.4], [797.0, 256.0], [795.0, 890.0], [794.0, 778.8571428571429], [793.0, 548.7894736842105], [792.0, 917.75], [783.0, 691.3636363636364], [768.0, 994.9999999999999], [770.0, 897.9230769230769], [769.0, 521.6], [772.0, 900.0], [771.0, 338.00000000000006], [774.0, 668.8333333333334], [773.0, 1099.0], [782.0, 672.0], [781.0, 397.6666666666667], [780.0, 663.0], [779.0, 1072.2], [777.0, 1072.0], [776.0, 836.875], [791.0, 767.8181818181819], [790.0, 869.0909090909091], [825.0, 554.8], [830.0, 421.6], [831.0, 445.0], [817.0, 468.5], [816.0, 715.6], [820.0, 542.5], [818.0, 374.75], [829.0, 536.4], [827.0, 667.0], [826.0, 504.45454545454544], [824.0, 437.6], [807.0, 649.5], [805.0, 570.3333333333334], [804.0, 442.5], [803.0, 68.0], [802.0, 578.0], [800.0, 547.375], [815.0, 589.1111111111111], [813.0, 70.0], [812.0, 652.5333333333333], [811.0, 670.2857142857142], [810.0, 631.0], [809.0, 766.0], [808.0, 47.0], [823.0, 687.5], [821.0, 277.6666666666667], [858.0, 224.4], [862.0, 469.3333333333333], [863.0, 468.0], [848.0, 553.0], [850.0, 535.3333333333334], [849.0, 560.0], [853.0, 379.25], [851.0, 471.6363636363637], [861.0, 479.0], [860.0, 476.0], [859.0, 274.0], [856.0, 408.6], [839.0, 519.5714285714286], [838.0, 532.1249999999999], [837.0, 59.0], [836.0, 611.5], [835.0, 545.375], [833.0, 637.1666666666666], [847.0, 389.83333333333337], [844.0, 468.2], [843.0, 291.6666666666667], [842.0, 320.75], [841.0, 580.5], [840.0, 457.75], [855.0, 496.0], [854.0, 505.0], [892.0, 132.0909090909091], [895.0, 137.0], [880.0, 184.5], [882.0, 288.4166666666667], [881.0, 320.5], [884.0, 234.5], [883.0, 234.14285714285714], [894.0, 128.88888888888889], [893.0, 130.72727272727272], [891.0, 176.6], [890.0, 229.0], [889.0, 184.66666666666666], [888.0, 155.5], [879.0, 187.5], [865.0, 437.20000000000005], [864.0, 388.6666666666667], [867.0, 416.5], [866.0, 434.0], [869.0, 311.5], [868.0, 422.0], [871.0, 317.0], [870.0, 26.0], [878.0, 246.83333333333331], [877.0, 226.28571428571428], [876.0, 375.5], [875.0, 343.5], [874.0, 387.71428571428567], [873.0, 401.0], [872.0, 40.0], [886.0, 160.36363636363637], [885.0, 184.6], [924.0, 1393.2222222222224], [927.0, 252.42857142857142], [913.0, 1575.0], [912.0, 1377.571428571429], [915.0, 1221.888888888889], [914.0, 755.4444444444445], [917.0, 1344.4444444444446], [916.0, 1168.4375], [926.0, 958.263157894737], [925.0, 1390.8], [923.0, 1416.25], [922.0, 1436.0], [921.0, 984.3333333333334], [920.0, 1135.0], [911.0, 1113.7777777777778], [897.0, 105.0], [896.0, 103.2], [899.0, 73.83333333333333], [898.0, 103.84210526315788], [901.0, 1235.6666666666665], [900.0, 63.0], [903.0, 1039.7], [902.0, 1284.4130434782612], [910.0, 1480.0], [909.0, 694.0434782608696], [908.0, 72.0], [907.0, 885.5], [906.0, 862.0], [905.0, 1353.6000000000001], [904.0, 710.8], [919.0, 1140.4399999999998], [918.0, 1492.625], [952.0, 389.0], [958.0, 628.1546391752579], [959.0, 521.9032258064516], [945.0, 636.4444444444445], [944.0, 692.6], [947.0, 850.7777777777778], [946.0, 821.25], [957.0, 552.4000000000001], [955.0, 627.698113207547], [953.0, 986.75], [943.0, 808.0], [929.0, 716.0], [928.0, 724.5], [931.0, 1152.875], [930.0, 919.48], [933.0, 674.0], [932.0, 986.25], [935.0, 950.1904761904763], [934.0, 1059.1379310344828], [942.0, 803.3076923076924], [941.0, 525.5714285714286], [940.0, 1056.55], [938.0, 738.6], [937.0, 1093.0], [936.0, 1205.25], [951.0, 988.0], [950.0, 771.375], [949.0, 905.2666666666665], [948.0, 728.0555555555555], [988.0, 523.8690476190475], [991.0, 417.72727272727275], [977.0, 1011.2105263157894], [976.0, 1031.1481481481478], [979.0, 652.3703703703704], [978.0, 1064.0746268656717], [981.0, 826.8275862068969], [980.0, 461.3333333333333], [990.0, 374.92156862745094], [989.0, 488.3636363636364], [987.0, 519.4285714285714], [986.0, 797.0], [985.0, 712.0], [984.0, 821.25], [975.0, 1128.7207207207207], [961.0, 486.41666666666674], [960.0, 545.7096774193546], [963.0, 443.33333333333337], [962.0, 498.26086956521743], [965.0, 425.0], [964.0, 431.49999999999994], [967.0, 309.8], [966.0, 371.9318181818182], [974.0, 1145.8888888888887], [973.0, 907.5140562249004], [972.0, 142.43589743589746], [971.0, 158.32000000000002], [970.0, 195.02127659574467], [969.0, 132.25], [968.0, 260.88888888888886], [983.0, 802.53125], [982.0, 722.4411764705883], [1000.0, 1786.1248927038632], [999.0, 1189.5156164383566], [998.0, 1283.3684210526317], [997.0, 1220.0463215258847], [996.0, 138.93333333333337], [995.0, 246.00588235294111], [994.0, 384.08333333333337], [993.0, 326.76923076923083], [992.0, 323.03703703703695]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[854.508399999999, 1011.6608999999983]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 43166.666666666664, "minX": 1.66956852E12, "maxY": 79500.0, "series": [{"data": [[1.66956852E12, 43166.666666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956852E12, 79500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956852E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1011.6608999999983, "minX": 1.66956852E12, "maxY": 1011.6608999999983, "series": [{"data": [[1.66956852E12, 1011.6608999999983]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956852E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1011.4052999999985, "minX": 1.66956852E12, "maxY": 1011.4052999999985, "series": [{"data": [[1.66956852E12, 1011.4052999999985]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956852E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5786000000000008, "minX": 1.66956852E12, "maxY": 0.5786000000000008, "series": [{"data": [[1.66956852E12, 0.5786000000000008]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956852E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 72.0, "minX": 72.0, "maxY": 3028.5, "series": [{"data": [[1044.0, 580.0], [1073.0, 793.0], [283.0, 72.0], [72.0, 2107.0], [1370.0, 647.5], [1458.0, 709.0], [1456.0, 500.0], [1509.0, 474.0], [810.0, 1648.0], [463.0, 2489.0], [462.0, 3028.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1509.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 72.0, "minX": 72.0, "maxY": 3028.5, "series": [{"data": [[1044.0, 579.5], [1073.0, 793.0], [283.0, 72.0], [72.0, 2107.0], [1370.0, 647.0], [1458.0, 708.5], [1456.0, 499.5], [1509.0, 474.0], [810.0, 1641.0], [463.0, 2488.0], [462.0, 3028.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1509.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956852E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956852E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956852E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956852E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956852E12, 166.66666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956852E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956852E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956852E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956852E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956852E12, "maxY": 166.66666666666666, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66956852E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956852E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

