/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 7307.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 6.0], [0.9, 8.0], [1.0, 9.0], [1.1, 10.0], [1.2, 10.0], [1.3, 11.0], [1.4, 13.0], [1.5, 14.0], [1.6, 15.0], [1.7, 16.0], [1.8, 17.0], [1.9, 18.0], [2.0, 18.0], [2.1, 19.0], [2.2, 19.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 21.0], [2.7, 21.0], [2.8, 22.0], [2.9, 22.0], [3.0, 22.0], [3.1, 22.0], [3.2, 23.0], [3.3, 23.0], [3.4, 23.0], [3.5, 23.0], [3.6, 23.0], [3.7, 23.0], [3.8, 23.0], [3.9, 23.0], [4.0, 24.0], [4.1, 24.0], [4.2, 24.0], [4.3, 24.0], [4.4, 24.0], [4.5, 24.0], [4.6, 24.0], [4.7, 24.0], [4.8, 24.0], [4.9, 24.0], [5.0, 25.0], [5.1, 25.0], [5.2, 25.0], [5.3, 25.0], [5.4, 25.0], [5.5, 25.0], [5.6, 25.0], [5.7, 26.0], [5.8, 26.0], [5.9, 26.0], [6.0, 26.0], [6.1, 26.0], [6.2, 26.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 27.0], [6.9, 28.0], [7.0, 28.0], [7.1, 28.0], [7.2, 28.0], [7.3, 28.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 29.0], [7.8, 29.0], [7.9, 29.0], [8.0, 29.0], [8.1, 29.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 30.0], [8.8, 30.0], [8.9, 30.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 31.0], [9.6, 31.0], [9.7, 31.0], [9.8, 31.0], [9.9, 31.0], [10.0, 31.0], [10.1, 32.0], [10.2, 32.0], [10.3, 32.0], [10.4, 32.0], [10.5, 32.0], [10.6, 32.0], [10.7, 32.0], [10.8, 32.0], [10.9, 32.0], [11.0, 32.0], [11.1, 32.0], [11.2, 33.0], [11.3, 33.0], [11.4, 33.0], [11.5, 33.0], [11.6, 33.0], [11.7, 33.0], [11.8, 33.0], [11.9, 33.0], [12.0, 33.0], [12.1, 33.0], [12.2, 33.0], [12.3, 33.0], [12.4, 33.0], [12.5, 33.0], [12.6, 34.0], [12.7, 34.0], [12.8, 34.0], [12.9, 34.0], [13.0, 34.0], [13.1, 34.0], [13.2, 34.0], [13.3, 34.0], [13.4, 34.0], [13.5, 34.0], [13.6, 35.0], [13.7, 35.0], [13.8, 35.0], [13.9, 35.0], [14.0, 35.0], [14.1, 35.0], [14.2, 35.0], [14.3, 35.0], [14.4, 35.0], [14.5, 35.0], [14.6, 35.0], [14.7, 35.0], [14.8, 36.0], [14.9, 36.0], [15.0, 36.0], [15.1, 36.0], [15.2, 36.0], [15.3, 36.0], [15.4, 36.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 38.0], [17.3, 38.0], [17.4, 38.0], [17.5, 38.0], [17.6, 38.0], [17.7, 38.0], [17.8, 38.0], [17.9, 38.0], [18.0, 38.0], [18.1, 39.0], [18.2, 39.0], [18.3, 39.0], [18.4, 39.0], [18.5, 39.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 39.0], [19.0, 39.0], [19.1, 39.0], [19.2, 39.0], [19.3, 39.0], [19.4, 40.0], [19.5, 40.0], [19.6, 40.0], [19.7, 40.0], [19.8, 40.0], [19.9, 40.0], [20.0, 40.0], [20.1, 40.0], [20.2, 40.0], [20.3, 40.0], [20.4, 40.0], [20.5, 40.0], [20.6, 40.0], [20.7, 40.0], [20.8, 41.0], [20.9, 41.0], [21.0, 41.0], [21.1, 41.0], [21.2, 41.0], [21.3, 41.0], [21.4, 41.0], [21.5, 41.0], [21.6, 41.0], [21.7, 41.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 44.0], [24.2, 44.0], [24.3, 44.0], [24.4, 44.0], [24.5, 44.0], [24.6, 44.0], [24.7, 44.0], [24.8, 44.0], [24.9, 44.0], [25.0, 44.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 45.0], [25.5, 45.0], [25.6, 45.0], [25.7, 45.0], [25.8, 45.0], [25.9, 45.0], [26.0, 46.0], [26.1, 46.0], [26.2, 46.0], [26.3, 46.0], [26.4, 46.0], [26.5, 46.0], [26.6, 46.0], [26.7, 46.0], [26.8, 46.0], [26.9, 46.0], [27.0, 47.0], [27.1, 47.0], [27.2, 47.0], [27.3, 47.0], [27.4, 47.0], [27.5, 47.0], [27.6, 47.0], [27.7, 47.0], [27.8, 47.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 48.0], [28.4, 48.0], [28.5, 48.0], [28.6, 48.0], [28.7, 48.0], [28.8, 49.0], [28.9, 49.0], [29.0, 49.0], [29.1, 49.0], [29.2, 49.0], [29.3, 49.0], [29.4, 49.0], [29.5, 49.0], [29.6, 50.0], [29.7, 50.0], [29.8, 50.0], [29.9, 50.0], [30.0, 50.0], [30.1, 50.0], [30.2, 50.0], [30.3, 51.0], [30.4, 51.0], [30.5, 51.0], [30.6, 51.0], [30.7, 51.0], [30.8, 51.0], [30.9, 51.0], [31.0, 52.0], [31.1, 52.0], [31.2, 52.0], [31.3, 52.0], [31.4, 52.0], [31.5, 52.0], [31.6, 53.0], [31.7, 53.0], [31.8, 53.0], [31.9, 53.0], [32.0, 53.0], [32.1, 53.0], [32.2, 53.0], [32.3, 53.0], [32.4, 54.0], [32.5, 54.0], [32.6, 54.0], [32.7, 54.0], [32.8, 54.0], [32.9, 54.0], [33.0, 55.0], [33.1, 55.0], [33.2, 55.0], [33.3, 55.0], [33.4, 55.0], [33.5, 55.0], [33.6, 55.0], [33.7, 56.0], [33.8, 56.0], [33.9, 56.0], [34.0, 56.0], [34.1, 56.0], [34.2, 56.0], [34.3, 56.0], [34.4, 56.0], [34.5, 57.0], [34.6, 57.0], [34.7, 57.0], [34.8, 57.0], [34.9, 57.0], [35.0, 57.0], [35.1, 57.0], [35.2, 57.0], [35.3, 58.0], [35.4, 58.0], [35.5, 58.0], [35.6, 58.0], [35.7, 58.0], [35.8, 58.0], [35.9, 59.0], [36.0, 59.0], [36.1, 59.0], [36.2, 59.0], [36.3, 59.0], [36.4, 60.0], [36.5, 60.0], [36.6, 60.0], [36.7, 60.0], [36.8, 60.0], [36.9, 61.0], [37.0, 61.0], [37.1, 61.0], [37.2, 61.0], [37.3, 61.0], [37.4, 61.0], [37.5, 62.0], [37.6, 62.0], [37.7, 62.0], [37.8, 62.0], [37.9, 62.0], [38.0, 62.0], [38.1, 63.0], [38.2, 63.0], [38.3, 63.0], [38.4, 63.0], [38.5, 63.0], [38.6, 64.0], [38.7, 64.0], [38.8, 64.0], [38.9, 64.0], [39.0, 64.0], [39.1, 64.0], [39.2, 64.0], [39.3, 64.0], [39.4, 65.0], [39.5, 65.0], [39.6, 65.0], [39.7, 65.0], [39.8, 65.0], [39.9, 66.0], [40.0, 66.0], [40.1, 66.0], [40.2, 66.0], [40.3, 66.0], [40.4, 67.0], [40.5, 67.0], [40.6, 67.0], [40.7, 67.0], [40.8, 68.0], [40.9, 68.0], [41.0, 68.0], [41.1, 68.0], [41.2, 68.0], [41.3, 68.0], [41.4, 69.0], [41.5, 69.0], [41.6, 69.0], [41.7, 70.0], [41.8, 70.0], [41.9, 70.0], [42.0, 70.0], [42.1, 71.0], [42.2, 71.0], [42.3, 71.0], [42.4, 71.0], [42.5, 71.0], [42.6, 72.0], [42.7, 72.0], [42.8, 72.0], [42.9, 72.0], [43.0, 73.0], [43.1, 73.0], [43.2, 73.0], [43.3, 73.0], [43.4, 73.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 75.0], [44.0, 75.0], [44.1, 75.0], [44.2, 76.0], [44.3, 76.0], [44.4, 76.0], [44.5, 76.0], [44.6, 77.0], [44.7, 77.0], [44.8, 77.0], [44.9, 77.0], [45.0, 78.0], [45.1, 78.0], [45.2, 78.0], [45.3, 78.0], [45.4, 78.0], [45.5, 79.0], [45.6, 79.0], [45.7, 79.0], [45.8, 79.0], [45.9, 80.0], [46.0, 80.0], [46.1, 80.0], [46.2, 80.0], [46.3, 80.0], [46.4, 80.0], [46.5, 81.0], [46.6, 81.0], [46.7, 81.0], [46.8, 81.0], [46.9, 82.0], [47.0, 82.0], [47.1, 82.0], [47.2, 82.0], [47.3, 83.0], [47.4, 83.0], [47.5, 83.0], [47.6, 83.0], [47.7, 84.0], [47.8, 84.0], [47.9, 84.0], [48.0, 85.0], [48.1, 85.0], [48.2, 85.0], [48.3, 85.0], [48.4, 86.0], [48.5, 86.0], [48.6, 87.0], [48.7, 87.0], [48.8, 87.0], [48.9, 87.0], [49.0, 88.0], [49.1, 88.0], [49.2, 88.0], [49.3, 88.0], [49.4, 88.0], [49.5, 89.0], [49.6, 89.0], [49.7, 89.0], [49.8, 89.0], [49.9, 89.0], [50.0, 90.0], [50.1, 90.0], [50.2, 90.0], [50.3, 91.0], [50.4, 91.0], [50.5, 91.0], [50.6, 92.0], [50.7, 92.0], [50.8, 92.0], [50.9, 93.0], [51.0, 93.0], [51.1, 94.0], [51.2, 94.0], [51.3, 95.0], [51.4, 95.0], [51.5, 95.0], [51.6, 95.0], [51.7, 96.0], [51.8, 96.0], [51.9, 96.0], [52.0, 96.0], [52.1, 97.0], [52.2, 97.0], [52.3, 97.0], [52.4, 98.0], [52.5, 99.0], [52.6, 99.0], [52.7, 100.0], [52.8, 101.0], [52.9, 101.0], [53.0, 102.0], [53.1, 102.0], [53.2, 103.0], [53.3, 104.0], [53.4, 104.0], [53.5, 105.0], [53.6, 105.0], [53.7, 105.0], [53.8, 106.0], [53.9, 107.0], [54.0, 108.0], [54.1, 108.0], [54.2, 109.0], [54.3, 110.0], [54.4, 111.0], [54.5, 111.0], [54.6, 112.0], [54.7, 112.0], [54.8, 113.0], [54.9, 113.0], [55.0, 114.0], [55.1, 115.0], [55.2, 116.0], [55.3, 116.0], [55.4, 117.0], [55.5, 118.0], [55.6, 118.0], [55.7, 119.0], [55.8, 120.0], [55.9, 120.0], [56.0, 120.0], [56.1, 121.0], [56.2, 122.0], [56.3, 122.0], [56.4, 123.0], [56.5, 124.0], [56.6, 125.0], [56.7, 125.0], [56.8, 126.0], [56.9, 127.0], [57.0, 128.0], [57.1, 128.0], [57.2, 129.0], [57.3, 129.0], [57.4, 130.0], [57.5, 131.0], [57.6, 131.0], [57.7, 132.0], [57.8, 134.0], [57.9, 135.0], [58.0, 135.0], [58.1, 135.0], [58.2, 136.0], [58.3, 137.0], [58.4, 137.0], [58.5, 138.0], [58.6, 139.0], [58.7, 140.0], [58.8, 141.0], [58.9, 142.0], [59.0, 143.0], [59.1, 144.0], [59.2, 144.0], [59.3, 146.0], [59.4, 146.0], [59.5, 147.0], [59.6, 148.0], [59.7, 149.0], [59.8, 149.0], [59.9, 151.0], [60.0, 151.0], [60.1, 152.0], [60.2, 153.0], [60.3, 153.0], [60.4, 154.0], [60.5, 155.0], [60.6, 157.0], [60.7, 157.0], [60.8, 158.0], [60.9, 160.0], [61.0, 160.0], [61.1, 161.0], [61.2, 163.0], [61.3, 163.0], [61.4, 165.0], [61.5, 166.0], [61.6, 167.0], [61.7, 168.0], [61.8, 169.0], [61.9, 170.0], [62.0, 171.0], [62.1, 172.0], [62.2, 174.0], [62.3, 176.0], [62.4, 176.0], [62.5, 178.0], [62.6, 179.0], [62.7, 180.0], [62.8, 183.0], [62.9, 184.0], [63.0, 185.0], [63.1, 187.0], [63.2, 188.0], [63.3, 189.0], [63.4, 190.0], [63.5, 191.0], [63.6, 192.0], [63.7, 193.0], [63.8, 195.0], [63.9, 198.0], [64.0, 200.0], [64.1, 201.0], [64.2, 203.0], [64.3, 204.0], [64.4, 205.0], [64.5, 207.0], [64.6, 208.0], [64.7, 210.0], [64.8, 211.0], [64.9, 213.0], [65.0, 215.0], [65.1, 216.0], [65.2, 218.0], [65.3, 220.0], [65.4, 222.0], [65.5, 224.0], [65.6, 226.0], [65.7, 228.0], [65.8, 230.0], [65.9, 232.0], [66.0, 234.0], [66.1, 235.0], [66.2, 237.0], [66.3, 240.0], [66.4, 241.0], [66.5, 242.0], [66.6, 244.0], [66.7, 246.0], [66.8, 248.0], [66.9, 250.0], [67.0, 252.0], [67.1, 256.0], [67.2, 258.0], [67.3, 260.0], [67.4, 262.0], [67.5, 264.0], [67.6, 266.0], [67.7, 267.0], [67.8, 270.0], [67.9, 272.0], [68.0, 274.0], [68.1, 275.0], [68.2, 277.0], [68.3, 279.0], [68.4, 280.0], [68.5, 283.0], [68.6, 285.0], [68.7, 286.0], [68.8, 288.0], [68.9, 289.0], [69.0, 292.0], [69.1, 295.0], [69.2, 296.0], [69.3, 297.0], [69.4, 299.0], [69.5, 301.0], [69.6, 305.0], [69.7, 307.0], [69.8, 309.0], [69.9, 310.0], [70.0, 312.0], [70.1, 313.0], [70.2, 314.0], [70.3, 316.0], [70.4, 319.0], [70.5, 320.0], [70.6, 322.0], [70.7, 324.0], [70.8, 326.0], [70.9, 327.0], [71.0, 329.0], [71.1, 330.0], [71.2, 332.0], [71.3, 334.0], [71.4, 335.0], [71.5, 337.0], [71.6, 339.0], [71.7, 341.0], [71.8, 343.0], [71.9, 344.0], [72.0, 346.0], [72.1, 348.0], [72.2, 351.0], [72.3, 353.0], [72.4, 355.0], [72.5, 356.0], [72.6, 360.0], [72.7, 362.0], [72.8, 365.0], [72.9, 367.0], [73.0, 368.0], [73.1, 371.0], [73.2, 373.0], [73.3, 375.0], [73.4, 380.0], [73.5, 383.0], [73.6, 386.0], [73.7, 387.0], [73.8, 391.0], [73.9, 394.0], [74.0, 398.0], [74.1, 401.0], [74.2, 405.0], [74.3, 408.0], [74.4, 411.0], [74.5, 415.0], [74.6, 417.0], [74.7, 420.0], [74.8, 424.0], [74.9, 429.0], [75.0, 432.0], [75.1, 436.0], [75.2, 439.0], [75.3, 443.0], [75.4, 447.0], [75.5, 451.0], [75.6, 453.0], [75.7, 457.0], [75.8, 460.0], [75.9, 465.0], [76.0, 468.0], [76.1, 470.0], [76.2, 475.0], [76.3, 478.0], [76.4, 482.0], [76.5, 489.0], [76.6, 493.0], [76.7, 497.0], [76.8, 503.0], [76.9, 509.0], [77.0, 517.0], [77.1, 520.0], [77.2, 532.0], [77.3, 537.0], [77.4, 546.0], [77.5, 552.0], [77.6, 564.0], [77.7, 570.0], [77.8, 580.0], [77.9, 587.0], [78.0, 594.0], [78.1, 607.0], [78.2, 616.0], [78.3, 625.0], [78.4, 638.0], [78.5, 646.0], [78.6, 662.0], [78.7, 683.0], [78.8, 701.0], [78.9, 723.0], [79.0, 765.0], [79.1, 791.0], [79.2, 811.0], [79.3, 833.0], [79.4, 861.0], [79.5, 883.0], [79.6, 920.0], [79.7, 961.0], [79.8, 994.0], [79.9, 1019.0], [80.0, 1025.0], [80.1, 1027.0], [80.2, 1030.0], [80.3, 1032.0], [80.4, 1033.0], [80.5, 1033.0], [80.6, 1035.0], [80.7, 1036.0], [80.8, 1037.0], [80.9, 1038.0], [81.0, 1039.0], [81.1, 1039.0], [81.2, 1040.0], [81.3, 1042.0], [81.4, 1043.0], [81.5, 1044.0], [81.6, 1045.0], [81.7, 1046.0], [81.8, 1047.0], [81.9, 1048.0], [82.0, 1048.0], [82.1, 1049.0], [82.2, 1050.0], [82.3, 1050.0], [82.4, 1051.0], [82.5, 1051.0], [82.6, 1052.0], [82.7, 1052.0], [82.8, 1053.0], [82.9, 1054.0], [83.0, 1054.0], [83.1, 1055.0], [83.2, 1055.0], [83.3, 1056.0], [83.4, 1056.0], [83.5, 1057.0], [83.6, 1058.0], [83.7, 1059.0], [83.8, 1059.0], [83.9, 1060.0], [84.0, 1060.0], [84.1, 1061.0], [84.2, 1061.0], [84.3, 1063.0], [84.4, 1064.0], [84.5, 1064.0], [84.6, 1065.0], [84.7, 1066.0], [84.8, 1067.0], [84.9, 1068.0], [85.0, 1069.0], [85.1, 1071.0], [85.2, 1072.0], [85.3, 1073.0], [85.4, 1073.0], [85.5, 1074.0], [85.6, 1074.0], [85.7, 1075.0], [85.8, 1076.0], [85.9, 1077.0], [86.0, 1078.0], [86.1, 1079.0], [86.2, 1080.0], [86.3, 1082.0], [86.4, 1083.0], [86.5, 1084.0], [86.6, 1085.0], [86.7, 1087.0], [86.8, 1088.0], [86.9, 1090.0], [87.0, 1091.0], [87.1, 1092.0], [87.2, 1094.0], [87.3, 1095.0], [87.4, 1097.0], [87.5, 1098.0], [87.6, 1099.0], [87.7, 1100.0], [87.8, 1101.0], [87.9, 1105.0], [88.0, 1106.0], [88.1, 1108.0], [88.2, 1110.0], [88.3, 1111.0], [88.4, 1113.0], [88.5, 1114.0], [88.6, 1116.0], [88.7, 1118.0], [88.8, 1119.0], [88.9, 1121.0], [89.0, 1123.0], [89.1, 1124.0], [89.2, 1127.0], [89.3, 1129.0], [89.4, 1131.0], [89.5, 1133.0], [89.6, 1135.0], [89.7, 1137.0], [89.8, 1140.0], [89.9, 1143.0], [90.0, 1147.0], [90.1, 1149.0], [90.2, 1152.0], [90.3, 1154.0], [90.4, 1156.0], [90.5, 1159.0], [90.6, 1163.0], [90.7, 1165.0], [90.8, 1169.0], [90.9, 1173.0], [91.0, 1176.0], [91.1, 1180.0], [91.2, 1184.0], [91.3, 1187.0], [91.4, 1188.0], [91.5, 1191.0], [91.6, 1193.0], [91.7, 1197.0], [91.8, 1203.0], [91.9, 1206.0], [92.0, 1211.0], [92.1, 1216.0], [92.2, 1225.0], [92.3, 1230.0], [92.4, 1235.0], [92.5, 1238.0], [92.6, 1244.0], [92.7, 1247.0], [92.8, 1250.0], [92.9, 1255.0], [93.0, 1264.0], [93.1, 1270.0], [93.2, 1274.0], [93.3, 1278.0], [93.4, 1284.0], [93.5, 1292.0], [93.6, 1299.0], [93.7, 1303.0], [93.8, 1309.0], [93.9, 1312.0], [94.0, 1316.0], [94.1, 1320.0], [94.2, 1322.0], [94.3, 1327.0], [94.4, 1332.0], [94.5, 1334.0], [94.6, 1339.0], [94.7, 1345.0], [94.8, 1348.0], [94.9, 1355.0], [95.0, 1359.0], [95.1, 1362.0], [95.2, 1366.0], [95.3, 1369.0], [95.4, 1374.0], [95.5, 1380.0], [95.6, 1386.0], [95.7, 1396.0], [95.8, 1402.0], [95.9, 1410.0], [96.0, 1422.0], [96.1, 1427.0], [96.2, 1432.0], [96.3, 1445.0], [96.4, 1459.0], [96.5, 1468.0], [96.6, 1475.0], [96.7, 1490.0], [96.8, 1500.0], [96.9, 1517.0], [97.0, 1529.0], [97.1, 1543.0], [97.2, 1559.0], [97.3, 1593.0], [97.4, 1616.0], [97.5, 1660.0], [97.6, 1681.0], [97.7, 1724.0], [97.8, 1796.0], [97.9, 1848.0], [98.0, 1944.0], [98.1, 2075.0], [98.2, 2171.0], [98.3, 2276.0], [98.4, 2326.0], [98.5, 2405.0], [98.6, 2455.0], [98.7, 2498.0], [98.8, 2643.0], [98.9, 2914.0], [99.0, 3037.0], [99.1, 3045.0], [99.2, 3066.0], [99.3, 3093.0], [99.4, 3152.0], [99.5, 3163.0], [99.6, 3237.0], [99.7, 3368.0], [99.8, 3538.0], [99.9, 4344.0], [100.0, 7307.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5267.0, "series": [{"data": [[0.0, 5267.0], [600.0, 74.0], [700.0, 35.0], [800.0, 39.0], [900.0, 28.0], [1000.0, 782.0], [1100.0, 410.0], [1200.0, 190.0], [1300.0, 210.0], [1400.0, 106.0], [1500.0, 53.0], [100.0, 1126.0], [1600.0, 34.0], [1700.0, 14.0], [1800.0, 13.0], [1900.0, 14.0], [2000.0, 7.0], [2100.0, 8.0], [2200.0, 14.0], [2300.0, 12.0], [2400.0, 22.0], [2500.0, 8.0], [2600.0, 6.0], [2700.0, 4.0], [2900.0, 3.0], [3000.0, 39.0], [3100.0, 28.0], [200.0, 551.0], [3200.0, 8.0], [3300.0, 6.0], [3400.0, 7.0], [3500.0, 4.0], [3600.0, 1.0], [3800.0, 1.0], [4100.0, 2.0], [4300.0, 2.0], [4200.0, 1.0], [4400.0, 1.0], [300.0, 461.0], [5100.0, 4.0], [5000.0, 2.0], [400.0, 268.0], [7300.0, 1.0], [7200.0, 2.0], [500.0, 132.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.222222222222222, "minX": 1.66956936E12, "maxY": 561.2609697455434, "series": [{"data": [[1.66956936E12, 561.2609697455434], [1.66956942E12, 2.222222222222222]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956942E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 7225.0, "series": [{"data": [[2.0, 7225.0], [3.0, 733.1000000000001], [4.0, 2.333333333333333], [5.0, 7.666666666666667], [7.0, 763.25], [9.0, 3038.2], [10.0, 2.0], [11.0, 2.0], [12.0, 1025.0], [13.0, 4.333333333333333], [14.0, 1215.2], [15.0, 383.625], [16.0, 2.6666666666666665], [17.0, 10.6], [18.0, 9.166666666666666], [20.0, 692.0], [21.0, 767.375], [23.0, 3045.0], [24.0, 2.0], [25.0, 9.0], [27.0, 18.0], [28.0, 12.333333333333334], [30.0, 589.0000000000001], [31.0, 1022.1818181818182], [33.0, 681.3333333333333], [32.0, 8.0], [35.0, 2.166666666666667], [34.0, 3.2], [37.0, 14.0], [36.0, 2.3333333333333335], [39.0, 1304.0], [38.0, 13.5], [40.0, 326.625], [43.0, 846.8], [44.0, 15.0], [47.0, 33.0], [46.0, 1026.4285714285713], [49.0, 31.666666666666668], [48.0, 32.0], [51.0, 2.5], [50.0, 890.1428571428572], [53.0, 13.4], [52.0, 1711.6666666666665], [55.0, 365.33333333333337], [54.0, 17.0], [57.0, 1032.0], [59.0, 1032.0], [58.0, 1029.0], [61.0, 2.0], [60.0, 1024.0], [63.0, 134.375], [62.0, 3.0], [67.0, 14.0], [65.0, 10.666666666666666], [64.0, 9.5], [71.0, 32.0], [70.0, 1038.5], [69.0, 27.5], [68.0, 19.166666666666664], [75.0, 26.4], [74.0, 32.5], [73.0, 1052.0], [79.0, 21.0], [78.0, 18.0], [77.0, 17.666666666666668], [83.0, 71.14285714285714], [82.0, 579.7272727272727], [80.0, 1337.857142857143], [87.0, 86.00000000000001], [86.0, 60.71428571428571], [84.0, 77.31999999999998], [85.0, 146.45454545454547], [91.0, 218.0625], [88.0, 217.92307692307693], [89.0, 69.8], [90.0, 23.666666666666668], [94.0, 425.2], [93.0, 640.6], [95.0, 9.0], [92.0, 297.0], [97.0, 31.25], [99.0, 315.7272727272727], [96.0, 89.8], [98.0, 33.666666666666664], [100.0, 117.25], [101.0, 135.1], [102.0, 28.0], [104.0, 430.18181818181824], [107.0, 43.3], [106.0, 369.0], [105.0, 26.666666666666668], [109.0, 40.49999999999999], [110.0, 44.94736842105263], [111.0, 47.64285714285714], [108.0, 29.0], [112.0, 50.142857142857146], [113.0, 46.999999999999986], [115.0, 222.47826086956516], [118.0, 58.75000000000001], [119.0, 26.5], [117.0, 23.5], [116.0, 24.333333333333332], [122.0, 65.22222222222223], [123.0, 142.0], [121.0, 31.5], [120.0, 371.0], [124.0, 237.0], [125.0, 46.50000000000001], [126.0, 35.42857142857142], [127.0, 29.5], [129.0, 57.527777777777764], [131.0, 147.92857142857142], [130.0, 548.875], [132.0, 667.0], [134.0, 420.9], [135.0, 30.5], [133.0, 526.5], [128.0, 37.0], [136.0, 58.08333333333333], [141.0, 357.5], [142.0, 647.4], [143.0, 50.0], [140.0, 28.0], [139.0, 29.0], [137.0, 233.8], [146.0, 56.666666666666664], [150.0, 81.5], [151.0, 95.5], [149.0, 29.714285714285715], [148.0, 29.25], [147.0, 23.42857142857143], [145.0, 30.0], [144.0, 1039.5], [155.0, 68.8], [158.0, 85.53333333333332], [159.0, 29.0], [157.0, 31.0], [156.0, 31.5], [154.0, 529.5], [152.0, 160.5], [153.0, 285.0], [164.0, 68.5], [165.0, 166.1818181818182], [167.0, 121.14285714285714], [166.0, 21.5], [162.0, 23.0], [161.0, 28.857142857142858], [160.0, 29.571428571428573], [173.0, 184.41176470588235], [175.0, 25.25], [174.0, 281.8333333333333], [172.0, 28.0], [171.0, 270.8571428571429], [170.0, 306.85714285714283], [169.0, 299.90909090909093], [168.0, 23.333333333333332], [180.0, 187.81250000000003], [181.0, 58.9090909090909], [183.0, 81.0], [182.0, 24.0], [179.0, 22.0], [178.0, 23.2], [177.0, 23.25], [176.0, 23.0], [190.0, 247.85714285714286], [191.0, 59.68750000000001], [189.0, 523.5], [188.0, 24.0], [187.0, 789.0], [186.0, 1047.0], [185.0, 1031.0], [184.0, 280.25], [192.0, 50.16666666666667], [193.0, 37.0], [194.0, 43.3939393939394], [195.0, 40.76923076923077], [197.0, 44.35714285714286], [198.0, 36.87499999999999], [199.0, 72.73333333333335], [196.0, 23.666666666666668], [200.0, 33.6], [201.0, 96.07692307692308], [202.0, 170.57894736842104], [203.0, 66.27272727272727], [204.0, 177.8], [205.0, 260.9], [206.0, 264.9166666666667], [207.0, 52.666666666666664], [208.0, 52.111111111111114], [209.0, 88.33333333333333], [210.0, 191.58823529411765], [211.0, 76.57142857142857], [212.0, 43.75], [214.0, 133.35714285714286], [215.0, 266.55555555555554], [213.0, 25.0], [219.0, 194.1], [218.0, 141.1904761904762], [217.0, 190.91666666666666], [216.0, 53.75], [222.0, 58.07142857142858], [223.0, 39.6], [221.0, 228.0], [224.0, 36.142857142857146], [225.0, 71.18518518518518], [228.0, 215.46153846153845], [227.0, 895.2], [226.0, 460.80000000000007], [231.0, 707.3333333333334], [230.0, 283.0], [229.0, 230.4], [234.0, 176.63636363636363], [233.0, 391.8888888888889], [236.0, 67.6], [237.0, 48.0], [239.0, 21.0], [238.0, 23.0], [235.0, 153.875], [232.0, 539.0], [241.0, 49.6], [242.0, 45.72727272727273], [247.0, 415.5416666666667], [245.0, 451.33333333333337], [244.0, 93.0], [243.0, 31.333333333333332], [240.0, 23.5], [249.0, 286.5925925925926], [255.0, 540.3], [254.0, 450.66666666666663], [252.0, 24.571428571428573], [251.0, 25.0], [250.0, 25.666666666666668], [248.0, 832.6], [271.0, 98.65], [257.0, 54.666666666666664], [256.0, 53.0], [258.0, 61.00000000000001], [259.0, 368.0], [261.0, 253.4], [260.0, 795.5], [262.0, 33.0], [263.0, 1058.0], [266.0, 109.19999999999999], [265.0, 25.5], [264.0, 364.66666666666663], [270.0, 54.142857142857146], [268.0, 21.0], [267.0, 25.0], [274.0, 56.76923076923076], [275.0, 33.111111111111114], [284.0, 372.66666666666663], [276.0, 49.0], [277.0, 477.77777777777777], [278.0, 48.18749999999999], [279.0, 43.333333333333336], [273.0, 23.0], [272.0, 544.8333333333334], [282.0, 396.27272727272725], [283.0, 28.05263157894737], [285.0, 38.4], [286.0, 30.750000000000004], [287.0, 31.400000000000013], [280.0, 24.666666666666668], [301.0, 40.0], [288.0, 35.66666666666666], [294.0, 455.6666666666667], [293.0, 24.5], [292.0, 367.3333333333333], [295.0, 24.0], [296.0, 33.666666666666664], [297.0, 178.04761904761904], [300.0, 54.60869565217392], [291.0, 935.1428571428571], [290.0, 26.5], [289.0, 25.75], [303.0, 24.0], [302.0, 372.0], [299.0, 26.0], [298.0, 415.77777777777777], [305.0, 47.61538461538462], [304.0, 543.5], [306.0, 140.96153846153842], [309.0, 91.6086956521739], [308.0, 53.5], [307.0, 54.95238095238094], [311.0, 102.4], [310.0, 60.666666666666664], [312.0, 41.14285714285714], [316.0, 549.0], [317.0, 32.0], [319.0, 154.27777777777777], [318.0, 333.0], [315.0, 55.0], [314.0, 32.25], [313.0, 32.25], [334.0, 64.6], [321.0, 132.31578947368422], [323.0, 50.84615384615385], [324.0, 44.2], [327.0, 209.84615384615384], [320.0, 1075.3333333333333], [326.0, 558.125], [329.0, 431.375], [331.0, 46.833333333333336], [330.0, 798.5], [335.0, 50.666666666666664], [328.0, 42.666666666666664], [333.0, 126.25], [332.0, 40.0], [350.0, 56.5], [337.0, 58.230769230769226], [336.0, 43.42857142857142], [338.0, 55.6], [351.0, 219.41666666666669], [349.0, 324.6363636363637], [339.0, 312.5], [346.0, 33.333333333333336], [345.0, 190.42857142857147], [344.0, 443.4], [343.0, 547.5], [342.0, 431.6], [341.0, 299.33333333333337], [340.0, 43.0], [364.0, 135.18181818181816], [354.0, 465.59259259259255], [355.0, 187.50000000000003], [356.0, 378.0], [357.0, 285.5], [359.0, 244.81481481481478], [353.0, 379.33333333333337], [358.0, 93.33333333333334], [360.0, 100.0], [361.0, 655.7142857142857], [367.0, 38.5], [366.0, 381.0], [365.0, 242.0], [382.0, 204.7], [370.0, 120.50000000000001], [369.0, 387.5], [368.0, 38.5], [371.0, 43.0], [375.0, 38.285714285714285], [374.0, 597.8181818181819], [373.0, 453.8], [372.0, 43.25], [376.0, 172.33333333333331], [383.0, 35.199999999999996], [381.0, 43.0], [380.0, 39.5], [379.0, 41.22222222222222], [378.0, 42.0], [377.0, 34.5], [397.0, 35.666666666666664], [389.0, 59.222222222222214], [388.0, 49.888888888888886], [390.0, 67.0], [396.0, 126.54545454545453], [386.0, 166.16666666666669], [384.0, 853.0], [391.0, 34.0], [392.0, 124.42105263157896], [393.0, 35.333333333333336], [394.0, 39.391304347826086], [395.0, 36.095238095238095], [398.0, 126.00000000000001], [399.0, 82.6923076923077], [415.0, 183.14285714285714], [406.0, 132.08333333333334], [405.0, 36.0], [404.0, 39.5], [409.0, 143.95454545454547], [413.0, 729.2173913043478], [412.0, 198.74999999999997], [403.0, 139.9], [402.0, 377.16666666666663], [401.0, 36.83333333333333], [407.0, 421.16666666666663], [411.0, 492.62500000000006], [410.0, 185.85714285714286], [414.0, 662.6923076923076], [408.0, 212.83333333333331], [430.0, 148.35294117647058], [426.0, 40.4], [419.0, 39.84210526315789], [418.0, 33.333333333333336], [417.0, 38.0], [416.0, 42.5], [423.0, 46.0], [422.0, 37.5], [421.0, 37.333333333333336], [420.0, 36.0], [427.0, 53.36842105263159], [431.0, 32.5], [429.0, 35.5], [428.0, 34.81818181818182], [425.0, 32.666666666666664], [424.0, 37.0], [446.0, 373.6666666666667], [435.0, 42.68421052631579], [434.0, 40.8], [438.0, 55.94736842105263], [437.0, 925.6666666666666], [439.0, 40.5], [433.0, 27.5], [432.0, 33.4], [440.0, 40.36363636363637], [441.0, 58.0], [442.0, 287.50000000000006], [447.0, 444.8], [445.0, 1046.0], [444.0, 286.5], [461.0, 229.50000000000003], [450.0, 40.588235294117645], [451.0, 114.71428571428571], [460.0, 221.63636363636363], [453.0, 42.11764705882353], [454.0, 302.0833333333333], [455.0, 39.333333333333336], [456.0, 128.69444444444443], [457.0, 184.28571428571428], [459.0, 275.61538461538464], [458.0, 237.0], [463.0, 32.285714285714285], [478.0, 1070.6666666666667], [469.0, 47.25000000000001], [468.0, 272.82352941176464], [471.0, 30.666666666666668], [466.0, 141.42857142857142], [465.0, 31.2], [470.0, 30.666666666666668], [467.0, 64.33333333333333], [472.0, 107.26666666666667], [475.0, 275.34693877551024], [479.0, 562.0], [477.0, 128.58333333333331], [476.0, 37.66666666666667], [474.0, 540.5], [473.0, 30.333333333333332], [494.0, 47.2], [481.0, 326.75], [480.0, 538.5], [487.0, 51.0], [486.0, 48.0], [485.0, 350.0], [484.0, 906.2857142857143], [482.0, 44.4], [490.0, 580.2], [491.0, 716.0], [495.0, 164.39999999999998], [493.0, 415.125], [483.0, 381.0], [489.0, 836.6666666666666], [488.0, 1053.0], [499.0, 50.5], [496.0, 56.56249999999999], [503.0, 34.0], [502.0, 38.57142857142857], [501.0, 56.0], [500.0, 40.0], [497.0, 49.0], [498.0, 96.5], [504.0, 129.2692307692308], [505.0, 34.0], [507.0, 30.666666666666668], [506.0, 41.0], [508.0, 157.94736842105263], [511.0, 39.0], [510.0, 548.5], [509.0, 710.3333333333334], [537.0, 256.75000000000006], [513.0, 45.5], [515.0, 141.16666666666666], [516.0, 455.61538461538464], [518.0, 68.75], [517.0, 42.6], [536.0, 43.14285714285714], [519.0, 47.0], [521.0, 41.5], [520.0, 37.5], [522.0, 39.333333333333336], [523.0, 241.45454545454544], [527.0, 42.5], [512.0, 263.0], [526.0, 736.375], [525.0, 42.5], [524.0, 301.5], [531.0, 283.61538461538464], [532.0, 398.8], [533.0, 48.333333333333336], [535.0, 34.92307692307692], [534.0, 41.9], [541.0, 44.75], [540.0, 168.25], [539.0, 348.2], [538.0, 598.3333333333333], [542.0, 67.6875], [543.0, 96.5], [528.0, 40.0], [530.0, 40.6], [529.0, 56.0], [551.0, 242.69230769230774], [547.0, 559.75], [546.0, 205.95454545454547], [545.0, 47.0], [544.0, 498.18750000000006], [548.0, 268.22222222222223], [550.0, 239.75], [549.0, 265.1666666666667], [552.0, 156.3333333333333], [554.0, 818.2], [553.0, 384.66666666666663], [556.0, 668.0], [555.0, 482.1428571428571], [558.0, 240.85714285714283], [557.0, 215.75], [559.0, 501.0909090909091], [560.0, 542.9545454545455], [561.0, 469.33333333333337], [574.0, 44.0], [575.0, 128.1818181818182], [572.0, 581.8181818181819], [571.0, 557.75], [570.0, 38.0], [569.0, 35.0], [568.0, 721.5937500000001], [573.0, 76.9], [563.0, 337.57142857142856], [565.0, 210.4736842105263], [566.0, 198.84615384615384], [567.0, 365.7586206896551], [583.0, 148.8888888888889], [603.0, 273.27272727272725], [582.0, 55.75], [581.0, 38.0], [580.0, 323.6], [579.0, 41.5], [578.0, 46.0], [577.0, 329.81249999999994], [576.0, 35.5], [600.0, 158.33333333333331], [602.0, 34.0], [601.0, 183.42857142857142], [587.0, 412.7857142857142], [586.0, 278.8], [585.0, 48.0], [584.0, 33.0], [588.0, 33.0], [590.0, 182.76923076923077], [589.0, 33.0], [591.0, 668.7272727272726], [597.0, 244.18181818181816], [599.0, 515.1428571428571], [598.0, 38.45454545454546], [596.0, 249.62962962962962], [606.0, 376.85714285714283], [607.0, 773.6666666666667], [593.0, 45.0], [592.0, 284.0], [595.0, 34.4], [594.0, 1043.0], [605.0, 175.5], [604.0, 267.5], [613.0, 45.166666666666664], [612.0, 454.55882352941177], [611.0, 262.4], [610.0, 462.0], [608.0, 377.2608695652173], [615.0, 576.9374999999999], [614.0, 484.0196078431372], [616.0, 342.53846153846155], [618.0, 314.0], [617.0, 509.66666666666663], [620.0, 359.4285714285714], [619.0, 500.6666666666667], [621.0, 116.16666666666666], [622.0, 934.125], [623.0, 372.55555555555554], [626.0, 287.1818181818182], [627.0, 610.470588235294], [629.0, 799.8000000000002], [628.0, 153.66666666666669], [631.0, 678.2], [630.0, 462.3333333333333], [625.0, 282.7368421052632], [633.0, 859.375], [634.0, 739.4285714285714], [636.0, 386.2], [635.0, 56.0], [639.0, 212.0], [624.0, 257.75], [638.0, 494.5], [632.0, 300.44444444444446], [643.0, 369.0], [641.0, 694.3124999999999], [640.0, 588.3478260869565], [655.0, 54.0], [654.0, 536.6666666666666], [653.0, 1369.0], [652.0, 774.3333333333334], [651.0, 278.6], [642.0, 84.0], [644.0, 389.09090909090907], [647.0, 262.0], [646.0, 427.99999999999994], [665.0, 138.0], [664.0, 629.0], [667.0, 72.0], [666.0, 1084.25], [669.0, 1014.4375000000001], [668.0, 594.2], [671.0, 174.9375], [656.0, 61.666666666666664], [658.0, 418.9600000000002], [657.0, 45.0], [660.0, 535.5714285714286], [659.0, 418.3333333333333], [670.0, 208.34285714285713], [649.0, 390.8181818181818], [648.0, 381.8571428571429], [650.0, 70.5], [661.0, 414.0], [662.0, 496.8181818181818], [663.0, 356.67741935483866], [700.0, 341.17391304347825], [682.0, 388.44], [681.0, 628.8571428571429], [680.0, 67.0], [684.0, 651.5], [683.0, 340.1], [685.0, 314.05555555555554], [689.0, 196.66666666666666], [695.0, 327.8333333333333], [694.0, 612.4], [693.0, 343.99999999999994], [692.0, 216.0], [691.0, 634.0], [690.0, 665.3888888888889], [696.0, 331.59999999999997], [687.0, 423.0], [679.0, 204.8], [678.0, 403.33333333333337], [677.0, 365.25], [676.0, 719.5588235294118], [675.0, 88.0], [674.0, 839.75], [673.0, 609.3], [672.0, 628.5], [686.0, 401.0], [697.0, 292.2857142857143], [702.0, 388.4666666666667], [701.0, 233.27777777777777], [703.0, 661.5], [688.0, 291.6923076923077], [699.0, 555.0], [698.0, 476.8888888888889], [706.0, 859.5714285714286], [704.0, 634.1428571428571], [705.0, 832.0], [709.0, 506.8888888888889], [708.0, 907.6999999999999], [707.0, 152.5], [728.0, 186.6], [711.0, 519.5000000000001], [730.0, 221.25], [729.0, 646.2], [732.0, 326.75], [731.0, 129.0], [717.0, 219.0], [716.0, 1077.5], [715.0, 550.4615384615385], [714.0, 1621.5], [712.0, 647.2857142857142], [718.0, 122.0], [719.0, 400.0], [723.0, 330.6111111111111], [724.0, 614.0312499999999], [725.0, 400.1666666666667], [727.0, 828.7499999999999], [726.0, 491.5454545454545], [722.0, 534.4285714285714], [721.0, 763.2222222222223], [735.0, 353.6666666666666], [720.0, 1252.0555555555554], [734.0, 75.99999999999999], [763.0, 487.24786324786317], [767.0, 424.4], [753.0, 425.16666666666663], [752.0, 314.0], [757.0, 638.2499999999999], [756.0, 248.5], [755.0, 785.0], [754.0, 254.08333333333334], [758.0, 475.4179104477612], [766.0, 740.5555555555557], [765.0, 742.5833333333334], [764.0, 759.7297297297297], [762.0, 43.0], [761.0, 370.1000000000001], [760.0, 257.5], [743.0, 111.33333333333334], [742.0, 429.57142857142856], [741.0, 315.75], [740.0, 275.3333333333333], [739.0, 52.0], [738.0, 62.0], [737.0, 345.75], [736.0, 422.6428571428571], [750.0, 204.60000000000002], [749.0, 476.25000000000006], [748.0, 172.33333333333334], [747.0, 342.66666666666663], [746.0, 432.04081632653055], [745.0, 281.20000000000005], [744.0, 106.0], [796.0, 505.33333333333337], [773.0, 213.0], [772.0, 548.0571428571429], [771.0, 460.6666666666667], [770.0, 450.4411764705882], [769.0, 651.5999999999999], [768.0, 713.8], [783.0, 346.33333333333337], [782.0, 857.2222222222222], [781.0, 1254.8], [780.0, 694.3888888888889], [779.0, 596.4666666666666], [778.0, 615.1428571428571], [777.0, 731.9215686274512], [776.0, 654.7777777777779], [774.0, 440.36666666666656], [775.0, 712.5], [793.0, 246.0], [792.0, 622.3333333333334], [795.0, 581.875], [794.0, 637.6666666666666], [785.0, 404.7777777777777], [791.0, 476.84], [790.0, 470.75], [789.0, 656.4705882352941], [788.0, 605.3333333333334], [787.0, 552.7142857142857], [786.0, 458.0], [798.0, 459.46153846153845], [799.0, 732.8490566037735], [784.0, 343.70000000000005], [797.0, 314.909090909091], [826.0, 944.2941176470587], [801.0, 592.7520661157024], [800.0, 71.0], [804.0, 406.7], [803.0, 796.3], [802.0, 456.0], [805.0, 730.1562499999999], [806.0, 542.0], [807.0, 142.66666666666666], [825.0, 859.625], [824.0, 622.2857142857141], [827.0, 858.909090909091], [829.0, 654.3478260869564], [828.0, 936.0769230769231], [830.0, 202.66666666666666], [831.0, 886.48], [816.0, 567.7368421052632], [817.0, 185.33333333333331], [819.0, 353.1020408163265], [818.0, 879.7], [820.0, 396.9047619047619], [823.0, 745.9130434782609], [822.0, 896.0], [821.0, 709.3589743589745], [815.0, 738.9999999999998], [814.0, 328.0], [813.0, 503.7142857142856], [812.0, 160.5], [811.0, 119.0], [810.0, 304.5652173913043], [809.0, 414.49999999999994], [808.0, 452.8947368421054], [856.0, 697.9090909090909], [838.0, 586.5], [839.0, 463.5172413793104], [841.0, 600.36], [840.0, 601.4583333333331], [843.0, 476.86486486486484], [842.0, 580.0], [845.0, 563.1428571428572], [844.0, 513.375], [847.0, 608.3235294117646], [832.0, 597.5], [834.0, 738.0294117647059], [833.0, 597.4444444444445], [836.0, 879.0], [835.0, 379.85714285714283], [846.0, 668.2857142857143], [852.0, 372.17857142857144], [854.0, 510.8863636363637], [853.0, 422.5], [855.0, 709.4736842105264], [863.0, 88.0], [849.0, 150.0], [848.0, 1228.3333333333333], [851.0, 124.0], [850.0, 611.8470588235297], [862.0, 654.5454545454545], [861.0, 697.1764705882352], [860.0, 553.7826086956521], [859.0, 594.7500000000001], [857.0, 264.3333333333333], [871.0, 623.9722222222221], [892.0, 394.54166666666674], [872.0, 713.6666666666666], [873.0, 573.2105263157894], [875.0, 372.0], [874.0, 711.9583333333333], [877.0, 507.00000000000006], [876.0, 273.9444444444445], [880.0, 663.8571428571429], [881.0, 623.6851851851851], [883.0, 434.4285714285714], [882.0, 580.3333333333335], [879.0, 143.99999999999997], [864.0, 569.2222222222223], [866.0, 670.58], [865.0, 544.6666666666667], [868.0, 328.25], [867.0, 422.53846153846155], [870.0, 257.5238095238095], [869.0, 723.2000000000002], [878.0, 187.25], [884.0, 497.5531914893615], [885.0, 516.8055555555555], [887.0, 566.59375], [886.0, 423.2352941176471], [891.0, 334.0], [890.0, 650.1666666666667], [889.0, 360.00000000000006], [888.0, 469.90625], [893.0, 251.77777777777771], [894.0, 468.85294117647044], [895.0, 223.53333333333336], [900.0, 547.2000000000002], [899.0, 367.2], [906.0, 550.2608695652175], [904.0, 553.3333333333333], [903.0, 378.42307692307696], [902.0, 464.1944444444445], [901.0, 758.1818181818181], [898.0, 395.13793103448273], [897.0, 348.2352941176471], [896.0, 209.0], [1.0, 3.333333333333333]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[560.2548999999983, 380.47409999999843]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 906.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 71.7, "minX": 1.66956936E12, "maxY": 702566.4333333333, "series": [{"data": [[1.66956936E12, 39761.63333333333], [1.66956942E12, 71.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956936E12, 702566.4333333333], [1.66956942E12, 1266.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956942E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 378.97615708274736, "minX": 1.66956936E12, "maxY": 1211.1666666666667, "series": [{"data": [[1.66956936E12, 378.97615708274736], [1.66956942E12, 1211.1666666666667]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956942E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 367.6483670607106, "minX": 1.66956936E12, "maxY": 1211.0555555555554, "series": [{"data": [[1.66956936E12, 367.6483670607106], [1.66956942E12, 1211.0555555555554]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956942E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.999999999999998, "minX": 1.66956936E12, "maxY": 35.366259266679855, "series": [{"data": [[1.66956936E12, 35.366259266679855], [1.66956942E12, 6.999999999999998]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956942E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 8.0, "maxY": 348.5, "series": [{"data": [[65.0, 10.0], [8.0, 3.0], [1202.0, 348.5], [306.0, 28.0], [1304.0, 142.5], [10.0, 3.0], [1597.0, 53.0], [1651.0, 297.0], [1668.0, 35.0], [433.0, 55.0], [1756.0, 114.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1756.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 8.0, "maxY": 328.0, "series": [{"data": [[65.0, 8.0], [8.0, 3.0], [1202.0, 328.0], [306.0, 27.0], [1304.0, 137.0], [10.0, 3.0], [1597.0, 52.0], [1651.0, 244.0], [1668.0, 34.0], [433.0, 54.0], [1756.0, 94.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1756.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.66956936E12, "maxY": 166.41666666666666, "series": [{"data": [[1.66956936E12, 166.41666666666666], [1.66956942E12, 0.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956942E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.66956936E12, "maxY": 166.36666666666667, "series": [{"data": [[1.66956936E12, 166.36666666666667], [1.66956942E12, 0.3]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956942E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.66956936E12, "maxY": 166.36666666666667, "series": [{"data": [[1.66956936E12, 166.36666666666667], [1.66956942E12, 0.3]], "isOverall": false, "label": "Microservice-based client-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956942E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.66956936E12, "maxY": 166.36666666666667, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66956936E12, 166.36666666666667], [1.66956942E12, 0.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956942E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

