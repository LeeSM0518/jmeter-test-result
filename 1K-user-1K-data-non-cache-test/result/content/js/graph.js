/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 2180.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 6.0], [0.3, 14.0], [0.4, 42.0], [0.5, 46.0], [0.6, 47.0], [0.7, 47.0], [0.8, 47.0], [0.9, 48.0], [1.0, 48.0], [1.1, 49.0], [1.2, 49.0], [1.3, 50.0], [1.4, 50.0], [1.5, 50.0], [1.6, 50.0], [1.7, 51.0], [1.8, 51.0], [1.9, 51.0], [2.0, 52.0], [2.1, 52.0], [2.2, 52.0], [2.3, 52.0], [2.4, 52.0], [2.5, 52.0], [2.6, 53.0], [2.7, 53.0], [2.8, 53.0], [2.9, 53.0], [3.0, 53.0], [3.1, 53.0], [3.2, 53.0], [3.3, 53.0], [3.4, 53.0], [3.5, 54.0], [3.6, 54.0], [3.7, 54.0], [3.8, 54.0], [3.9, 54.0], [4.0, 54.0], [4.1, 54.0], [4.2, 54.0], [4.3, 54.0], [4.4, 54.0], [4.5, 54.0], [4.6, 55.0], [4.7, 55.0], [4.8, 55.0], [4.9, 55.0], [5.0, 55.0], [5.1, 55.0], [5.2, 55.0], [5.3, 55.0], [5.4, 55.0], [5.5, 55.0], [5.6, 55.0], [5.7, 55.0], [5.8, 55.0], [5.9, 55.0], [6.0, 56.0], [6.1, 56.0], [6.2, 56.0], [6.3, 56.0], [6.4, 56.0], [6.5, 56.0], [6.6, 56.0], [6.7, 56.0], [6.8, 56.0], [6.9, 56.0], [7.0, 56.0], [7.1, 56.0], [7.2, 56.0], [7.3, 56.0], [7.4, 57.0], [7.5, 57.0], [7.6, 57.0], [7.7, 57.0], [7.8, 57.0], [7.9, 57.0], [8.0, 57.0], [8.1, 57.0], [8.2, 57.0], [8.3, 57.0], [8.4, 57.0], [8.5, 57.0], [8.6, 57.0], [8.7, 58.0], [8.8, 58.0], [8.9, 58.0], [9.0, 58.0], [9.1, 58.0], [9.2, 58.0], [9.3, 58.0], [9.4, 58.0], [9.5, 58.0], [9.6, 58.0], [9.7, 58.0], [9.8, 58.0], [9.9, 58.0], [10.0, 58.0], [10.1, 59.0], [10.2, 59.0], [10.3, 59.0], [10.4, 59.0], [10.5, 59.0], [10.6, 59.0], [10.7, 59.0], [10.8, 59.0], [10.9, 59.0], [11.0, 59.0], [11.1, 59.0], [11.2, 60.0], [11.3, 60.0], [11.4, 60.0], [11.5, 60.0], [11.6, 60.0], [11.7, 60.0], [11.8, 60.0], [11.9, 60.0], [12.0, 60.0], [12.1, 60.0], [12.2, 60.0], [12.3, 60.0], [12.4, 60.0], [12.5, 60.0], [12.6, 61.0], [12.7, 61.0], [12.8, 61.0], [12.9, 61.0], [13.0, 61.0], [13.1, 61.0], [13.2, 61.0], [13.3, 61.0], [13.4, 61.0], [13.5, 61.0], [13.6, 61.0], [13.7, 62.0], [13.8, 62.0], [13.9, 62.0], [14.0, 62.0], [14.1, 62.0], [14.2, 62.0], [14.3, 62.0], [14.4, 62.0], [14.5, 62.0], [14.6, 62.0], [14.7, 62.0], [14.8, 62.0], [14.9, 62.0], [15.0, 62.0], [15.1, 62.0], [15.2, 62.0], [15.3, 63.0], [15.4, 63.0], [15.5, 63.0], [15.6, 63.0], [15.7, 63.0], [15.8, 63.0], [15.9, 63.0], [16.0, 63.0], [16.1, 63.0], [16.2, 63.0], [16.3, 63.0], [16.4, 63.0], [16.5, 63.0], [16.6, 63.0], [16.7, 63.0], [16.8, 63.0], [16.9, 64.0], [17.0, 64.0], [17.1, 64.0], [17.2, 64.0], [17.3, 64.0], [17.4, 64.0], [17.5, 64.0], [17.6, 64.0], [17.7, 64.0], [17.8, 64.0], [17.9, 64.0], [18.0, 64.0], [18.1, 64.0], [18.2, 64.0], [18.3, 64.0], [18.4, 64.0], [18.5, 64.0], [18.6, 64.0], [18.7, 65.0], [18.8, 65.0], [18.9, 65.0], [19.0, 65.0], [19.1, 65.0], [19.2, 65.0], [19.3, 65.0], [19.4, 65.0], [19.5, 65.0], [19.6, 65.0], [19.7, 65.0], [19.8, 65.0], [19.9, 65.0], [20.0, 65.0], [20.1, 65.0], [20.2, 65.0], [20.3, 65.0], [20.4, 65.0], [20.5, 66.0], [20.6, 66.0], [20.7, 66.0], [20.8, 66.0], [20.9, 66.0], [21.0, 66.0], [21.1, 66.0], [21.2, 66.0], [21.3, 66.0], [21.4, 66.0], [21.5, 66.0], [21.6, 66.0], [21.7, 66.0], [21.8, 66.0], [21.9, 66.0], [22.0, 66.0], [22.1, 66.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 67.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 67.0], [23.5, 67.0], [23.6, 67.0], [23.7, 68.0], [23.8, 68.0], [23.9, 68.0], [24.0, 68.0], [24.1, 68.0], [24.2, 68.0], [24.3, 68.0], [24.4, 68.0], [24.5, 68.0], [24.6, 68.0], [24.7, 68.0], [24.8, 68.0], [24.9, 68.0], [25.0, 68.0], [25.1, 69.0], [25.2, 69.0], [25.3, 69.0], [25.4, 69.0], [25.5, 69.0], [25.6, 69.0], [25.7, 69.0], [25.8, 69.0], [25.9, 69.0], [26.0, 69.0], [26.1, 69.0], [26.2, 69.0], [26.3, 70.0], [26.4, 70.0], [26.5, 70.0], [26.6, 70.0], [26.7, 70.0], [26.8, 70.0], [26.9, 70.0], [27.0, 70.0], [27.1, 70.0], [27.2, 70.0], [27.3, 70.0], [27.4, 70.0], [27.5, 70.0], [27.6, 70.0], [27.7, 71.0], [27.8, 71.0], [27.9, 71.0], [28.0, 71.0], [28.1, 71.0], [28.2, 71.0], [28.3, 71.0], [28.4, 71.0], [28.5, 71.0], [28.6, 71.0], [28.7, 71.0], [28.8, 71.0], [28.9, 71.0], [29.0, 71.0], [29.1, 71.0], [29.2, 71.0], [29.3, 72.0], [29.4, 72.0], [29.5, 72.0], [29.6, 72.0], [29.7, 72.0], [29.8, 72.0], [29.9, 72.0], [30.0, 72.0], [30.1, 72.0], [30.2, 72.0], [30.3, 72.0], [30.4, 72.0], [30.5, 72.0], [30.6, 72.0], [30.7, 72.0], [30.8, 72.0], [30.9, 72.0], [31.0, 72.0], [31.1, 72.0], [31.2, 73.0], [31.3, 73.0], [31.4, 73.0], [31.5, 73.0], [31.6, 73.0], [31.7, 73.0], [31.8, 73.0], [31.9, 73.0], [32.0, 73.0], [32.1, 73.0], [32.2, 73.0], [32.3, 73.0], [32.4, 73.0], [32.5, 73.0], [32.6, 73.0], [32.7, 73.0], [32.8, 73.0], [32.9, 74.0], [33.0, 74.0], [33.1, 74.0], [33.2, 74.0], [33.3, 74.0], [33.4, 74.0], [33.5, 74.0], [33.6, 74.0], [33.7, 74.0], [33.8, 74.0], [33.9, 74.0], [34.0, 74.0], [34.1, 74.0], [34.2, 74.0], [34.3, 75.0], [34.4, 75.0], [34.5, 75.0], [34.6, 75.0], [34.7, 75.0], [34.8, 75.0], [34.9, 75.0], [35.0, 75.0], [35.1, 75.0], [35.2, 75.0], [35.3, 75.0], [35.4, 75.0], [35.5, 76.0], [35.6, 76.0], [35.7, 76.0], [35.8, 76.0], [35.9, 76.0], [36.0, 76.0], [36.1, 76.0], [36.2, 76.0], [36.3, 76.0], [36.4, 76.0], [36.5, 77.0], [36.6, 77.0], [36.7, 77.0], [36.8, 77.0], [36.9, 77.0], [37.0, 77.0], [37.1, 77.0], [37.2, 77.0], [37.3, 77.0], [37.4, 77.0], [37.5, 78.0], [37.6, 78.0], [37.7, 78.0], [37.8, 78.0], [37.9, 78.0], [38.0, 78.0], [38.1, 78.0], [38.2, 78.0], [38.3, 78.0], [38.4, 78.0], [38.5, 78.0], [38.6, 79.0], [38.7, 79.0], [38.8, 79.0], [38.9, 79.0], [39.0, 79.0], [39.1, 79.0], [39.2, 79.0], [39.3, 79.0], [39.4, 79.0], [39.5, 79.0], [39.6, 80.0], [39.7, 80.0], [39.8, 80.0], [39.9, 80.0], [40.0, 80.0], [40.1, 80.0], [40.2, 80.0], [40.3, 80.0], [40.4, 80.0], [40.5, 80.0], [40.6, 80.0], [40.7, 80.0], [40.8, 81.0], [40.9, 81.0], [41.0, 81.0], [41.1, 81.0], [41.2, 81.0], [41.3, 81.0], [41.4, 81.0], [41.5, 81.0], [41.6, 81.0], [41.7, 81.0], [41.8, 81.0], [41.9, 81.0], [42.0, 81.0], [42.1, 81.0], [42.2, 81.0], [42.3, 82.0], [42.4, 82.0], [42.5, 82.0], [42.6, 82.0], [42.7, 82.0], [42.8, 82.0], [42.9, 82.0], [43.0, 82.0], [43.1, 82.0], [43.2, 82.0], [43.3, 82.0], [43.4, 83.0], [43.5, 83.0], [43.6, 83.0], [43.7, 83.0], [43.8, 83.0], [43.9, 83.0], [44.0, 83.0], [44.1, 83.0], [44.2, 83.0], [44.3, 83.0], [44.4, 83.0], [44.5, 84.0], [44.6, 84.0], [44.7, 84.0], [44.8, 84.0], [44.9, 84.0], [45.0, 84.0], [45.1, 84.0], [45.2, 84.0], [45.3, 84.0], [45.4, 85.0], [45.5, 85.0], [45.6, 85.0], [45.7, 85.0], [45.8, 85.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 85.0], [46.3, 86.0], [46.4, 86.0], [46.5, 86.0], [46.6, 86.0], [46.7, 86.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 86.0], [47.2, 86.0], [47.3, 87.0], [47.4, 87.0], [47.5, 87.0], [47.6, 87.0], [47.7, 87.0], [47.8, 87.0], [47.9, 87.0], [48.0, 87.0], [48.1, 87.0], [48.2, 87.0], [48.3, 88.0], [48.4, 88.0], [48.5, 88.0], [48.6, 88.0], [48.7, 88.0], [48.8, 88.0], [48.9, 88.0], [49.0, 88.0], [49.1, 88.0], [49.2, 88.0], [49.3, 88.0], [49.4, 89.0], [49.5, 89.0], [49.6, 89.0], [49.7, 89.0], [49.8, 89.0], [49.9, 89.0], [50.0, 89.0], [50.1, 89.0], [50.2, 89.0], [50.3, 89.0], [50.4, 90.0], [50.5, 90.0], [50.6, 90.0], [50.7, 90.0], [50.8, 90.0], [50.9, 90.0], [51.0, 90.0], [51.1, 90.0], [51.2, 90.0], [51.3, 90.0], [51.4, 91.0], [51.5, 91.0], [51.6, 91.0], [51.7, 91.0], [51.8, 91.0], [51.9, 91.0], [52.0, 91.0], [52.1, 91.0], [52.2, 92.0], [52.3, 92.0], [52.4, 92.0], [52.5, 92.0], [52.6, 92.0], [52.7, 92.0], [52.8, 92.0], [52.9, 92.0], [53.0, 92.0], [53.1, 92.0], [53.2, 92.0], [53.3, 93.0], [53.4, 93.0], [53.5, 93.0], [53.6, 93.0], [53.7, 93.0], [53.8, 93.0], [53.9, 93.0], [54.0, 93.0], [54.1, 93.0], [54.2, 94.0], [54.3, 94.0], [54.4, 94.0], [54.5, 94.0], [54.6, 94.0], [54.7, 94.0], [54.8, 94.0], [54.9, 94.0], [55.0, 94.0], [55.1, 95.0], [55.2, 95.0], [55.3, 95.0], [55.4, 95.0], [55.5, 95.0], [55.6, 95.0], [55.7, 95.0], [55.8, 95.0], [55.9, 95.0], [56.0, 95.0], [56.1, 95.0], [56.2, 96.0], [56.3, 96.0], [56.4, 96.0], [56.5, 96.0], [56.6, 96.0], [56.7, 96.0], [56.8, 96.0], [56.9, 96.0], [57.0, 96.0], [57.1, 96.0], [57.2, 96.0], [57.3, 97.0], [57.4, 97.0], [57.5, 97.0], [57.6, 97.0], [57.7, 97.0], [57.8, 97.0], [57.9, 97.0], [58.0, 97.0], [58.1, 97.0], [58.2, 97.0], [58.3, 97.0], [58.4, 98.0], [58.5, 98.0], [58.6, 98.0], [58.7, 98.0], [58.8, 98.0], [58.9, 98.0], [59.0, 98.0], [59.1, 98.0], [59.2, 98.0], [59.3, 98.0], [59.4, 99.0], [59.5, 99.0], [59.6, 99.0], [59.7, 99.0], [59.8, 99.0], [59.9, 99.0], [60.0, 99.0], [60.1, 99.0], [60.2, 99.0], [60.3, 99.0], [60.4, 100.0], [60.5, 100.0], [60.6, 100.0], [60.7, 100.0], [60.8, 100.0], [60.9, 100.0], [61.0, 100.0], [61.1, 100.0], [61.2, 100.0], [61.3, 101.0], [61.4, 101.0], [61.5, 101.0], [61.6, 101.0], [61.7, 101.0], [61.8, 101.0], [61.9, 101.0], [62.0, 101.0], [62.1, 101.0], [62.2, 102.0], [62.3, 102.0], [62.4, 102.0], [62.5, 102.0], [62.6, 102.0], [62.7, 102.0], [62.8, 102.0], [62.9, 102.0], [63.0, 102.0], [63.1, 103.0], [63.2, 103.0], [63.3, 103.0], [63.4, 103.0], [63.5, 103.0], [63.6, 103.0], [63.7, 103.0], [63.8, 103.0], [63.9, 104.0], [64.0, 104.0], [64.1, 104.0], [64.2, 104.0], [64.3, 104.0], [64.4, 104.0], [64.5, 104.0], [64.6, 104.0], [64.7, 104.0], [64.8, 104.0], [64.9, 104.0], [65.0, 104.0], [65.1, 105.0], [65.2, 105.0], [65.3, 105.0], [65.4, 105.0], [65.5, 105.0], [65.6, 105.0], [65.7, 105.0], [65.8, 105.0], [65.9, 105.0], [66.0, 105.0], [66.1, 105.0], [66.2, 106.0], [66.3, 106.0], [66.4, 106.0], [66.5, 106.0], [66.6, 106.0], [66.7, 106.0], [66.8, 106.0], [66.9, 106.0], [67.0, 106.0], [67.1, 106.0], [67.2, 106.0], [67.3, 107.0], [67.4, 107.0], [67.5, 107.0], [67.6, 107.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 107.0], [68.1, 108.0], [68.2, 108.0], [68.3, 108.0], [68.4, 108.0], [68.5, 108.0], [68.6, 108.0], [68.7, 108.0], [68.8, 108.0], [68.9, 109.0], [69.0, 109.0], [69.1, 109.0], [69.2, 109.0], [69.3, 109.0], [69.4, 110.0], [69.5, 110.0], [69.6, 110.0], [69.7, 110.0], [69.8, 110.0], [69.9, 110.0], [70.0, 110.0], [70.1, 111.0], [70.2, 111.0], [70.3, 111.0], [70.4, 111.0], [70.5, 111.0], [70.6, 111.0], [70.7, 111.0], [70.8, 111.0], [70.9, 112.0], [71.0, 112.0], [71.1, 112.0], [71.2, 112.0], [71.3, 112.0], [71.4, 112.0], [71.5, 112.0], [71.6, 112.0], [71.7, 113.0], [71.8, 113.0], [71.9, 113.0], [72.0, 113.0], [72.1, 113.0], [72.2, 113.0], [72.3, 113.0], [72.4, 113.0], [72.5, 114.0], [72.6, 114.0], [72.7, 114.0], [72.8, 114.0], [72.9, 114.0], [73.0, 114.0], [73.1, 114.0], [73.2, 115.0], [73.3, 115.0], [73.4, 115.0], [73.5, 115.0], [73.6, 115.0], [73.7, 115.0], [73.8, 116.0], [73.9, 116.0], [74.0, 116.0], [74.1, 116.0], [74.2, 116.0], [74.3, 116.0], [74.4, 116.0], [74.5, 117.0], [74.6, 117.0], [74.7, 117.0], [74.8, 117.0], [74.9, 117.0], [75.0, 117.0], [75.1, 118.0], [75.2, 118.0], [75.3, 118.0], [75.4, 118.0], [75.5, 118.0], [75.6, 118.0], [75.7, 118.0], [75.8, 119.0], [75.9, 119.0], [76.0, 119.0], [76.1, 119.0], [76.2, 119.0], [76.3, 119.0], [76.4, 120.0], [76.5, 120.0], [76.6, 120.0], [76.7, 120.0], [76.8, 120.0], [76.9, 121.0], [77.0, 121.0], [77.1, 121.0], [77.2, 122.0], [77.3, 122.0], [77.4, 122.0], [77.5, 122.0], [77.6, 123.0], [77.7, 123.0], [77.8, 123.0], [77.9, 124.0], [78.0, 124.0], [78.1, 124.0], [78.2, 125.0], [78.3, 125.0], [78.4, 125.0], [78.5, 125.0], [78.6, 126.0], [78.7, 126.0], [78.8, 126.0], [78.9, 127.0], [79.0, 127.0], [79.1, 127.0], [79.2, 127.0], [79.3, 128.0], [79.4, 128.0], [79.5, 128.0], [79.6, 128.0], [79.7, 129.0], [79.8, 129.0], [79.9, 130.0], [80.0, 130.0], [80.1, 130.0], [80.2, 131.0], [80.3, 131.0], [80.4, 132.0], [80.5, 132.0], [80.6, 133.0], [80.7, 133.0], [80.8, 134.0], [80.9, 134.0], [81.0, 134.0], [81.1, 135.0], [81.2, 135.0], [81.3, 135.0], [81.4, 136.0], [81.5, 137.0], [81.6, 137.0], [81.7, 138.0], [81.8, 138.0], [81.9, 139.0], [82.0, 139.0], [82.1, 140.0], [82.2, 141.0], [82.3, 142.0], [82.4, 143.0], [82.5, 143.0], [82.6, 144.0], [82.7, 145.0], [82.8, 146.0], [82.9, 148.0], [83.0, 149.0], [83.1, 151.0], [83.2, 154.0], [83.3, 156.0], [83.4, 158.0], [83.5, 161.0], [83.6, 165.0], [83.7, 170.0], [83.8, 176.0], [83.9, 192.0], [84.0, 267.0], [84.1, 272.0], [84.2, 275.0], [84.3, 278.0], [84.4, 279.0], [84.5, 281.0], [84.6, 282.0], [84.7, 282.0], [84.8, 284.0], [84.9, 285.0], [85.0, 285.0], [85.1, 286.0], [85.2, 286.0], [85.3, 287.0], [85.4, 288.0], [85.5, 289.0], [85.6, 290.0], [85.7, 290.0], [85.8, 291.0], [85.9, 292.0], [86.0, 292.0], [86.1, 294.0], [86.2, 294.0], [86.3, 295.0], [86.4, 296.0], [86.5, 296.0], [86.6, 297.0], [86.7, 298.0], [86.8, 298.0], [86.9, 299.0], [87.0, 300.0], [87.1, 300.0], [87.2, 301.0], [87.3, 302.0], [87.4, 303.0], [87.5, 303.0], [87.6, 304.0], [87.7, 304.0], [87.8, 305.0], [87.9, 306.0], [88.0, 306.0], [88.1, 307.0], [88.2, 308.0], [88.3, 308.0], [88.4, 309.0], [88.5, 310.0], [88.6, 310.0], [88.7, 311.0], [88.8, 312.0], [88.9, 313.0], [89.0, 313.0], [89.1, 313.0], [89.2, 314.0], [89.3, 314.0], [89.4, 315.0], [89.5, 316.0], [89.6, 317.0], [89.7, 317.0], [89.8, 318.0], [89.9, 319.0], [90.0, 319.0], [90.1, 320.0], [90.2, 320.0], [90.3, 321.0], [90.4, 322.0], [90.5, 322.0], [90.6, 323.0], [90.7, 324.0], [90.8, 324.0], [90.9, 325.0], [91.0, 325.0], [91.1, 326.0], [91.2, 326.0], [91.3, 327.0], [91.4, 327.0], [91.5, 328.0], [91.6, 328.0], [91.7, 329.0], [91.8, 330.0], [91.9, 330.0], [92.0, 331.0], [92.1, 332.0], [92.2, 333.0], [92.3, 333.0], [92.4, 334.0], [92.5, 335.0], [92.6, 336.0], [92.7, 336.0], [92.8, 337.0], [92.9, 337.0], [93.0, 338.0], [93.1, 339.0], [93.2, 339.0], [93.3, 340.0], [93.4, 341.0], [93.5, 341.0], [93.6, 342.0], [93.7, 342.0], [93.8, 343.0], [93.9, 344.0], [94.0, 344.0], [94.1, 345.0], [94.2, 346.0], [94.3, 348.0], [94.4, 348.0], [94.5, 349.0], [94.6, 350.0], [94.7, 350.0], [94.8, 351.0], [94.9, 352.0], [95.0, 352.0], [95.1, 354.0], [95.2, 355.0], [95.3, 356.0], [95.4, 357.0], [95.5, 358.0], [95.6, 360.0], [95.7, 361.0], [95.8, 363.0], [95.9, 365.0], [96.0, 366.0], [96.1, 367.0], [96.2, 370.0], [96.3, 371.0], [96.4, 373.0], [96.5, 376.0], [96.6, 377.0], [96.7, 381.0], [96.8, 387.0], [96.9, 398.0], [97.0, 426.0], [97.1, 480.0], [97.2, 486.0], [97.3, 491.0], [97.4, 497.0], [97.5, 509.0], [97.6, 517.0], [97.7, 522.0], [97.8, 526.0], [97.9, 534.0], [98.0, 536.0], [98.1, 541.0], [98.2, 546.0], [98.3, 552.0], [98.4, 557.0], [98.5, 561.0], [98.6, 567.0], [98.7, 570.0], [98.8, 575.0], [98.9, 585.0], [99.0, 604.0], [99.1, 769.0], [99.2, 954.0], [99.3, 1094.0], [99.4, 1116.0], [99.5, 1124.0], [99.6, 1132.0], [99.7, 1155.0], [99.8, 1326.0], [99.9, 1375.0], [100.0, 2180.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6034.0, "series": [{"data": [[0.0, 6034.0], [2100.0, 2.0], [600.0, 8.0], [700.0, 9.0], [200.0, 304.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 11.0], [1100.0, 46.0], [300.0, 994.0], [1300.0, 15.0], [1400.0, 1.0], [1500.0, 1.0], [100.0, 2358.0], [400.0, 51.0], [1800.0, 1.0], [1900.0, 1.0], [500.0, 157.0], [2000.0, 1.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9743.0, "series": [{"data": [[0.0, 9743.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 251.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 405.358899999999, "minX": 1.66956906E12, "maxY": 405.358899999999, "series": [{"data": [[1.66956906E12, 405.358899999999]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 765.2, "series": [{"data": [[2.0, 260.625], [3.0, 5.333333333333333], [4.0, 4.0], [5.0, 5.0], [6.0, 5.0], [7.0, 6.0], [8.0, 4.6], [9.0, 12.0], [10.0, 20.75], [11.0, 41.0], [14.0, 51.666666666666664], [15.0, 58.0], [16.0, 52.25], [17.0, 58.0], [19.0, 43.0], [20.0, 49.0], [23.0, 50.0], [25.0, 51.0], [26.0, 48.0], [27.0, 48.0], [28.0, 47.25], [29.0, 53.333333333333336], [31.0, 50.166666666666664], [33.0, 275.6666666666667], [35.0, 54.333333333333336], [37.0, 50.8], [39.0, 54.0], [38.0, 51.6], [41.0, 53.5], [43.0, 47.5], [42.0, 53.25], [45.0, 56.0], [44.0, 47.25], [47.0, 48.0], [49.0, 503.25], [50.0, 47.0], [53.0, 49.333333333333336], [54.0, 60.0], [57.0, 52.375], [56.0, 59.888888888888886], [58.0, 52.25], [61.0, 60.25], [60.0, 52.166666666666664], [63.0, 64.0], [62.0, 55.0], [67.0, 61.25], [65.0, 60.63636363636363], [64.0, 55.0], [71.0, 58.0], [70.0, 59.0], [69.0, 287.0], [68.0, 62.5], [75.0, 60.0], [74.0, 59.4], [72.0, 59.0], [79.0, 64.5], [78.0, 61.0], [77.0, 57.85714285714286], [76.0, 59.0], [83.0, 60.6], [82.0, 65.60000000000001], [81.0, 69.0], [80.0, 62.5], [86.0, 58.666666666666664], [85.0, 54.0], [84.0, 58.333333333333336], [91.0, 55.0], [90.0, 58.333333333333336], [89.0, 62.0], [88.0, 55.333333333333336], [95.0, 52.8], [94.0, 54.6], [93.0, 54.0], [92.0, 55.666666666666664], [98.0, 45.0], [97.0, 46.0], [96.0, 51.0], [103.0, 54.5], [102.0, 52.0], [100.0, 48.25], [107.0, 54.0], [106.0, 47.0], [105.0, 49.333333333333336], [104.0, 51.666666666666664], [108.0, 55.0], [115.0, 114.13793103448278], [114.0, 53.0], [112.0, 51.0], [116.0, 113.96551724137933], [117.0, 91.51612903225806], [119.0, 169.36363636363637], [120.0, 90.6], [123.0, 59.333333333333336], [122.0, 55.0], [121.0, 54.833333333333336], [125.0, 55.166666666666664], [126.0, 56.4375], [127.0, 59.166666666666664], [128.0, 82.81132075471697], [129.0, 68.41025641025641], [135.0, 54.142857142857146], [134.0, 55.0], [133.0, 110.375], [130.0, 56.5], [141.0, 81.0], [142.0, 209.0], [143.0, 175.33333333333334], [140.0, 54.0], [138.0, 223.66666666666666], [137.0, 55.0], [136.0, 55.0], [149.0, 113.07692307692307], [150.0, 90.2368421052632], [151.0, 197.9], [148.0, 104.5], [145.0, 177.625], [152.0, 84.375], [156.0, 173.60000000000002], [157.0, 80.66666666666667], [158.0, 168.94117647058826], [159.0, 185.0], [155.0, 216.33333333333334], [154.0, 221.85714285714286], [153.0, 49.5], [161.0, 60.5], [164.0, 72.7808219178082], [167.0, 65.41176470588236], [166.0, 169.5], [165.0, 60.0], [160.0, 450.50000000000006], [169.0, 65.27450980392156], [171.0, 66.75], [172.0, 67.15384615384615], [175.0, 57.52631578947368], [174.0, 57.0], [173.0, 56.0], [170.0, 128.75], [168.0, 239.7894736842105], [177.0, 66.39999999999999], [178.0, 58.0], [180.0, 54.5], [181.0, 56.0], [176.0, 170.5], [185.0, 65.09090909090908], [186.0, 62.4], [187.0, 65.33333333333333], [190.0, 62.64705882352941], [191.0, 106.00000000000001], [188.0, 93.30769230769229], [189.0, 84.11111111111111], [192.0, 65.37500000000001], [195.0, 62.911764705882355], [196.0, 79.23611111111111], [199.0, 138.6315789473684], [198.0, 62.0], [194.0, 134.0], [193.0, 314.0], [201.0, 77.30275229357802], [202.0, 106.66666666666667], [204.0, 84.0], [206.0, 93.0], [207.0, 87.5], [203.0, 219.66666666666669], [200.0, 218.66666666666669], [210.0, 88.0], [211.0, 74.75], [213.0, 99.0], [214.0, 96.0], [215.0, 73.35], [216.0, 105.5], [218.0, 72.75], [222.0, 107.99999999999999], [221.0, 266.0], [219.0, 57.0], [217.0, 186.25], [229.0, 86.5], [230.0, 78.4390243902439], [228.0, 55.0], [226.0, 122.25], [225.0, 55.0], [224.0, 149.57142857142856], [232.0, 62.2], [233.0, 64.10526315789473], [234.0, 136.5], [235.0, 67.66666666666667], [236.0, 75.71428571428571], [237.0, 83.0], [238.0, 86.87096774193549], [239.0, 76.57142857142858], [240.0, 151.0], [241.0, 154.0], [242.0, 157.0], [243.0, 108.0], [244.0, 61.75], [245.0, 58.33333333333333], [246.0, 61.92307692307692], [247.0, 189.0], [248.0, 88.75], [249.0, 86.33333333333334], [250.0, 95.33333333333333], [251.0, 116.83333333333334], [254.0, 115.66666666666667], [255.0, 189.0], [253.0, 58.666666666666664], [252.0, 58.45454545454545], [270.0, 129.08163265306123], [257.0, 192.0], [262.0, 77.0], [263.0, 56.0], [256.0, 55.16666666666667], [271.0, 140.1149425287356], [269.0, 181.61111111111114], [268.0, 69.6], [259.0, 51.0], [258.0, 52.0], [267.0, 139.20000000000005], [266.0, 122.1666666666667], [265.0, 66.93749999999999], [264.0, 73.53846153846155], [287.0, 89.12307692307692], [273.0, 98.23076923076924], [272.0, 107.60869565217389], [279.0, 63.33333333333333], [278.0, 93.57142857142857], [277.0, 92.75], [276.0, 65.91666666666667], [274.0, 84.88235294117649], [280.0, 78.57142857142858], [281.0, 85.625], [283.0, 82.66000000000001], [282.0, 89.77777777777777], [286.0, 87.44827586206894], [285.0, 82.66666666666666], [284.0, 56.857142857142854], [275.0, 66.45454545454545], [291.0, 88.89655172413794], [289.0, 89.08333333333331], [288.0, 80.05882352941175], [295.0, 108.83333333333334], [294.0, 102.6], [290.0, 87.21052631578948], [292.0, 87.90476190476191], [293.0, 92.42105263157895], [297.0, 151.0], [299.0, 82.23076923076923], [298.0, 93.2], [300.0, 148.33333333333331], [301.0, 77.75], [302.0, 88.14285714285714], [303.0, 84.33333333333334], [296.0, 77.66666666666667], [316.0, 87.12987012987013], [309.0, 83.9090909090909], [308.0, 53.25], [310.0, 73.4], [311.0, 78.67999999999999], [305.0, 72.82608695652175], [304.0, 83.875], [307.0, 81.86111111111111], [306.0, 89.2], [315.0, 100.82089552238803], [317.0, 97.71739130434784], [318.0, 90.36842105263158], [319.0, 80.04878048780486], [313.0, 88.75757575757581], [312.0, 79.60869565217392], [314.0, 86.51219512195124], [333.0, 71.04347826086955], [320.0, 73.95238095238095], [321.0, 98.24137931034484], [322.0, 56.8], [324.0, 72.5925925925926], [325.0, 68.75], [327.0, 161.5], [329.0, 92.50450450450451], [328.0, 97.5], [330.0, 118.0], [334.0, 73.6], [335.0, 117.0], [332.0, 180.09090909090907], [323.0, 67.0], [348.0, 94.97872340425533], [339.0, 74.93333333333334], [338.0, 68.52941176470588], [340.0, 69.2608695652174], [337.0, 175.0], [336.0, 105.33333333333333], [344.0, 88.81818181818181], [347.0, 74.26923076923076], [346.0, 65.8], [345.0, 208.89999999999998], [349.0, 113.41025641025642], [351.0, 130.88235294117646], [350.0, 84.69999999999999], [352.0, 83.54716981132074], [356.0, 97.64150943396227], [355.0, 126.75], [354.0, 66.7], [353.0, 81.67999999999999], [357.0, 154.29999999999998], [358.0, 127.25000000000001], [359.0, 170.6470588235294], [360.0, 202.57142857142858], [363.0, 119.0], [362.0, 115.66666666666667], [367.0, 133.54545454545453], [366.0, 117.33333333333333], [365.0, 91.0], [369.0, 120.96428571428574], [370.0, 101.0], [373.0, 150.11764705882348], [375.0, 97.93548387096773], [368.0, 121.16666666666667], [374.0, 103.1052631578947], [376.0, 176.7], [383.0, 308.2], [382.0, 94.71428571428572], [380.0, 349.6], [381.0, 326.7142857142857], [372.0, 111.72413793103446], [371.0, 108.52702702702706], [378.0, 160.85365853658533], [379.0, 765.2], [377.0, 255.95454545454544], [397.0, 99.55], [387.0, 125.7], [386.0, 178.87179487179486], [385.0, 224.75], [384.0, 127.49999999999999], [393.0, 93.0], [399.0, 101.0], [398.0, 99.0], [392.0, 93.99999999999999], [391.0, 153.9], [390.0, 105.33333333333333], [389.0, 148.33333333333334], [388.0, 128.3076923076923], [414.0, 102.0181818181818], [403.0, 81.57142857142857], [404.0, 80.375], [409.0, 100.02816901408451], [407.0, 92.39999999999999], [402.0, 302.79999999999995], [401.0, 144.71999999999997], [400.0, 100.85714285714286], [412.0, 77.625], [413.0, 78.33333333333336], [411.0, 85.14285714285714], [410.0, 201.9], [415.0, 114.17500000000003], [408.0, 107.4], [417.0, 96.70833333333333], [418.0, 104.58333333333331], [416.0, 149.92105263157893], [421.0, 63.25], [419.0, 158.5652173913044], [420.0, 145.15384615384613], [422.0, 126.75999999999999], [423.0, 141.2], [428.0, 103.45454545454544], [429.0, 74.5], [427.0, 98.53333333333333], [426.0, 103.7], [431.0, 117.21428571428572], [425.0, 99.5], [424.0, 259.9375], [430.0, 78.38461538461539], [432.0, 93.975], [433.0, 110.76470588235294], [438.0, 108.93827160493828], [437.0, 100.01612903225804], [440.0, 116.91666666666666], [447.0, 161.9090909090909], [446.0, 223.92857142857144], [445.0, 164.55555555555551], [444.0, 136.1428571428571], [442.0, 115.45945945945948], [441.0, 102.8], [439.0, 128.90243902439025], [436.0, 96.30555555555556], [435.0, 77.76923076923076], [434.0, 85.28571428571429], [462.0, 117.28571428571428], [448.0, 160.5], [449.0, 154.14285714285714], [455.0, 258.0], [454.0, 209.375], [453.0, 205.25], [452.0, 590.0], [450.0, 182.11538461538458], [460.0, 220.82051282051285], [451.0, 399.4], [463.0, 180.76470588235293], [461.0, 198.5], [459.0, 177.8], [458.0, 215.0], [457.0, 190.28571428571428], [456.0, 306.0], [479.0, 96.83333333333334], [474.0, 161.30612244897955], [475.0, 223.0], [476.0, 117.6875], [467.0, 338.75], [466.0, 139.4], [465.0, 102.0], [464.0, 99.0], [477.0, 160.45454545454547], [478.0, 125.38461538461539], [473.0, 259.2857142857143], [472.0, 169.16666666666666], [470.0, 188.6], [469.0, 216.3235294117647], [468.0, 96.66666666666667], [480.0, 93.0], [483.0, 163.91666666666669], [492.0, 330.44444444444446], [494.0, 176.53968253968253], [493.0, 289.0], [489.0, 144.0], [488.0, 209.0], [495.0, 157.02857142857144], [482.0, 136.07407407407408], [481.0, 165.5], [484.0, 170.6], [486.0, 195.1515151515151], [487.0, 157.6923076923077], [485.0, 233.4705882352941], [491.0, 160.8235294117647], [490.0, 211.41860465116287], [509.0, 168.3846153846154], [497.0, 126.38461538461539], [496.0, 140.65517241379308], [503.0, 77.5], [502.0, 150.0], [501.0, 201.5], [500.0, 215.85714285714286], [507.0, 143.23999999999998], [506.0, 147.96774193548384], [508.0, 156.38461538461544], [499.0, 509.25], [498.0, 100.42857142857142], [510.0, 111.86206896551724], [511.0, 167.46153846153848], [505.0, 90.23076923076924], [504.0, 89.0], [518.0, 88.15789473684211], [513.0, 134.18918918918916], [514.0, 102.49056603773586], [515.0, 125.2962962962963], [512.0, 141.3], [527.0, 90.05555555555557], [526.0, 160.58333333333334], [525.0, 199.80000000000004], [516.0, 132.34782608695647], [517.0, 145.87499999999997], [519.0, 133.34666666666666], [537.0, 211.20000000000002], [536.0, 87.0], [539.0, 180.92307692307696], [540.0, 124.00000000000001], [542.0, 209.00000000000003], [543.0, 240.33333333333331], [541.0, 125.1818181818182], [538.0, 239.5], [529.0, 80.6], [530.0, 93.69999999999999], [532.0, 175.66666666666666], [531.0, 120.86363636363637], [535.0, 129.1935483870968], [534.0, 76.0], [533.0, 112.0], [528.0, 159.11764705882356], [524.0, 170.3076923076923], [523.0, 154.8421052631579], [522.0, 149.33333333333334], [520.0, 258.1142857142857], [521.0, 176.67999999999998], [573.0, 189.63636363636365], [545.0, 235.6818181818182], [544.0, 199.4090909090909], [559.0, 308.5], [558.0, 231.25], [557.0, 234.75], [556.0, 248.8], [555.0, 278.49999999999994], [548.0, 299.55555555555554], [547.0, 373.9230769230769], [546.0, 320.0], [550.0, 333.6666666666667], [549.0, 295.2307692307692], [554.0, 191.07500000000002], [553.0, 135.33333333333334], [552.0, 243.953488372093], [551.0, 225.53846153846155], [561.0, 204.07407407407405], [560.0, 193.0], [563.0, 213.83333333333331], [562.0, 199.42857142857142], [565.0, 171.0], [564.0, 152.46666666666667], [567.0, 166.57142857142856], [566.0, 278.0], [570.0, 143.6818181818182], [569.0, 125.64999999999999], [568.0, 152.60000000000002], [572.0, 177.99999999999997], [571.0, 287.09090909090907], [574.0, 138.2], [575.0, 214.40816326530611], [583.0, 163.5], [577.0, 221.43181818181816], [578.0, 175.38095238095238], [579.0, 98.09375], [581.0, 196.70370370370375], [580.0, 192.66666666666666], [576.0, 194.91666666666666], [584.0, 129.8125], [585.0, 165.2448979591837], [587.0, 108.66666666666667], [586.0, 62.99999999999999], [590.0, 64.0], [588.0, 176.6086956521739], [591.0, 114.42857142857146], [592.0, 250.75], [606.0, 180.33333333333337], [605.0, 155.2142857142857], [604.0, 101.33333333333333], [603.0, 279.5625], [602.0, 240.6153846153846], [601.0, 173.75000000000003], [600.0, 116.35714285714286], [607.0, 167.5294117647059], [595.0, 116.88888888888887], [599.0, 203.22499999999997], [598.0, 182.5], [597.0, 189.25], [596.0, 120.42105263157895], [594.0, 233.4], [593.0, 126.11764705882354], [636.0, 175.65384615384616], [617.0, 300.64], [616.0, 274.4074074074074], [618.0, 175.125], [639.0, 244.66666666666666], [625.0, 170.1590909090909], [624.0, 218.5], [627.0, 318.0], [626.0, 231.52380952380955], [629.0, 119.33333333333333], [628.0, 183.125], [631.0, 177.77777777777777], [630.0, 350.0], [638.0, 200.2941176470588], [637.0, 276.8], [635.0, 182.0], [634.0, 181.25], [633.0, 119.0], [632.0, 165.25925925925927], [623.0, 179.8], [608.0, 221.83333333333331], [610.0, 170.0], [609.0, 302.92857142857144], [613.0, 225.83333333333331], [611.0, 558.6666666666666], [615.0, 242.52000000000004], [614.0, 209.99999999999997], [622.0, 346.0], [621.0, 186.00000000000003], [620.0, 253.1379310344827], [619.0, 126.25], [665.0, 106.8], [670.0, 159.2222222222222], [640.0, 252.06896551724137], [641.0, 200.47058823529412], [643.0, 237.16666666666666], [642.0, 251.33333333333337], [646.0, 269.1666666666667], [644.0, 286.04347826086956], [664.0, 103.4], [647.0, 146.3846153846154], [667.0, 133.68421052631578], [669.0, 122.07142857142857], [668.0, 140.12500000000003], [651.0, 116.85], [650.0, 201.5], [649.0, 100.35555555555555], [648.0, 169.16666666666669], [652.0, 176.2941176470588], [655.0, 231.0769230769231], [653.0, 183.37500000000003], [660.0, 136.26666666666665], [661.0, 144.21428571428572], [662.0, 213.9], [663.0, 220.25], [671.0, 192.9629629629629], [659.0, 147.91891891891893], [656.0, 77.33333333333333], [685.0, 171.2857142857143], [679.0, 188.29166666666666], [678.0, 211.0], [677.0, 297.25], [676.0, 235.78], [675.0, 246.62790697674413], [674.0, 191.076923076923], [672.0, 177.68750000000003], [681.0, 202.77777777777774], [682.0, 159.44444444444446], [687.0, 163.00000000000003], [686.0, 143.0], [684.0, 206.375], [683.0, 182.25], [680.0, 180.29166666666666], [1.0, 387.79999999999995]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[405.3587000000013, 135.90760000000063]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 687.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22333.333333333332, "minX": 1.66956906E12, "maxY": 124166.66666666667, "series": [{"data": [[1.66956906E12, 22333.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956906E12, 124166.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 135.90760000000063, "minX": 1.66956906E12, "maxY": 135.90760000000063, "series": [{"data": [[1.66956906E12, 135.90760000000063]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 135.7420000000004, "minX": 1.66956906E12, "maxY": 135.7420000000004, "series": [{"data": [[1.66956906E12, 135.7420000000004]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9916000000000016, "minX": 1.66956906E12, "maxY": 0.9916000000000016, "series": [{"data": [[1.66956906E12, 0.9916000000000016]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.66956906E12, "maxY": 2180.0, "series": [{"data": [[1.66956906E12, 2180.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956906E12, 319.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956906E12, 604.9899999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956906E12, 352.9499999999989]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956906E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956906E12, 89.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 49.0, "maxY": 115.0, "series": [{"data": [[1081.0, 68.0], [2831.0, 88.0], [2946.0, 115.0], [3093.0, 80.0], [49.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3093.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 49.0, "maxY": 115.0, "series": [{"data": [[1081.0, 68.0], [2831.0, 88.0], [2946.0, 115.0], [3093.0, 80.0], [49.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3093.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956906E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956906E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956906E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

