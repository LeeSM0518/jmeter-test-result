/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 2450.0, "series": [{"data": [[0.0, 6.0], [0.1, 16.0], [0.2, 19.0], [0.3, 23.0], [0.4, 25.0], [0.5, 27.0], [0.6, 29.0], [0.7, 30.0], [0.8, 31.0], [0.9, 32.0], [1.0, 32.0], [1.1, 33.0], [1.2, 33.0], [1.3, 33.0], [1.4, 33.0], [1.5, 34.0], [1.6, 34.0], [1.7, 34.0], [1.8, 35.0], [1.9, 35.0], [2.0, 35.0], [2.1, 36.0], [2.2, 36.0], [2.3, 36.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 39.0], [3.3, 39.0], [3.4, 39.0], [3.5, 39.0], [3.6, 39.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 40.0], [4.2, 40.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 41.0], [5.8, 41.0], [5.9, 41.0], [6.0, 41.0], [6.1, 41.0], [6.2, 41.0], [6.3, 41.0], [6.4, 41.0], [6.5, 42.0], [6.6, 42.0], [6.7, 42.0], [6.8, 42.0], [6.9, 42.0], [7.0, 42.0], [7.1, 42.0], [7.2, 43.0], [7.3, 43.0], [7.4, 43.0], [7.5, 43.0], [7.6, 43.0], [7.7, 44.0], [7.8, 44.0], [7.9, 44.0], [8.0, 44.0], [8.1, 44.0], [8.2, 44.0], [8.3, 45.0], [8.4, 45.0], [8.5, 45.0], [8.6, 45.0], [8.7, 45.0], [8.8, 45.0], [8.9, 45.0], [9.0, 46.0], [9.1, 46.0], [9.2, 46.0], [9.3, 46.0], [9.4, 46.0], [9.5, 46.0], [9.6, 46.0], [9.7, 46.0], [9.8, 46.0], [9.9, 46.0], [10.0, 47.0], [10.1, 47.0], [10.2, 47.0], [10.3, 47.0], [10.4, 47.0], [10.5, 47.0], [10.6, 47.0], [10.7, 47.0], [10.8, 47.0], [10.9, 47.0], [11.0, 47.0], [11.1, 48.0], [11.2, 48.0], [11.3, 48.0], [11.4, 48.0], [11.5, 48.0], [11.6, 48.0], [11.7, 48.0], [11.8, 48.0], [11.9, 48.0], [12.0, 48.0], [12.1, 48.0], [12.2, 48.0], [12.3, 49.0], [12.4, 49.0], [12.5, 49.0], [12.6, 49.0], [12.7, 49.0], [12.8, 49.0], [12.9, 49.0], [13.0, 49.0], [13.1, 49.0], [13.2, 49.0], [13.3, 50.0], [13.4, 50.0], [13.5, 50.0], [13.6, 50.0], [13.7, 50.0], [13.8, 50.0], [13.9, 50.0], [14.0, 51.0], [14.1, 51.0], [14.2, 51.0], [14.3, 51.0], [14.4, 51.0], [14.5, 52.0], [14.6, 52.0], [14.7, 52.0], [14.8, 52.0], [14.9, 53.0], [15.0, 53.0], [15.1, 53.0], [15.2, 53.0], [15.3, 53.0], [15.4, 54.0], [15.5, 54.0], [15.6, 54.0], [15.7, 54.0], [15.8, 55.0], [15.9, 55.0], [16.0, 55.0], [16.1, 55.0], [16.2, 56.0], [16.3, 56.0], [16.4, 56.0], [16.5, 56.0], [16.6, 57.0], [16.7, 57.0], [16.8, 57.0], [16.9, 58.0], [17.0, 58.0], [17.1, 59.0], [17.2, 59.0], [17.3, 60.0], [17.4, 61.0], [17.5, 62.0], [17.6, 62.0], [17.7, 63.0], [17.8, 64.0], [17.9, 65.0], [18.0, 66.0], [18.1, 67.0], [18.2, 76.0], [18.3, 83.0], [18.4, 88.0], [18.5, 91.0], [18.6, 92.0], [18.7, 96.0], [18.8, 99.0], [18.9, 103.0], [19.0, 107.0], [19.1, 111.0], [19.2, 115.0], [19.3, 117.0], [19.4, 119.0], [19.5, 121.0], [19.6, 124.0], [19.7, 126.0], [19.8, 128.0], [19.9, 131.0], [20.0, 134.0], [20.1, 137.0], [20.2, 139.0], [20.3, 143.0], [20.4, 146.0], [20.5, 151.0], [20.6, 154.0], [20.7, 158.0], [20.8, 163.0], [20.9, 169.0], [21.0, 172.0], [21.1, 174.0], [21.2, 178.0], [21.3, 181.0], [21.4, 186.0], [21.5, 188.0], [21.6, 190.0], [21.7, 193.0], [21.8, 196.0], [21.9, 197.0], [22.0, 199.0], [22.1, 203.0], [22.2, 205.0], [22.3, 207.0], [22.4, 211.0], [22.5, 213.0], [22.6, 215.0], [22.7, 216.0], [22.8, 221.0], [22.9, 223.0], [23.0, 224.0], [23.1, 225.0], [23.2, 227.0], [23.3, 229.0], [23.4, 231.0], [23.5, 233.0], [23.6, 234.0], [23.7, 237.0], [23.8, 241.0], [23.9, 243.0], [24.0, 246.0], [24.1, 248.0], [24.2, 248.0], [24.3, 250.0], [24.4, 252.0], [24.5, 253.0], [24.6, 254.0], [24.7, 255.0], [24.8, 256.0], [24.9, 257.0], [25.0, 258.0], [25.1, 259.0], [25.2, 263.0], [25.3, 264.0], [25.4, 266.0], [25.5, 268.0], [25.6, 269.0], [25.7, 270.0], [25.8, 272.0], [25.9, 274.0], [26.0, 275.0], [26.1, 276.0], [26.2, 277.0], [26.3, 280.0], [26.4, 283.0], [26.5, 286.0], [26.6, 288.0], [26.7, 289.0], [26.8, 290.0], [26.9, 293.0], [27.0, 295.0], [27.1, 297.0], [27.2, 300.0], [27.3, 302.0], [27.4, 305.0], [27.5, 307.0], [27.6, 309.0], [27.7, 311.0], [27.8, 313.0], [27.9, 315.0], [28.0, 316.0], [28.1, 317.0], [28.2, 318.0], [28.3, 320.0], [28.4, 322.0], [28.5, 322.0], [28.6, 322.0], [28.7, 323.0], [28.8, 324.0], [28.9, 324.0], [29.0, 325.0], [29.1, 325.0], [29.2, 326.0], [29.3, 327.0], [29.4, 328.0], [29.5, 330.0], [29.6, 331.0], [29.7, 331.0], [29.8, 332.0], [29.9, 332.0], [30.0, 333.0], [30.1, 334.0], [30.2, 335.0], [30.3, 337.0], [30.4, 339.0], [30.5, 340.0], [30.6, 341.0], [30.7, 341.0], [30.8, 342.0], [30.9, 343.0], [31.0, 343.0], [31.1, 344.0], [31.2, 345.0], [31.3, 345.0], [31.4, 346.0], [31.5, 347.0], [31.6, 347.0], [31.7, 348.0], [31.8, 348.0], [31.9, 348.0], [32.0, 349.0], [32.1, 350.0], [32.2, 350.0], [32.3, 351.0], [32.4, 351.0], [32.5, 352.0], [32.6, 352.0], [32.7, 353.0], [32.8, 354.0], [32.9, 354.0], [33.0, 354.0], [33.1, 354.0], [33.2, 355.0], [33.3, 355.0], [33.4, 356.0], [33.5, 356.0], [33.6, 357.0], [33.7, 357.0], [33.8, 358.0], [33.9, 358.0], [34.0, 359.0], [34.1, 360.0], [34.2, 361.0], [34.3, 361.0], [34.4, 361.0], [34.5, 362.0], [34.6, 362.0], [34.7, 363.0], [34.8, 363.0], [34.9, 363.0], [35.0, 364.0], [35.1, 364.0], [35.2, 365.0], [35.3, 365.0], [35.4, 366.0], [35.5, 366.0], [35.6, 367.0], [35.7, 368.0], [35.8, 369.0], [35.9, 369.0], [36.0, 369.0], [36.1, 370.0], [36.2, 370.0], [36.3, 370.0], [36.4, 371.0], [36.5, 372.0], [36.6, 372.0], [36.7, 373.0], [36.8, 374.0], [36.9, 375.0], [37.0, 376.0], [37.1, 377.0], [37.2, 377.0], [37.3, 378.0], [37.4, 379.0], [37.5, 380.0], [37.6, 381.0], [37.7, 382.0], [37.8, 383.0], [37.9, 384.0], [38.0, 385.0], [38.1, 386.0], [38.2, 386.0], [38.3, 387.0], [38.4, 387.0], [38.5, 388.0], [38.6, 389.0], [38.7, 389.0], [38.8, 390.0], [38.9, 390.0], [39.0, 391.0], [39.1, 392.0], [39.2, 393.0], [39.3, 394.0], [39.4, 394.0], [39.5, 395.0], [39.6, 395.0], [39.7, 396.0], [39.8, 397.0], [39.9, 397.0], [40.0, 398.0], [40.1, 399.0], [40.2, 399.0], [40.3, 399.0], [40.4, 400.0], [40.5, 401.0], [40.6, 402.0], [40.7, 404.0], [40.8, 404.0], [40.9, 405.0], [41.0, 406.0], [41.1, 406.0], [41.2, 406.0], [41.3, 407.0], [41.4, 408.0], [41.5, 408.0], [41.6, 409.0], [41.7, 410.0], [41.8, 410.0], [41.9, 411.0], [42.0, 412.0], [42.1, 413.0], [42.2, 414.0], [42.3, 414.0], [42.4, 415.0], [42.5, 417.0], [42.6, 418.0], [42.7, 418.0], [42.8, 420.0], [42.9, 421.0], [43.0, 422.0], [43.1, 423.0], [43.2, 425.0], [43.3, 426.0], [43.4, 426.0], [43.5, 427.0], [43.6, 428.0], [43.7, 429.0], [43.8, 431.0], [43.9, 432.0], [44.0, 433.0], [44.1, 434.0], [44.2, 435.0], [44.3, 436.0], [44.4, 437.0], [44.5, 438.0], [44.6, 440.0], [44.7, 441.0], [44.8, 443.0], [44.9, 445.0], [45.0, 446.0], [45.1, 447.0], [45.2, 449.0], [45.3, 450.0], [45.4, 451.0], [45.5, 452.0], [45.6, 453.0], [45.7, 454.0], [45.8, 455.0], [45.9, 456.0], [46.0, 457.0], [46.1, 458.0], [46.2, 459.0], [46.3, 459.0], [46.4, 460.0], [46.5, 460.0], [46.6, 460.0], [46.7, 461.0], [46.8, 462.0], [46.9, 463.0], [47.0, 464.0], [47.1, 464.0], [47.2, 465.0], [47.3, 466.0], [47.4, 466.0], [47.5, 467.0], [47.6, 468.0], [47.7, 469.0], [47.8, 471.0], [47.9, 472.0], [48.0, 472.0], [48.1, 473.0], [48.2, 473.0], [48.3, 474.0], [48.4, 474.0], [48.5, 475.0], [48.6, 476.0], [48.7, 477.0], [48.8, 478.0], [48.9, 478.0], [49.0, 478.0], [49.1, 479.0], [49.2, 479.0], [49.3, 479.0], [49.4, 480.0], [49.5, 480.0], [49.6, 480.0], [49.7, 480.0], [49.8, 481.0], [49.9, 481.0], [50.0, 481.0], [50.1, 482.0], [50.2, 483.0], [50.3, 484.0], [50.4, 485.0], [50.5, 485.0], [50.6, 486.0], [50.7, 486.0], [50.8, 486.0], [50.9, 487.0], [51.0, 487.0], [51.1, 487.0], [51.2, 488.0], [51.3, 488.0], [51.4, 488.0], [51.5, 488.0], [51.6, 488.0], [51.7, 489.0], [51.8, 489.0], [51.9, 490.0], [52.0, 490.0], [52.1, 491.0], [52.2, 492.0], [52.3, 492.0], [52.4, 492.0], [52.5, 493.0], [52.6, 493.0], [52.7, 494.0], [52.8, 494.0], [52.9, 494.0], [53.0, 494.0], [53.1, 494.0], [53.2, 495.0], [53.3, 495.0], [53.4, 495.0], [53.5, 495.0], [53.6, 495.0], [53.7, 496.0], [53.8, 496.0], [53.9, 496.0], [54.0, 496.0], [54.1, 497.0], [54.2, 497.0], [54.3, 498.0], [54.4, 498.0], [54.5, 499.0], [54.6, 499.0], [54.7, 499.0], [54.8, 499.0], [54.9, 500.0], [55.0, 500.0], [55.1, 500.0], [55.2, 500.0], [55.3, 501.0], [55.4, 501.0], [55.5, 502.0], [55.6, 502.0], [55.7, 502.0], [55.8, 502.0], [55.9, 502.0], [56.0, 503.0], [56.1, 503.0], [56.2, 503.0], [56.3, 503.0], [56.4, 504.0], [56.5, 504.0], [56.6, 505.0], [56.7, 505.0], [56.8, 506.0], [56.9, 507.0], [57.0, 507.0], [57.1, 507.0], [57.2, 508.0], [57.3, 508.0], [57.4, 508.0], [57.5, 509.0], [57.6, 509.0], [57.7, 510.0], [57.8, 510.0], [57.9, 510.0], [58.0, 511.0], [58.1, 511.0], [58.2, 512.0], [58.3, 512.0], [58.4, 512.0], [58.5, 513.0], [58.6, 513.0], [58.7, 514.0], [58.8, 514.0], [58.9, 514.0], [59.0, 515.0], [59.1, 516.0], [59.2, 516.0], [59.3, 517.0], [59.4, 518.0], [59.5, 519.0], [59.6, 519.0], [59.7, 520.0], [59.8, 521.0], [59.9, 521.0], [60.0, 523.0], [60.1, 524.0], [60.2, 526.0], [60.3, 527.0], [60.4, 528.0], [60.5, 528.0], [60.6, 529.0], [60.7, 530.0], [60.8, 531.0], [60.9, 533.0], [61.0, 534.0], [61.1, 535.0], [61.2, 536.0], [61.3, 536.0], [61.4, 537.0], [61.5, 537.0], [61.6, 538.0], [61.7, 539.0], [61.8, 539.0], [61.9, 540.0], [62.0, 541.0], [62.1, 542.0], [62.2, 543.0], [62.3, 543.0], [62.4, 544.0], [62.5, 544.0], [62.6, 544.0], [62.7, 545.0], [62.8, 545.0], [62.9, 545.0], [63.0, 546.0], [63.1, 547.0], [63.2, 548.0], [63.3, 550.0], [63.4, 551.0], [63.5, 553.0], [63.6, 553.0], [63.7, 554.0], [63.8, 555.0], [63.9, 556.0], [64.0, 558.0], [64.1, 558.0], [64.2, 560.0], [64.3, 561.0], [64.4, 563.0], [64.5, 564.0], [64.6, 565.0], [64.7, 567.0], [64.8, 569.0], [64.9, 570.0], [65.0, 571.0], [65.1, 571.0], [65.2, 572.0], [65.3, 572.0], [65.4, 574.0], [65.5, 576.0], [65.6, 577.0], [65.7, 578.0], [65.8, 580.0], [65.9, 581.0], [66.0, 582.0], [66.1, 582.0], [66.2, 583.0], [66.3, 583.0], [66.4, 583.0], [66.5, 584.0], [66.6, 584.0], [66.7, 584.0], [66.8, 585.0], [66.9, 585.0], [67.0, 585.0], [67.1, 586.0], [67.2, 587.0], [67.3, 588.0], [67.4, 588.0], [67.5, 589.0], [67.6, 590.0], [67.7, 590.0], [67.8, 590.0], [67.9, 591.0], [68.0, 591.0], [68.1, 591.0], [68.2, 592.0], [68.3, 592.0], [68.4, 592.0], [68.5, 593.0], [68.6, 593.0], [68.7, 593.0], [68.8, 594.0], [68.9, 594.0], [69.0, 594.0], [69.1, 595.0], [69.2, 595.0], [69.3, 596.0], [69.4, 597.0], [69.5, 597.0], [69.6, 598.0], [69.7, 598.0], [69.8, 599.0], [69.9, 599.0], [70.0, 600.0], [70.1, 600.0], [70.2, 600.0], [70.3, 601.0], [70.4, 601.0], [70.5, 601.0], [70.6, 602.0], [70.7, 602.0], [70.8, 603.0], [70.9, 604.0], [71.0, 604.0], [71.1, 605.0], [71.2, 606.0], [71.3, 606.0], [71.4, 607.0], [71.5, 607.0], [71.6, 608.0], [71.7, 608.0], [71.8, 609.0], [71.9, 610.0], [72.0, 610.0], [72.1, 611.0], [72.2, 612.0], [72.3, 613.0], [72.4, 613.0], [72.5, 614.0], [72.6, 614.0], [72.7, 615.0], [72.8, 616.0], [72.9, 616.0], [73.0, 617.0], [73.1, 617.0], [73.2, 617.0], [73.3, 618.0], [73.4, 618.0], [73.5, 618.0], [73.6, 619.0], [73.7, 620.0], [73.8, 620.0], [73.9, 620.0], [74.0, 621.0], [74.1, 622.0], [74.2, 622.0], [74.3, 622.0], [74.4, 623.0], [74.5, 623.0], [74.6, 623.0], [74.7, 624.0], [74.8, 624.0], [74.9, 625.0], [75.0, 625.0], [75.1, 626.0], [75.2, 626.0], [75.3, 627.0], [75.4, 627.0], [75.5, 628.0], [75.6, 628.0], [75.7, 629.0], [75.8, 630.0], [75.9, 630.0], [76.0, 631.0], [76.1, 631.0], [76.2, 631.0], [76.3, 632.0], [76.4, 632.0], [76.5, 632.0], [76.6, 633.0], [76.7, 633.0], [76.8, 634.0], [76.9, 634.0], [77.0, 634.0], [77.1, 635.0], [77.2, 636.0], [77.3, 636.0], [77.4, 636.0], [77.5, 637.0], [77.6, 637.0], [77.7, 638.0], [77.8, 638.0], [77.9, 639.0], [78.0, 639.0], [78.1, 640.0], [78.2, 641.0], [78.3, 641.0], [78.4, 641.0], [78.5, 641.0], [78.6, 642.0], [78.7, 642.0], [78.8, 643.0], [78.9, 643.0], [79.0, 644.0], [79.1, 645.0], [79.2, 646.0], [79.3, 647.0], [79.4, 647.0], [79.5, 648.0], [79.6, 649.0], [79.7, 649.0], [79.8, 650.0], [79.9, 651.0], [80.0, 651.0], [80.1, 652.0], [80.2, 653.0], [80.3, 653.0], [80.4, 654.0], [80.5, 655.0], [80.6, 656.0], [80.7, 657.0], [80.8, 658.0], [80.9, 659.0], [81.0, 661.0], [81.1, 663.0], [81.2, 664.0], [81.3, 666.0], [81.4, 667.0], [81.5, 668.0], [81.6, 671.0], [81.7, 672.0], [81.8, 673.0], [81.9, 675.0], [82.0, 678.0], [82.1, 681.0], [82.2, 683.0], [82.3, 685.0], [82.4, 687.0], [82.5, 690.0], [82.6, 694.0], [82.7, 696.0], [82.8, 697.0], [82.9, 699.0], [83.0, 700.0], [83.1, 702.0], [83.2, 702.0], [83.3, 703.0], [83.4, 705.0], [83.5, 708.0], [83.6, 709.0], [83.7, 709.0], [83.8, 710.0], [83.9, 711.0], [84.0, 712.0], [84.1, 713.0], [84.2, 714.0], [84.3, 715.0], [84.4, 716.0], [84.5, 716.0], [84.6, 717.0], [84.7, 717.0], [84.8, 718.0], [84.9, 718.0], [85.0, 719.0], [85.1, 720.0], [85.2, 720.0], [85.3, 721.0], [85.4, 721.0], [85.5, 722.0], [85.6, 722.0], [85.7, 723.0], [85.8, 723.0], [85.9, 724.0], [86.0, 724.0], [86.1, 724.0], [86.2, 725.0], [86.3, 725.0], [86.4, 726.0], [86.5, 726.0], [86.6, 727.0], [86.7, 728.0], [86.8, 729.0], [86.9, 730.0], [87.0, 730.0], [87.1, 731.0], [87.2, 731.0], [87.3, 731.0], [87.4, 732.0], [87.5, 732.0], [87.6, 733.0], [87.7, 733.0], [87.8, 733.0], [87.9, 734.0], [88.0, 735.0], [88.1, 735.0], [88.2, 736.0], [88.3, 737.0], [88.4, 738.0], [88.5, 739.0], [88.6, 739.0], [88.7, 740.0], [88.8, 740.0], [88.9, 741.0], [89.0, 741.0], [89.1, 742.0], [89.2, 743.0], [89.3, 743.0], [89.4, 743.0], [89.5, 744.0], [89.6, 745.0], [89.7, 747.0], [89.8, 748.0], [89.9, 750.0], [90.0, 753.0], [90.1, 756.0], [90.2, 759.0], [90.3, 762.0], [90.4, 765.0], [90.5, 769.0], [90.6, 775.0], [90.7, 784.0], [90.8, 786.0], [90.9, 794.0], [91.0, 798.0], [91.1, 805.0], [91.2, 813.0], [91.3, 818.0], [91.4, 819.0], [91.5, 827.0], [91.6, 833.0], [91.7, 841.0], [91.8, 845.0], [91.9, 853.0], [92.0, 868.0], [92.1, 886.0], [92.2, 897.0], [92.3, 903.0], [92.4, 907.0], [92.5, 912.0], [92.6, 916.0], [92.7, 921.0], [92.8, 927.0], [92.9, 935.0], [93.0, 940.0], [93.1, 948.0], [93.2, 978.0], [93.3, 987.0], [93.4, 990.0], [93.5, 993.0], [93.6, 996.0], [93.7, 997.0], [93.8, 1000.0], [93.9, 1010.0], [94.0, 1018.0], [94.1, 1030.0], [94.2, 1035.0], [94.3, 1042.0], [94.4, 1050.0], [94.5, 1061.0], [94.6, 1065.0], [94.7, 1068.0], [94.8, 1078.0], [94.9, 1088.0], [95.0, 1098.0], [95.1, 1103.0], [95.2, 1112.0], [95.3, 1120.0], [95.4, 1121.0], [95.5, 1128.0], [95.6, 1135.0], [95.7, 1139.0], [95.8, 1146.0], [95.9, 1151.0], [96.0, 1164.0], [96.1, 1170.0], [96.2, 1175.0], [96.3, 1182.0], [96.4, 1189.0], [96.5, 1205.0], [96.6, 1215.0], [96.7, 1226.0], [96.8, 1246.0], [96.9, 1259.0], [97.0, 1270.0], [97.1, 1272.0], [97.2, 1278.0], [97.3, 1285.0], [97.4, 1298.0], [97.5, 1301.0], [97.6, 1306.0], [97.7, 1311.0], [97.8, 1314.0], [97.9, 1319.0], [98.0, 1320.0], [98.1, 1325.0], [98.2, 1327.0], [98.3, 1328.0], [98.4, 1331.0], [98.5, 1334.0], [98.6, 1337.0], [98.7, 1342.0], [98.8, 1346.0], [98.9, 1351.0], [99.0, 1395.0], [99.1, 1429.0], [99.2, 1501.0], [99.3, 1556.0], [99.4, 1597.0], [99.5, 1676.0], [99.6, 1778.0], [99.7, 1811.0], [99.8, 1877.0], [99.9, 1926.0], [100.0, 2450.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1884.0, "series": [{"data": [[0.0, 1884.0], [2100.0, 1.0], [2300.0, 2.0], [600.0, 1295.0], [2400.0, 2.0], [700.0, 807.0], [200.0, 517.0], [800.0, 127.0], [900.0, 149.0], [1000.0, 125.0], [1100.0, 146.0], [300.0, 1317.0], [1200.0, 95.0], [1300.0, 158.0], [1400.0, 17.0], [1500.0, 21.0], [100.0, 317.0], [400.0, 1445.0], [1600.0, 10.0], [1700.0, 16.0], [1800.0, 21.0], [1900.0, 5.0], [500.0, 1520.0], [2000.0, 3.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 81.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5524.0, "series": [{"data": [[0.0, 5524.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4395.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 81.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 816.6247999999973, "minX": 1.66956876E12, "maxY": 816.6247999999973, "series": [{"data": [[1.66956876E12, 816.6247999999973]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956876E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 859.0, "series": [{"data": [[2.0, 14.0], [4.0, 14.0], [5.0, 15.0], [7.0, 15.0], [8.0, 16.333333333333332], [9.0, 47.0], [10.0, 17.0], [11.0, 25.0], [12.0, 48.0], [13.0, 47.0], [14.0, 30.0], [15.0, 30.5], [16.0, 29.333333333333332], [17.0, 46.0], [18.0, 40.5], [20.0, 38.0], [21.0, 43.0], [22.0, 41.0], [23.0, 45.6], [24.0, 51.0], [25.0, 50.0], [27.0, 50.5], [29.0, 49.666666666666664], [30.0, 53.0], [33.0, 50.0], [32.0, 53.0], [35.0, 45.0], [34.0, 45.0], [37.0, 43.0], [36.0, 43.0], [39.0, 44.0], [38.0, 43.0], [40.0, 44.0], [43.0, 41.0], [42.0, 45.0], [47.0, 33.75], [48.0, 38.0], [51.0, 34.0], [50.0, 34.0], [60.0, 52.0], [61.0, 60.0], [62.0, 55.0], [66.0, 50.0], [65.0, 63.5], [71.0, 69.0], [70.0, 69.0], [69.0, 47.5], [68.0, 56.46153846153847], [74.0, 52.0], [73.0, 53.333333333333336], [79.0, 53.0], [78.0, 41.0], [77.0, 61.0], [76.0, 59.0], [83.0, 92.33333333333333], [82.0, 46.0], [80.0, 58.5], [87.0, 66.0], [86.0, 49.0], [85.0, 45.0], [88.0, 131.0], [94.0, 77.06666666666666], [98.0, 79.0], [97.0, 105.0], [96.0, 58.666666666666664], [113.0, 106.66666666666667], [117.0, 77.5], [116.0, 44.0], [123.0, 89.0], [122.0, 115.0], [121.0, 107.16666666666667], [120.0, 86.0], [126.0, 111.0], [125.0, 78.0], [135.0, 140.0666666666667], [134.0, 77.0], [133.0, 89.0], [131.0, 97.5], [132.0, 91.0], [130.0, 142.66666666666666], [128.0, 106.0], [138.0, 160.33333333333334], [136.0, 153.875], [139.0, 146.57142857142856], [137.0, 146.8], [141.0, 168.2], [142.0, 72.0], [140.0, 45.0], [151.0, 106.0], [150.0, 241.25], [149.0, 111.75], [147.0, 153.5], [145.0, 168.875], [153.0, 273.55555555555554], [158.0, 196.54545454545453], [159.0, 107.0], [157.0, 107.0], [156.0, 106.0], [155.0, 107.0], [154.0, 106.0], [152.0, 149.5], [162.0, 277.3333333333333], [166.0, 302.0], [167.0, 478.0], [165.0, 76.0], [164.0, 358.0], [163.0, 196.8], [161.0, 145.5], [160.0, 104.0], [169.0, 274.125], [174.0, 180.0], [172.0, 138.69230769230774], [178.0, 175.89999999999998], [181.0, 120.33333333333333], [179.0, 149.0], [177.0, 129.5], [176.0, 158.5], [191.0, 261.5], [190.0, 206.0909090909091], [199.0, 227.5], [198.0, 261.0], [197.0, 220.5], [196.0, 121.0], [194.0, 113.0], [192.0, 142.33333333333334], [201.0, 234.89473684210523], [203.0, 236.33333333333334], [204.0, 351.0], [205.0, 274.0], [206.0, 172.66666666666666], [207.0, 195.5], [208.0, 256.0], [209.0, 255.0], [214.0, 257.0], [215.0, 183.33333333333334], [212.0, 239.66666666666666], [211.0, 469.5], [210.0, 118.33333333333333], [217.0, 256.0], [218.0, 436.0], [222.0, 51.0], [221.0, 86.0], [219.0, 123.33333333333333], [228.0, 237.66666666666669], [227.0, 124.5], [226.0, 147.5], [224.0, 50.0], [232.0, 247.2], [234.0, 247.5], [235.0, 180.0], [237.0, 213.33333333333334], [238.0, 149.0], [239.0, 37.0], [236.0, 53.0], [233.0, 74.2], [242.0, 244.66666666666666], [246.0, 212.3], [240.0, 242.4], [252.0, 40.0], [255.0, 115.55555555555556], [254.0, 216.5], [253.0, 187.33333333333334], [269.0, 191.66666666666666], [256.0, 233.24999999999997], [259.0, 270.59999999999997], [257.0, 134.0], [261.0, 200.83333333333334], [263.0, 181.125], [264.0, 275.0], [271.0, 164.0], [270.0, 111.4], [260.0, 155.85714285714286], [287.0, 184.0], [275.0, 445.0], [278.0, 286.0], [277.0, 151.0], [276.0, 187.60000000000002], [279.0, 258.0], [272.0, 249.1111111111111], [274.0, 143.0], [273.0, 205.8], [280.0, 230.37500000000003], [286.0, 234.5], [284.0, 271.6666666666667], [283.0, 310.0], [282.0, 201.0], [281.0, 65.0], [288.0, 292.5], [293.0, 231.43999999999994], [296.0, 177.33333333333334], [300.0, 299.0], [302.0, 229.0], [299.0, 48.0], [307.0, 307.0], [314.0, 142.8], [312.0, 180.1818181818182], [310.0, 52.0], [309.0, 180.38888888888889], [308.0, 158.0], [328.0, 247.26666666666662], [329.0, 285.1], [330.0, 339.24999999999994], [333.0, 191.0], [332.0, 262.6666666666667], [331.0, 249.25], [327.0, 242.8], [326.0, 212.0], [350.0, 415.2], [339.0, 329.0], [343.0, 297.0909090909091], [341.0, 354.2], [340.0, 256.09999999999997], [351.0, 406.62500000000006], [349.0, 421.5], [348.0, 201.0], [346.0, 740.0], [345.0, 291.2], [344.0, 297.0], [359.0, 39.0], [365.0, 296.55555555555554], [367.0, 204.4], [364.0, 167.07692307692307], [360.0, 53.0], [354.0, 126.0], [352.0, 128.0], [353.0, 312.5], [368.0, 193.91666666666663], [370.0, 274.5], [380.0, 291.79999999999995], [381.0, 55.0], [382.0, 344.0], [383.0, 215.0], [371.0, 102.0], [369.0, 127.5], [396.0, 287.8], [384.0, 50.0], [387.0, 341.0], [388.0, 217.6153846153846], [391.0, 276.75], [390.0, 401.6666666666667], [399.0, 450.0], [398.0, 215.83333333333331], [397.0, 56.5], [393.0, 309.37500000000006], [403.0, 373.1666666666667], [402.0, 250.71428571428572], [409.0, 277.6875], [411.0, 502.1428571428571], [415.0, 178.75], [412.0, 505.0], [406.0, 163.33333333333334], [405.0, 271.0], [401.0, 113.66666666666666], [418.0, 357.0], [423.0, 472.0], [424.0, 281.5], [429.0, 471.6], [430.0, 469.2], [428.0, 230.0], [426.0, 462.8], [421.0, 518.0322580645161], [416.0, 364.0], [433.0, 367.7142857142857], [434.0, 394.6153846153846], [440.0, 315.75], [444.0, 267.27777777777777], [437.0, 424.33333333333337], [436.0, 371.0], [435.0, 230.0], [432.0, 400.0], [460.0, 279.375], [456.0, 278.7142857142858], [463.0, 345.3333333333333], [461.0, 252.5], [459.0, 242.5], [454.0, 324.3333333333333], [452.0, 234.0], [451.0, 117.2], [449.0, 250.0], [448.0, 461.8], [465.0, 392.88235294117646], [473.0, 382.0], [477.0, 414.57142857142856], [479.0, 180.0], [469.0, 333.4], [467.0, 252.5], [466.0, 284.7142857142857], [464.0, 230.0], [492.0, 393.625], [482.0, 323.5714285714286], [483.0, 214.57142857142858], [485.0, 280.3076923076923], [484.0, 252.5], [487.0, 37.0], [481.0, 243.0], [480.0, 379.5], [486.0, 269.0], [489.0, 332.3333333333333], [490.0, 373.25], [491.0, 90.75], [495.0, 185.0], [488.0, 183.66666666666666], [494.0, 253.0], [493.0, 142.83333333333334], [508.0, 281.6923076923077], [497.0, 376.0], [499.0, 377.6666666666667], [500.0, 326.85714285714283], [501.0, 322.23076923076917], [502.0, 228.99999999999997], [503.0, 180.66666666666666], [496.0, 249.0], [504.0, 338.59999999999997], [507.0, 324.1428571428571], [506.0, 128.6], [509.0, 231.0], [511.0, 258.0], [519.0, 411.0], [516.0, 314.09090909090907], [513.0, 409.5], [527.0, 258.0], [526.0, 240.66666666666666], [518.0, 197.22222222222223], [517.0, 264.0], [524.0, 386.66666666666663], [523.0, 231.625], [522.0, 157.5], [521.0, 43.5], [520.0, 169.22222222222223], [525.0, 458.8], [531.0, 311.0], [530.0, 268.5], [529.0, 255.5], [528.0, 275.0], [535.0, 254.5], [533.0, 326.0], [541.0, 304.0], [542.0, 276.0], [543.0, 348.0], [538.0, 341.4375], [537.0, 385.4], [536.0, 207.25], [539.0, 266.25], [569.0, 472.5], [544.0, 300.875], [550.0, 181.61538461538458], [549.0, 300.0], [548.0, 165.0], [547.0, 236.8], [545.0, 47.0], [554.0, 311.14285714285717], [553.0, 322.2857142857143], [552.0, 267.2], [555.0, 281.5], [557.0, 291.5], [556.0, 289.0], [559.0, 463.6842105263158], [558.0, 474.0], [575.0, 410.75000000000006], [561.0, 287.25], [563.0, 280.0], [562.0, 289.0], [565.0, 379.6666666666667], [564.0, 286.5], [567.0, 324.5], [566.0, 292.5], [573.0, 314.0], [571.0, 222.2], [568.0, 310.2], [551.0, 288.3333333333333], [604.0, 113.5], [580.0, 424.7142857142857], [579.0, 295.0], [578.0, 208.33333333333334], [577.0, 164.5], [576.0, 36.0], [591.0, 179.0], [590.0, 255.25], [589.0, 508.3333333333333], [588.0, 172.0], [587.0, 137.33333333333334], [586.0, 172.0], [585.0, 259.0], [584.0, 48.5], [581.0, 431.3333333333333], [594.0, 472.0], [593.0, 261.4], [592.0, 290.44444444444446], [596.0, 49.5], [595.0, 276.85714285714283], [606.0, 330.9090909090909], [607.0, 188.75], [602.0, 100.2], [601.0, 246.62499999999994], [583.0, 49.666666666666664], [582.0, 235.25], [598.0, 322.75], [597.0, 271.33333333333337], [632.0, 487.00000000000006], [637.0, 327.4444444444444], [613.0, 415.52000000000004], [612.0, 40.2], [611.0, 99.2], [610.0, 242.0], [615.0, 264.0], [623.0, 286.875], [622.0, 322.25], [621.0, 181.0], [620.0, 330.00000000000006], [619.0, 183.0], [618.0, 39.0], [633.0, 329.16666666666663], [616.0, 258.6666666666667], [617.0, 238.375], [626.0, 347.75], [629.0, 481.77777777777777], [628.0, 209.16666666666666], [627.0, 110.00000000000001], [631.0, 542.7692307692306], [630.0, 206.14285714285717], [639.0, 346.25], [624.0, 240.7142857142857], [636.0, 362.375], [635.0, 323.75], [642.0, 500.8333333333333], [640.0, 299.0], [641.0, 430.0], [647.0, 401.0], [646.0, 335.5], [645.0, 319.2], [644.0, 332.0], [666.0, 362.0], [664.0, 543.1666666666667], [668.0, 406.0], [667.0, 325.0], [669.0, 313.0], [671.0, 429.14285714285717], [656.0, 263.0], [670.0, 333.6666666666667], [648.0, 431.9230769230769], [649.0, 324.85714285714283], [650.0, 409.625], [652.0, 340.15384615384625], [651.0, 185.5], [654.0, 299.28571428571433], [653.0, 340.0], [655.0, 452.6666666666667], [657.0, 424.29166666666663], [661.0, 483.6666666666667], [660.0, 329.0], [659.0, 331.0], [658.0, 331.25], [662.0, 335.24999999999994], [663.0, 525.6], [701.0, 355.5], [679.0, 295.25], [680.0, 419.3333333333333], [682.0, 412.75], [681.0, 480.0], [684.0, 561.4545454545455], [683.0, 185.75], [685.0, 285.3], [686.0, 645.25], [687.0, 533.7142857142857], [678.0, 278.2], [676.0, 324.0], [674.0, 562.0], [675.0, 326.0], [673.0, 191.5], [672.0, 335.0], [692.0, 479.0], [691.0, 373.5], [690.0, 475.0], [689.0, 517.8333333333334], [688.0, 583.2857142857143], [693.0, 685.0], [695.0, 349.6923076923077], [694.0, 245.0], [700.0, 436.83333333333337], [699.0, 387.77777777777777], [698.0, 343.6666666666667], [697.0, 566.3333333333334], [696.0, 189.5], [703.0, 688.5], [702.0, 616.6], [732.0, 427.6], [706.0, 389.6], [716.0, 60.75], [715.0, 345.6], [714.0, 350.14285714285717], [713.0, 42.666666666666664], [712.0, 276.0], [717.0, 429.875], [719.0, 277.25], [705.0, 439.25], [704.0, 409.3333333333333], [718.0, 347.3333333333333], [729.0, 201.5], [728.0, 348.5], [711.0, 387.6666666666667], [710.0, 480.2], [709.0, 286.0], [707.0, 348.0], [734.0, 467.22222222222223], [735.0, 313.4375], [720.0, 51.0], [722.0, 202.5], [721.0, 39.666666666666664], [725.0, 482.2], [724.0, 359.3333333333333], [727.0, 362.3333333333333], [726.0, 364.0], [733.0, 48.0], [731.0, 363.0], [730.0, 393.20000000000005], [760.0, 470.94117647058823], [737.0, 202.25], [736.0, 433.5333333333333], [741.0, 252.46666666666667], [740.0, 355.0], [739.0, 356.2], [738.0, 356.75], [743.0, 353.5], [744.0, 411.25], [748.0, 524.5], [747.0, 369.25], [750.0, 206.0], [749.0, 554.6], [751.0, 353.6], [752.0, 385.12499999999994], [753.0, 340.14285714285717], [754.0, 365.0], [755.0, 371.1818181818182], [759.0, 208.0], [758.0, 52.0], [757.0, 325.5], [767.0, 198.99999999999997], [766.0, 338.85714285714283], [765.0, 543.375], [764.0, 555.625], [763.0, 448.21739130434787], [762.0, 515.8333333333334], [761.0, 395.9230769230769], [793.0, 482.4347826086955], [771.0, 366.125], [770.0, 524.6666666666667], [783.0, 470.23809523809524], [768.0, 299.0], [769.0, 374.25], [773.0, 398.33333333333337], [772.0, 417.4285714285715], [774.0, 350.0], [792.0, 360.5], [775.0, 344.0], [781.0, 859.0], [779.0, 597.6666666666666], [778.0, 597.3333333333334], [777.0, 347.21428571428567], [776.0, 193.5], [782.0, 592.4705882352941], [786.0, 339.16666666666663], [787.0, 423.2], [788.0, 446.2727272727273], [790.0, 41.0], [789.0, 427.91666666666663], [794.0, 439.3333333333333], [795.0, 517.0], [796.0, 411.1428571428571], [797.0, 383.85714285714283], [785.0, 362.3333333333333], [784.0, 448.55555555555554], [825.0, 434.3333333333333], [806.0, 453.5999999999999], [815.0, 340.55555555555554], [801.0, 265.33333333333326], [803.0, 54.0], [802.0, 300.15789473684214], [805.0, 305.25], [804.0, 363.0], [814.0, 411.5], [813.0, 362.0], [812.0, 572.0], [824.0, 445.57142857142856], [807.0, 356.0], [808.0, 450.2222222222223], [810.0, 607.8], [809.0, 379.5], [811.0, 386.1111111111111], [816.0, 411.88], [818.0, 380.0588235294117], [817.0, 424.00000000000006], [819.0, 463.6666666666667], [823.0, 464.2], [822.0, 388.7692307692307], [821.0, 369.53333333333336], [820.0, 390.0], [826.0, 486.25], [827.0, 463.0], [828.0, 406.8285714285713], [829.0, 463.25], [831.0, 321.8333333333333], [830.0, 381.8], [861.0, 381.2105263157894], [834.0, 147.2], [836.0, 382.8666666666666], [835.0, 382.0], [837.0, 462.5], [857.0, 53.0], [839.0, 383.0], [842.0, 366.5], [841.0, 601.4], [840.0, 705.0], [843.0, 362.5], [845.0, 567.8888888888889], [844.0, 568.0833333333333], [847.0, 418.6], [833.0, 223.0], [832.0, 409.0909090909091], [846.0, 560.0], [850.0, 273.0], [852.0, 46.5], [851.0, 680.0], [854.0, 282.6666666666667], [853.0, 523.0], [862.0, 389.4], [849.0, 475.1818181818182], [848.0, 60.0], [858.0, 399.8], [860.0, 394.0], [869.0, 367.0857142857143], [891.0, 364.2], [871.0, 481.6153846153846], [870.0, 415.3333333333333], [888.0, 555.4705882352941], [890.0, 246.22222222222229], [889.0, 290.6666666666667], [874.0, 538.0], [873.0, 401.53846153846155], [875.0, 383.1875], [879.0, 279.0], [864.0, 60.75], [866.0, 228.0], [865.0, 388.5833333333333], [868.0, 549.375], [867.0, 461.6666666666667], [878.0, 289.72222222222223], [877.0, 690.3333333333333], [876.0, 702.0769230769231], [880.0, 448.8571428571429], [881.0, 560.3333333333334], [884.0, 46.0], [882.0, 512.2], [885.0, 357.18181818181813], [886.0, 197.33333333333334], [887.0, 392.4545454545454], [892.0, 325.5], [893.0, 402.75], [895.0, 282.1034482758621], [894.0, 404.5], [925.0, 304.090909090909], [898.0, 486.8333333333334], [903.0, 490.77777777777777], [902.0, 212.69230769230768], [901.0, 360.3636363636363], [900.0, 772.4375], [899.0, 399.66666666666674], [922.0, 214.75], [921.0, 358.77777777777777], [904.0, 583.0], [905.0, 498.5], [907.0, 493.5000000000001], [906.0, 637.0], [908.0, 285.1818181818182], [911.0, 274.1666666666667], [897.0, 419.14285714285717], [896.0, 639.0], [910.0, 372.6666666666667], [909.0, 236.5], [916.0, 461.75], [915.0, 532.4999999999998], [914.0, 372.7142857142857], [913.0, 376.2857142857143], [912.0, 433.0], [917.0, 231.0], [919.0, 416.3999999999999], [918.0, 641.6874999999999], [927.0, 290.6666666666667], [926.0, 314.0], [924.0, 295.1666666666667], [923.0, 300.16666666666663], [956.0, 476.2941176470587], [941.0, 492.1538461538462], [940.0, 334.6], [939.0, 409.8666666666667], [937.0, 316.3333333333333], [936.0, 550.8], [942.0, 418.46666666666664], [943.0, 489.6666666666667], [929.0, 313.4], [928.0, 415.7142857142857], [931.0, 371.00000000000006], [930.0, 304.9], [933.0, 419.0], [932.0, 430.92857142857144], [935.0, 350.875], [934.0, 252.75], [953.0, 179.66666666666669], [952.0, 216.42857142857142], [959.0, 673.8365384615385], [944.0, 345.18181818181813], [946.0, 532.88], [945.0, 638.6], [948.0, 301.875], [947.0, 390.0], [950.0, 459.5], [949.0, 393.2947368421053], [958.0, 597.0588235294117], [957.0, 503.05263157894734], [955.0, 447.3773584905661], [954.0, 423.4], [988.0, 533.9999999999997], [991.0, 476.55], [977.0, 489.0], [976.0, 494.6], [979.0, 628.3684210526314], [978.0, 562.68085106383], [981.0, 568.5333333333332], [980.0, 582.1739130434783], [990.0, 391.37572254335254], [989.0, 561.3076923076924], [987.0, 599.181818181818], [986.0, 271.0], [985.0, 453.64285714285717], [984.0, 449.8030303030303], [975.0, 514.1500000000001], [961.0, 432.9767441860464], [960.0, 523.4482758620692], [963.0, 182.45454545454544], [962.0, 484.6666666666667], [965.0, 55.0], [964.0, 290.57142857142856], [967.0, 134.8], [966.0, 155.0], [974.0, 739.0], [973.0, 601.5625], [972.0, 532.6470588235294], [971.0, 543.0454545454545], [970.0, 485.1111111111111], [969.0, 390.05555555555554], [968.0, 153.125], [983.0, 444.2352941176471], [982.0, 559.864406779661], [996.0, 562.366228070175], [1000.0, 651.245606128887], [999.0, 622.8169230769232], [998.0, 724.8421052631578], [997.0, 612.4464285714283], [995.0, 561.1314741035859], [994.0, 520.7083333333333], [993.0, 549.6521739130433], [992.0, 497.25000000000006], [1.0, 16.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[816.6247999999988, 469.1064999999997]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22333.333333333332, "minX": 1.66956876E12, "maxY": 79500.0, "series": [{"data": [[1.66956876E12, 22333.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956876E12, 79500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956876E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 469.1064999999997, "minX": 1.66956876E12, "maxY": 469.1064999999997, "series": [{"data": [[1.66956876E12, 469.1064999999997]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956876E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 469.08240000000046, "minX": 1.66956876E12, "maxY": 469.08240000000046, "series": [{"data": [[1.66956876E12, 469.08240000000046]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956876E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.7069999999999996, "minX": 1.66956876E12, "maxY": 0.7069999999999996, "series": [{"data": [[1.66956876E12, 0.7069999999999996]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956876E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.66956876E12, "maxY": 2450.0, "series": [{"data": [[1.66956876E12, 2450.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956876E12, 753.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956876E12, 1396.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956876E12, 1098.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956876E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956876E12, 481.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956876E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 144.0, "minX": 295.0, "maxY": 714.0, "series": [{"data": [[2139.0, 493.0], [295.0, 267.0], [2501.0, 356.0], [1411.0, 714.0], [1766.0, 600.0], [897.0, 144.0], [991.0, 462.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2501.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 144.0, "minX": 295.0, "maxY": 714.0, "series": [{"data": [[2139.0, 493.0], [295.0, 267.0], [2501.0, 356.0], [1411.0, 714.0], [1766.0, 600.0], [897.0, 144.0], [991.0, 462.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2501.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956876E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956876E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956876E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956876E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956876E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956876E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956876E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956876E12, 166.66666666666666]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956876E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.66956876E12, "maxY": 166.66666666666666, "series": [{"data": [[1.66956876E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956876E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

