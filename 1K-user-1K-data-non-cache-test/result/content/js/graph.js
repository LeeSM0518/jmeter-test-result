/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6561.0, "series": [{"data": [[0.0, 3.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 5.0], [3.6, 7.0], [3.7, 8.0], [3.8, 11.0], [3.9, 12.0], [4.0, 14.0], [4.1, 16.0], [4.2, 16.0], [4.3, 19.0], [4.4, 20.0], [4.5, 23.0], [4.6, 24.0], [4.7, 27.0], [4.8, 28.0], [4.9, 31.0], [5.0, 32.0], [5.1, 35.0], [5.2, 37.0], [5.3, 40.0], [5.4, 42.0], [5.5, 44.0], [5.6, 46.0], [5.7, 48.0], [5.8, 48.0], [5.9, 49.0], [6.0, 51.0], [6.1, 51.0], [6.2, 52.0], [6.3, 52.0], [6.4, 53.0], [6.5, 53.0], [6.6, 54.0], [6.7, 55.0], [6.8, 55.0], [6.9, 56.0], [7.0, 56.0], [7.1, 57.0], [7.2, 57.0], [7.3, 57.0], [7.4, 58.0], [7.5, 58.0], [7.6, 58.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 60.0], [8.2, 60.0], [8.3, 60.0], [8.4, 60.0], [8.5, 61.0], [8.6, 61.0], [8.7, 61.0], [8.8, 61.0], [8.9, 62.0], [9.0, 62.0], [9.1, 62.0], [9.2, 62.0], [9.3, 62.0], [9.4, 63.0], [9.5, 63.0], [9.6, 63.0], [9.7, 63.0], [9.8, 63.0], [9.9, 64.0], [10.0, 64.0], [10.1, 64.0], [10.2, 64.0], [10.3, 64.0], [10.4, 65.0], [10.5, 65.0], [10.6, 65.0], [10.7, 65.0], [10.8, 65.0], [10.9, 66.0], [11.0, 66.0], [11.1, 66.0], [11.2, 66.0], [11.3, 66.0], [11.4, 66.0], [11.5, 67.0], [11.6, 67.0], [11.7, 67.0], [11.8, 67.0], [11.9, 67.0], [12.0, 67.0], [12.1, 68.0], [12.2, 68.0], [12.3, 68.0], [12.4, 68.0], [12.5, 68.0], [12.6, 68.0], [12.7, 69.0], [12.8, 69.0], [12.9, 69.0], [13.0, 69.0], [13.1, 69.0], [13.2, 69.0], [13.3, 69.0], [13.4, 70.0], [13.5, 70.0], [13.6, 70.0], [13.7, 70.0], [13.8, 70.0], [13.9, 70.0], [14.0, 70.0], [14.1, 71.0], [14.2, 71.0], [14.3, 71.0], [14.4, 71.0], [14.5, 71.0], [14.6, 71.0], [14.7, 71.0], [14.8, 71.0], [14.9, 72.0], [15.0, 72.0], [15.1, 72.0], [15.2, 72.0], [15.3, 72.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 73.0], [15.8, 73.0], [15.9, 73.0], [16.0, 73.0], [16.1, 73.0], [16.2, 73.0], [16.3, 73.0], [16.4, 73.0], [16.5, 74.0], [16.6, 74.0], [16.7, 74.0], [16.8, 74.0], [16.9, 74.0], [17.0, 74.0], [17.1, 74.0], [17.2, 74.0], [17.3, 75.0], [17.4, 75.0], [17.5, 75.0], [17.6, 75.0], [17.7, 75.0], [17.8, 75.0], [17.9, 75.0], [18.0, 76.0], [18.1, 76.0], [18.2, 76.0], [18.3, 76.0], [18.4, 76.0], [18.5, 76.0], [18.6, 76.0], [18.7, 77.0], [18.8, 77.0], [18.9, 77.0], [19.0, 77.0], [19.1, 77.0], [19.2, 77.0], [19.3, 77.0], [19.4, 78.0], [19.5, 78.0], [19.6, 78.0], [19.7, 78.0], [19.8, 78.0], [19.9, 78.0], [20.0, 79.0], [20.1, 79.0], [20.2, 79.0], [20.3, 79.0], [20.4, 79.0], [20.5, 79.0], [20.6, 79.0], [20.7, 80.0], [20.8, 80.0], [20.9, 80.0], [21.0, 80.0], [21.1, 80.0], [21.2, 80.0], [21.3, 80.0], [21.4, 80.0], [21.5, 81.0], [21.6, 81.0], [21.7, 81.0], [21.8, 81.0], [21.9, 81.0], [22.0, 81.0], [22.1, 81.0], [22.2, 82.0], [22.3, 82.0], [22.4, 82.0], [22.5, 82.0], [22.6, 82.0], [22.7, 82.0], [22.8, 82.0], [22.9, 83.0], [23.0, 83.0], [23.1, 83.0], [23.2, 83.0], [23.3, 83.0], [23.4, 83.0], [23.5, 83.0], [23.6, 84.0], [23.7, 84.0], [23.8, 84.0], [23.9, 84.0], [24.0, 84.0], [24.1, 84.0], [24.2, 85.0], [24.3, 85.0], [24.4, 85.0], [24.5, 85.0], [24.6, 85.0], [24.7, 85.0], [24.8, 85.0], [24.9, 86.0], [25.0, 86.0], [25.1, 86.0], [25.2, 86.0], [25.3, 86.0], [25.4, 86.0], [25.5, 86.0], [25.6, 87.0], [25.7, 87.0], [25.8, 87.0], [25.9, 87.0], [26.0, 87.0], [26.1, 87.0], [26.2, 87.0], [26.3, 88.0], [26.4, 88.0], [26.5, 88.0], [26.6, 88.0], [26.7, 88.0], [26.8, 88.0], [26.9, 89.0], [27.0, 89.0], [27.1, 89.0], [27.2, 89.0], [27.3, 89.0], [27.4, 89.0], [27.5, 90.0], [27.6, 90.0], [27.7, 90.0], [27.8, 90.0], [27.9, 90.0], [28.0, 90.0], [28.1, 91.0], [28.2, 91.0], [28.3, 91.0], [28.4, 91.0], [28.5, 91.0], [28.6, 91.0], [28.7, 92.0], [28.8, 92.0], [28.9, 92.0], [29.0, 92.0], [29.1, 92.0], [29.2, 92.0], [29.3, 93.0], [29.4, 93.0], [29.5, 93.0], [29.6, 93.0], [29.7, 93.0], [29.8, 93.0], [29.9, 93.0], [30.0, 94.0], [30.1, 94.0], [30.2, 94.0], [30.3, 94.0], [30.4, 94.0], [30.5, 94.0], [30.6, 95.0], [30.7, 95.0], [30.8, 95.0], [30.9, 95.0], [31.0, 95.0], [31.1, 95.0], [31.2, 96.0], [31.3, 96.0], [31.4, 96.0], [31.5, 96.0], [31.6, 96.0], [31.7, 96.0], [31.8, 96.0], [31.9, 97.0], [32.0, 97.0], [32.1, 97.0], [32.2, 97.0], [32.3, 97.0], [32.4, 97.0], [32.5, 98.0], [32.6, 98.0], [32.7, 98.0], [32.8, 98.0], [32.9, 98.0], [33.0, 98.0], [33.1, 99.0], [33.2, 99.0], [33.3, 99.0], [33.4, 99.0], [33.5, 99.0], [33.6, 99.0], [33.7, 100.0], [33.8, 100.0], [33.9, 100.0], [34.0, 100.0], [34.1, 100.0], [34.2, 101.0], [34.3, 101.0], [34.4, 101.0], [34.5, 101.0], [34.6, 101.0], [34.7, 102.0], [34.8, 102.0], [34.9, 102.0], [35.0, 102.0], [35.1, 102.0], [35.2, 102.0], [35.3, 103.0], [35.4, 103.0], [35.5, 103.0], [35.6, 103.0], [35.7, 103.0], [35.8, 104.0], [35.9, 104.0], [36.0, 104.0], [36.1, 104.0], [36.2, 104.0], [36.3, 104.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 106.0], [37.1, 106.0], [37.2, 106.0], [37.3, 106.0], [37.4, 106.0], [37.5, 107.0], [37.6, 107.0], [37.7, 107.0], [37.8, 107.0], [37.9, 108.0], [38.0, 108.0], [38.1, 108.0], [38.2, 108.0], [38.3, 108.0], [38.4, 109.0], [38.5, 109.0], [38.6, 109.0], [38.7, 109.0], [38.8, 109.0], [38.9, 110.0], [39.0, 110.0], [39.1, 110.0], [39.2, 110.0], [39.3, 110.0], [39.4, 111.0], [39.5, 111.0], [39.6, 111.0], [39.7, 111.0], [39.8, 111.0], [39.9, 112.0], [40.0, 112.0], [40.1, 112.0], [40.2, 112.0], [40.3, 112.0], [40.4, 112.0], [40.5, 113.0], [40.6, 113.0], [40.7, 113.0], [40.8, 113.0], [40.9, 113.0], [41.0, 113.0], [41.1, 114.0], [41.2, 114.0], [41.3, 114.0], [41.4, 114.0], [41.5, 114.0], [41.6, 114.0], [41.7, 115.0], [41.8, 115.0], [41.9, 115.0], [42.0, 115.0], [42.1, 115.0], [42.2, 116.0], [42.3, 116.0], [42.4, 116.0], [42.5, 116.0], [42.6, 116.0], [42.7, 117.0], [42.8, 117.0], [42.9, 117.0], [43.0, 117.0], [43.1, 118.0], [43.2, 118.0], [43.3, 118.0], [43.4, 118.0], [43.5, 118.0], [43.6, 119.0], [43.7, 119.0], [43.8, 119.0], [43.9, 119.0], [44.0, 120.0], [44.1, 120.0], [44.2, 120.0], [44.3, 120.0], [44.4, 120.0], [44.5, 121.0], [44.6, 121.0], [44.7, 121.0], [44.8, 121.0], [44.9, 122.0], [45.0, 122.0], [45.1, 122.0], [45.2, 122.0], [45.3, 122.0], [45.4, 123.0], [45.5, 123.0], [45.6, 123.0], [45.7, 123.0], [45.8, 124.0], [45.9, 124.0], [46.0, 124.0], [46.1, 124.0], [46.2, 124.0], [46.3, 125.0], [46.4, 125.0], [46.5, 125.0], [46.6, 126.0], [46.7, 126.0], [46.8, 126.0], [46.9, 126.0], [47.0, 127.0], [47.1, 127.0], [47.2, 127.0], [47.3, 128.0], [47.4, 128.0], [47.5, 128.0], [47.6, 128.0], [47.7, 129.0], [47.8, 129.0], [47.9, 129.0], [48.0, 130.0], [48.1, 130.0], [48.2, 130.0], [48.3, 131.0], [48.4, 131.0], [48.5, 131.0], [48.6, 131.0], [48.7, 132.0], [48.8, 132.0], [48.9, 132.0], [49.0, 132.0], [49.1, 133.0], [49.2, 133.0], [49.3, 133.0], [49.4, 133.0], [49.5, 134.0], [49.6, 134.0], [49.7, 134.0], [49.8, 134.0], [49.9, 134.0], [50.0, 135.0], [50.1, 135.0], [50.2, 135.0], [50.3, 135.0], [50.4, 136.0], [50.5, 136.0], [50.6, 136.0], [50.7, 136.0], [50.8, 137.0], [50.9, 137.0], [51.0, 137.0], [51.1, 137.0], [51.2, 138.0], [51.3, 138.0], [51.4, 138.0], [51.5, 138.0], [51.6, 139.0], [51.7, 139.0], [51.8, 139.0], [51.9, 139.0], [52.0, 140.0], [52.1, 140.0], [52.2, 140.0], [52.3, 141.0], [52.4, 141.0], [52.5, 141.0], [52.6, 141.0], [52.7, 142.0], [52.8, 142.0], [52.9, 142.0], [53.0, 142.0], [53.1, 143.0], [53.2, 143.0], [53.3, 143.0], [53.4, 144.0], [53.5, 144.0], [53.6, 144.0], [53.7, 144.0], [53.8, 145.0], [53.9, 145.0], [54.0, 145.0], [54.1, 146.0], [54.2, 146.0], [54.3, 147.0], [54.4, 147.0], [54.5, 147.0], [54.6, 148.0], [54.7, 148.0], [54.8, 148.0], [54.9, 149.0], [55.0, 149.0], [55.1, 149.0], [55.2, 150.0], [55.3, 150.0], [55.4, 150.0], [55.5, 151.0], [55.6, 151.0], [55.7, 151.0], [55.8, 152.0], [55.9, 152.0], [56.0, 153.0], [56.1, 153.0], [56.2, 153.0], [56.3, 154.0], [56.4, 154.0], [56.5, 155.0], [56.6, 155.0], [56.7, 155.0], [56.8, 156.0], [56.9, 156.0], [57.0, 157.0], [57.1, 157.0], [57.2, 158.0], [57.3, 158.0], [57.4, 158.0], [57.5, 159.0], [57.6, 159.0], [57.7, 159.0], [57.8, 160.0], [57.9, 160.0], [58.0, 160.0], [58.1, 161.0], [58.2, 161.0], [58.3, 161.0], [58.4, 162.0], [58.5, 162.0], [58.6, 163.0], [58.7, 163.0], [58.8, 163.0], [58.9, 164.0], [59.0, 164.0], [59.1, 165.0], [59.2, 165.0], [59.3, 166.0], [59.4, 166.0], [59.5, 166.0], [59.6, 167.0], [59.7, 167.0], [59.8, 167.0], [59.9, 168.0], [60.0, 168.0], [60.1, 169.0], [60.2, 169.0], [60.3, 169.0], [60.4, 170.0], [60.5, 170.0], [60.6, 171.0], [60.7, 171.0], [60.8, 172.0], [60.9, 172.0], [61.0, 173.0], [61.1, 173.0], [61.2, 174.0], [61.3, 174.0], [61.4, 174.0], [61.5, 175.0], [61.6, 176.0], [61.7, 176.0], [61.8, 177.0], [61.9, 177.0], [62.0, 178.0], [62.1, 178.0], [62.2, 179.0], [62.3, 179.0], [62.4, 180.0], [62.5, 180.0], [62.6, 180.0], [62.7, 181.0], [62.8, 182.0], [62.9, 182.0], [63.0, 183.0], [63.1, 183.0], [63.2, 184.0], [63.3, 184.0], [63.4, 185.0], [63.5, 185.0], [63.6, 186.0], [63.7, 186.0], [63.8, 187.0], [63.9, 187.0], [64.0, 188.0], [64.1, 188.0], [64.2, 189.0], [64.3, 189.0], [64.4, 190.0], [64.5, 190.0], [64.6, 191.0], [64.7, 191.0], [64.8, 192.0], [64.9, 193.0], [65.0, 193.0], [65.1, 194.0], [65.2, 194.0], [65.3, 195.0], [65.4, 195.0], [65.5, 196.0], [65.6, 196.0], [65.7, 197.0], [65.8, 198.0], [65.9, 198.0], [66.0, 199.0], [66.1, 199.0], [66.2, 200.0], [66.3, 200.0], [66.4, 201.0], [66.5, 202.0], [66.6, 202.0], [66.7, 203.0], [66.8, 203.0], [66.9, 204.0], [67.0, 204.0], [67.1, 205.0], [67.2, 206.0], [67.3, 206.0], [67.4, 207.0], [67.5, 207.0], [67.6, 208.0], [67.7, 208.0], [67.8, 209.0], [67.9, 209.0], [68.0, 210.0], [68.1, 210.0], [68.2, 211.0], [68.3, 212.0], [68.4, 212.0], [68.5, 212.0], [68.6, 213.0], [68.7, 214.0], [68.8, 214.0], [68.9, 215.0], [69.0, 216.0], [69.1, 217.0], [69.2, 217.0], [69.3, 218.0], [69.4, 219.0], [69.5, 220.0], [69.6, 221.0], [69.7, 221.0], [69.8, 222.0], [69.9, 223.0], [70.0, 224.0], [70.1, 224.0], [70.2, 225.0], [70.3, 226.0], [70.4, 226.0], [70.5, 227.0], [70.6, 228.0], [70.7, 228.0], [70.8, 229.0], [70.9, 230.0], [71.0, 231.0], [71.1, 231.0], [71.2, 232.0], [71.3, 232.0], [71.4, 233.0], [71.5, 234.0], [71.6, 235.0], [71.7, 235.0], [71.8, 236.0], [71.9, 237.0], [72.0, 238.0], [72.1, 238.0], [72.2, 239.0], [72.3, 239.0], [72.4, 240.0], [72.5, 241.0], [72.6, 242.0], [72.7, 243.0], [72.8, 244.0], [72.9, 244.0], [73.0, 245.0], [73.1, 246.0], [73.2, 246.0], [73.3, 247.0], [73.4, 248.0], [73.5, 249.0], [73.6, 250.0], [73.7, 251.0], [73.8, 252.0], [73.9, 253.0], [74.0, 254.0], [74.1, 255.0], [74.2, 256.0], [74.3, 256.0], [74.4, 257.0], [74.5, 258.0], [74.6, 259.0], [74.7, 260.0], [74.8, 261.0], [74.9, 262.0], [75.0, 262.0], [75.1, 263.0], [75.2, 265.0], [75.3, 266.0], [75.4, 267.0], [75.5, 268.0], [75.6, 269.0], [75.7, 270.0], [75.8, 271.0], [75.9, 272.0], [76.0, 273.0], [76.1, 274.0], [76.2, 275.0], [76.3, 276.0], [76.4, 278.0], [76.5, 279.0], [76.6, 280.0], [76.7, 281.0], [76.8, 282.0], [76.9, 283.0], [77.0, 284.0], [77.1, 285.0], [77.2, 287.0], [77.3, 288.0], [77.4, 289.0], [77.5, 290.0], [77.6, 291.0], [77.7, 292.0], [77.8, 293.0], [77.9, 294.0], [78.0, 295.0], [78.1, 297.0], [78.2, 298.0], [78.3, 299.0], [78.4, 300.0], [78.5, 302.0], [78.6, 303.0], [78.7, 304.0], [78.8, 305.0], [78.9, 306.0], [79.0, 307.0], [79.1, 309.0], [79.2, 310.0], [79.3, 311.0], [79.4, 312.0], [79.5, 313.0], [79.6, 314.0], [79.7, 315.0], [79.8, 316.0], [79.9, 318.0], [80.0, 319.0], [80.1, 320.0], [80.2, 321.0], [80.3, 322.0], [80.4, 324.0], [80.5, 324.0], [80.6, 326.0], [80.7, 328.0], [80.8, 329.0], [80.9, 330.0], [81.0, 331.0], [81.1, 332.0], [81.2, 334.0], [81.3, 335.0], [81.4, 336.0], [81.5, 337.0], [81.6, 338.0], [81.7, 340.0], [81.8, 341.0], [81.9, 342.0], [82.0, 343.0], [82.1, 344.0], [82.2, 345.0], [82.3, 347.0], [82.4, 348.0], [82.5, 349.0], [82.6, 350.0], [82.7, 351.0], [82.8, 353.0], [82.9, 354.0], [83.0, 355.0], [83.1, 356.0], [83.2, 358.0], [83.3, 359.0], [83.4, 360.0], [83.5, 362.0], [83.6, 363.0], [83.7, 365.0], [83.8, 366.0], [83.9, 368.0], [84.0, 370.0], [84.1, 372.0], [84.2, 373.0], [84.3, 375.0], [84.4, 376.0], [84.5, 378.0], [84.6, 379.0], [84.7, 381.0], [84.8, 382.0], [84.9, 384.0], [85.0, 385.0], [85.1, 387.0], [85.2, 388.0], [85.3, 390.0], [85.4, 392.0], [85.5, 394.0], [85.6, 396.0], [85.7, 398.0], [85.8, 399.0], [85.9, 401.0], [86.0, 402.0], [86.1, 404.0], [86.2, 406.0], [86.3, 407.0], [86.4, 409.0], [86.5, 410.0], [86.6, 412.0], [86.7, 414.0], [86.8, 417.0], [86.9, 418.0], [87.0, 420.0], [87.1, 422.0], [87.2, 424.0], [87.3, 426.0], [87.4, 429.0], [87.5, 431.0], [87.6, 433.0], [87.7, 435.0], [87.8, 437.0], [87.9, 439.0], [88.0, 442.0], [88.1, 444.0], [88.2, 446.0], [88.3, 449.0], [88.4, 452.0], [88.5, 454.0], [88.6, 458.0], [88.7, 461.0], [88.8, 464.0], [88.9, 468.0], [89.0, 470.0], [89.1, 475.0], [89.2, 478.0], [89.3, 481.0], [89.4, 485.0], [89.5, 488.0], [89.6, 492.0], [89.7, 496.0], [89.8, 499.0], [89.9, 503.0], [90.0, 508.0], [90.1, 512.0], [90.2, 516.0], [90.3, 521.0], [90.4, 526.0], [90.5, 530.0], [90.6, 533.0], [90.7, 537.0], [90.8, 541.0], [90.9, 545.0], [91.0, 552.0], [91.1, 556.0], [91.2, 560.0], [91.3, 565.0], [91.4, 569.0], [91.5, 574.0], [91.6, 580.0], [91.7, 586.0], [91.8, 591.0], [91.9, 596.0], [92.0, 602.0], [92.1, 607.0], [92.2, 613.0], [92.3, 619.0], [92.4, 624.0], [92.5, 630.0], [92.6, 637.0], [92.7, 644.0], [92.8, 649.0], [92.9, 656.0], [93.0, 664.0], [93.1, 673.0], [93.2, 681.0], [93.3, 690.0], [93.4, 699.0], [93.5, 710.0], [93.6, 725.0], [93.7, 733.0], [93.8, 746.0], [93.9, 755.0], [94.0, 764.0], [94.1, 777.0], [94.2, 792.0], [94.3, 814.0], [94.4, 832.0], [94.5, 847.0], [94.6, 857.0], [94.7, 867.0], [94.8, 881.0], [94.9, 904.0], [95.0, 937.0], [95.1, 970.0], [95.2, 1015.0], [95.3, 1042.0], [95.4, 1058.0], [95.5, 1067.0], [95.6, 1073.0], [95.7, 1078.0], [95.8, 1080.0], [95.9, 1083.0], [96.0, 1085.0], [96.1, 1087.0], [96.2, 1090.0], [96.3, 1092.0], [96.4, 1097.0], [96.5, 1100.0], [96.6, 1104.0], [96.7, 1107.0], [96.8, 1110.0], [96.9, 1114.0], [97.0, 1117.0], [97.1, 1121.0], [97.2, 1125.0], [97.3, 1129.0], [97.4, 1133.0], [97.5, 1137.0], [97.6, 1141.0], [97.7, 1144.0], [97.8, 1149.0], [97.9, 1153.0], [98.0, 1159.0], [98.1, 1167.0], [98.2, 1172.0], [98.3, 1177.0], [98.4, 1186.0], [98.5, 1199.0], [98.6, 1209.0], [98.7, 1223.0], [98.8, 1243.0], [98.9, 1260.0], [99.0, 1277.0], [99.1, 1308.0], [99.2, 1329.0], [99.3, 1356.0], [99.4, 1389.0], [99.5, 1425.0], [99.6, 1488.0], [99.7, 1684.0], [99.8, 2101.0], [99.9, 2282.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 10089.0, "series": [{"data": [[0.0, 10089.0], [600.0, 433.0], [700.0, 252.0], [800.0, 191.0], [900.0, 86.0], [1000.0, 395.0], [1100.0, 608.0], [1200.0, 168.0], [1300.0, 105.0], [1400.0, 56.0], [1500.0, 12.0], [100.0, 9749.0], [1600.0, 17.0], [1700.0, 6.0], [1800.0, 1.0], [1900.0, 6.0], [2000.0, 13.0], [2100.0, 27.0], [2300.0, 7.0], [2200.0, 5.0], [2400.0, 3.0], [2500.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3100.0, 12.0], [200.0, 3668.0], [3500.0, 2.0], [300.0, 2242.0], [5100.0, 1.0], [400.0, 1195.0], [6500.0, 1.0], [500.0, 647.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 116.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24514.0, "series": [{"data": [[0.0, 24514.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2604.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 116.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2766.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 744.7686999999913, "minX": 1.66956954E12, "maxY": 744.7686999999913, "series": [{"data": [[1.66956954E12, 744.7686999999913]], "isOverall": false, "label": "client-to-gateway-non-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956954E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 2.0, "maxY": 947.3333333333334, "series": [{"data": [[2.0, 7.0], [3.0, 7.5], [4.0, 7.666666666666667], [5.0, 15.0], [6.0, 20.0], [7.0, 8.666666666666666], [8.0, 23.0], [9.0, 15.0], [10.0, 43.666666666666664], [11.0, 15.5], [12.0, 15.0], [13.0, 3.0], [14.0, 31.4], [15.0, 42.75], [16.0, 25.0], [17.0, 21.5], [18.0, 24.0], [19.0, 21.666666666666668], [20.0, 22.333333333333332], [21.0, 21.25], [22.0, 33.25], [23.0, 67.0], [24.0, 24.166666666666668], [25.0, 99.0], [26.0, 104.0], [27.0, 33.5], [28.0, 30.375], [29.0, 25.0], [30.0, 36.0], [31.0, 17.25], [33.0, 3.0], [35.0, 3.0], [34.0, 32.0], [37.0, 10.5], [36.0, 3.3333333333333335], [39.0, 20.0], [38.0, 23.0], [43.0, 21.75], [47.0, 3.5], [55.0, 3.0], [54.0, 11.27586206896552], [57.0, 7.4], [56.0, 5.25], [67.0, 6.0], [64.0, 9.0], [71.0, 20.0], [68.0, 4.0], [74.0, 9.0], [73.0, 3.0], [75.0, 3.0], [79.0, 3.6666666666666665], [78.0, 3.0], [76.0, 3.5], [81.0, 69.0], [80.0, 3.5], [84.0, 72.0204081632653], [91.0, 40.0], [90.0, 65.0], [89.0, 4.333333333333333], [88.0, 35.0], [95.0, 35.4], [92.0, 3.0], [99.0, 119.0], [98.0, 80.0], [97.0, 3.0], [96.0, 11.666666666666666], [103.0, 15.75], [101.0, 16.5], [100.0, 48.25], [107.0, 95.4651162790698], [106.0, 15.5], [105.0, 36.0], [104.0, 37.666666666666664], [108.0, 48.30000000000001], [110.0, 140.5], [111.0, 39.14285714285714], [109.0, 66.0], [112.0, 62.875], [113.0, 82.8], [115.0, 41.0], [119.0, 46.0], [117.0, 8.666666666666666], [122.0, 41.0], [121.0, 27.5], [120.0, 7.333333333333334], [124.0, 60.0], [129.0, 65.6], [130.0, 66.78571428571429], [131.0, 77.93749999999999], [134.0, 64.52941176470588], [135.0, 44.0], [133.0, 24.0], [132.0, 8.5], [138.0, 78.54545454545456], [142.0, 85.83333333333334], [143.0, 75.9622641509434], [141.0, 49.33333333333333], [140.0, 88.0], [139.0, 120.0], [144.0, 66.75], [145.0, 69.66666666666664], [146.0, 64.08888888888892], [147.0, 32.909090909090914], [148.0, 62.27777777777779], [150.0, 66.57142857142857], [151.0, 71.0], [149.0, 40.375], [152.0, 75.16666666666667], [154.0, 69.61764705882354], [155.0, 67.22580645161291], [157.0, 72.80645161290323], [159.0, 71.71428571428572], [158.0, 93.71428571428572], [156.0, 41.10638297872341], [160.0, 102.83333333333334], [162.0, 26.333333333333336], [163.0, 107.30303030303031], [164.0, 67.5], [165.0, 79.8], [166.0, 69.31034482758623], [161.0, 134.66666666666666], [169.0, 70.57142857142857], [170.0, 81.90769230769229], [171.0, 84.47058823529412], [173.0, 89.06250000000001], [174.0, 51.22222222222222], [175.0, 149.5], [172.0, 73.23529411764706], [177.0, 71.62500000000001], [178.0, 84.0], [183.0, 67.9111111111111], [182.0, 24.0], [181.0, 3.0], [180.0, 32.0], [179.0, 7.166666666666666], [176.0, 3.0], [184.0, 61.38461538461539], [185.0, 68.25396825396824], [186.0, 69.5], [188.0, 62.563636363636384], [189.0, 63.79999999999999], [190.0, 65.43478260869566], [191.0, 63.531250000000014], [192.0, 64.37254901960787], [194.0, 70.29411764705883], [198.0, 80.25000000000001], [197.0, 4.0], [193.0, 48.0], [195.0, 4.0], [201.0, 76.27083333333334], [203.0, 53.75], [204.0, 40.83333333333333], [205.0, 33.72727272727273], [206.0, 44.0], [207.0, 100.0], [202.0, 38.2], [200.0, 78.33333333333334], [209.0, 57.5], [210.0, 71.0], [211.0, 42.285714285714285], [213.0, 49.77777777777778], [214.0, 41.714285714285715], [215.0, 66.6], [212.0, 7.0], [208.0, 36.5], [217.0, 118.5], [218.0, 66.75], [219.0, 59.8], [221.0, 99.0], [222.0, 40.57142857142858], [223.0, 55.0], [220.0, 4.666666666666667], [216.0, 15.2], [224.0, 97.5], [226.0, 119.37500000000001], [227.0, 129.92857142857142], [228.0, 130.20000000000002], [229.0, 123.21311475409833], [230.0, 69.09090909090908], [231.0, 13.09090909090909], [237.0, 76.76470588235294], [239.0, 3.0], [238.0, 13.142857142857144], [236.0, 17.0], [235.0, 10.0], [232.0, 4.0], [240.0, 71.79411764705883], [241.0, 89.13953488372094], [242.0, 46.22222222222223], [244.0, 97.35789473684207], [247.0, 3.0], [245.0, 48.5], [243.0, 8.857142857142856], [249.0, 68.24096385542168], [251.0, 37.869565217391305], [252.0, 70.0], [248.0, 52.35294117647059], [250.0, 27.47368421052632], [253.0, 15.357142857142858], [254.0, 4.0], [259.0, 77.23404255319149], [260.0, 76.0], [261.0, 66.86842105263156], [263.0, 75.75], [258.0, 7.0], [257.0, 9.5], [256.0, 9.117647058823529], [262.0, 5.0], [264.0, 68.0], [265.0, 75.38235294117649], [267.0, 3.25], [266.0, 14.666666666666668], [268.0, 68.84070796460182], [269.0, 54.48717948717948], [270.0, 52.06666666666666], [271.0, 16.333333333333336], [286.0, 6.0], [276.0, 33.0], [277.0, 57.249999999999986], [279.0, 22.0], [278.0, 3.0], [287.0, 66.91666666666667], [281.0, 28.818181818181824], [285.0, 10.111111111111109], [284.0, 23.31818181818182], [275.0, 4.0], [273.0, 7.0], [272.0, 3.5], [282.0, 18.0], [283.0, 23.666666666666668], [280.0, 25.999999999999996], [289.0, 68.52083333333331], [293.0, 79.82901554404144], [292.0, 26.428571428571427], [297.0, 57.97959183673468], [303.0, 117.7142857142857], [302.0, 17.545454545454547], [300.0, 31.0], [291.0, 4.0], [290.0, 9.625], [298.0, 20.0], [296.0, 30.499999999999996], [295.0, 105.68627450980395], [288.0, 3.5714285714285716], [294.0, 15.000000000000002], [318.0, 38.0], [306.0, 68.85074626865672], [311.0, 87.5], [305.0, 3.0], [304.0, 12.666666666666668], [310.0, 70.66666666666667], [309.0, 66.81818181818183], [308.0, 71.66666666666667], [312.0, 44.847826086956516], [315.0, 75.99999999999997], [317.0, 69.42424242424242], [319.0, 4.5], [316.0, 15.428571428571427], [307.0, 197.0], [314.0, 39.0], [313.0, 30.833333333333332], [334.0, 74.890756302521], [324.0, 28.133333333333336], [325.0, 92.02857142857142], [329.0, 89.54687499999994], [330.0, 75.66666666666667], [333.0, 52.37500000000001], [335.0, 34.333333333333336], [332.0, 27.27272727272727], [323.0, 23.75], [322.0, 5.166666666666666], [320.0, 6.0], [349.0, 71.65517241379311], [344.0, 76.30357142857142], [347.0, 77.75221238938052], [348.0, 74.0], [337.0, 13.333333333333332], [336.0, 16.0], [350.0, 70.125], [351.0, 92.0], [346.0, 77.75], [343.0, 3.5], [342.0, 3.0], [341.0, 3.6], [340.0, 7.363636363636363], [364.0, 99.25], [353.0, 72.69473684210526], [354.0, 92.6875], [356.0, 72.58333333333333], [357.0, 59.38461538461538], [358.0, 84.57142857142857], [359.0, 66.94594594594597], [361.0, 121.0], [363.0, 84.0], [362.0, 20.0], [365.0, 68.5], [366.0, 82.0], [360.0, 24.0], [369.0, 132.0], [370.0, 153.0], [371.0, 70.82051282051285], [376.0, 86.55645161290326], [377.0, 96.15384615384615], [378.0, 88.00000000000001], [382.0, 73.5], [381.0, 76.0], [388.0, 88.4193548387097], [389.0, 87.9], [391.0, 85.64285714285714], [394.0, 208.0], [396.0, 209.0], [398.0, 66.30327868852464], [399.0, 43.5], [414.0, 46.66666666666667], [403.0, 89.10526315789471], [401.0, 65.2], [400.0, 50.57142857142857], [404.0, 29.31], [406.0, 4.0], [405.0, 28.5], [407.0, 85.06666666666666], [408.0, 88.57142857142857], [409.0, 69.85714285714286], [415.0, 24.799999999999997], [412.0, 29.499999999999996], [410.0, 3.0], [430.0, 108.83333333333333], [417.0, 80.05882352941177], [416.0, 23.5], [423.0, 20.5], [422.0, 3.0], [420.0, 34.8], [418.0, 39.75], [424.0, 105.76923076923077], [425.0, 79.3125], [426.0, 57.75], [427.0, 111.66666666666666], [429.0, 109.52380952380953], [431.0, 117.30434782608697], [428.0, 50.8], [419.0, 9.0], [446.0, 45.16666666666667], [434.0, 67.875], [439.0, 92.03846153846153], [432.0, 4.0], [438.0, 34.25], [437.0, 48.8], [436.0, 62.28260869565217], [447.0, 62.42500000000002], [445.0, 4.0], [444.0, 73.0], [435.0, 74.22222222222223], [443.0, 30.0], [442.0, 61.92307692307692], [441.0, 53.0], [440.0, 17.5], [460.0, 224.83333333333337], [462.0, 163.0], [456.0, 106.29268292682929], [461.0, 157.36111111111111], [463.0, 162.19230769230768], [458.0, 48.333333333333336], [455.0, 19.0], [449.0, 7.6], [448.0, 15.333333333333334], [451.0, 16.8], [450.0, 7.666666666666666], [454.0, 122.69230769230768], [453.0, 259.875], [452.0, 24.2], [477.0, 228.0], [466.0, 173.625], [464.0, 48.0], [471.0, 438.54545454545456], [465.0, 84.6], [467.0, 99.10000000000001], [476.0, 449.5192307692307], [469.0, 308.61176470588236], [468.0, 3.3333333333333335], [470.0, 290.625], [474.0, 425.6590909090909], [475.0, 323.71999999999997], [479.0, 4.090909090909091], [472.0, 557.6533333333331], [473.0, 595.2562814070352], [478.0, 3.0], [483.0, 306.2608695652175], [486.0, 99.41176470588236], [485.0, 126.33333333333333], [493.0, 96.30769230769232], [492.0, 9.0], [494.0, 159.88888888888889], [495.0, 103.22], [489.0, 73.07142857142857], [490.0, 8.5], [491.0, 3.5], [488.0, 158.0], [487.0, 7.5], [480.0, 148.0], [482.0, 240.0], [481.0, 4.777777777777778], [484.0, 325.6956521739131], [510.0, 292.77272727272725], [499.0, 233.81249999999997], [503.0, 169.54838709677412], [497.0, 669.0], [496.0, 3.0], [502.0, 270.42857142857144], [500.0, 300.0], [511.0, 859.6363636363636], [509.0, 624.0], [508.0, 837.3199999999999], [507.0, 492.52631578947364], [505.0, 340.0], [504.0, 197.33333333333331], [538.0, 421.25], [542.0, 206.14999999999998], [520.0, 225.07407407407405], [521.0, 297.6704545454544], [529.0, 227.13636363636363], [534.0, 143.74074074074073], [533.0, 595.1666666666666], [532.0, 650.6666666666666], [531.0, 456.3333333333333], [530.0, 448.5], [535.0, 433.66666666666663], [543.0, 376.0], [528.0, 459.00000000000006], [541.0, 490.0], [540.0, 418.25], [539.0, 368.54545454545456], [537.0, 504.0], [536.0, 452.6], [527.0, 727.5], [513.0, 864.7142857142857], [512.0, 788.0], [515.0, 947.3333333333334], [514.0, 873.75], [517.0, 842.0], [516.0, 803.0], [519.0, 689.5], [518.0, 656.0], [526.0, 695.625], [525.0, 642.5], [524.0, 743.0], [523.0, 734.1428571428571], [522.0, 777.0], [570.0, 348.2307692307692], [558.0, 158.25], [545.0, 221.0], [551.0, 195.21739130434784], [550.0, 147.89999999999998], [549.0, 298.30882352941194], [548.0, 148.0], [547.0, 136.0], [546.0, 267.25], [559.0, 380.0], [544.0, 329.75], [569.0, 293.5], [568.0, 317.6190476190476], [571.0, 312.5], [573.0, 206.0], [572.0, 393.7272727272727], [554.0, 271.3333333333333], [553.0, 181.0], [552.0, 189.28571428571428], [555.0, 196.16666666666669], [556.0, 198.1818181818182], [557.0, 308.16666666666663], [564.0, 170.0], [565.0, 196.66666666666669], [567.0, 250.75], [566.0, 336.375], [575.0, 308.21666666666664], [561.0, 334.4722222222222], [560.0, 401.66666666666663], [563.0, 405.57142857142856], [562.0, 480.2666666666667], [574.0, 341.0], [602.0, 239.64285714285714], [578.0, 210.3846153846154], [577.0, 302.8333333333333], [576.0, 356.0], [579.0, 409.0], [580.0, 145.58333333333334], [581.0, 122.1764705882353], [583.0, 319.6], [582.0, 273.6], [601.0, 429.92647058823513], [600.0, 360.6363636363636], [588.0, 285.2692307692307], [587.0, 377.0], [586.0, 317.9], [585.0, 351.5], [584.0, 272.92857142857144], [590.0, 409.30555555555554], [589.0, 211.5], [591.0, 420.66666666666663], [597.0, 152.16], [599.0, 246.9864864864865], [598.0, 395.3703703703703], [603.0, 269.2058823529412], [604.0, 163.5], [605.0, 192.3783783783784], [607.0, 327.8], [596.0, 427.6], [595.0, 492.0], [594.0, 497.4242424242424], [593.0, 606.3333333333334], [592.0, 361.4285714285715], [606.0, 253.5909090909091], [634.0, 452.57894736842104], [612.0, 276.3999999999999], [615.0, 187.72727272727275], [614.0, 315.4], [613.0, 315.2641509433962], [623.0, 509.5749999999999], [609.0, 390.8958333333333], [608.0, 249.66666666666669], [611.0, 437.0], [610.0, 365.5], [633.0, 548.2352941176471], [632.0, 397.92], [619.0, 198.46666666666667], [618.0, 610.625], [617.0, 680.2], [616.0, 328.8965517241378], [621.0, 610.0], [620.0, 518.1666666666667], [622.0, 315.6410256410256], [628.0, 394.99999999999994], [629.0, 293.12499999999994], [630.0, 185.5], [631.0, 422.4], [637.0, 333.50000000000006], [636.0, 423.5], [635.0, 732.0], [639.0, 426.575], [625.0, 477.87499999999994], [624.0, 379.57142857142856], [627.0, 263.1111111111112], [626.0, 306.76666666666677], [638.0, 345.8], [667.0, 209.31250000000003], [644.0, 294.3333333333333], [655.0, 235.79999999999998], [643.0, 343.8260869565217], [642.0, 544.0], [641.0, 346.35714285714283], [640.0, 409.90476190476187], [654.0, 296.8620689655172], [664.0, 257.0], [647.0, 223.5], [646.0, 185.95652173913044], [645.0, 233.85], [666.0, 240.40000000000003], [665.0, 295.41666666666663], [652.0, 178.73333333333335], [651.0, 123.0], [650.0, 180.08], [649.0, 168.14285714285714], [648.0, 164.4], [653.0, 100.25], [663.0, 165.71052631578948], [662.0, 194.75], [661.0, 293.2195121951219], [660.0, 291.0], [659.0, 259.0], [658.0, 202.375], [657.0, 111.5], [656.0, 249.36111111111106], [668.0, 163.7441860465116], [671.0, 221.6744186046511], [670.0, 223.44444444444446], [669.0, 94.8], [696.0, 226.55263157894737], [685.0, 161.66666666666666], [673.0, 119.86666666666667], [674.0, 108.75], [675.0, 215.78571428571428], [677.0, 274.625], [676.0, 205.66666666666666], [679.0, 174.0], [678.0, 194.0], [681.0, 165.37209302325581], [680.0, 162.88888888888889], [682.0, 281.25], [684.0, 117.25714285714287], [683.0, 166.0], [686.0, 298.0571428571428], [687.0, 287.1379310344828], [672.0, 117.33333333333333], [702.0, 183.79166666666669], [701.0, 234.0], [700.0, 221.22222222222223], [699.0, 157.33333333333334], [698.0, 152.83333333333334], [697.0, 254.18749999999997], [703.0, 227.94444444444446], [688.0, 158.2068965517241], [690.0, 264.2105263157895], [689.0, 225.4814814814815], [693.0, 166.89999999999998], [691.0, 190.37777777777782], [695.0, 455.0], [694.0, 175.6], [730.0, 119.7], [712.0, 173.58333333333331], [713.0, 130.05], [729.0, 154.78873239436618], [728.0, 176.06666666666666], [719.0, 161.5], [704.0, 266.0], [707.0, 177.78333333333336], [706.0, 225.8571428571429], [709.0, 206.26666666666668], [708.0, 209.10000000000002], [711.0, 136.1], [710.0, 194.27027027027032], [718.0, 169.73333333333332], [717.0, 207.9], [716.0, 213.5], [715.0, 208.66666666666669], [714.0, 147.5555555555555], [735.0, 178.8], [721.0, 179.66666666666669], [720.0, 151.26315789473685], [723.0, 127.14285714285714], [722.0, 149.16666666666669], [725.0, 134.8125], [724.0, 120.7272727272727], [727.0, 142.66666666666666], [726.0, 117.80000000000001], [734.0, 112.0], [733.0, 128.4027777777778], [732.0, 128.14285714285714], [731.0, 208.0], [743.0, 123.3529411764706], [765.0, 284.7333333333334], [745.0, 117.53225806451613], [744.0, 120.2], [747.0, 87.0], [746.0, 93.58333333333334], [749.0, 68.625], [748.0, 87.27777777777779], [751.0, 217.76923076923077], [736.0, 139.2], [738.0, 84.72727272727273], [737.0, 104.66666666666667], [740.0, 95.57142857142857], [739.0, 94.35714285714286], [742.0, 87.0], [741.0, 91.0909090909091], [750.0, 244.6490066225166], [753.0, 166.50000000000003], [752.0, 151.8493150684932], [754.0, 108.92857142857143], [756.0, 119.66666666666667], [757.0, 58.0], [755.0, 95.5], [759.0, 190.44444444444446], [758.0, 212.2320441988949], [767.0, 364.7142857142857], [766.0, 402.0], [764.0, 257.9333333333334], [763.0, 207.625], [762.0, 168.125], [761.0, 252.53846153846155], [760.0, 198.70270270270268], [794.0, 173.75510204081635], [798.0, 158.72727272727275], [769.0, 118.65217391304347], [768.0, 213.17045454545453], [775.0, 175.21052631578948], [774.0, 304.46153846153845], [773.0, 370.0], [772.0, 422.0], [771.0, 252.0], [770.0, 280.0], [793.0, 182.2173913043478], [792.0, 211.12307692307692], [795.0, 180.20000000000002], [797.0, 154.5], [796.0, 153.83333333333334], [799.0, 115.15909090909089], [776.0, 268.5483870967742], [778.0, 247.5], [777.0, 295.23684210526324], [780.0, 259.8], [779.0, 249.95238095238096], [782.0, 255.5], [781.0, 296.0], [783.0, 95.60000000000001], [784.0, 200.33333333333334], [786.0, 105.83673469387755], [785.0, 228.66666666666666], [787.0, 147.2857142857143], [791.0, 167.24390243902437], [790.0, 239.78947368421052], [789.0, 219.2], [788.0, 213.1904761904762], [806.0, 59.333333333333336], [803.0, 119.5337423312884], [802.0, 137.9393939393939], [801.0, 146.52500000000003], [800.0, 106.0], [804.0, 183.5555555555556], [805.0, 133.62162162162164], [807.0, 112.52380952380952], [824.0, 102.29166666666666], [813.0, 110.57692307692308], [812.0, 88.3], [811.0, 103.98979591836732], [810.0, 85.48818897637796], [809.0, 102.74999999999999], [808.0, 165.0], [814.0, 88.95833333333334], [815.0, 110.7446808510638], [831.0, 123.10526315789471], [817.0, 129.5], [816.0, 97.38888888888891], [819.0, 141.66666666666666], [818.0, 164.83333333333334], [823.0, 122.80000000000001], [822.0, 89.34615384615383], [821.0, 120.55], [820.0, 81.13043478260869], [830.0, 170.05673758865254], [829.0, 88.31578947368422], [828.0, 88.3913043478261], [825.0, 79.0], [860.0, 157.51428571428568], [843.0, 137.08730158730157], [833.0, 158.37037037037038], [832.0, 110.4], [835.0, 89.42857142857143], [834.0, 102.83333333333333], [837.0, 112.0], [836.0, 108.80952380952381], [839.0, 101.33333333333333], [838.0, 97.19230769230766], [847.0, 105.0], [846.0, 121.06666666666665], [845.0, 104.99999999999999], [844.0, 112.89473684210526], [857.0, 225.85], [856.0, 192.6103896103896], [859.0, 351.7878787878788], [858.0, 197.75000000000003], [840.0, 114.19767441860469], [841.0, 124.09999999999997], [842.0, 120.4462809917355], [850.0, 117.13636363636364], [849.0, 129.40540540540536], [848.0, 164.57142857142858], [851.0, 251.5], [853.0, 132.0], [852.0, 142.66666666666666], [855.0, 206.97999999999996], [854.0, 195.416083916084], [863.0, 141.50000000000003], [862.0, 143.03389830508476], [861.0, 193.28571428571428], [891.0, 109.28260869565217], [874.0, 126.63190184049083], [873.0, 147.2142857142857], [872.0, 128.78947368421055], [875.0, 130.76923076923077], [876.0, 121.82051282051283], [877.0, 163.4], [879.0, 123.375], [865.0, 94.03030303030306], [864.0, 126.56756756756751], [867.0, 108.0], [866.0, 96.68115942028984], [869.0, 117.47499999999997], [870.0, 121.17391304347825], [871.0, 134.72222222222226], [878.0, 182.0], [893.0, 106.03488372093021], [895.0, 146.72222222222223], [887.0, 99.74193548387098], [886.0, 256.75], [885.0, 123.13636363636365], [884.0, 134.0], [883.0, 118.54545454545455], [882.0, 152.12121212121218], [881.0, 160.33333333333334], [894.0, 102.05882352941175], [892.0, 89.8], [890.0, 115.20430107526877], [889.0, 108.91176470588238], [900.0, 137.56521739130434], [899.0, 192.17730496453902], [898.0, 296.7142857142858], [897.0, 208.40425531914894], [896.0, 163.23809523809524], [901.0, 148.84615384615387], [902.0, 172.66666666666669], [920.0, 174.63157894736838], [903.0, 135.40000000000006], [904.0, 190.3409090909091], [905.0, 203.0299401197605], [911.0, 109.0], [910.0, 94.4], [909.0, 85.0], [908.0, 163.41463414634143], [907.0, 183.83333333333334], [906.0, 132.51851851851856], [912.0, 107.84615384615385], [913.0, 146.23529411764704], [915.0, 259.1111111111111], [914.0, 179.95081967213108], [917.0, 180.04166666666669], [916.0, 404.25], [919.0, 194.9590643274855], [918.0, 141.6086956521739], [921.0, 168.06451612903228], [922.0, 157.81060606060603], [923.0, 221.64705882352933], [925.0, 175.03703703703707], [924.0, 199.56], [927.0, 108.65714285714283], [926.0, 158.42056074766356], [957.0, 717.4285714285714], [932.0, 271.2142857142857], [943.0, 303.40740740740733], [929.0, 250.92857142857144], [928.0, 176.66666666666666], [931.0, 332.7], [930.0, 294.37209302325573], [942.0, 325.8828125], [941.0, 347.3379310344829], [940.0, 268.1212121212121], [939.0, 248.91666666666669], [938.0, 491.8518518518521], [952.0, 360.26618705035986], [935.0, 173.42990654205605], [934.0, 283.66666666666663], [933.0, 146.68181818181804], [936.0, 261.9058823529412], [937.0, 399.8235294117647], [951.0, 590.9374999999999], [950.0, 273.64084507042253], [949.0, 285.2411347517731], [948.0, 285.0857142857143], [947.0, 409.8], [946.0, 204.30985915492957], [945.0, 267.2], [944.0, 443.99765807962575], [959.0, 612.8823529411764], [958.0, 317.6197916666667], [956.0, 254.16129032258056], [953.0, 174.85714285714283], [986.0, 155.54], [990.0, 160.9759036144578], [963.0, 340.68571428571437], [967.0, 609.5981308411216], [966.0, 545.9038461538461], [965.0, 512.8758169934642], [964.0, 443.0857142857145], [975.0, 574.0], [960.0, 516.1666666666666], [962.0, 253.26530612244898], [961.0, 298.10256410256414], [985.0, 307.57808857808857], [984.0, 372.5], [987.0, 155.48717948717953], [972.0, 230.974358974359], [971.0, 319.07692307692304], [970.0, 294.0909090909091], [969.0, 555.3735955056172], [968.0, 397.002906976744], [973.0, 253.50000000000006], [974.0, 287.87704918032784], [982.0, 535.0695652173915], [983.0, 423.40993788819884], [991.0, 119.79104477611945], [977.0, 568.9696969696969], [976.0, 663.8301886792455], [979.0, 373.9834024896264], [978.0, 527.43661971831], [981.0, 302.6821705426356], [980.0, 385.18181818181824], [989.0, 180.66203703703704], [988.0, 163.5211267605634], [994.0, 118.0], [1000.0, 276.49685287175504], [999.0, 398.17061611374385], [998.0, 389.89559543230035], [997.0, 471.11135857461045], [996.0, 288.43434343434365], [995.0, 157.02666666666667], [993.0, 270.64516129032256], [992.0, 208.3409090909091]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[744.7686333333296, 236.2833333333341]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 173813.7, "minX": 1.66956954E12, "maxY": 216510.3, "series": [{"data": [[1.66956954E12, 173813.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66956954E12, 216510.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956954E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 236.2833333333341, "minX": 1.66956954E12, "maxY": 236.2833333333341, "series": [{"data": [[1.66956954E12, 236.2833333333341]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956954E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 223.6792666666664, "minX": 1.66956954E12, "maxY": 223.6792666666664, "series": [{"data": [[1.66956954E12, 223.6792666666664]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956954E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 107.58889999999958, "minX": 1.66956954E12, "maxY": 107.58889999999958, "series": [{"data": [[1.66956954E12, 107.58889999999958]], "isOverall": false, "label": "Microservice-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956954E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.66956954E12, "maxY": 6561.0, "series": [{"data": [[1.66956954E12, 6561.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66956954E12, 603.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66956954E12, 1366.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66956954E12, 1095.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66956954E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66956954E12, 176.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956954E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 180.0, "maxY": 1025.5, "series": [{"data": [[2405.0, 241.0], [2783.0, 104.0], [180.0, 81.0], [2843.0, 74.0], [2990.0, 150.0], [2995.0, 158.0], [1085.0, 342.0], [1235.0, 1025.5], [1408.0, 127.0], [1722.0, 240.5], [1689.0, 121.0], [1717.0, 262.0], [1752.0, 140.0], [1847.0, 124.0], [1904.0, 203.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1085.0, 5.5], [1235.0, 60.0], [611.0, 20.0], [834.0, 4.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2995.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 180.0, "maxY": 1025.5, "series": [{"data": [[2405.0, 241.0], [2783.0, 104.0], [180.0, 78.0], [2843.0, 74.0], [2990.0, 150.0], [2995.0, 158.0], [1085.0, 342.0], [1235.0, 1025.5], [1408.0, 127.0], [1722.0, 240.5], [1689.0, 121.0], [1717.0, 262.0], [1752.0, 140.0], [1847.0, 124.0], [1904.0, 203.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1085.0, 0.0], [1235.0, 0.0], [611.0, 0.0], [834.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2995.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 500.0, "minX": 1.66956954E12, "maxY": 500.0, "series": [{"data": [[1.66956954E12, 500.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956954E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 46.1, "minX": 1.66956954E12, "maxY": 453.9, "series": [{"data": [[1.66956954E12, 453.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66956954E12, 46.1]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66956954E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 46.1, "minX": 1.66956954E12, "maxY": 453.9, "series": [{"data": [[1.66956954E12, 453.9]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}, {"data": [[1.66956954E12, 46.1]], "isOverall": false, "label": "Microservice-based client-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956954E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 46.1, "minX": 1.66956954E12, "maxY": 453.9, "series": [{"data": [[1.66956954E12, 453.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66956954E12, 46.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66956954E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

