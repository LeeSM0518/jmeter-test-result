/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2196.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 7.0], [0.3, 11.0], [0.4, 14.0], [0.5, 19.0], [0.6, 21.0], [0.7, 21.0], [0.8, 23.0], [0.9, 24.0], [1.0, 25.0], [1.1, 26.0], [1.2, 27.0], [1.3, 27.0], [1.4, 28.0], [1.5, 29.0], [1.6, 29.0], [1.7, 29.0], [1.8, 30.0], [1.9, 31.0], [2.0, 31.0], [2.1, 32.0], [2.2, 32.0], [2.3, 33.0], [2.4, 33.0], [2.5, 33.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 38.0], [5.0, 38.0], [5.1, 38.0], [5.2, 38.0], [5.3, 38.0], [5.4, 38.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 41.0], [7.0, 41.0], [7.1, 42.0], [7.2, 42.0], [7.3, 42.0], [7.4, 42.0], [7.5, 42.0], [7.6, 43.0], [7.7, 43.0], [7.8, 43.0], [7.9, 43.0], [8.0, 43.0], [8.1, 43.0], [8.2, 44.0], [8.3, 44.0], [8.4, 44.0], [8.5, 44.0], [8.6, 44.0], [8.7, 45.0], [8.8, 45.0], [8.9, 45.0], [9.0, 45.0], [9.1, 45.0], [9.2, 45.0], [9.3, 46.0], [9.4, 46.0], [9.5, 46.0], [9.6, 46.0], [9.7, 46.0], [9.8, 47.0], [9.9, 47.0], [10.0, 47.0], [10.1, 47.0], [10.2, 48.0], [10.3, 48.0], [10.4, 48.0], [10.5, 48.0], [10.6, 49.0], [10.7, 49.0], [10.8, 49.0], [10.9, 49.0], [11.0, 49.0], [11.1, 50.0], [11.2, 50.0], [11.3, 50.0], [11.4, 50.0], [11.5, 50.0], [11.6, 51.0], [11.7, 51.0], [11.8, 51.0], [11.9, 51.0], [12.0, 51.0], [12.1, 52.0], [12.2, 52.0], [12.3, 52.0], [12.4, 53.0], [12.5, 53.0], [12.6, 53.0], [12.7, 54.0], [12.8, 54.0], [12.9, 54.0], [13.0, 55.0], [13.1, 55.0], [13.2, 55.0], [13.3, 55.0], [13.4, 56.0], [13.5, 56.0], [13.6, 56.0], [13.7, 56.0], [13.8, 57.0], [13.9, 57.0], [14.0, 57.0], [14.1, 57.0], [14.2, 57.0], [14.3, 58.0], [14.4, 58.0], [14.5, 58.0], [14.6, 59.0], [14.7, 59.0], [14.8, 59.0], [14.9, 59.0], [15.0, 60.0], [15.1, 60.0], [15.2, 60.0], [15.3, 61.0], [15.4, 61.0], [15.5, 61.0], [15.6, 61.0], [15.7, 62.0], [15.8, 62.0], [15.9, 62.0], [16.0, 62.0], [16.1, 63.0], [16.2, 63.0], [16.3, 63.0], [16.4, 63.0], [16.5, 63.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 64.0], [17.0, 64.0], [17.1, 65.0], [17.2, 65.0], [17.3, 65.0], [17.4, 65.0], [17.5, 65.0], [17.6, 66.0], [17.7, 66.0], [17.8, 66.0], [17.9, 67.0], [18.0, 67.0], [18.1, 67.0], [18.2, 68.0], [18.3, 68.0], [18.4, 68.0], [18.5, 68.0], [18.6, 69.0], [18.7, 69.0], [18.8, 69.0], [18.9, 70.0], [19.0, 70.0], [19.1, 70.0], [19.2, 70.0], [19.3, 70.0], [19.4, 70.0], [19.5, 71.0], [19.6, 71.0], [19.7, 71.0], [19.8, 71.0], [19.9, 71.0], [20.0, 72.0], [20.1, 72.0], [20.2, 72.0], [20.3, 72.0], [20.4, 72.0], [20.5, 72.0], [20.6, 73.0], [20.7, 73.0], [20.8, 73.0], [20.9, 74.0], [21.0, 74.0], [21.1, 74.0], [21.2, 74.0], [21.3, 74.0], [21.4, 75.0], [21.5, 75.0], [21.6, 75.0], [21.7, 75.0], [21.8, 76.0], [21.9, 76.0], [22.0, 76.0], [22.1, 76.0], [22.2, 76.0], [22.3, 77.0], [22.4, 77.0], [22.5, 77.0], [22.6, 77.0], [22.7, 78.0], [22.8, 78.0], [22.9, 78.0], [23.0, 78.0], [23.1, 78.0], [23.2, 79.0], [23.3, 79.0], [23.4, 79.0], [23.5, 79.0], [23.6, 79.0], [23.7, 80.0], [23.8, 80.0], [23.9, 80.0], [24.0, 80.0], [24.1, 80.0], [24.2, 80.0], [24.3, 80.0], [24.4, 81.0], [24.5, 81.0], [24.6, 81.0], [24.7, 81.0], [24.8, 82.0], [24.9, 82.0], [25.0, 82.0], [25.1, 82.0], [25.2, 82.0], [25.3, 82.0], [25.4, 82.0], [25.5, 83.0], [25.6, 83.0], [25.7, 83.0], [25.8, 83.0], [25.9, 83.0], [26.0, 84.0], [26.1, 84.0], [26.2, 84.0], [26.3, 84.0], [26.4, 84.0], [26.5, 85.0], [26.6, 85.0], [26.7, 85.0], [26.8, 85.0], [26.9, 86.0], [27.0, 86.0], [27.1, 86.0], [27.2, 86.0], [27.3, 86.0], [27.4, 86.0], [27.5, 87.0], [27.6, 87.0], [27.7, 87.0], [27.8, 87.0], [27.9, 87.0], [28.0, 88.0], [28.1, 88.0], [28.2, 88.0], [28.3, 88.0], [28.4, 88.0], [28.5, 88.0], [28.6, 89.0], [28.7, 89.0], [28.8, 89.0], [28.9, 89.0], [29.0, 89.0], [29.1, 90.0], [29.2, 90.0], [29.3, 90.0], [29.4, 90.0], [29.5, 90.0], [29.6, 90.0], [29.7, 91.0], [29.8, 91.0], [29.9, 91.0], [30.0, 91.0], [30.1, 91.0], [30.2, 92.0], [30.3, 92.0], [30.4, 92.0], [30.5, 92.0], [30.6, 92.0], [30.7, 93.0], [30.8, 93.0], [30.9, 93.0], [31.0, 93.0], [31.1, 94.0], [31.2, 94.0], [31.3, 94.0], [31.4, 94.0], [31.5, 94.0], [31.6, 95.0], [31.7, 95.0], [31.8, 95.0], [31.9, 95.0], [32.0, 95.0], [32.1, 95.0], [32.2, 96.0], [32.3, 96.0], [32.4, 96.0], [32.5, 96.0], [32.6, 96.0], [32.7, 96.0], [32.8, 96.0], [32.9, 97.0], [33.0, 97.0], [33.1, 97.0], [33.2, 97.0], [33.3, 97.0], [33.4, 97.0], [33.5, 98.0], [33.6, 98.0], [33.7, 98.0], [33.8, 98.0], [33.9, 98.0], [34.0, 98.0], [34.1, 99.0], [34.2, 99.0], [34.3, 99.0], [34.4, 99.0], [34.5, 99.0], [34.6, 100.0], [34.7, 100.0], [34.8, 100.0], [34.9, 100.0], [35.0, 100.0], [35.1, 100.0], [35.2, 100.0], [35.3, 100.0], [35.4, 101.0], [35.5, 101.0], [35.6, 101.0], [35.7, 101.0], [35.8, 101.0], [35.9, 101.0], [36.0, 102.0], [36.1, 102.0], [36.2, 102.0], [36.3, 102.0], [36.4, 102.0], [36.5, 102.0], [36.6, 102.0], [36.7, 102.0], [36.8, 102.0], [36.9, 103.0], [37.0, 103.0], [37.1, 103.0], [37.2, 103.0], [37.3, 104.0], [37.4, 104.0], [37.5, 104.0], [37.6, 104.0], [37.7, 104.0], [37.8, 104.0], [37.9, 104.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 106.0], [38.6, 106.0], [38.7, 106.0], [38.8, 106.0], [38.9, 106.0], [39.0, 106.0], [39.1, 107.0], [39.2, 107.0], [39.3, 107.0], [39.4, 107.0], [39.5, 107.0], [39.6, 107.0], [39.7, 108.0], [39.8, 108.0], [39.9, 108.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 109.0], [40.4, 109.0], [40.5, 109.0], [40.6, 109.0], [40.7, 109.0], [40.8, 110.0], [40.9, 110.0], [41.0, 110.0], [41.1, 110.0], [41.2, 110.0], [41.3, 111.0], [41.4, 111.0], [41.5, 111.0], [41.6, 111.0], [41.7, 112.0], [41.8, 112.0], [41.9, 112.0], [42.0, 112.0], [42.1, 112.0], [42.2, 112.0], [42.3, 113.0], [42.4, 113.0], [42.5, 113.0], [42.6, 113.0], [42.7, 113.0], [42.8, 113.0], [42.9, 114.0], [43.0, 114.0], [43.1, 114.0], [43.2, 114.0], [43.3, 114.0], [43.4, 114.0], [43.5, 115.0], [43.6, 115.0], [43.7, 115.0], [43.8, 115.0], [43.9, 115.0], [44.0, 115.0], [44.1, 115.0], [44.2, 116.0], [44.3, 116.0], [44.4, 116.0], [44.5, 116.0], [44.6, 116.0], [44.7, 116.0], [44.8, 117.0], [44.9, 117.0], [45.0, 117.0], [45.1, 117.0], [45.2, 117.0], [45.3, 117.0], [45.4, 118.0], [45.5, 118.0], [45.6, 118.0], [45.7, 118.0], [45.8, 119.0], [45.9, 119.0], [46.0, 119.0], [46.1, 119.0], [46.2, 119.0], [46.3, 120.0], [46.4, 120.0], [46.5, 120.0], [46.6, 120.0], [46.7, 120.0], [46.8, 120.0], [46.9, 120.0], [47.0, 120.0], [47.1, 121.0], [47.2, 121.0], [47.3, 121.0], [47.4, 121.0], [47.5, 121.0], [47.6, 121.0], [47.7, 121.0], [47.8, 122.0], [47.9, 122.0], [48.0, 122.0], [48.1, 122.0], [48.2, 122.0], [48.3, 123.0], [48.4, 123.0], [48.5, 123.0], [48.6, 123.0], [48.7, 123.0], [48.8, 124.0], [48.9, 124.0], [49.0, 124.0], [49.1, 124.0], [49.2, 124.0], [49.3, 125.0], [49.4, 125.0], [49.5, 125.0], [49.6, 125.0], [49.7, 126.0], [49.8, 126.0], [49.9, 126.0], [50.0, 126.0], [50.1, 126.0], [50.2, 126.0], [50.3, 127.0], [50.4, 127.0], [50.5, 127.0], [50.6, 127.0], [50.7, 127.0], [50.8, 128.0], [50.9, 128.0], [51.0, 128.0], [51.1, 128.0], [51.2, 129.0], [51.3, 129.0], [51.4, 129.0], [51.5, 129.0], [51.6, 129.0], [51.7, 129.0], [51.8, 130.0], [51.9, 130.0], [52.0, 130.0], [52.1, 130.0], [52.2, 130.0], [52.3, 131.0], [52.4, 131.0], [52.5, 131.0], [52.6, 131.0], [52.7, 132.0], [52.8, 132.0], [52.9, 132.0], [53.0, 132.0], [53.1, 132.0], [53.2, 133.0], [53.3, 133.0], [53.4, 133.0], [53.5, 133.0], [53.6, 134.0], [53.7, 134.0], [53.8, 134.0], [53.9, 134.0], [54.0, 134.0], [54.1, 135.0], [54.2, 135.0], [54.3, 135.0], [54.4, 135.0], [54.5, 135.0], [54.6, 136.0], [54.7, 136.0], [54.8, 136.0], [54.9, 136.0], [55.0, 137.0], [55.1, 137.0], [55.2, 137.0], [55.3, 137.0], [55.4, 137.0], [55.5, 138.0], [55.6, 138.0], [55.7, 138.0], [55.8, 138.0], [55.9, 138.0], [56.0, 139.0], [56.1, 139.0], [56.2, 139.0], [56.3, 139.0], [56.4, 139.0], [56.5, 140.0], [56.6, 140.0], [56.7, 140.0], [56.8, 140.0], [56.9, 141.0], [57.0, 141.0], [57.1, 141.0], [57.2, 141.0], [57.3, 141.0], [57.4, 142.0], [57.5, 142.0], [57.6, 142.0], [57.7, 142.0], [57.8, 143.0], [57.9, 143.0], [58.0, 143.0], [58.1, 143.0], [58.2, 144.0], [58.3, 144.0], [58.4, 144.0], [58.5, 144.0], [58.6, 145.0], [58.7, 145.0], [58.8, 145.0], [58.9, 145.0], [59.0, 146.0], [59.1, 146.0], [59.2, 146.0], [59.3, 146.0], [59.4, 147.0], [59.5, 147.0], [59.6, 147.0], [59.7, 148.0], [59.8, 148.0], [59.9, 148.0], [60.0, 148.0], [60.1, 148.0], [60.2, 149.0], [60.3, 149.0], [60.4, 149.0], [60.5, 149.0], [60.6, 150.0], [60.7, 150.0], [60.8, 150.0], [60.9, 150.0], [61.0, 151.0], [61.1, 151.0], [61.2, 152.0], [61.3, 152.0], [61.4, 152.0], [61.5, 152.0], [61.6, 153.0], [61.7, 153.0], [61.8, 154.0], [61.9, 154.0], [62.0, 155.0], [62.1, 155.0], [62.2, 155.0], [62.3, 156.0], [62.4, 156.0], [62.5, 156.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 157.0], [63.0, 157.0], [63.1, 158.0], [63.2, 158.0], [63.3, 158.0], [63.4, 158.0], [63.5, 159.0], [63.6, 159.0], [63.7, 159.0], [63.8, 159.0], [63.9, 160.0], [64.0, 160.0], [64.1, 161.0], [64.2, 161.0], [64.3, 161.0], [64.4, 162.0], [64.5, 162.0], [64.6, 163.0], [64.7, 163.0], [64.8, 164.0], [64.9, 164.0], [65.0, 165.0], [65.1, 165.0], [65.2, 166.0], [65.3, 166.0], [65.4, 166.0], [65.5, 167.0], [65.6, 167.0], [65.7, 168.0], [65.8, 168.0], [65.9, 168.0], [66.0, 169.0], [66.1, 169.0], [66.2, 169.0], [66.3, 170.0], [66.4, 170.0], [66.5, 171.0], [66.6, 171.0], [66.7, 172.0], [66.8, 172.0], [66.9, 173.0], [67.0, 174.0], [67.1, 174.0], [67.2, 175.0], [67.3, 176.0], [67.4, 176.0], [67.5, 177.0], [67.6, 178.0], [67.7, 179.0], [67.8, 179.0], [67.9, 180.0], [68.0, 181.0], [68.1, 182.0], [68.2, 183.0], [68.3, 184.0], [68.4, 185.0], [68.5, 186.0], [68.6, 186.0], [68.7, 187.0], [68.8, 188.0], [68.9, 189.0], [69.0, 190.0], [69.1, 192.0], [69.2, 194.0], [69.3, 196.0], [69.4, 197.0], [69.5, 198.0], [69.6, 199.0], [69.7, 200.0], [69.8, 201.0], [69.9, 202.0], [70.0, 203.0], [70.1, 204.0], [70.2, 204.0], [70.3, 205.0], [70.4, 206.0], [70.5, 207.0], [70.6, 207.0], [70.7, 209.0], [70.8, 209.0], [70.9, 210.0], [71.0, 210.0], [71.1, 211.0], [71.2, 212.0], [71.3, 212.0], [71.4, 213.0], [71.5, 214.0], [71.6, 216.0], [71.7, 217.0], [71.8, 219.0], [71.9, 220.0], [72.0, 222.0], [72.1, 222.0], [72.2, 224.0], [72.3, 225.0], [72.4, 226.0], [72.5, 228.0], [72.6, 229.0], [72.7, 231.0], [72.8, 233.0], [72.9, 234.0], [73.0, 235.0], [73.1, 237.0], [73.2, 238.0], [73.3, 239.0], [73.4, 240.0], [73.5, 241.0], [73.6, 241.0], [73.7, 243.0], [73.8, 243.0], [73.9, 244.0], [74.0, 246.0], [74.1, 247.0], [74.2, 250.0], [74.3, 250.0], [74.4, 252.0], [74.5, 253.0], [74.6, 254.0], [74.7, 255.0], [74.8, 256.0], [74.9, 258.0], [75.0, 260.0], [75.1, 261.0], [75.2, 263.0], [75.3, 264.0], [75.4, 265.0], [75.5, 267.0], [75.6, 269.0], [75.7, 271.0], [75.8, 272.0], [75.9, 275.0], [76.0, 276.0], [76.1, 276.0], [76.2, 277.0], [76.3, 278.0], [76.4, 280.0], [76.5, 281.0], [76.6, 283.0], [76.7, 284.0], [76.8, 286.0], [76.9, 287.0], [77.0, 287.0], [77.1, 288.0], [77.2, 290.0], [77.3, 291.0], [77.4, 292.0], [77.5, 295.0], [77.6, 297.0], [77.7, 298.0], [77.8, 299.0], [77.9, 301.0], [78.0, 303.0], [78.1, 303.0], [78.2, 305.0], [78.3, 305.0], [78.4, 307.0], [78.5, 308.0], [78.6, 309.0], [78.7, 310.0], [78.8, 311.0], [78.9, 313.0], [79.0, 313.0], [79.1, 314.0], [79.2, 317.0], [79.3, 318.0], [79.4, 319.0], [79.5, 320.0], [79.6, 321.0], [79.7, 322.0], [79.8, 325.0], [79.9, 326.0], [80.0, 328.0], [80.1, 329.0], [80.2, 329.0], [80.3, 330.0], [80.4, 332.0], [80.5, 334.0], [80.6, 336.0], [80.7, 337.0], [80.8, 338.0], [80.9, 340.0], [81.0, 342.0], [81.1, 345.0], [81.2, 345.0], [81.3, 350.0], [81.4, 351.0], [81.5, 357.0], [81.6, 359.0], [81.7, 360.0], [81.8, 361.0], [81.9, 364.0], [82.0, 365.0], [82.1, 367.0], [82.2, 372.0], [82.3, 379.0], [82.4, 382.0], [82.5, 388.0], [82.6, 393.0], [82.7, 395.0], [82.8, 399.0], [82.9, 403.0], [83.0, 406.0], [83.1, 410.0], [83.2, 414.0], [83.3, 416.0], [83.4, 420.0], [83.5, 423.0], [83.6, 426.0], [83.7, 434.0], [83.8, 440.0], [83.9, 444.0], [84.0, 447.0], [84.1, 450.0], [84.2, 451.0], [84.3, 452.0], [84.4, 455.0], [84.5, 456.0], [84.6, 457.0], [84.7, 457.0], [84.8, 458.0], [84.9, 459.0], [85.0, 461.0], [85.1, 462.0], [85.2, 464.0], [85.3, 465.0], [85.4, 466.0], [85.5, 467.0], [85.6, 469.0], [85.7, 471.0], [85.8, 473.0], [85.9, 474.0], [86.0, 475.0], [86.1, 476.0], [86.2, 478.0], [86.3, 480.0], [86.4, 480.0], [86.5, 481.0], [86.6, 483.0], [86.7, 484.0], [86.8, 487.0], [86.9, 490.0], [87.0, 494.0], [87.1, 498.0], [87.2, 502.0], [87.3, 504.0], [87.4, 507.0], [87.5, 510.0], [87.6, 513.0], [87.7, 515.0], [87.8, 517.0], [87.9, 519.0], [88.0, 522.0], [88.1, 527.0], [88.2, 529.0], [88.3, 533.0], [88.4, 534.0], [88.5, 536.0], [88.6, 539.0], [88.7, 541.0], [88.8, 542.0], [88.9, 543.0], [89.0, 544.0], [89.1, 546.0], [89.2, 547.0], [89.3, 552.0], [89.4, 553.0], [89.5, 555.0], [89.6, 556.0], [89.7, 558.0], [89.8, 559.0], [89.9, 560.0], [90.0, 562.0], [90.1, 564.0], [90.2, 565.0], [90.3, 567.0], [90.4, 569.0], [90.5, 572.0], [90.6, 573.0], [90.7, 575.0], [90.8, 578.0], [90.9, 581.0], [91.0, 583.0], [91.1, 584.0], [91.2, 584.0], [91.3, 585.0], [91.4, 586.0], [91.5, 588.0], [91.6, 589.0], [91.7, 589.0], [91.8, 590.0], [91.9, 591.0], [92.0, 592.0], [92.1, 594.0], [92.2, 595.0], [92.3, 597.0], [92.4, 598.0], [92.5, 599.0], [92.6, 600.0], [92.7, 601.0], [92.8, 602.0], [92.9, 603.0], [93.0, 606.0], [93.1, 607.0], [93.2, 609.0], [93.3, 610.0], [93.4, 612.0], [93.5, 612.0], [93.6, 614.0], [93.7, 616.0], [93.8, 618.0], [93.9, 620.0], [94.0, 625.0], [94.1, 627.0], [94.2, 630.0], [94.3, 634.0], [94.4, 637.0], [94.5, 644.0], [94.6, 649.0], [94.7, 725.0], [94.8, 847.0], [94.9, 878.0], [95.0, 1013.0], [95.1, 1022.0], [95.2, 1031.0], [95.3, 1033.0], [95.4, 1035.0], [95.5, 1037.0], [95.6, 1039.0], [95.7, 1041.0], [95.8, 1044.0], [95.9, 1052.0], [96.0, 1061.0], [96.1, 1066.0], [96.2, 1073.0], [96.3, 1078.0], [96.4, 1080.0], [96.5, 1081.0], [96.6, 1083.0], [96.7, 1087.0], [96.8, 1090.0], [96.9, 1096.0], [97.0, 1099.0], [97.1, 1104.0], [97.2, 1118.0], [97.3, 1121.0], [97.4, 1128.0], [97.5, 1132.0], [97.6, 1136.0], [97.7, 1140.0], [97.8, 1146.0], [97.9, 1151.0], [98.0, 1156.0], [98.1, 1159.0], [98.2, 1179.0], [98.3, 1194.0], [98.4, 1256.0], [98.5, 1261.0], [98.6, 1271.0], [98.7, 1283.0], [98.8, 1289.0], [98.9, 1296.0], [99.0, 1299.0], [99.1, 1306.0], [99.2, 1330.0], [99.3, 1337.0], [99.4, 1343.0], [99.5, 1353.0], [99.6, 1368.0], [99.7, 1371.0], [99.8, 1475.0], [99.9, 1581.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1752.0, "series": [{"data": [[0.0, 1729.0], [2100.0, 3.0], [600.0, 108.0], [700.0, 3.0], [200.0, 410.0], [800.0, 11.0], [1000.0, 102.0], [1100.0, 65.0], [300.0, 249.0], [1200.0, 35.0], [1300.0, 40.0], [1400.0, 1.0], [1500.0, 5.0], [100.0, 1752.0], [400.0, 217.0], [1700.0, 1.0], [500.0, 269.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4359.0, "series": [{"data": [[0.0, 4359.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 632.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 228.33980000000005, "minX": 1.67230212E12, "maxY": 228.33980000000005, "series": [{"data": [[1.67230212E12, 228.33980000000005]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67230212E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 2194.5, "series": [{"data": [[2.0, 1120.0], [3.0, 1033.0], [5.0, 6.0], [6.0, 368.6666666666667], [7.0, 13.0], [8.0, 20.5], [9.0, 562.5], [11.0, 731.6666666666666], [12.0, 232.4], [13.0, 278.25], [14.0, 31.6], [15.0, 34.66666666666667], [16.0, 190.05], [17.0, 38.400000000000006], [18.0, 43.0], [19.0, 210.77777777777777], [20.0, 24.25], [21.0, 172.0], [22.0, 49.5], [23.0, 125.04545454545453], [24.0, 37.642857142857146], [25.0, 35.0], [26.0, 197.47619047619048], [27.0, 131.83333333333331], [28.0, 48.85], [29.0, 150.89473684210526], [30.0, 37.81250000000001], [31.0, 44.000000000000014], [33.0, 42.733333333333334], [32.0, 238.125], [35.0, 44.63157894736841], [34.0, 46.6], [36.0, 297.29411764705884], [37.0, 42.75], [38.0, 51.523809523809526], [39.0, 180.3478260869565], [41.0, 119.35714285714285], [40.0, 112.26666666666667], [43.0, 86.33333333333333], [42.0, 107.5625], [44.0, 50.7142857142857], [45.0, 381.1111111111111], [46.0, 45.78947368421053], [47.0, 51.6], [48.0, 252.86666666666667], [49.0, 174.55555555555554], [51.0, 249.0], [50.0, 43.8], [53.0, 449.2], [52.0, 57.5], [55.0, 74.0], [54.0, 539.5], [57.0, 235.52941176470588], [56.0, 49.0], [59.0, 59.625], [58.0, 74.6], [61.0, 430.0909090909091], [60.0, 70.71428571428571], [63.0, 265.70000000000005], [62.0, 55.8], [64.0, 81.6], [67.0, 347.0], [65.0, 243.5], [66.0, 344.0], [70.0, 319.75], [69.0, 77.57142857142857], [68.0, 227.5], [71.0, 77.3529411764706], [74.0, 162.0], [72.0, 82.0], [75.0, 241.91666666666669], [73.0, 302.5], [79.0, 116.63333333333331], [78.0, 194.90625], [77.0, 190.10526315789474], [76.0, 70.85714285714285], [83.0, 138.94444444444446], [80.0, 87.0], [82.0, 126.12499999999999], [81.0, 304.4117647058824], [87.0, 159.1818181818182], [85.0, 155.8181818181818], [86.0, 151.35714285714286], [84.0, 71.21428571428571], [89.0, 259.625], [88.0, 105.19999999999999], [91.0, 72.76923076923077], [90.0, 129.8125], [95.0, 93.91666666666667], [94.0, 82.9375], [93.0, 95.33333333333333], [92.0, 73.875], [97.0, 109.36363636363637], [96.0, 398.26666666666665], [98.0, 103.82352941176471], [99.0, 135.25], [103.0, 81.15789473684211], [101.0, 107.29166666666669], [100.0, 193.4375], [102.0, 236.35294117647058], [104.0, 125.66666666666669], [106.0, 230.7142857142857], [105.0, 121.48148148148152], [107.0, 99.36666666666665], [108.0, 155.33333333333334], [111.0, 80.33333333333334], [109.0, 148.64285714285714], [110.0, 76.33333333333333], [113.0, 78.2], [112.0, 90.48387096774194], [114.0, 90.66666666666669], [115.0, 74.0], [119.0, 191.0], [117.0, 109.33333333333333], [118.0, 217.58333333333334], [116.0, 106.875], [122.0, 120.0], [120.0, 113.0], [121.0, 84.0], [123.0, 242.33333333333331], [125.0, 153.962962962963], [127.0, 112.99999999999999], [124.0, 111.30434782608698], [126.0, 104.18181818181816], [135.0, 223.0625], [133.0, 98.5757575757576], [132.0, 191.04545454545453], [128.0, 121.875], [129.0, 103.73333333333333], [130.0, 103.22222222222223], [134.0, 245.28571428571425], [131.0, 212.22222222222223], [141.0, 191.61904761904765], [142.0, 97.3157894736842], [140.0, 99.88235294117646], [139.0, 130.5277777777778], [143.0, 183.3214285714286], [136.0, 160.42857142857144], [138.0, 108.0], [137.0, 104.10526315789474], [151.0, 170.33333333333334], [150.0, 123.82608695652175], [149.0, 154.2941176470588], [148.0, 234.66666666666663], [147.0, 184.81818181818184], [145.0, 191.40909090909085], [146.0, 176.52941176470588], [144.0, 167.27777777777777], [157.0, 128.17391304347828], [156.0, 124.51388888888886], [152.0, 193.34482758620686], [159.0, 116.16666666666667], [158.0, 143.31034482758622], [153.0, 134.8888888888889], [154.0, 110.84210526315789], [155.0, 100.84210526315789], [167.0, 202.6923076923077], [165.0, 123.70270270270271], [164.0, 142.12121212121212], [162.0, 188.73333333333335], [163.0, 122.625], [166.0, 150.32258064516122], [161.0, 99.25], [160.0, 143.7878787878788], [175.0, 119.79999999999998], [171.0, 122.88571428571431], [173.0, 128.9655172413793], [172.0, 127.78571428571432], [170.0, 180.36363636363637], [169.0, 131.23999999999998], [174.0, 389.8095238095238], [168.0, 179.0909090909091], [181.0, 179.17647058823528], [182.0, 158.84], [180.0, 111.10526315789474], [178.0, 148.35714285714286], [177.0, 110.9], [179.0, 174.56521739130434], [176.0, 117.72222222222223], [183.0, 221.0], [186.0, 120.94736842105264], [185.0, 193.77777777777774], [184.0, 171.83333333333337], [188.0, 164.1428571428571], [189.0, 129.875], [191.0, 104.80000000000001], [190.0, 176.5], [187.0, 116.44444444444443], [192.0, 113.5], [197.0, 612.1454545454546], [195.0, 127.62500000000001], [194.0, 188.44444444444443], [199.0, 137.55555555555554], [198.0, 234.0], [196.0, 121.84615384615384], [193.0, 236.00000000000003], [200.0, 115.8], [203.0, 127.2], [202.0, 128.35714285714286], [201.0, 122.14285714285714], [206.0, 139.0], [205.0, 136.0], [207.0, 152.0], [204.0, 135.87500000000003], [214.0, 131.63636363636365], [212.0, 143.8], [211.0, 133.90909090909088], [209.0, 134.25], [208.0, 108.75], [210.0, 109.62499999999999], [215.0, 128.57142857142858], [213.0, 134.5], [223.0, 296.83333333333337], [221.0, 120.0], [220.0, 128.2], [218.0, 139.4], [217.0, 121.5], [222.0, 140.5], [219.0, 144.0], [216.0, 104.0], [228.0, 140.0], [227.0, 125.75], [226.0, 136.5], [225.0, 122.0], [224.0, 132.5], [229.0, 120.5], [233.0, 1176.0], [234.0, 145.0], [235.0, 481.66666666666663], [239.0, 108.5], [238.0, 103.0], [236.0, 114.0], [237.0, 2194.5], [247.0, 283.6666666666667], [246.0, 121.0], [244.0, 113.5], [242.0, 495.0], [241.0, 101.0], [240.0, 101.0], [245.0, 123.66666666666667], [243.0, 1147.5], [255.0, 117.6], [253.0, 125.0], [252.0, 265.14285714285717], [250.0, 211.27272727272725], [249.0, 354.8888888888889], [251.0, 104.0], [248.0, 129.5], [254.0, 114.5], [258.0, 119.5], [265.0, 116.5], [267.0, 412.2], [266.0, 125.5], [264.0, 115.33333333333333], [262.0, 105.66666666666667], [261.0, 109.0], [260.0, 110.66666666666667], [259.0, 118.4], [257.0, 256.57142857142856], [256.0, 453.66666666666663], [263.0, 453.0], [268.0, 115.0], [269.0, 1185.0], [271.0, 576.6666666666666], [270.0, 986.6], [284.0, 241.0], [280.0, 392.4], [281.0, 671.3333333333334], [279.0, 406.6923076923077], [275.0, 520.0], [272.0, 1260.0], [285.0, 766.25], [287.0, 518.0], [286.0, 563.357142857143], [283.0, 391.2], [282.0, 233.0], [276.0, 242.0], [277.0, 236.85714285714286], [288.0, 847.2], [291.0, 455.0], [317.0, 597.5], [305.0, 187.44444444444446], [310.0, 344.16666666666663], [309.0, 1345.0], [307.0, 181.0], [306.0, 1369.0], [304.0, 177.07692307692307], [311.0, 583.0], [319.0, 542.0], [312.0, 516.3333333333334], [316.0, 499.0], [314.0, 477.5], [313.0, 661.9382716049386], [332.0, 400.6666666666667], [335.0, 290.75], [321.0, 188.26190476190473], [323.0, 189.5], [322.0, 512.5], [326.0, 370.0], [320.0, 454.0], [331.0, 267.66666666666663], [333.0, 218.8], [334.0, 421.40000000000003], [330.0, 263.5], [329.0, 238.42857142857144], [328.0, 420.4], [325.0, 248.74074074074073], [324.0, 345.2857142857143], [351.0, 260.6666666666667], [344.0, 201.0], [341.0, 145.0], [340.0, 190.0], [349.0, 885.5], [350.0, 321.0], [348.0, 312.25], [347.0, 748.5], [346.0, 303.0], [345.0, 379.5], [343.0, 332.0], [337.0, 180.85714285714286], [336.0, 283.0], [339.0, 571.0], [338.0, 656.4], [342.0, 456.5833333333333], [366.0, 242.71428571428572], [353.0, 219.42857142857142], [355.0, 573.6666666666667], [354.0, 379.4], [364.0, 322.3333333333333], [365.0, 299.0], [367.0, 232.0], [363.0, 392.75], [362.0, 280.5], [360.0, 497.0], [359.0, 288.5], [358.0, 246.25], [357.0, 298.3333333333333], [356.0, 409.3333333333333], [383.0, 271.5], [382.0, 372.0], [381.0, 391.5], [380.0, 235.5], [376.0, 287.71153846153845], [379.0, 347.5714285714286], [378.0, 227.33333333333334], [377.0, 337.3333333333333], [375.0, 271.0307692307692], [372.0, 255.75], [371.0, 347.99999999999994], [373.0, 283.0], [368.0, 554.9090909090909], [369.0, 607.6666666666667], [370.0, 251.0], [374.0, 274.3076923076923], [391.0, 690.5], [390.0, 304.6], [388.0, 224.0], [386.0, 254.0], [385.0, 326.6666666666667], [384.0, 429.5], [393.0, 565.0], [387.0, 522.0], [407.0, 211.33333333333334], [405.0, 200.5], [411.0, 199.5263157894737], [415.0, 213.0], [414.0, 247.0], [413.0, 251.0], [418.0, 233.0], [422.0, 584.3548387096777], [423.0, 138.25], [428.0, 352.0], [431.0, 147.25], [425.0, 102.8], [427.0, 559.0], [426.0, 654.0], [424.0, 145.0], [417.0, 238.0], [416.0, 254.0], [429.0, 391.0], [430.0, 496.0], [446.0, 592.0], [447.0, 508.0], [445.0, 598.0], [444.0, 533.0], [442.0, 557.0], [441.0, 638.5], [440.0, 637.0], [438.0, 494.0], [435.0, 638.0], [433.0, 592.0], [432.0, 504.8], [437.0, 582.0], [463.0, 513.0], [460.0, 451.0], [461.0, 494.6], [457.0, 555.0], [449.0, 649.0], [448.0, 603.0], [477.0, 564.0], [464.0, 431.0], [478.0, 519.0], [474.0, 573.6666666666666], [472.0, 457.0], [470.0, 449.0], [469.0, 471.0], [468.0, 585.0], [465.0, 492.0], [493.0, 212.0], [492.0, 240.0], [491.0, 283.0], [487.0, 620.0], [484.0, 594.0], [480.0, 599.0], [538.0, 270.0], [522.0, 291.6666666666667], [524.0, 213.0], [523.0, 253.0], [526.0, 211.0], [525.0, 225.0], [521.0, 255.33333333333334], [520.0, 275.5], [542.0, 313.5], [528.0, 263.0], [541.0, 326.0], [539.0, 289.0], [537.0, 320.0], [527.0, 254.0], [531.0, 256.0], [530.0, 255.5], [551.0, 260.6666666666667], [553.0, 256.0], [567.0, 462.5], [575.0, 554.25], [555.0, 468.0], [563.0, 645.0], [569.0, 466.0], [572.0, 581.0], [554.0, 573.0], [592.0, 663.8333333333334], [581.0, 240.5], [585.0, 440.8], [587.0, 688.4285714285714], [588.0, 512.4], [586.0, 969.3333333333334], [601.0, 1337.0], [583.0, 547.9764705882353], [582.0, 514.3333333333334], [603.0, 301.0], [599.0, 434.18181818181824], [598.0, 364.0], [597.0, 361.0], [596.0, 480.25], [595.0, 262.0], [594.0, 272.9333333333334], [593.0, 437.3333333333333], [589.0, 525.8], [591.0, 552.5], [576.0, 269.0], [578.0, 533.0], [590.0, 506.61764705882365], [607.0, 427.6666666666667], [606.0, 582.0], [605.0, 296.0], [626.0, 468.0], [637.0, 541.6666666666666], [639.0, 588.0], [625.0, 584.0], [624.0, 589.0], [634.0, 530.6666666666666], [633.0, 573.0], [632.0, 573.0], [612.0, 547.0], [610.0, 560.5], [623.0, 511.0], [622.0, 576.0], [620.0, 550.25], [618.0, 565.75], [616.0, 590.0], [630.0, 634.0], [629.0, 536.0], [627.0, 607.0], [658.0, 556.0], [670.0, 455.8], [671.0, 363.0], [656.0, 583.0], [667.0, 503.5], [666.0, 469.0], [665.0, 525.3333333333334], [647.0, 604.5], [646.0, 575.0], [645.0, 515.5], [643.0, 561.5], [640.0, 557.0], [655.0, 620.0], [653.0, 544.0], [651.0, 596.0], [649.0, 603.0], [663.0, 504.5], [661.0, 472.0], [660.0, 561.0], [696.0, 383.0], [701.0, 408.3333333333333], [702.0, 332.0], [688.0, 347.0], [703.0, 509.0], [699.0, 419.0], [698.0, 341.0], [697.0, 326.0], [686.0, 378.3333333333333], [685.0, 426.0], [674.0, 686.0], [673.0, 595.6666666666666], [676.0, 443.0], [675.0, 529.0], [679.0, 491.0], [677.0, 458.0], [687.0, 533.0], [684.0, 442.8], [682.0, 363.0], [683.0, 401.0], [681.0, 393.66666666666663], [680.0, 485.0], [694.0, 383.8], [692.0, 391.5], [691.0, 400.0], [690.0, 367.5], [689.0, 397.0], [718.0, 516.0], [705.0, 425.0], [708.0, 502.5], [706.0, 502.0], [710.0, 529.0], [709.0, 507.0], [704.0, 461.2], [716.0, 472.5], [720.0, 439.0], [711.0, 484.0], [719.0, 600.0], [717.0, 505.0], [715.0, 541.0], [714.0, 513.0], [713.0, 488.0], [712.0, 480.0], [796.0, 354.7894736842105], [799.0, 343.71428571428567], [798.0, 363.5], [797.0, 343.5], [800.0, 349.0], [819.0, 403.0], [820.0, 325.0], [818.0, 317.0], [816.0, 384.5], [805.0, 322.0], [804.0, 351.6666666666667], [803.0, 409.0], [802.0, 344.49295774647874], [801.0, 360.25], [814.0, 382.0], [813.0, 377.5], [812.0, 322.5], [811.0, 375.6], [810.0, 389.5], [808.0, 335.0], [1.0, 1034.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[228.34600000000012, 231.12619999999973]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 820.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15916.666666666666, "minX": 1.67230212E12, "maxY": 2206916.6666666665, "series": [{"data": [[1.67230212E12, 2206916.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67230212E12, 15916.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67230212E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 231.12619999999973, "minX": 1.67230212E12, "maxY": 231.12619999999973, "series": [{"data": [[1.67230212E12, 231.12619999999973]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67230212E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 201.4241999999995, "minX": 1.67230212E12, "maxY": 201.4241999999995, "series": [{"data": [[1.67230212E12, 201.4241999999995]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67230212E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 64.42059999999998, "minX": 1.67230212E12, "maxY": 64.42059999999998, "series": [{"data": [[1.67230212E12, 64.42059999999998]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67230212E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.67230212E12, "maxY": 2196.0, "series": [{"data": [[1.67230212E12, 2196.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67230212E12, 562.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67230212E12, 1300.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67230212E12, 1013.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.67230212E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67230212E12, 126.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67230212E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 81.0, "minX": 35.0, "maxY": 583.0, "series": [{"data": [[35.0, 129.0], [681.0, 583.0], [755.0, 273.0], [799.0, 149.0], [814.0, 81.0], [916.0, 104.0], [1000.0, 114.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 66.0, "minX": 35.0, "maxY": 494.0, "series": [{"data": [[35.0, 126.0], [681.0, 494.0], [755.0, 224.0], [799.0, 115.0], [814.0, 66.0], [916.0, 90.0], [1000.0, 94.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.67230212E12, "maxY": 83.33333333333333, "series": [{"data": [[1.67230212E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67230212E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.67230212E12, "maxY": 83.33333333333333, "series": [{"data": [[1.67230212E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67230212E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.67230212E12, "maxY": 83.33333333333333, "series": [{"data": [[1.67230212E12, 83.33333333333333]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67230212E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.67230212E12, "maxY": 83.33333333333333, "series": [{"data": [[1.67230212E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67230212E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

