/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 862.0, "minX": 0.0, "maxY": 129232.0, "series": [{"data": [[0.0, 5164.0], [0.1, 5164.0], [0.2, 5164.0], [0.3, 5164.0], [0.4, 5164.0], [0.5, 5164.0], [0.6, 5164.0], [0.7, 5164.0], [0.8, 5164.0], [0.9, 5164.0], [1.0, 6196.0], [1.1, 6196.0], [1.2, 6196.0], [1.3, 6196.0], [1.4, 6196.0], [1.5, 6196.0], [1.6, 6196.0], [1.7, 6196.0], [1.8, 6196.0], [1.9, 6196.0], [2.0, 7319.0], [2.1, 7319.0], [2.2, 7319.0], [2.3, 7319.0], [2.4, 7319.0], [2.5, 7319.0], [2.6, 7319.0], [2.7, 7319.0], [2.8, 7319.0], [2.9, 7319.0], [3.0, 7601.0], [3.1, 7601.0], [3.2, 7601.0], [3.3, 7601.0], [3.4, 7601.0], [3.5, 7601.0], [3.6, 7601.0], [3.7, 7601.0], [3.8, 7601.0], [3.9, 7601.0], [4.0, 8483.0], [4.1, 8483.0], [4.2, 8483.0], [4.3, 8483.0], [4.4, 8483.0], [4.5, 8483.0], [4.6, 8483.0], [4.7, 8483.0], [4.8, 8483.0], [4.9, 8483.0], [5.0, 8712.0], [5.1, 8712.0], [5.2, 8712.0], [5.3, 8712.0], [5.4, 8712.0], [5.5, 8712.0], [5.6, 8712.0], [5.7, 8712.0], [5.8, 8712.0], [5.9, 8712.0], [6.0, 8893.0], [6.1, 8893.0], [6.2, 8893.0], [6.3, 8893.0], [6.4, 8893.0], [6.5, 8893.0], [6.6, 8893.0], [6.7, 8893.0], [6.8, 8893.0], [6.9, 8893.0], [7.0, 8900.0], [7.1, 8900.0], [7.2, 8900.0], [7.3, 8900.0], [7.4, 8900.0], [7.5, 8900.0], [7.6, 8900.0], [7.7, 8900.0], [7.8, 8900.0], [7.9, 8900.0], [8.0, 9146.0], [8.1, 9146.0], [8.2, 9146.0], [8.3, 9146.0], [8.4, 9146.0], [8.5, 9146.0], [8.6, 9146.0], [8.7, 9146.0], [8.8, 9146.0], [8.9, 9146.0], [9.0, 9425.0], [9.1, 9425.0], [9.2, 9425.0], [9.3, 9425.0], [9.4, 9425.0], [9.5, 9425.0], [9.6, 9425.0], [9.7, 9425.0], [9.8, 9425.0], [9.9, 9425.0], [10.0, 9524.0], [10.1, 9524.0], [10.2, 9524.0], [10.3, 9524.0], [10.4, 9524.0], [10.5, 9524.0], [10.6, 9524.0], [10.7, 9524.0], [10.8, 9524.0], [10.9, 9524.0], [11.0, 9763.0], [11.1, 9763.0], [11.2, 9763.0], [11.3, 9763.0], [11.4, 9763.0], [11.5, 9763.0], [11.6, 9763.0], [11.7, 9763.0], [11.8, 9763.0], [11.9, 9763.0], [12.0, 13167.0], [12.1, 13167.0], [12.2, 13167.0], [12.3, 13167.0], [12.4, 13167.0], [12.5, 13167.0], [12.6, 13167.0], [12.7, 13167.0], [12.8, 13167.0], [12.9, 13167.0], [13.0, 13997.0], [13.1, 13997.0], [13.2, 13997.0], [13.3, 13997.0], [13.4, 13997.0], [13.5, 13997.0], [13.6, 13997.0], [13.7, 13997.0], [13.8, 13997.0], [13.9, 13997.0], [14.0, 15813.0], [14.1, 15813.0], [14.2, 15813.0], [14.3, 15813.0], [14.4, 15813.0], [14.5, 15813.0], [14.6, 15813.0], [14.7, 15813.0], [14.8, 15813.0], [14.9, 15813.0], [15.0, 15849.0], [15.1, 15849.0], [15.2, 15849.0], [15.3, 15849.0], [15.4, 15849.0], [15.5, 15849.0], [15.6, 15849.0], [15.7, 15849.0], [15.8, 15849.0], [15.9, 15849.0], [16.0, 16423.0], [16.1, 16423.0], [16.2, 16423.0], [16.3, 16423.0], [16.4, 16423.0], [16.5, 16423.0], [16.6, 16423.0], [16.7, 16423.0], [16.8, 16423.0], [16.9, 16423.0], [17.0, 16647.0], [17.1, 16647.0], [17.2, 16647.0], [17.3, 16647.0], [17.4, 16647.0], [17.5, 16647.0], [17.6, 16647.0], [17.7, 16647.0], [17.8, 16647.0], [17.9, 16647.0], [18.0, 16894.0], [18.1, 16894.0], [18.2, 16894.0], [18.3, 16894.0], [18.4, 16894.0], [18.5, 16894.0], [18.6, 16894.0], [18.7, 16894.0], [18.8, 16894.0], [18.9, 16894.0], [19.0, 17222.0], [19.1, 17222.0], [19.2, 17222.0], [19.3, 17222.0], [19.4, 17222.0], [19.5, 17222.0], [19.6, 17222.0], [19.7, 17222.0], [19.8, 17222.0], [19.9, 17222.0], [20.0, 17260.0], [20.1, 17260.0], [20.2, 17260.0], [20.3, 17260.0], [20.4, 17260.0], [20.5, 17260.0], [20.6, 17260.0], [20.7, 17260.0], [20.8, 17260.0], [20.9, 17260.0], [21.0, 17527.0], [21.1, 17527.0], [21.2, 17527.0], [21.3, 17527.0], [21.4, 17527.0], [21.5, 17527.0], [21.6, 17527.0], [21.7, 17527.0], [21.8, 17527.0], [21.9, 17527.0], [22.0, 19901.0], [22.1, 19901.0], [22.2, 19901.0], [22.3, 19901.0], [22.4, 19901.0], [22.5, 19901.0], [22.6, 19901.0], [22.7, 19901.0], [22.8, 19901.0], [22.9, 19901.0], [23.0, 20299.0], [23.1, 20299.0], [23.2, 20299.0], [23.3, 20299.0], [23.4, 20299.0], [23.5, 20299.0], [23.6, 20299.0], [23.7, 20299.0], [23.8, 20299.0], [23.9, 20299.0], [24.0, 21999.0], [24.1, 21999.0], [24.2, 21999.0], [24.3, 21999.0], [24.4, 21999.0], [24.5, 21999.0], [24.6, 21999.0], [24.7, 21999.0], [24.8, 21999.0], [24.9, 21999.0], [25.0, 23508.0], [25.1, 23508.0], [25.2, 23508.0], [25.3, 23508.0], [25.4, 23508.0], [25.5, 23508.0], [25.6, 23508.0], [25.7, 23508.0], [25.8, 23508.0], [25.9, 23508.0], [26.0, 24733.0], [26.1, 24733.0], [26.2, 24733.0], [26.3, 24733.0], [26.4, 24733.0], [26.5, 24733.0], [26.6, 24733.0], [26.7, 24733.0], [26.8, 24733.0], [26.9, 24733.0], [27.0, 24740.0], [27.1, 24740.0], [27.2, 24740.0], [27.3, 24740.0], [27.4, 24740.0], [27.5, 24740.0], [27.6, 24740.0], [27.7, 24740.0], [27.8, 24740.0], [27.9, 24740.0], [28.0, 25199.0], [28.1, 25199.0], [28.2, 25199.0], [28.3, 25199.0], [28.4, 25199.0], [28.5, 25199.0], [28.6, 25199.0], [28.7, 25199.0], [28.8, 25199.0], [28.9, 25199.0], [29.0, 25206.0], [29.1, 25206.0], [29.2, 25206.0], [29.3, 25206.0], [29.4, 25206.0], [29.5, 25206.0], [29.6, 25206.0], [29.7, 25206.0], [29.8, 25206.0], [29.9, 25206.0], [30.0, 25242.0], [30.1, 25242.0], [30.2, 25242.0], [30.3, 25242.0], [30.4, 25242.0], [30.5, 25242.0], [30.6, 25242.0], [30.7, 25242.0], [30.8, 25242.0], [30.9, 25242.0], [31.0, 25850.0], [31.1, 25850.0], [31.2, 25850.0], [31.3, 25850.0], [31.4, 25850.0], [31.5, 25850.0], [31.6, 25850.0], [31.7, 25850.0], [31.8, 25850.0], [31.9, 25850.0], [32.0, 26570.0], [32.1, 26570.0], [32.2, 26570.0], [32.3, 26570.0], [32.4, 26570.0], [32.5, 26570.0], [32.6, 26570.0], [32.7, 26570.0], [32.8, 26570.0], [32.9, 26570.0], [33.0, 27196.0], [33.1, 27196.0], [33.2, 27196.0], [33.3, 27196.0], [33.4, 27196.0], [33.5, 27196.0], [33.6, 27196.0], [33.7, 27196.0], [33.8, 27196.0], [33.9, 27196.0], [34.0, 27641.0], [34.1, 27641.0], [34.2, 27641.0], [34.3, 27641.0], [34.4, 27641.0], [34.5, 27641.0], [34.6, 27641.0], [34.7, 27641.0], [34.8, 27641.0], [34.9, 27641.0], [35.0, 29817.0], [35.1, 29817.0], [35.2, 29817.0], [35.3, 29817.0], [35.4, 29817.0], [35.5, 29817.0], [35.6, 29817.0], [35.7, 29817.0], [35.8, 29817.0], [35.9, 29817.0], [36.0, 30633.0], [36.1, 30633.0], [36.2, 30633.0], [36.3, 30633.0], [36.4, 30633.0], [36.5, 30633.0], [36.6, 30633.0], [36.7, 30633.0], [36.8, 30633.0], [36.9, 30633.0], [37.0, 30886.0], [37.1, 30886.0], [37.2, 30886.0], [37.3, 30886.0], [37.4, 30886.0], [37.5, 30886.0], [37.6, 30886.0], [37.7, 30886.0], [37.8, 30886.0], [37.9, 30886.0], [38.0, 31204.0], [38.1, 31204.0], [38.2, 31204.0], [38.3, 31204.0], [38.4, 31204.0], [38.5, 31204.0], [38.6, 31204.0], [38.7, 31204.0], [38.8, 31204.0], [38.9, 31204.0], [39.0, 31767.0], [39.1, 31767.0], [39.2, 31767.0], [39.3, 31767.0], [39.4, 31767.0], [39.5, 31767.0], [39.6, 31767.0], [39.7, 31767.0], [39.8, 31767.0], [39.9, 31767.0], [40.0, 31992.0], [40.1, 31992.0], [40.2, 31992.0], [40.3, 31992.0], [40.4, 31992.0], [40.5, 31992.0], [40.6, 31992.0], [40.7, 31992.0], [40.8, 31992.0], [40.9, 31992.0], [41.0, 32180.0], [41.1, 32180.0], [41.2, 32180.0], [41.3, 32180.0], [41.4, 32180.0], [41.5, 32180.0], [41.6, 32180.0], [41.7, 32180.0], [41.8, 32180.0], [41.9, 32180.0], [42.0, 32779.0], [42.1, 32779.0], [42.2, 32779.0], [42.3, 32779.0], [42.4, 32779.0], [42.5, 32779.0], [42.6, 32779.0], [42.7, 32779.0], [42.8, 32779.0], [42.9, 32779.0], [43.0, 33134.0], [43.1, 33134.0], [43.2, 33134.0], [43.3, 33134.0], [43.4, 33134.0], [43.5, 33134.0], [43.6, 33134.0], [43.7, 33134.0], [43.8, 33134.0], [43.9, 33134.0], [44.0, 35609.0], [44.1, 35609.0], [44.2, 35609.0], [44.3, 35609.0], [44.4, 35609.0], [44.5, 35609.0], [44.6, 35609.0], [44.7, 35609.0], [44.8, 35609.0], [44.9, 35609.0], [45.0, 36523.0], [45.1, 36523.0], [45.2, 36523.0], [45.3, 36523.0], [45.4, 36523.0], [45.5, 36523.0], [45.6, 36523.0], [45.7, 36523.0], [45.8, 36523.0], [45.9, 36523.0], [46.0, 38293.0], [46.1, 38293.0], [46.2, 38293.0], [46.3, 38293.0], [46.4, 38293.0], [46.5, 38293.0], [46.6, 38293.0], [46.7, 38293.0], [46.8, 38293.0], [46.9, 38293.0], [47.0, 38335.0], [47.1, 38335.0], [47.2, 38335.0], [47.3, 38335.0], [47.4, 38335.0], [47.5, 38335.0], [47.6, 38335.0], [47.7, 38335.0], [47.8, 38335.0], [47.9, 38335.0], [48.0, 38596.0], [48.1, 38596.0], [48.2, 38596.0], [48.3, 38596.0], [48.4, 38596.0], [48.5, 38596.0], [48.6, 38596.0], [48.7, 38596.0], [48.8, 38596.0], [48.9, 38596.0], [49.0, 38737.0], [49.1, 38737.0], [49.2, 38737.0], [49.3, 38737.0], [49.4, 38737.0], [49.5, 38737.0], [49.6, 38737.0], [49.7, 38737.0], [49.8, 38737.0], [49.9, 38737.0], [50.0, 38830.0], [50.1, 38830.0], [50.2, 38830.0], [50.3, 38830.0], [50.4, 38830.0], [50.5, 38830.0], [50.6, 38830.0], [50.7, 38830.0], [50.8, 38830.0], [50.9, 38830.0], [51.0, 39435.0], [51.1, 39435.0], [51.2, 39435.0], [51.3, 39435.0], [51.4, 39435.0], [51.5, 39435.0], [51.6, 39435.0], [51.7, 39435.0], [51.8, 39435.0], [51.9, 39435.0], [52.0, 39492.0], [52.1, 39492.0], [52.2, 39492.0], [52.3, 39492.0], [52.4, 39492.0], [52.5, 39492.0], [52.6, 39492.0], [52.7, 39492.0], [52.8, 39492.0], [52.9, 39492.0], [53.0, 40433.0], [53.1, 40433.0], [53.2, 40433.0], [53.3, 40433.0], [53.4, 40433.0], [53.5, 40433.0], [53.6, 40433.0], [53.7, 40433.0], [53.8, 40433.0], [53.9, 40433.0], [54.0, 40908.0], [54.1, 40908.0], [54.2, 40908.0], [54.3, 40908.0], [54.4, 40908.0], [54.5, 40908.0], [54.6, 40908.0], [54.7, 40908.0], [54.8, 40908.0], [54.9, 40908.0], [55.0, 41655.0], [55.1, 41655.0], [55.2, 41655.0], [55.3, 41655.0], [55.4, 41655.0], [55.5, 41655.0], [55.6, 41655.0], [55.7, 41655.0], [55.8, 41655.0], [55.9, 41655.0], [56.0, 42637.0], [56.1, 42637.0], [56.2, 42637.0], [56.3, 42637.0], [56.4, 42637.0], [56.5, 42637.0], [56.6, 42637.0], [56.7, 42637.0], [56.8, 42637.0], [56.9, 42637.0], [57.0, 44251.0], [57.1, 44251.0], [57.2, 44251.0], [57.3, 44251.0], [57.4, 44251.0], [57.5, 44251.0], [57.6, 44251.0], [57.7, 44251.0], [57.8, 44251.0], [57.9, 44251.0], [58.0, 45106.0], [58.1, 45106.0], [58.2, 45106.0], [58.3, 45106.0], [58.4, 45106.0], [58.5, 45106.0], [58.6, 45106.0], [58.7, 45106.0], [58.8, 45106.0], [58.9, 45106.0], [59.0, 45828.0], [59.1, 45828.0], [59.2, 45828.0], [59.3, 45828.0], [59.4, 45828.0], [59.5, 45828.0], [59.6, 45828.0], [59.7, 45828.0], [59.8, 45828.0], [59.9, 45828.0], [60.0, 46361.0], [60.1, 46361.0], [60.2, 46361.0], [60.3, 46361.0], [60.4, 46361.0], [60.5, 46361.0], [60.6, 46361.0], [60.7, 46361.0], [60.8, 46361.0], [60.9, 46361.0], [61.0, 46406.0], [61.1, 46406.0], [61.2, 46406.0], [61.3, 46406.0], [61.4, 46406.0], [61.5, 46406.0], [61.6, 46406.0], [61.7, 46406.0], [61.8, 46406.0], [61.9, 46406.0], [62.0, 46513.0], [62.1, 46513.0], [62.2, 46513.0], [62.3, 46513.0], [62.4, 46513.0], [62.5, 46513.0], [62.6, 46513.0], [62.7, 46513.0], [62.8, 46513.0], [62.9, 46513.0], [63.0, 47137.0], [63.1, 47137.0], [63.2, 47137.0], [63.3, 47137.0], [63.4, 47137.0], [63.5, 47137.0], [63.6, 47137.0], [63.7, 47137.0], [63.8, 47137.0], [63.9, 47137.0], [64.0, 47187.0], [64.1, 47187.0], [64.2, 47187.0], [64.3, 47187.0], [64.4, 47187.0], [64.5, 47187.0], [64.6, 47187.0], [64.7, 47187.0], [64.8, 47187.0], [64.9, 47187.0], [65.0, 47707.0], [65.1, 47707.0], [65.2, 47707.0], [65.3, 47707.0], [65.4, 47707.0], [65.5, 47707.0], [65.6, 47707.0], [65.7, 47707.0], [65.8, 47707.0], [65.9, 47707.0], [66.0, 48819.0], [66.1, 48819.0], [66.2, 48819.0], [66.3, 48819.0], [66.4, 48819.0], [66.5, 48819.0], [66.6, 48819.0], [66.7, 48819.0], [66.8, 48819.0], [66.9, 48819.0], [67.0, 50938.0], [67.1, 50938.0], [67.2, 50938.0], [67.3, 50938.0], [67.4, 50938.0], [67.5, 50938.0], [67.6, 50938.0], [67.7, 50938.0], [67.8, 50938.0], [67.9, 50938.0], [68.0, 50969.0], [68.1, 50969.0], [68.2, 50969.0], [68.3, 50969.0], [68.4, 50969.0], [68.5, 50969.0], [68.6, 50969.0], [68.7, 50969.0], [68.8, 50969.0], [68.9, 50969.0], [69.0, 51492.0], [69.1, 51492.0], [69.2, 51492.0], [69.3, 51492.0], [69.4, 51492.0], [69.5, 51492.0], [69.6, 51492.0], [69.7, 51492.0], [69.8, 51492.0], [69.9, 51492.0], [70.0, 52570.0], [70.1, 52570.0], [70.2, 52570.0], [70.3, 52570.0], [70.4, 52570.0], [70.5, 52570.0], [70.6, 52570.0], [70.7, 52570.0], [70.8, 52570.0], [70.9, 52570.0], [71.0, 53003.0], [71.1, 53003.0], [71.2, 53003.0], [71.3, 53003.0], [71.4, 53003.0], [71.5, 53003.0], [71.6, 53003.0], [71.7, 53003.0], [71.8, 53003.0], [71.9, 53003.0], [72.0, 53563.0], [72.1, 53563.0], [72.2, 53563.0], [72.3, 53563.0], [72.4, 53563.0], [72.5, 53563.0], [72.6, 53563.0], [72.7, 53563.0], [72.8, 53563.0], [72.9, 53563.0], [73.0, 53598.0], [73.1, 53598.0], [73.2, 53598.0], [73.3, 53598.0], [73.4, 53598.0], [73.5, 53598.0], [73.6, 53598.0], [73.7, 53598.0], [73.8, 53598.0], [73.9, 53598.0], [74.0, 53640.0], [74.1, 53640.0], [74.2, 53640.0], [74.3, 53640.0], [74.4, 53640.0], [74.5, 53640.0], [74.6, 53640.0], [74.7, 53640.0], [74.8, 53640.0], [74.9, 53640.0], [75.0, 54866.0], [75.1, 54866.0], [75.2, 54866.0], [75.3, 54866.0], [75.4, 54866.0], [75.5, 54866.0], [75.6, 54866.0], [75.7, 54866.0], [75.8, 54866.0], [75.9, 54866.0], [76.0, 56005.0], [76.1, 56005.0], [76.2, 56005.0], [76.3, 56005.0], [76.4, 56005.0], [76.5, 56005.0], [76.6, 56005.0], [76.7, 56005.0], [76.8, 56005.0], [76.9, 56005.0], [77.0, 57033.0], [77.1, 57033.0], [77.2, 57033.0], [77.3, 57033.0], [77.4, 57033.0], [77.5, 57033.0], [77.6, 57033.0], [77.7, 57033.0], [77.8, 57033.0], [77.9, 57033.0], [78.0, 57041.0], [78.1, 57041.0], [78.2, 57041.0], [78.3, 57041.0], [78.4, 57041.0], [78.5, 57041.0], [78.6, 57041.0], [78.7, 57041.0], [78.8, 57041.0], [78.9, 57041.0], [79.0, 58628.0], [79.1, 58628.0], [79.2, 58628.0], [79.3, 58628.0], [79.4, 58628.0], [79.5, 58628.0], [79.6, 58628.0], [79.7, 58628.0], [79.8, 58628.0], [79.9, 58628.0], [80.0, 60118.0], [80.1, 60118.0], [80.2, 60118.0], [80.3, 60118.0], [80.4, 60118.0], [80.5, 60118.0], [80.6, 60118.0], [80.7, 60118.0], [80.8, 60118.0], [80.9, 60118.0], [81.0, 60581.0], [81.1, 60581.0], [81.2, 60581.0], [81.3, 60581.0], [81.4, 60581.0], [81.5, 60581.0], [81.6, 60581.0], [81.7, 60581.0], [81.8, 60581.0], [81.9, 60581.0], [82.0, 61030.0], [82.1, 61030.0], [82.2, 61030.0], [82.3, 61030.0], [82.4, 61030.0], [82.5, 61030.0], [82.6, 61030.0], [82.7, 61030.0], [82.8, 61030.0], [82.9, 61030.0], [83.0, 61412.0], [83.1, 61412.0], [83.2, 61412.0], [83.3, 61412.0], [83.4, 61412.0], [83.5, 61412.0], [83.6, 61412.0], [83.7, 61412.0], [83.8, 61412.0], [83.9, 61412.0], [84.0, 63161.0], [84.1, 63161.0], [84.2, 63161.0], [84.3, 63161.0], [84.4, 63161.0], [84.5, 63161.0], [84.6, 63161.0], [84.7, 63161.0], [84.8, 63161.0], [84.9, 63161.0], [85.0, 63270.0], [85.1, 63270.0], [85.2, 63270.0], [85.3, 63270.0], [85.4, 63270.0], [85.5, 63270.0], [85.6, 63270.0], [85.7, 63270.0], [85.8, 63270.0], [85.9, 63270.0], [86.0, 64131.0], [86.1, 64131.0], [86.2, 64131.0], [86.3, 64131.0], [86.4, 64131.0], [86.5, 64131.0], [86.6, 64131.0], [86.7, 64131.0], [86.8, 64131.0], [86.9, 64131.0], [87.0, 65323.0], [87.1, 65323.0], [87.2, 65323.0], [87.3, 65323.0], [87.4, 65323.0], [87.5, 65323.0], [87.6, 65323.0], [87.7, 65323.0], [87.8, 65323.0], [87.9, 65323.0], [88.0, 65793.0], [88.1, 65793.0], [88.2, 65793.0], [88.3, 65793.0], [88.4, 65793.0], [88.5, 65793.0], [88.6, 65793.0], [88.7, 65793.0], [88.8, 65793.0], [88.9, 65793.0], [89.0, 65903.0], [89.1, 65903.0], [89.2, 65903.0], [89.3, 65903.0], [89.4, 65903.0], [89.5, 65903.0], [89.6, 65903.0], [89.7, 65903.0], [89.8, 65903.0], [89.9, 65903.0], [90.0, 67495.0], [90.1, 67495.0], [90.2, 67495.0], [90.3, 67495.0], [90.4, 67495.0], [90.5, 67495.0], [90.6, 67495.0], [90.7, 67495.0], [90.8, 67495.0], [90.9, 67495.0], [91.0, 67753.0], [91.1, 67753.0], [91.2, 67753.0], [91.3, 67753.0], [91.4, 67753.0], [91.5, 67753.0], [91.6, 67753.0], [91.7, 67753.0], [91.8, 67753.0], [91.9, 67753.0], [92.0, 67982.0], [92.1, 67982.0], [92.2, 67982.0], [92.3, 67982.0], [92.4, 67982.0], [92.5, 67982.0], [92.6, 67982.0], [92.7, 67982.0], [92.8, 67982.0], [92.9, 67982.0], [93.0, 68449.0], [93.1, 68449.0], [93.2, 68449.0], [93.3, 68449.0], [93.4, 68449.0], [93.5, 68449.0], [93.6, 68449.0], [93.7, 68449.0], [93.8, 68449.0], [93.9, 68449.0], [94.0, 69415.0], [94.1, 69415.0], [94.2, 69415.0], [94.3, 69415.0], [94.4, 69415.0], [94.5, 69415.0], [94.6, 69415.0], [94.7, 69415.0], [94.8, 69415.0], [94.9, 69415.0], [95.0, 69947.0], [95.1, 69947.0], [95.2, 69947.0], [95.3, 69947.0], [95.4, 69947.0], [95.5, 69947.0], [95.6, 69947.0], [95.7, 69947.0], [95.8, 69947.0], [95.9, 69947.0], [96.0, 70693.0], [96.1, 70693.0], [96.2, 70693.0], [96.3, 70693.0], [96.4, 70693.0], [96.5, 70693.0], [96.6, 70693.0], [96.7, 70693.0], [96.8, 70693.0], [96.9, 70693.0], [97.0, 71281.0], [97.1, 71281.0], [97.2, 71281.0], [97.3, 71281.0], [97.4, 71281.0], [97.5, 71281.0], [97.6, 71281.0], [97.7, 71281.0], [97.8, 71281.0], [97.9, 71281.0], [98.0, 72879.0], [98.1, 72879.0], [98.2, 72879.0], [98.3, 72879.0], [98.4, 72879.0], [98.5, 72879.0], [98.6, 72879.0], [98.7, 72879.0], [98.8, 72879.0], [98.9, 72879.0], [99.0, 73881.0], [99.1, 73881.0], [99.2, 73881.0], [99.3, 73881.0], [99.4, 73881.0], [99.5, 73881.0], [99.6, 73881.0], [99.7, 73881.0], [99.8, 73881.0], [99.9, 73881.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[0.0, 55398.0], [0.1, 55398.0], [0.2, 55398.0], [0.3, 55398.0], [0.4, 55398.0], [0.5, 55398.0], [0.6, 55398.0], [0.7, 55398.0], [0.8, 55398.0], [0.9, 55398.0], [1.0, 60036.0], [1.1, 60036.0], [1.2, 60036.0], [1.3, 60036.0], [1.4, 60036.0], [1.5, 60036.0], [1.6, 60036.0], [1.7, 60036.0], [1.8, 60036.0], [1.9, 60036.0], [2.0, 61966.0], [2.1, 61966.0], [2.2, 61966.0], [2.3, 61966.0], [2.4, 61966.0], [2.5, 61966.0], [2.6, 61966.0], [2.7, 61966.0], [2.8, 61966.0], [2.9, 61966.0], [3.0, 62653.0], [3.1, 62653.0], [3.2, 62653.0], [3.3, 62653.0], [3.4, 62653.0], [3.5, 62653.0], [3.6, 62653.0], [3.7, 62653.0], [3.8, 62653.0], [3.9, 62653.0], [4.0, 74448.0], [4.1, 74448.0], [4.2, 74448.0], [4.3, 74448.0], [4.4, 74448.0], [4.5, 74448.0], [4.6, 74448.0], [4.7, 74448.0], [4.8, 74448.0], [4.9, 74448.0], [5.0, 74554.0], [5.1, 74554.0], [5.2, 74554.0], [5.3, 74554.0], [5.4, 74554.0], [5.5, 74554.0], [5.6, 74554.0], [5.7, 74554.0], [5.8, 74554.0], [5.9, 74554.0], [6.0, 74771.0], [6.1, 74771.0], [6.2, 74771.0], [6.3, 74771.0], [6.4, 74771.0], [6.5, 74771.0], [6.6, 74771.0], [6.7, 74771.0], [6.8, 74771.0], [6.9, 74771.0], [7.0, 74809.0], [7.1, 74809.0], [7.2, 74809.0], [7.3, 74809.0], [7.4, 74809.0], [7.5, 74809.0], [7.6, 74809.0], [7.7, 74809.0], [7.8, 74809.0], [7.9, 74809.0], [8.0, 75153.0], [8.1, 75153.0], [8.2, 75153.0], [8.3, 75153.0], [8.4, 75153.0], [8.5, 75153.0], [8.6, 75153.0], [8.7, 75153.0], [8.8, 75153.0], [8.9, 75153.0], [9.0, 75898.0], [9.1, 75898.0], [9.2, 75898.0], [9.3, 75898.0], [9.4, 75898.0], [9.5, 75898.0], [9.6, 75898.0], [9.7, 75898.0], [9.8, 75898.0], [9.9, 75898.0], [10.0, 76747.0], [10.1, 76747.0], [10.2, 76747.0], [10.3, 76747.0], [10.4, 76747.0], [10.5, 76747.0], [10.6, 76747.0], [10.7, 76747.0], [10.8, 76747.0], [10.9, 76747.0], [11.0, 76862.0], [11.1, 76862.0], [11.2, 76862.0], [11.3, 76862.0], [11.4, 76862.0], [11.5, 76862.0], [11.6, 76862.0], [11.7, 76862.0], [11.8, 76862.0], [11.9, 76862.0], [12.0, 79606.0], [12.1, 79606.0], [12.2, 79606.0], [12.3, 79606.0], [12.4, 79606.0], [12.5, 79606.0], [12.6, 79606.0], [12.7, 79606.0], [12.8, 79606.0], [12.9, 79606.0], [13.0, 79958.0], [13.1, 79958.0], [13.2, 79958.0], [13.3, 79958.0], [13.4, 79958.0], [13.5, 79958.0], [13.6, 79958.0], [13.7, 79958.0], [13.8, 79958.0], [13.9, 79958.0], [14.0, 80118.0], [14.1, 80118.0], [14.2, 80118.0], [14.3, 80118.0], [14.4, 80118.0], [14.5, 80118.0], [14.6, 80118.0], [14.7, 80118.0], [14.8, 80118.0], [14.9, 80118.0], [15.0, 80765.0], [15.1, 80765.0], [15.2, 80765.0], [15.3, 80765.0], [15.4, 80765.0], [15.5, 80765.0], [15.6, 80765.0], [15.7, 80765.0], [15.8, 80765.0], [15.9, 80765.0], [16.0, 80780.0], [16.1, 80780.0], [16.2, 80780.0], [16.3, 80780.0], [16.4, 80780.0], [16.5, 80780.0], [16.6, 80780.0], [16.7, 80780.0], [16.8, 80780.0], [16.9, 80780.0], [17.0, 80978.0], [17.1, 80978.0], [17.2, 80978.0], [17.3, 80978.0], [17.4, 80978.0], [17.5, 80978.0], [17.6, 80978.0], [17.7, 80978.0], [17.8, 80978.0], [17.9, 80978.0], [18.0, 81317.0], [18.1, 81317.0], [18.2, 81317.0], [18.3, 81317.0], [18.4, 81317.0], [18.5, 81317.0], [18.6, 81317.0], [18.7, 81317.0], [18.8, 81317.0], [18.9, 81317.0], [19.0, 81366.0], [19.1, 81366.0], [19.2, 81366.0], [19.3, 81366.0], [19.4, 81366.0], [19.5, 81366.0], [19.6, 81366.0], [19.7, 81366.0], [19.8, 81366.0], [19.9, 81366.0], [20.0, 81876.0], [20.1, 81876.0], [20.2, 81876.0], [20.3, 81876.0], [20.4, 81876.0], [20.5, 81876.0], [20.6, 81876.0], [20.7, 81876.0], [20.8, 81876.0], [20.9, 81876.0], [21.0, 83447.0], [21.1, 83447.0], [21.2, 83447.0], [21.3, 83447.0], [21.4, 83447.0], [21.5, 83447.0], [21.6, 83447.0], [21.7, 83447.0], [21.8, 83447.0], [21.9, 83447.0], [22.0, 85895.0], [22.1, 85895.0], [22.2, 85895.0], [22.3, 85895.0], [22.4, 85895.0], [22.5, 85895.0], [22.6, 85895.0], [22.7, 85895.0], [22.8, 85895.0], [22.9, 85895.0], [23.0, 86587.0], [23.1, 86587.0], [23.2, 86587.0], [23.3, 86587.0], [23.4, 86587.0], [23.5, 86587.0], [23.6, 86587.0], [23.7, 86587.0], [23.8, 86587.0], [23.9, 86587.0], [24.0, 86745.0], [24.1, 86745.0], [24.2, 86745.0], [24.3, 86745.0], [24.4, 86745.0], [24.5, 86745.0], [24.6, 86745.0], [24.7, 86745.0], [24.8, 86745.0], [24.9, 86745.0], [25.0, 87679.0], [25.1, 87679.0], [25.2, 87679.0], [25.3, 87679.0], [25.4, 87679.0], [25.5, 87679.0], [25.6, 87679.0], [25.7, 87679.0], [25.8, 87679.0], [25.9, 87679.0], [26.0, 87838.0], [26.1, 87838.0], [26.2, 87838.0], [26.3, 87838.0], [26.4, 87838.0], [26.5, 87838.0], [26.6, 87838.0], [26.7, 87838.0], [26.8, 87838.0], [26.9, 87838.0], [27.0, 88351.0], [27.1, 88351.0], [27.2, 88351.0], [27.3, 88351.0], [27.4, 88351.0], [27.5, 88351.0], [27.6, 88351.0], [27.7, 88351.0], [27.8, 88351.0], [27.9, 88351.0], [28.0, 88555.0], [28.1, 88555.0], [28.2, 88555.0], [28.3, 88555.0], [28.4, 88555.0], [28.5, 88555.0], [28.6, 88555.0], [28.7, 88555.0], [28.8, 88555.0], [28.9, 88555.0], [29.0, 88598.0], [29.1, 88598.0], [29.2, 88598.0], [29.3, 88598.0], [29.4, 88598.0], [29.5, 88598.0], [29.6, 88598.0], [29.7, 88598.0], [29.8, 88598.0], [29.9, 88598.0], [30.0, 88633.0], [30.1, 88633.0], [30.2, 88633.0], [30.3, 88633.0], [30.4, 88633.0], [30.5, 88633.0], [30.6, 88633.0], [30.7, 88633.0], [30.8, 88633.0], [30.9, 88633.0], [31.0, 88687.0], [31.1, 88687.0], [31.2, 88687.0], [31.3, 88687.0], [31.4, 88687.0], [31.5, 88687.0], [31.6, 88687.0], [31.7, 88687.0], [31.8, 88687.0], [31.9, 88687.0], [32.0, 91137.0], [32.1, 91137.0], [32.2, 91137.0], [32.3, 91137.0], [32.4, 91137.0], [32.5, 91137.0], [32.6, 91137.0], [32.7, 91137.0], [32.8, 91137.0], [32.9, 91137.0], [33.0, 92437.0], [33.1, 92437.0], [33.2, 92437.0], [33.3, 92437.0], [33.4, 92437.0], [33.5, 92437.0], [33.6, 92437.0], [33.7, 92437.0], [33.8, 92437.0], [33.9, 92437.0], [34.0, 93368.0], [34.1, 93368.0], [34.2, 93368.0], [34.3, 93368.0], [34.4, 93368.0], [34.5, 93368.0], [34.6, 93368.0], [34.7, 93368.0], [34.8, 93368.0], [34.9, 93368.0], [35.0, 94761.0], [35.1, 94761.0], [35.2, 94761.0], [35.3, 94761.0], [35.4, 94761.0], [35.5, 94761.0], [35.6, 94761.0], [35.7, 94761.0], [35.8, 94761.0], [35.9, 94761.0], [36.0, 94877.0], [36.1, 94877.0], [36.2, 94877.0], [36.3, 94877.0], [36.4, 94877.0], [36.5, 94877.0], [36.6, 94877.0], [36.7, 94877.0], [36.8, 94877.0], [36.9, 94877.0], [37.0, 95034.0], [37.1, 95034.0], [37.2, 95034.0], [37.3, 95034.0], [37.4, 95034.0], [37.5, 95034.0], [37.6, 95034.0], [37.7, 95034.0], [37.8, 95034.0], [37.9, 95034.0], [38.0, 95085.0], [38.1, 95085.0], [38.2, 95085.0], [38.3, 95085.0], [38.4, 95085.0], [38.5, 95085.0], [38.6, 95085.0], [38.7, 95085.0], [38.8, 95085.0], [38.9, 95085.0], [39.0, 95295.0], [39.1, 95295.0], [39.2, 95295.0], [39.3, 95295.0], [39.4, 95295.0], [39.5, 95295.0], [39.6, 95295.0], [39.7, 95295.0], [39.8, 95295.0], [39.9, 95295.0], [40.0, 95311.0], [40.1, 95311.0], [40.2, 95311.0], [40.3, 95311.0], [40.4, 95311.0], [40.5, 95311.0], [40.6, 95311.0], [40.7, 95311.0], [40.8, 95311.0], [40.9, 95311.0], [41.0, 95318.0], [41.1, 95318.0], [41.2, 95318.0], [41.3, 95318.0], [41.4, 95318.0], [41.5, 95318.0], [41.6, 95318.0], [41.7, 95318.0], [41.8, 95318.0], [41.9, 95318.0], [42.0, 96547.0], [42.1, 96547.0], [42.2, 96547.0], [42.3, 96547.0], [42.4, 96547.0], [42.5, 96547.0], [42.6, 96547.0], [42.7, 96547.0], [42.8, 96547.0], [42.9, 96547.0], [43.0, 97964.0], [43.1, 97964.0], [43.2, 97964.0], [43.3, 97964.0], [43.4, 97964.0], [43.5, 97964.0], [43.6, 97964.0], [43.7, 97964.0], [43.8, 97964.0], [43.9, 97964.0], [44.0, 98268.0], [44.1, 98268.0], [44.2, 98268.0], [44.3, 98268.0], [44.4, 98268.0], [44.5, 98268.0], [44.6, 98268.0], [44.7, 98268.0], [44.8, 98268.0], [44.9, 98268.0], [45.0, 100961.0], [45.1, 100961.0], [45.2, 100961.0], [45.3, 100961.0], [45.4, 100961.0], [45.5, 100961.0], [45.6, 100961.0], [45.7, 100961.0], [45.8, 100961.0], [45.9, 100961.0], [46.0, 101034.0], [46.1, 101034.0], [46.2, 101034.0], [46.3, 101034.0], [46.4, 101034.0], [46.5, 101034.0], [46.6, 101034.0], [46.7, 101034.0], [46.8, 101034.0], [46.9, 101034.0], [47.0, 101423.0], [47.1, 101423.0], [47.2, 101423.0], [47.3, 101423.0], [47.4, 101423.0], [47.5, 101423.0], [47.6, 101423.0], [47.7, 101423.0], [47.8, 101423.0], [47.9, 101423.0], [48.0, 101445.0], [48.1, 101445.0], [48.2, 101445.0], [48.3, 101445.0], [48.4, 101445.0], [48.5, 101445.0], [48.6, 101445.0], [48.7, 101445.0], [48.8, 101445.0], [48.9, 101445.0], [49.0, 101516.0], [49.1, 101516.0], [49.2, 101516.0], [49.3, 101516.0], [49.4, 101516.0], [49.5, 101516.0], [49.6, 101516.0], [49.7, 101516.0], [49.8, 101516.0], [49.9, 101516.0], [50.0, 101633.0], [50.1, 101633.0], [50.2, 101633.0], [50.3, 101633.0], [50.4, 101633.0], [50.5, 101633.0], [50.6, 101633.0], [50.7, 101633.0], [50.8, 101633.0], [50.9, 101633.0], [51.0, 101645.0], [51.1, 101645.0], [51.2, 101645.0], [51.3, 101645.0], [51.4, 101645.0], [51.5, 101645.0], [51.6, 101645.0], [51.7, 101645.0], [51.8, 101645.0], [51.9, 101645.0], [52.0, 103102.0], [52.1, 103102.0], [52.2, 103102.0], [52.3, 103102.0], [52.4, 103102.0], [52.5, 103102.0], [52.6, 103102.0], [52.7, 103102.0], [52.8, 103102.0], [52.9, 103102.0], [53.0, 104100.0], [53.1, 104100.0], [53.2, 104100.0], [53.3, 104100.0], [53.4, 104100.0], [53.5, 104100.0], [53.6, 104100.0], [53.7, 104100.0], [53.8, 104100.0], [53.9, 104100.0], [54.0, 105080.0], [54.1, 105080.0], [54.2, 105080.0], [54.3, 105080.0], [54.4, 105080.0], [54.5, 105080.0], [54.6, 105080.0], [54.7, 105080.0], [54.8, 105080.0], [54.9, 105080.0], [55.0, 106749.0], [55.1, 106749.0], [55.2, 106749.0], [55.3, 106749.0], [55.4, 106749.0], [55.5, 106749.0], [55.6, 106749.0], [55.7, 106749.0], [55.8, 106749.0], [55.9, 106749.0], [56.0, 107106.0], [56.1, 107106.0], [56.2, 107106.0], [56.3, 107106.0], [56.4, 107106.0], [56.5, 107106.0], [56.6, 107106.0], [56.7, 107106.0], [56.8, 107106.0], [56.9, 107106.0], [57.0, 107781.0], [57.1, 107781.0], [57.2, 107781.0], [57.3, 107781.0], [57.4, 107781.0], [57.5, 107781.0], [57.6, 107781.0], [57.7, 107781.0], [57.8, 107781.0], [57.9, 107781.0], [58.0, 107815.0], [58.1, 107815.0], [58.2, 107815.0], [58.3, 107815.0], [58.4, 107815.0], [58.5, 107815.0], [58.6, 107815.0], [58.7, 107815.0], [58.8, 107815.0], [58.9, 107815.0], [59.0, 108174.0], [59.1, 108174.0], [59.2, 108174.0], [59.3, 108174.0], [59.4, 108174.0], [59.5, 108174.0], [59.6, 108174.0], [59.7, 108174.0], [59.8, 108174.0], [59.9, 108174.0], [60.0, 108296.0], [60.1, 108296.0], [60.2, 108296.0], [60.3, 108296.0], [60.4, 108296.0], [60.5, 108296.0], [60.6, 108296.0], [60.7, 108296.0], [60.8, 108296.0], [60.9, 108296.0], [61.0, 108628.0], [61.1, 108628.0], [61.2, 108628.0], [61.3, 108628.0], [61.4, 108628.0], [61.5, 108628.0], [61.6, 108628.0], [61.7, 108628.0], [61.8, 108628.0], [61.9, 108628.0], [62.0, 109159.0], [62.1, 109159.0], [62.2, 109159.0], [62.3, 109159.0], [62.4, 109159.0], [62.5, 109159.0], [62.6, 109159.0], [62.7, 109159.0], [62.8, 109159.0], [62.9, 109159.0], [63.0, 109604.0], [63.1, 109604.0], [63.2, 109604.0], [63.3, 109604.0], [63.4, 109604.0], [63.5, 109604.0], [63.6, 109604.0], [63.7, 109604.0], [63.8, 109604.0], [63.9, 109604.0], [64.0, 110566.0], [64.1, 110566.0], [64.2, 110566.0], [64.3, 110566.0], [64.4, 110566.0], [64.5, 110566.0], [64.6, 110566.0], [64.7, 110566.0], [64.8, 110566.0], [64.9, 110566.0], [65.0, 112302.0], [65.1, 112302.0], [65.2, 112302.0], [65.3, 112302.0], [65.4, 112302.0], [65.5, 112302.0], [65.6, 112302.0], [65.7, 112302.0], [65.8, 112302.0], [65.9, 112302.0], [66.0, 113135.0], [66.1, 113135.0], [66.2, 113135.0], [66.3, 113135.0], [66.4, 113135.0], [66.5, 113135.0], [66.6, 113135.0], [66.7, 113135.0], [66.8, 113135.0], [66.9, 113135.0], [67.0, 113302.0], [67.1, 113302.0], [67.2, 113302.0], [67.3, 113302.0], [67.4, 113302.0], [67.5, 113302.0], [67.6, 113302.0], [67.7, 113302.0], [67.8, 113302.0], [67.9, 113302.0], [68.0, 113434.0], [68.1, 113434.0], [68.2, 113434.0], [68.3, 113434.0], [68.4, 113434.0], [68.5, 113434.0], [68.6, 113434.0], [68.7, 113434.0], [68.8, 113434.0], [68.9, 113434.0], [69.0, 113726.0], [69.1, 113726.0], [69.2, 113726.0], [69.3, 113726.0], [69.4, 113726.0], [69.5, 113726.0], [69.6, 113726.0], [69.7, 113726.0], [69.8, 113726.0], [69.9, 113726.0], [70.0, 114156.0], [70.1, 114156.0], [70.2, 114156.0], [70.3, 114156.0], [70.4, 114156.0], [70.5, 114156.0], [70.6, 114156.0], [70.7, 114156.0], [70.8, 114156.0], [70.9, 114156.0], [71.0, 114177.0], [71.1, 114177.0], [71.2, 114177.0], [71.3, 114177.0], [71.4, 114177.0], [71.5, 114177.0], [71.6, 114177.0], [71.7, 114177.0], [71.8, 114177.0], [71.9, 114177.0], [72.0, 115420.0], [72.1, 115420.0], [72.2, 115420.0], [72.3, 115420.0], [72.4, 115420.0], [72.5, 115420.0], [72.6, 115420.0], [72.7, 115420.0], [72.8, 115420.0], [72.9, 115420.0], [73.0, 115980.0], [73.1, 115980.0], [73.2, 115980.0], [73.3, 115980.0], [73.4, 115980.0], [73.5, 115980.0], [73.6, 115980.0], [73.7, 115980.0], [73.8, 115980.0], [73.9, 115980.0], [74.0, 116424.0], [74.1, 116424.0], [74.2, 116424.0], [74.3, 116424.0], [74.4, 116424.0], [74.5, 116424.0], [74.6, 116424.0], [74.7, 116424.0], [74.8, 116424.0], [74.9, 116424.0], [75.0, 118947.0], [75.1, 118947.0], [75.2, 118947.0], [75.3, 118947.0], [75.4, 118947.0], [75.5, 118947.0], [75.6, 118947.0], [75.7, 118947.0], [75.8, 118947.0], [75.9, 118947.0], [76.0, 119324.0], [76.1, 119324.0], [76.2, 119324.0], [76.3, 119324.0], [76.4, 119324.0], [76.5, 119324.0], [76.6, 119324.0], [76.7, 119324.0], [76.8, 119324.0], [76.9, 119324.0], [77.0, 119682.0], [77.1, 119682.0], [77.2, 119682.0], [77.3, 119682.0], [77.4, 119682.0], [77.5, 119682.0], [77.6, 119682.0], [77.7, 119682.0], [77.8, 119682.0], [77.9, 119682.0], [78.0, 119823.0], [78.1, 119823.0], [78.2, 119823.0], [78.3, 119823.0], [78.4, 119823.0], [78.5, 119823.0], [78.6, 119823.0], [78.7, 119823.0], [78.8, 119823.0], [78.9, 119823.0], [79.0, 120062.0], [79.1, 120062.0], [79.2, 120062.0], [79.3, 120062.0], [79.4, 120062.0], [79.5, 120062.0], [79.6, 120062.0], [79.7, 120062.0], [79.8, 120062.0], [79.9, 120062.0], [80.0, 120955.0], [80.1, 120955.0], [80.2, 120955.0], [80.3, 120955.0], [80.4, 120955.0], [80.5, 120955.0], [80.6, 120955.0], [80.7, 120955.0], [80.8, 120955.0], [80.9, 120955.0], [81.0, 121316.0], [81.1, 121316.0], [81.2, 121316.0], [81.3, 121316.0], [81.4, 121316.0], [81.5, 121316.0], [81.6, 121316.0], [81.7, 121316.0], [81.8, 121316.0], [81.9, 121316.0], [82.0, 121429.0], [82.1, 121429.0], [82.2, 121429.0], [82.3, 121429.0], [82.4, 121429.0], [82.5, 121429.0], [82.6, 121429.0], [82.7, 121429.0], [82.8, 121429.0], [82.9, 121429.0], [83.0, 121493.0], [83.1, 121493.0], [83.2, 121493.0], [83.3, 121493.0], [83.4, 121493.0], [83.5, 121493.0], [83.6, 121493.0], [83.7, 121493.0], [83.8, 121493.0], [83.9, 121493.0], [84.0, 121860.0], [84.1, 121860.0], [84.2, 121860.0], [84.3, 121860.0], [84.4, 121860.0], [84.5, 121860.0], [84.6, 121860.0], [84.7, 121860.0], [84.8, 121860.0], [84.9, 121860.0], [85.0, 123760.0], [85.1, 123760.0], [85.2, 123760.0], [85.3, 123760.0], [85.4, 123760.0], [85.5, 123760.0], [85.6, 123760.0], [85.7, 123760.0], [85.8, 123760.0], [85.9, 123760.0], [86.0, 125792.0], [86.1, 125792.0], [86.2, 125792.0], [86.3, 125792.0], [86.4, 125792.0], [86.5, 125792.0], [86.6, 125792.0], [86.7, 125792.0], [86.8, 125792.0], [86.9, 125792.0], [87.0, 125941.0], [87.1, 125941.0], [87.2, 125941.0], [87.3, 125941.0], [87.4, 125941.0], [87.5, 125941.0], [87.6, 125941.0], [87.7, 125941.0], [87.8, 125941.0], [87.9, 125941.0], [88.0, 126265.0], [88.1, 126265.0], [88.2, 126265.0], [88.3, 126265.0], [88.4, 126265.0], [88.5, 126265.0], [88.6, 126265.0], [88.7, 126265.0], [88.8, 126265.0], [88.9, 126265.0], [89.0, 126442.0], [89.1, 126442.0], [89.2, 126442.0], [89.3, 126442.0], [89.4, 126442.0], [89.5, 126442.0], [89.6, 126442.0], [89.7, 126442.0], [89.8, 126442.0], [89.9, 126442.0], [90.0, 126861.0], [90.1, 126861.0], [90.2, 126861.0], [90.3, 126861.0], [90.4, 126861.0], [90.5, 126861.0], [90.6, 126861.0], [90.7, 126861.0], [90.8, 126861.0], [90.9, 126861.0], [91.0, 127242.0], [91.1, 127242.0], [91.2, 127242.0], [91.3, 127242.0], [91.4, 127242.0], [91.5, 127242.0], [91.6, 127242.0], [91.7, 127242.0], [91.8, 127242.0], [91.9, 127242.0], [92.0, 127272.0], [92.1, 127272.0], [92.2, 127272.0], [92.3, 127272.0], [92.4, 127272.0], [92.5, 127272.0], [92.6, 127272.0], [92.7, 127272.0], [92.8, 127272.0], [92.9, 127272.0], [93.0, 127336.0], [93.1, 127336.0], [93.2, 127336.0], [93.3, 127336.0], [93.4, 127336.0], [93.5, 127336.0], [93.6, 127336.0], [93.7, 127336.0], [93.8, 127336.0], [93.9, 127336.0], [94.0, 127584.0], [94.1, 127584.0], [94.2, 127584.0], [94.3, 127584.0], [94.4, 127584.0], [94.5, 127584.0], [94.6, 127584.0], [94.7, 127584.0], [94.8, 127584.0], [94.9, 127584.0], [95.0, 128533.0], [95.1, 128533.0], [95.2, 128533.0], [95.3, 128533.0], [95.4, 128533.0], [95.5, 128533.0], [95.6, 128533.0], [95.7, 128533.0], [95.8, 128533.0], [95.9, 128533.0], [96.0, 129024.0], [96.1, 129024.0], [96.2, 129024.0], [96.3, 129024.0], [96.4, 129024.0], [96.5, 129024.0], [96.6, 129024.0], [96.7, 129024.0], [96.8, 129024.0], [96.9, 129024.0], [97.0, 129166.0], [97.1, 129166.0], [97.2, 129166.0], [97.3, 129166.0], [97.4, 129166.0], [97.5, 129166.0], [97.6, 129166.0], [97.7, 129166.0], [97.8, 129166.0], [97.9, 129166.0], [98.0, 129181.0], [98.1, 129181.0], [98.2, 129181.0], [98.3, 129181.0], [98.4, 129181.0], [98.5, 129181.0], [98.6, 129181.0], [98.7, 129181.0], [98.8, 129181.0], [98.9, 129181.0], [99.0, 129232.0], [99.1, 129232.0], [99.2, 129232.0], [99.3, 129232.0], [99.4, 129232.0], [99.5, 129232.0], [99.6, 129232.0], [99.7, 129232.0], [99.8, 129232.0], [99.9, 129232.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[0.0, 862.0], [0.1, 862.0], [0.2, 862.0], [0.3, 862.0], [0.4, 862.0], [0.5, 862.0], [0.6, 862.0], [0.7, 862.0], [0.8, 862.0], [0.9, 862.0], [1.0, 7471.0], [1.1, 7471.0], [1.2, 7471.0], [1.3, 7471.0], [1.4, 7471.0], [1.5, 7471.0], [1.6, 7471.0], [1.7, 7471.0], [1.8, 7471.0], [1.9, 7471.0], [2.0, 8406.0], [2.1, 8406.0], [2.2, 8406.0], [2.3, 8406.0], [2.4, 8406.0], [2.5, 8406.0], [2.6, 8406.0], [2.7, 8406.0], [2.8, 8406.0], [2.9, 8406.0], [3.0, 12034.0], [3.1, 12034.0], [3.2, 12034.0], [3.3, 12034.0], [3.4, 12034.0], [3.5, 12034.0], [3.6, 12034.0], [3.7, 12034.0], [3.8, 12034.0], [3.9, 12034.0], [4.0, 12668.0], [4.1, 12668.0], [4.2, 12668.0], [4.3, 12668.0], [4.4, 12668.0], [4.5, 12668.0], [4.6, 12668.0], [4.7, 12668.0], [4.8, 12668.0], [4.9, 12668.0], [5.0, 13255.0], [5.1, 13255.0], [5.2, 13255.0], [5.3, 13255.0], [5.4, 13255.0], [5.5, 13255.0], [5.6, 13255.0], [5.7, 13255.0], [5.8, 13255.0], [5.9, 13255.0], [6.0, 13713.0], [6.1, 13713.0], [6.2, 13713.0], [6.3, 13713.0], [6.4, 13713.0], [6.5, 13713.0], [6.6, 13713.0], [6.7, 13713.0], [6.8, 13713.0], [6.9, 13713.0], [7.0, 13720.0], [7.1, 13720.0], [7.2, 13720.0], [7.3, 13720.0], [7.4, 13720.0], [7.5, 13720.0], [7.6, 13720.0], [7.7, 13720.0], [7.8, 13720.0], [7.9, 13720.0], [8.0, 14107.0], [8.1, 14107.0], [8.2, 14107.0], [8.3, 14107.0], [8.4, 14107.0], [8.5, 14107.0], [8.6, 14107.0], [8.7, 14107.0], [8.8, 14107.0], [8.9, 14107.0], [9.0, 14252.0], [9.1, 14252.0], [9.2, 14252.0], [9.3, 14252.0], [9.4, 14252.0], [9.5, 14252.0], [9.6, 14252.0], [9.7, 14252.0], [9.8, 14252.0], [9.9, 14252.0], [10.0, 14283.0], [10.1, 14283.0], [10.2, 14283.0], [10.3, 14283.0], [10.4, 14283.0], [10.5, 14283.0], [10.6, 14283.0], [10.7, 14283.0], [10.8, 14283.0], [10.9, 14283.0], [11.0, 14543.0], [11.1, 14543.0], [11.2, 14543.0], [11.3, 14543.0], [11.4, 14543.0], [11.5, 14543.0], [11.6, 14543.0], [11.7, 14543.0], [11.8, 14543.0], [11.9, 14543.0], [12.0, 14565.0], [12.1, 14565.0], [12.2, 14565.0], [12.3, 14565.0], [12.4, 14565.0], [12.5, 14565.0], [12.6, 14565.0], [12.7, 14565.0], [12.8, 14565.0], [12.9, 14565.0], [13.0, 14784.0], [13.1, 14784.0], [13.2, 14784.0], [13.3, 14784.0], [13.4, 14784.0], [13.5, 14784.0], [13.6, 14784.0], [13.7, 14784.0], [13.8, 14784.0], [13.9, 14784.0], [14.0, 14813.0], [14.1, 14813.0], [14.2, 14813.0], [14.3, 14813.0], [14.4, 14813.0], [14.5, 14813.0], [14.6, 14813.0], [14.7, 14813.0], [14.8, 14813.0], [14.9, 14813.0], [15.0, 14824.0], [15.1, 14824.0], [15.2, 14824.0], [15.3, 14824.0], [15.4, 14824.0], [15.5, 14824.0], [15.6, 14824.0], [15.7, 14824.0], [15.8, 14824.0], [15.9, 14824.0], [16.0, 14839.0], [16.1, 14839.0], [16.2, 14839.0], [16.3, 14839.0], [16.4, 14839.0], [16.5, 14839.0], [16.6, 14839.0], [16.7, 14839.0], [16.8, 14839.0], [16.9, 14839.0], [17.0, 14848.0], [17.1, 14848.0], [17.2, 14848.0], [17.3, 14848.0], [17.4, 14848.0], [17.5, 14848.0], [17.6, 14848.0], [17.7, 14848.0], [17.8, 14848.0], [17.9, 14848.0], [18.0, 14871.0], [18.1, 14871.0], [18.2, 14871.0], [18.3, 14871.0], [18.4, 14871.0], [18.5, 14871.0], [18.6, 14871.0], [18.7, 14871.0], [18.8, 14871.0], [18.9, 14871.0], [19.0, 14880.0], [19.1, 14880.0], [19.2, 14880.0], [19.3, 14880.0], [19.4, 14880.0], [19.5, 14880.0], [19.6, 14880.0], [19.7, 14880.0], [19.8, 14880.0], [19.9, 14880.0], [20.0, 14957.0], [20.1, 14957.0], [20.2, 14957.0], [20.3, 14957.0], [20.4, 14957.0], [20.5, 14957.0], [20.6, 14957.0], [20.7, 14957.0], [20.8, 14957.0], [20.9, 14957.0], [21.0, 14983.0], [21.1, 14983.0], [21.2, 14983.0], [21.3, 14983.0], [21.4, 14983.0], [21.5, 14983.0], [21.6, 14983.0], [21.7, 14983.0], [21.8, 14983.0], [21.9, 14983.0], [22.0, 15002.0], [22.1, 15002.0], [22.2, 15002.0], [22.3, 15002.0], [22.4, 15002.0], [22.5, 15002.0], [22.6, 15002.0], [22.7, 15002.0], [22.8, 15002.0], [22.9, 15002.0], [23.0, 15003.0], [23.1, 15003.0], [23.2, 15003.0], [23.3, 15003.0], [23.4, 15003.0], [23.5, 15003.0], [23.6, 15003.0], [23.7, 15003.0], [23.8, 15003.0], [23.9, 15003.0], [24.0, 15022.0], [24.1, 15022.0], [24.2, 15022.0], [24.3, 15022.0], [24.4, 15022.0], [24.5, 15022.0], [24.6, 15022.0], [24.7, 15022.0], [24.8, 15022.0], [24.9, 15022.0], [25.0, 15073.0], [25.1, 15073.0], [25.2, 15073.0], [25.3, 15073.0], [25.4, 15073.0], [25.5, 15073.0], [25.6, 15073.0], [25.7, 15073.0], [25.8, 15073.0], [25.9, 15073.0], [26.0, 15095.0], [26.1, 15095.0], [26.2, 15095.0], [26.3, 15095.0], [26.4, 15095.0], [26.5, 15095.0], [26.6, 15095.0], [26.7, 15095.0], [26.8, 15095.0], [26.9, 15095.0], [27.0, 15493.0], [27.1, 15493.0], [27.2, 15493.0], [27.3, 15493.0], [27.4, 15493.0], [27.5, 15493.0], [27.6, 15493.0], [27.7, 15493.0], [27.8, 15493.0], [27.9, 15493.0], [28.0, 16175.0], [28.1, 16175.0], [28.2, 16175.0], [28.3, 16175.0], [28.4, 16175.0], [28.5, 16175.0], [28.6, 16175.0], [28.7, 16175.0], [28.8, 16175.0], [28.9, 16175.0], [29.0, 16189.0], [29.1, 16189.0], [29.2, 16189.0], [29.3, 16189.0], [29.4, 16189.0], [29.5, 16189.0], [29.6, 16189.0], [29.7, 16189.0], [29.8, 16189.0], [29.9, 16189.0], [30.0, 16191.0], [30.1, 16191.0], [30.2, 16191.0], [30.3, 16191.0], [30.4, 16191.0], [30.5, 16191.0], [30.6, 16191.0], [30.7, 16191.0], [30.8, 16191.0], [30.9, 16191.0], [31.0, 16221.0], [31.1, 16221.0], [31.2, 16221.0], [31.3, 16221.0], [31.4, 16221.0], [31.5, 16221.0], [31.6, 16221.0], [31.7, 16221.0], [31.8, 16221.0], [31.9, 16221.0], [32.0, 16257.0], [32.1, 16257.0], [32.2, 16257.0], [32.3, 16257.0], [32.4, 16257.0], [32.5, 16257.0], [32.6, 16257.0], [32.7, 16257.0], [32.8, 16257.0], [32.9, 16257.0], [33.0, 16275.0], [33.1, 16275.0], [33.2, 16275.0], [33.3, 16275.0], [33.4, 16275.0], [33.5, 16275.0], [33.6, 16275.0], [33.7, 16275.0], [33.8, 16275.0], [33.9, 16275.0], [34.0, 16275.0], [34.1, 16275.0], [34.2, 16275.0], [34.3, 16275.0], [34.4, 16275.0], [34.5, 16275.0], [34.6, 16275.0], [34.7, 16275.0], [34.8, 16275.0], [34.9, 16275.0], [35.0, 16276.0], [35.1, 16276.0], [35.2, 16276.0], [35.3, 16276.0], [35.4, 16276.0], [35.5, 16276.0], [35.6, 16276.0], [35.7, 16276.0], [35.8, 16276.0], [35.9, 16276.0], [36.0, 16288.0], [36.1, 16288.0], [36.2, 16288.0], [36.3, 16288.0], [36.4, 16288.0], [36.5, 16288.0], [36.6, 16288.0], [36.7, 16288.0], [36.8, 16288.0], [36.9, 16288.0], [37.0, 16301.0], [37.1, 16301.0], [37.2, 16301.0], [37.3, 16301.0], [37.4, 16301.0], [37.5, 16301.0], [37.6, 16301.0], [37.7, 16301.0], [37.8, 16301.0], [37.9, 16301.0], [38.0, 16314.0], [38.1, 16314.0], [38.2, 16314.0], [38.3, 16314.0], [38.4, 16314.0], [38.5, 16314.0], [38.6, 16314.0], [38.7, 16314.0], [38.8, 16314.0], [38.9, 16314.0], [39.0, 16315.0], [39.1, 16315.0], [39.2, 16315.0], [39.3, 16315.0], [39.4, 16315.0], [39.5, 16315.0], [39.6, 16315.0], [39.7, 16315.0], [39.8, 16315.0], [39.9, 16315.0], [40.0, 16318.0], [40.1, 16318.0], [40.2, 16318.0], [40.3, 16318.0], [40.4, 16318.0], [40.5, 16318.0], [40.6, 16318.0], [40.7, 16318.0], [40.8, 16318.0], [40.9, 16318.0], [41.0, 16352.0], [41.1, 16352.0], [41.2, 16352.0], [41.3, 16352.0], [41.4, 16352.0], [41.5, 16352.0], [41.6, 16352.0], [41.7, 16352.0], [41.8, 16352.0], [41.9, 16352.0], [42.0, 16376.0], [42.1, 16376.0], [42.2, 16376.0], [42.3, 16376.0], [42.4, 16376.0], [42.5, 16376.0], [42.6, 16376.0], [42.7, 16376.0], [42.8, 16376.0], [42.9, 16376.0], [43.0, 16407.0], [43.1, 16407.0], [43.2, 16407.0], [43.3, 16407.0], [43.4, 16407.0], [43.5, 16407.0], [43.6, 16407.0], [43.7, 16407.0], [43.8, 16407.0], [43.9, 16407.0], [44.0, 16412.0], [44.1, 16412.0], [44.2, 16412.0], [44.3, 16412.0], [44.4, 16412.0], [44.5, 16412.0], [44.6, 16412.0], [44.7, 16412.0], [44.8, 16412.0], [44.9, 16412.0], [45.0, 16429.0], [45.1, 16429.0], [45.2, 16429.0], [45.3, 16429.0], [45.4, 16429.0], [45.5, 16429.0], [45.6, 16429.0], [45.7, 16429.0], [45.8, 16429.0], [45.9, 16429.0], [46.0, 16469.0], [46.1, 16469.0], [46.2, 16469.0], [46.3, 16469.0], [46.4, 16469.0], [46.5, 16469.0], [46.6, 16469.0], [46.7, 16469.0], [46.8, 16469.0], [46.9, 16469.0], [47.0, 16492.0], [47.1, 16492.0], [47.2, 16492.0], [47.3, 16492.0], [47.4, 16492.0], [47.5, 16492.0], [47.6, 16492.0], [47.7, 16492.0], [47.8, 16492.0], [47.9, 16492.0], [48.0, 16505.0], [48.1, 16505.0], [48.2, 16505.0], [48.3, 16505.0], [48.4, 16505.0], [48.5, 16505.0], [48.6, 16505.0], [48.7, 16505.0], [48.8, 16505.0], [48.9, 16505.0], [49.0, 16506.0], [49.1, 16506.0], [49.2, 16506.0], [49.3, 16506.0], [49.4, 16506.0], [49.5, 16506.0], [49.6, 16506.0], [49.7, 16506.0], [49.8, 16506.0], [49.9, 16506.0], [50.0, 16515.0], [50.1, 16515.0], [50.2, 16515.0], [50.3, 16515.0], [50.4, 16515.0], [50.5, 16515.0], [50.6, 16515.0], [50.7, 16515.0], [50.8, 16515.0], [50.9, 16515.0], [51.0, 16531.0], [51.1, 16531.0], [51.2, 16531.0], [51.3, 16531.0], [51.4, 16531.0], [51.5, 16531.0], [51.6, 16531.0], [51.7, 16531.0], [51.8, 16531.0], [51.9, 16531.0], [52.0, 16537.0], [52.1, 16537.0], [52.2, 16537.0], [52.3, 16537.0], [52.4, 16537.0], [52.5, 16537.0], [52.6, 16537.0], [52.7, 16537.0], [52.8, 16537.0], [52.9, 16537.0], [53.0, 16553.0], [53.1, 16553.0], [53.2, 16553.0], [53.3, 16553.0], [53.4, 16553.0], [53.5, 16553.0], [53.6, 16553.0], [53.7, 16553.0], [53.8, 16553.0], [53.9, 16553.0], [54.0, 16560.0], [54.1, 16560.0], [54.2, 16560.0], [54.3, 16560.0], [54.4, 16560.0], [54.5, 16560.0], [54.6, 16560.0], [54.7, 16560.0], [54.8, 16560.0], [54.9, 16560.0], [55.0, 16563.0], [55.1, 16563.0], [55.2, 16563.0], [55.3, 16563.0], [55.4, 16563.0], [55.5, 16563.0], [55.6, 16563.0], [55.7, 16563.0], [55.8, 16563.0], [55.9, 16563.0], [56.0, 16571.0], [56.1, 16571.0], [56.2, 16571.0], [56.3, 16571.0], [56.4, 16571.0], [56.5, 16571.0], [56.6, 16571.0], [56.7, 16571.0], [56.8, 16571.0], [56.9, 16571.0], [57.0, 16581.0], [57.1, 16581.0], [57.2, 16581.0], [57.3, 16581.0], [57.4, 16581.0], [57.5, 16581.0], [57.6, 16581.0], [57.7, 16581.0], [57.8, 16581.0], [57.9, 16581.0], [58.0, 16587.0], [58.1, 16587.0], [58.2, 16587.0], [58.3, 16587.0], [58.4, 16587.0], [58.5, 16587.0], [58.6, 16587.0], [58.7, 16587.0], [58.8, 16587.0], [58.9, 16587.0], [59.0, 16600.0], [59.1, 16600.0], [59.2, 16600.0], [59.3, 16600.0], [59.4, 16600.0], [59.5, 16600.0], [59.6, 16600.0], [59.7, 16600.0], [59.8, 16600.0], [59.9, 16600.0], [60.0, 16604.0], [60.1, 16604.0], [60.2, 16604.0], [60.3, 16604.0], [60.4, 16604.0], [60.5, 16604.0], [60.6, 16604.0], [60.7, 16604.0], [60.8, 16604.0], [60.9, 16604.0], [61.0, 16609.0], [61.1, 16609.0], [61.2, 16609.0], [61.3, 16609.0], [61.4, 16609.0], [61.5, 16609.0], [61.6, 16609.0], [61.7, 16609.0], [61.8, 16609.0], [61.9, 16609.0], [62.0, 16626.0], [62.1, 16626.0], [62.2, 16626.0], [62.3, 16626.0], [62.4, 16626.0], [62.5, 16626.0], [62.6, 16626.0], [62.7, 16626.0], [62.8, 16626.0], [62.9, 16626.0], [63.0, 16638.0], [63.1, 16638.0], [63.2, 16638.0], [63.3, 16638.0], [63.4, 16638.0], [63.5, 16638.0], [63.6, 16638.0], [63.7, 16638.0], [63.8, 16638.0], [63.9, 16638.0], [64.0, 16641.0], [64.1, 16641.0], [64.2, 16641.0], [64.3, 16641.0], [64.4, 16641.0], [64.5, 16641.0], [64.6, 16641.0], [64.7, 16641.0], [64.8, 16641.0], [64.9, 16641.0], [65.0, 16654.0], [65.1, 16654.0], [65.2, 16654.0], [65.3, 16654.0], [65.4, 16654.0], [65.5, 16654.0], [65.6, 16654.0], [65.7, 16654.0], [65.8, 16654.0], [65.9, 16654.0], [66.0, 16660.0], [66.1, 16660.0], [66.2, 16660.0], [66.3, 16660.0], [66.4, 16660.0], [66.5, 16660.0], [66.6, 16660.0], [66.7, 16660.0], [66.8, 16660.0], [66.9, 16660.0], [67.0, 16663.0], [67.1, 16663.0], [67.2, 16663.0], [67.3, 16663.0], [67.4, 16663.0], [67.5, 16663.0], [67.6, 16663.0], [67.7, 16663.0], [67.8, 16663.0], [67.9, 16663.0], [68.0, 16669.0], [68.1, 16669.0], [68.2, 16669.0], [68.3, 16669.0], [68.4, 16669.0], [68.5, 16669.0], [68.6, 16669.0], [68.7, 16669.0], [68.8, 16669.0], [68.9, 16669.0], [69.0, 16674.0], [69.1, 16674.0], [69.2, 16674.0], [69.3, 16674.0], [69.4, 16674.0], [69.5, 16674.0], [69.6, 16674.0], [69.7, 16674.0], [69.8, 16674.0], [69.9, 16674.0], [70.0, 16688.0], [70.1, 16688.0], [70.2, 16688.0], [70.3, 16688.0], [70.4, 16688.0], [70.5, 16688.0], [70.6, 16688.0], [70.7, 16688.0], [70.8, 16688.0], [70.9, 16688.0], [71.0, 16717.0], [71.1, 16717.0], [71.2, 16717.0], [71.3, 16717.0], [71.4, 16717.0], [71.5, 16717.0], [71.6, 16717.0], [71.7, 16717.0], [71.8, 16717.0], [71.9, 16717.0], [72.0, 16723.0], [72.1, 16723.0], [72.2, 16723.0], [72.3, 16723.0], [72.4, 16723.0], [72.5, 16723.0], [72.6, 16723.0], [72.7, 16723.0], [72.8, 16723.0], [72.9, 16723.0], [73.0, 16744.0], [73.1, 16744.0], [73.2, 16744.0], [73.3, 16744.0], [73.4, 16744.0], [73.5, 16744.0], [73.6, 16744.0], [73.7, 16744.0], [73.8, 16744.0], [73.9, 16744.0], [74.0, 16771.0], [74.1, 16771.0], [74.2, 16771.0], [74.3, 16771.0], [74.4, 16771.0], [74.5, 16771.0], [74.6, 16771.0], [74.7, 16771.0], [74.8, 16771.0], [74.9, 16771.0], [75.0, 16872.0], [75.1, 16872.0], [75.2, 16872.0], [75.3, 16872.0], [75.4, 16872.0], [75.5, 16872.0], [75.6, 16872.0], [75.7, 16872.0], [75.8, 16872.0], [75.9, 16872.0], [76.0, 16872.0], [76.1, 16872.0], [76.2, 16872.0], [76.3, 16872.0], [76.4, 16872.0], [76.5, 16872.0], [76.6, 16872.0], [76.7, 16872.0], [76.8, 16872.0], [76.9, 16872.0], [77.0, 16893.0], [77.1, 16893.0], [77.2, 16893.0], [77.3, 16893.0], [77.4, 16893.0], [77.5, 16893.0], [77.6, 16893.0], [77.7, 16893.0], [77.8, 16893.0], [77.9, 16893.0], [78.0, 16983.0], [78.1, 16983.0], [78.2, 16983.0], [78.3, 16983.0], [78.4, 16983.0], [78.5, 16983.0], [78.6, 16983.0], [78.7, 16983.0], [78.8, 16983.0], [78.9, 16983.0], [79.0, 17008.0], [79.1, 17008.0], [79.2, 17008.0], [79.3, 17008.0], [79.4, 17008.0], [79.5, 17008.0], [79.6, 17008.0], [79.7, 17008.0], [79.8, 17008.0], [79.9, 17008.0], [80.0, 17047.0], [80.1, 17047.0], [80.2, 17047.0], [80.3, 17047.0], [80.4, 17047.0], [80.5, 17047.0], [80.6, 17047.0], [80.7, 17047.0], [80.8, 17047.0], [80.9, 17047.0], [81.0, 17082.0], [81.1, 17082.0], [81.2, 17082.0], [81.3, 17082.0], [81.4, 17082.0], [81.5, 17082.0], [81.6, 17082.0], [81.7, 17082.0], [81.8, 17082.0], [81.9, 17082.0], [82.0, 17100.0], [82.1, 17100.0], [82.2, 17100.0], [82.3, 17100.0], [82.4, 17100.0], [82.5, 17100.0], [82.6, 17100.0], [82.7, 17100.0], [82.8, 17100.0], [82.9, 17100.0], [83.0, 17123.0], [83.1, 17123.0], [83.2, 17123.0], [83.3, 17123.0], [83.4, 17123.0], [83.5, 17123.0], [83.6, 17123.0], [83.7, 17123.0], [83.8, 17123.0], [83.9, 17123.0], [84.0, 17154.0], [84.1, 17154.0], [84.2, 17154.0], [84.3, 17154.0], [84.4, 17154.0], [84.5, 17154.0], [84.6, 17154.0], [84.7, 17154.0], [84.8, 17154.0], [84.9, 17154.0], [85.0, 17252.0], [85.1, 17252.0], [85.2, 17252.0], [85.3, 17252.0], [85.4, 17252.0], [85.5, 17252.0], [85.6, 17252.0], [85.7, 17252.0], [85.8, 17252.0], [85.9, 17252.0], [86.0, 17282.0], [86.1, 17282.0], [86.2, 17282.0], [86.3, 17282.0], [86.4, 17282.0], [86.5, 17282.0], [86.6, 17282.0], [86.7, 17282.0], [86.8, 17282.0], [86.9, 17282.0], [87.0, 17315.0], [87.1, 17315.0], [87.2, 17315.0], [87.3, 17315.0], [87.4, 17315.0], [87.5, 17315.0], [87.6, 17315.0], [87.7, 17315.0], [87.8, 17315.0], [87.9, 17315.0], [88.0, 17369.0], [88.1, 17369.0], [88.2, 17369.0], [88.3, 17369.0], [88.4, 17369.0], [88.5, 17369.0], [88.6, 17369.0], [88.7, 17369.0], [88.8, 17369.0], [88.9, 17369.0], [89.0, 17385.0], [89.1, 17385.0], [89.2, 17385.0], [89.3, 17385.0], [89.4, 17385.0], [89.5, 17385.0], [89.6, 17385.0], [89.7, 17385.0], [89.8, 17385.0], [89.9, 17385.0], [90.0, 17413.0], [90.1, 17413.0], [90.2, 17413.0], [90.3, 17413.0], [90.4, 17413.0], [90.5, 17413.0], [90.6, 17413.0], [90.7, 17413.0], [90.8, 17413.0], [90.9, 17413.0], [91.0, 17415.0], [91.1, 17415.0], [91.2, 17415.0], [91.3, 17415.0], [91.4, 17415.0], [91.5, 17415.0], [91.6, 17415.0], [91.7, 17415.0], [91.8, 17415.0], [91.9, 17415.0], [92.0, 17431.0], [92.1, 17431.0], [92.2, 17431.0], [92.3, 17431.0], [92.4, 17431.0], [92.5, 17431.0], [92.6, 17431.0], [92.7, 17431.0], [92.8, 17431.0], [92.9, 17431.0], [93.0, 17436.0], [93.1, 17436.0], [93.2, 17436.0], [93.3, 17436.0], [93.4, 17436.0], [93.5, 17436.0], [93.6, 17436.0], [93.7, 17436.0], [93.8, 17436.0], [93.9, 17436.0], [94.0, 17439.0], [94.1, 17439.0], [94.2, 17439.0], [94.3, 17439.0], [94.4, 17439.0], [94.5, 17439.0], [94.6, 17439.0], [94.7, 17439.0], [94.8, 17439.0], [94.9, 17439.0], [95.0, 17445.0], [95.1, 17445.0], [95.2, 17445.0], [95.3, 17445.0], [95.4, 17445.0], [95.5, 17445.0], [95.6, 17445.0], [95.7, 17445.0], [95.8, 17445.0], [95.9, 17445.0], [96.0, 17487.0], [96.1, 17487.0], [96.2, 17487.0], [96.3, 17487.0], [96.4, 17487.0], [96.5, 17487.0], [96.6, 17487.0], [96.7, 17487.0], [96.8, 17487.0], [96.9, 17487.0], [97.0, 17506.0], [97.1, 17506.0], [97.2, 17506.0], [97.3, 17506.0], [97.4, 17506.0], [97.5, 17506.0], [97.6, 17506.0], [97.7, 17506.0], [97.8, 17506.0], [97.9, 17506.0], [98.0, 17565.0], [98.1, 17565.0], [98.2, 17565.0], [98.3, 17565.0], [98.4, 17565.0], [98.5, 17565.0], [98.6, 17565.0], [98.7, 17565.0], [98.8, 17565.0], [98.9, 17565.0], [99.0, 17565.0], [99.1, 17565.0], [99.2, 17565.0], [99.3, 17565.0], [99.4, 17565.0], [99.5, 17565.0], [99.6, 17565.0], [99.7, 17565.0], [99.8, 17565.0], [99.9, 17565.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 12.0, "series": [{"data": [[65700.0, 1.0], [65900.0, 1.0], [67700.0, 1.0], [67900.0, 1.0], [69900.0, 1.0], [5100.0, 1.0], [6100.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9100.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [13100.0, 1.0], [13900.0, 1.0], [15800.0, 2.0], [16400.0, 1.0], [16600.0, 1.0], [16800.0, 1.0], [17200.0, 2.0], [17500.0, 1.0], [19900.0, 1.0], [20200.0, 1.0], [21900.0, 1.0], [23500.0, 1.0], [24700.0, 2.0], [25100.0, 1.0], [25200.0, 2.0], [25800.0, 1.0], [26500.0, 1.0], [27100.0, 1.0], [27600.0, 1.0], [29800.0, 1.0], [30600.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31700.0, 1.0], [31900.0, 1.0], [32100.0, 1.0], [32700.0, 1.0], [33100.0, 1.0], [35600.0, 1.0], [36500.0, 1.0], [38200.0, 1.0], [38300.0, 1.0], [38500.0, 1.0], [38700.0, 1.0], [38800.0, 1.0], [39400.0, 2.0], [40400.0, 1.0], [40900.0, 1.0], [41600.0, 1.0], [42600.0, 1.0], [44200.0, 1.0], [45100.0, 1.0], [45800.0, 1.0], [46300.0, 1.0], [46400.0, 1.0], [46500.0, 1.0], [47100.0, 2.0], [47700.0, 1.0], [48800.0, 1.0], [50900.0, 2.0], [51400.0, 1.0], [52500.0, 1.0], [53000.0, 1.0], [53500.0, 2.0], [53600.0, 1.0], [54800.0, 1.0], [56000.0, 1.0], [57000.0, 2.0], [58600.0, 1.0], [60100.0, 1.0], [60500.0, 1.0], [61000.0, 1.0], [61400.0, 1.0], [63100.0, 1.0], [63200.0, 1.0], [64100.0, 1.0], [65300.0, 1.0], [67400.0, 1.0], [68400.0, 1.0], [69400.0, 1.0], [70600.0, 1.0], [71200.0, 1.0], [72800.0, 1.0], [73800.0, 1.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[74500.0, 1.0], [74700.0, 1.0], [75100.0, 1.0], [76700.0, 1.0], [79900.0, 1.0], [80100.0, 1.0], [80700.0, 2.0], [80900.0, 1.0], [81300.0, 2.0], [86500.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [88500.0, 2.0], [91100.0, 1.0], [93300.0, 1.0], [94700.0, 1.0], [95300.0, 2.0], [96500.0, 1.0], [97900.0, 1.0], [100900.0, 1.0], [101500.0, 1.0], [103100.0, 1.0], [104100.0, 1.0], [106700.0, 1.0], [107100.0, 1.0], [107700.0, 1.0], [108100.0, 1.0], [109100.0, 1.0], [110500.0, 1.0], [112300.0, 1.0], [113100.0, 1.0], [113300.0, 1.0], [113700.0, 1.0], [114100.0, 2.0], [115900.0, 1.0], [118900.0, 1.0], [119300.0, 1.0], [120900.0, 1.0], [121300.0, 1.0], [123700.0, 1.0], [125700.0, 1.0], [125900.0, 1.0], [127300.0, 1.0], [127500.0, 1.0], [128500.0, 1.0], [129100.0, 2.0], [55300.0, 1.0], [60000.0, 1.0], [61900.0, 1.0], [62600.0, 1.0], [74400.0, 1.0], [74800.0, 1.0], [75800.0, 1.0], [76800.0, 1.0], [79600.0, 1.0], [81800.0, 1.0], [83400.0, 1.0], [85800.0, 1.0], [87600.0, 1.0], [87800.0, 1.0], [88600.0, 2.0], [92400.0, 1.0], [94800.0, 1.0], [95000.0, 2.0], [95200.0, 1.0], [98200.0, 1.0], [101000.0, 1.0], [101400.0, 2.0], [101600.0, 2.0], [105000.0, 1.0], [107800.0, 1.0], [108200.0, 1.0], [108600.0, 1.0], [109600.0, 1.0], [113400.0, 1.0], [115400.0, 1.0], [116400.0, 1.0], [119600.0, 1.0], [119800.0, 1.0], [120000.0, 1.0], [121400.0, 2.0], [121800.0, 1.0], [126200.0, 1.0], [126400.0, 1.0], [126800.0, 1.0], [127200.0, 2.0], [129000.0, 1.0], [129200.0, 1.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[8400.0, 1.0], [12000.0, 1.0], [12600.0, 1.0], [800.0, 1.0], [13200.0, 1.0], [13700.0, 2.0], [14100.0, 1.0], [14200.0, 2.0], [14500.0, 2.0], [14700.0, 1.0], [14800.0, 6.0], [15000.0, 5.0], [14900.0, 2.0], [15400.0, 1.0], [16100.0, 3.0], [16200.0, 6.0], [16300.0, 6.0], [17200.0, 2.0], [16500.0, 11.0], [16400.0, 5.0], [16600.0, 12.0], [16700.0, 4.0], [16800.0, 3.0], [16900.0, 1.0], [17000.0, 3.0], [17100.0, 3.0], [17300.0, 3.0], [17400.0, 7.0], [17500.0, 3.0], [7400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 129200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 299.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 299.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.6683621E12, "maxY": 90.0, "series": [{"data": [[1.66836216E12, 38.0], [1.6683621E12, 88.0]], "isOverall": false, "label": "client-to-application", "isController": false}, {"data": [[1.66836216E12, 90.0], [1.66836222E12, 40.0]], "isOverall": false, "label": "client-to-gateway-non-caching", "isController": false}, {"data": [[1.6683621E12, 50.64999999999999]], "isOverall": false, "label": "Client requested api gateway (cached)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836222E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 862.0, "minX": 1.0, "maxY": 129232.0, "series": [{"data": [[99.0, 71281.0], [98.0, 72879.0], [97.0, 73881.0], [103.0, 68449.0], [102.0, 69415.0], [101.0, 69947.0], [100.0, 70693.0], [107.0, 65903.0], [106.0, 67495.0], [105.0, 67753.0], [104.0, 67982.0], [111.0, 63270.0], [110.0, 64131.0], [109.0, 65323.0], [108.0, 65793.0], [115.0, 61412.0], [112.0, 63161.0], [118.0, 60118.0], [117.0, 60581.0], [116.0, 61030.0], [123.0, 56005.0], [122.0, 57041.0], [121.0, 57033.0], [120.0, 58628.0], [127.0, 53598.0], [126.0, 53640.0], [125.0, 54866.0], [135.0, 47707.0], [134.0, 48819.0], [133.0, 50938.0], [132.0, 50969.0], [131.0, 51492.0], [130.0, 52570.0], [129.0, 53003.0], [128.0, 53563.0], [143.0, 44251.0], [142.0, 45106.0], [141.0, 45828.0], [140.0, 46361.0], [139.0, 46406.0], [138.0, 46513.0], [137.0, 47137.0], [136.0, 47187.0], [151.0, 38737.0], [150.0, 38830.0], [149.0, 39435.0], [148.0, 39492.0], [147.0, 40433.0], [146.0, 40908.0], [145.0, 41655.0], [144.0, 42637.0], [159.0, 32180.0], [158.0, 32779.0], [157.0, 33134.0], [156.0, 35609.0], [155.0, 36523.0], [154.0, 38293.0], [153.0, 38335.0], [152.0, 38596.0], [167.0, 27196.0], [166.0, 27641.0], [165.0, 29817.0], [164.0, 30633.0], [163.0, 30886.0], [162.0, 31204.0], [161.0, 31767.0], [160.0, 31992.0], [175.0, 23508.0], [174.0, 24740.0], [173.0, 24733.0], [172.0, 25199.0], [171.0, 25206.0], [170.0, 25242.0], [169.0, 25850.0], [168.0, 26570.0], [179.0, 17527.0], [178.0, 19901.0], [177.0, 20299.0], [176.0, 21999.0], [194.0, 17222.0], [193.0, 17260.0], [204.0, 16894.0], [211.0, 16647.0], [236.0, 16423.0], [258.0, 15813.0], [257.0, 15849.0], [287.0, 9524.0], [286.0, 9763.0], [283.0, 13167.0], [279.0, 13997.0], [299.0, 5164.0], [298.0, 6196.0], [297.0, 7319.0], [295.0, 7601.0], [293.0, 8483.0], [292.0, 8712.0], [291.0, 8893.0], [290.0, 8900.0], [289.0, 9146.0], [288.0, 9425.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[166.04000000000002, 38710.420000000006]], "isOverall": false, "label": "Client requested application-Aggregated", "isController": false}, {"data": [[2.0, 129181.0], [3.0, 129166.0], [4.0, 129024.0], [5.0, 128533.0], [6.0, 127584.0], [7.0, 127336.0], [8.0, 127272.0], [9.0, 127242.0], [10.0, 126861.0], [11.0, 126442.0], [12.0, 126265.0], [13.0, 125941.0], [14.0, 125792.0], [15.0, 123760.0], [16.0, 121860.0], [17.0, 121493.0], [18.0, 121429.0], [19.0, 121316.0], [20.0, 120955.0], [21.0, 120062.0], [22.0, 119823.0], [23.0, 119682.0], [24.0, 119324.0], [25.0, 118947.0], [26.0, 116424.0], [27.0, 115980.0], [28.0, 115420.0], [29.0, 114177.0], [30.0, 114156.0], [31.0, 113726.0], [33.0, 113302.0], [32.0, 113434.0], [35.0, 112302.0], [34.0, 113135.0], [37.0, 109604.0], [36.0, 110566.0], [39.0, 108628.0], [38.0, 109159.0], [41.0, 108174.0], [40.0, 108296.0], [43.0, 107781.0], [42.0, 107815.0], [45.0, 106749.0], [44.0, 107106.0], [47.0, 104100.0], [46.0, 105080.0], [49.0, 101645.0], [48.0, 103102.0], [51.0, 101445.0], [50.0, 101633.0], [53.0, 101423.0], [52.0, 101516.0], [55.0, 101034.0], [54.0, 100961.0], [57.0, 97964.0], [56.0, 98268.0], [59.0, 95311.0], [58.0, 96547.0], [61.0, 95318.0], [60.0, 95295.0], [63.0, 95034.0], [62.0, 95085.0], [67.0, 92437.0], [66.0, 93368.0], [65.0, 94761.0], [64.0, 94877.0], [71.0, 88555.0], [70.0, 88633.0], [69.0, 88687.0], [68.0, 91137.0], [75.0, 87679.0], [74.0, 87838.0], [73.0, 88351.0], [72.0, 88598.0], [79.0, 83447.0], [78.0, 85895.0], [77.0, 86587.0], [76.0, 86745.0], [83.0, 80978.0], [82.0, 81317.0], [81.0, 81366.0], [80.0, 81876.0], [87.0, 79958.0], [86.0, 80118.0], [85.0, 80780.0], [84.0, 80765.0], [91.0, 75898.0], [90.0, 76747.0], [89.0, 76862.0], [88.0, 79606.0], [95.0, 74448.0], [94.0, 74771.0], [93.0, 74809.0], [92.0, 75153.0], [96.0, 74554.0], [114.0, 61966.0], [113.0, 62653.0], [119.0, 60036.0], [124.0, 55398.0], [1.0, 129232.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[51.25999999999999, 101288.70999999999]], "isOverall": false, "label": "Client requested api gateway (non-cached)-Aggregated", "isController": false}, {"data": [[183.0, 17445.0], [182.0, 17506.0], [181.0, 17565.0], [180.0, 17565.0], [191.0, 17315.0], [190.0, 17385.0], [189.0, 17413.0], [188.0, 17431.0], [187.0, 17436.0], [186.0, 17415.0], [185.0, 17463.0], [199.0, 17100.0], [198.0, 17123.0], [197.0, 17154.0], [196.0, 17282.0], [195.0, 17252.0], [192.0, 17369.0], [207.0, 16872.0], [206.0, 16872.0], [205.0, 16893.0], [203.0, 16983.0], [202.0, 17008.0], [201.0, 17047.0], [200.0, 17082.0], [215.0, 16660.0], [214.0, 16663.0], [212.0, 16744.0], [210.0, 16717.0], [209.0, 16723.0], [208.0, 16771.0], [223.0, 16587.0], [222.0, 16638.0], [220.0, 16609.0], [219.0, 16654.0], [218.0, 16641.0], [217.0, 16681.0], [216.0, 16669.0], [231.0, 16553.0], [230.0, 16531.0], [229.0, 16537.0], [228.0, 16581.0], [227.0, 16560.0], [226.0, 16600.0], [225.0, 16571.0], [224.0, 16615.0], [239.0, 16429.0], [238.0, 16515.0], [237.0, 16412.0], [235.0, 16492.0], [234.0, 16506.0], [233.0, 16534.0], [247.0, 16288.0], [246.0, 16301.0], [245.0, 16352.0], [244.0, 16315.0], [243.0, 16318.0], [242.0, 16376.0], [241.0, 16407.0], [240.0, 16469.0], [255.0, 16189.0], [254.0, 16233.5], [252.0, 16248.0], [250.0, 16257.0], [249.0, 16314.0], [248.0, 16275.0], [269.0, 14839.0], [270.0, 14848.0], [268.0, 14871.0], [259.0, 15493.0], [256.0, 16175.0], [267.0, 14880.0], [266.0, 15003.0], [265.0, 14980.666666666666], [262.0, 15073.0], [261.0, 15022.0], [260.0, 15095.0], [275.0, 14543.0], [285.0, 12034.0], [284.0, 12668.0], [282.0, 13255.0], [281.0, 13720.0], [280.0, 13713.0], [278.0, 14107.0], [277.0, 14283.0], [276.0, 14252.0], [274.0, 14565.0], [273.0, 14784.0], [272.0, 14818.5], [300.0, 862.0], [296.0, 7471.0], [294.0, 8406.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[234.34999999999997, 15848.27]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 168.53333333333333, "minX": 1.6683621E12, "maxY": 2.358451625E7, "series": [{"data": [[1.66836216E12, 1.81298369E7], [1.66836222E12, 1.492763855E7], [1.6683621E12, 2.358451625E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66836216E12, 204.8], [1.66836222E12, 168.53333333333333], [1.6683621E12, 373.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836222E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12884.960000000001, "minX": 1.6683621E12, "maxY": 108339.39240506328, "series": [{"data": [[1.66836216E12, 47318.906666666684], [1.6683621E12, 12884.960000000001]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836216E12, 74764.71428571428], [1.66836222E12, 108339.39240506328]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.6683621E12, 15848.27]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836222E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1977.3300000000002, "minX": 1.6683621E12, "maxY": 106031.78481012657, "series": [{"data": [[1.66836216E12, 44721.29333333333], [1.6683621E12, 10159.439999999999]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836216E12, 72512.95238095238], [1.66836222E12, 106031.78481012657]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.6683621E12, 1977.3300000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836222E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.400000000000004, "minX": 1.6683621E12, "maxY": 137.53164556962022, "series": [{"data": [[1.66836216E12, 121.93333333333332], [1.6683621E12, 10.400000000000004]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836216E12, 84.71428571428572], [1.66836222E12, 137.53164556962022]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.6683621E12, 126.03999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836222E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 862.0, "minX": 1.6683621E12, "maxY": 129232.0, "series": [{"data": [[1.66836216E12, 81876.0], [1.66836222E12, 129232.0], [1.6683621E12, 21999.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66836216E12, 77685.2], [1.66836222E12, 127272.0], [1.6683621E12, 17421.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66836216E12, 81876.0], [1.66836222E12, 129232.0], [1.6683621E12, 21556.999999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66836216E12, 80809.7], [1.66836222E12, 129024.0], [1.6683621E12, 17520.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66836216E12, 23508.0], [1.66836222E12, 83447.0], [1.6683621E12, 862.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66836216E12, 53580.5], [1.66836222E12, 108296.0], [1.6683621E12, 16429.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836222E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11429.5, "minX": 1.0, "maxY": 98234.0, "series": [{"data": [[1.0, 61966.0], [2.0, 67176.0], [16.0, 14875.5], [4.0, 98234.0], [5.0, 91394.5], [21.0, 16276.0], [6.0, 11429.5], [3.0, 61030.0], [53.0, 16688.0], [7.0, 56163.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1671.0, "minX": 1.0, "maxY": 95848.0, "series": [{"data": [[1.0, 59330.0], [2.0, 64419.0], [16.0, 1855.5], [4.0, 95848.0], [5.0, 88561.0], [21.0, 1671.0], [6.0, 2890.5], [3.0, 58574.0], [53.0, 2705.0], [7.0, 53646.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.6683621E12, "maxY": 5.0, "series": [{"data": [[1.6683621E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6683621E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.6683621E12, "maxY": 2.0833333333333335, "series": [{"data": [[1.66836216E12, 1.6], [1.66836222E12, 1.3166666666666667], [1.6683621E12, 2.0833333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836222E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.6683621E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.6683621E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.66836216E12, 0.35], [1.66836222E12, 1.3166666666666667]], "isOverall": false, "label": "Client requested api gateway (non-cached)-success", "isController": false}, {"data": [[1.66836216E12, 1.25], [1.6683621E12, 0.4166666666666667]], "isOverall": false, "label": "Client requested application-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836222E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.6683621E12, "maxY": 2.0833333333333335, "series": [{"data": [[1.66836216E12, 1.6], [1.66836222E12, 1.3166666666666667], [1.6683621E12, 2.0833333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836222E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

