/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6242.0, "minX": 0.0, "maxY": 125582.0, "series": [{"data": [[0.0, 6242.0], [0.1, 6242.0], [0.2, 6242.0], [0.3, 6242.0], [0.4, 6242.0], [0.5, 6242.0], [0.6, 6242.0], [0.7, 6242.0], [0.8, 6242.0], [0.9, 6242.0], [1.0, 6271.0], [1.1, 6271.0], [1.2, 6271.0], [1.3, 6271.0], [1.4, 6271.0], [1.5, 6271.0], [1.6, 6271.0], [1.7, 6271.0], [1.8, 6271.0], [1.9, 6271.0], [2.0, 6272.0], [2.1, 6272.0], [2.2, 6272.0], [2.3, 6272.0], [2.4, 6272.0], [2.5, 6272.0], [2.6, 6272.0], [2.7, 6272.0], [2.8, 6272.0], [2.9, 6272.0], [3.0, 6582.0], [3.1, 6582.0], [3.2, 6582.0], [3.3, 6582.0], [3.4, 6582.0], [3.5, 6582.0], [3.6, 6582.0], [3.7, 6582.0], [3.8, 6582.0], [3.9, 6582.0], [4.0, 6920.0], [4.1, 6920.0], [4.2, 6920.0], [4.3, 6920.0], [4.4, 6920.0], [4.5, 6920.0], [4.6, 6920.0], [4.7, 6920.0], [4.8, 6920.0], [4.9, 6920.0], [5.0, 7166.0], [5.1, 7166.0], [5.2, 7166.0], [5.3, 7166.0], [5.4, 7166.0], [5.5, 7166.0], [5.6, 7166.0], [5.7, 7166.0], [5.8, 7166.0], [5.9, 7166.0], [6.0, 7957.0], [6.1, 7957.0], [6.2, 7957.0], [6.3, 7957.0], [6.4, 7957.0], [6.5, 7957.0], [6.6, 7957.0], [6.7, 7957.0], [6.8, 7957.0], [6.9, 7957.0], [7.0, 8021.0], [7.1, 8021.0], [7.2, 8021.0], [7.3, 8021.0], [7.4, 8021.0], [7.5, 8021.0], [7.6, 8021.0], [7.7, 8021.0], [7.8, 8021.0], [7.9, 8021.0], [8.0, 8065.0], [8.1, 8065.0], [8.2, 8065.0], [8.3, 8065.0], [8.4, 8065.0], [8.5, 8065.0], [8.6, 8065.0], [8.7, 8065.0], [8.8, 8065.0], [8.9, 8065.0], [9.0, 8082.0], [9.1, 8082.0], [9.2, 8082.0], [9.3, 8082.0], [9.4, 8082.0], [9.5, 8082.0], [9.6, 8082.0], [9.7, 8082.0], [9.8, 8082.0], [9.9, 8082.0], [10.0, 9530.0], [10.1, 9530.0], [10.2, 9530.0], [10.3, 9530.0], [10.4, 9530.0], [10.5, 9530.0], [10.6, 9530.0], [10.7, 9530.0], [10.8, 9530.0], [10.9, 9530.0], [11.0, 10586.0], [11.1, 10586.0], [11.2, 10586.0], [11.3, 10586.0], [11.4, 10586.0], [11.5, 10586.0], [11.6, 10586.0], [11.7, 10586.0], [11.8, 10586.0], [11.9, 10586.0], [12.0, 10833.0], [12.1, 10833.0], [12.2, 10833.0], [12.3, 10833.0], [12.4, 10833.0], [12.5, 10833.0], [12.6, 10833.0], [12.7, 10833.0], [12.8, 10833.0], [12.9, 10833.0], [13.0, 12305.0], [13.1, 12305.0], [13.2, 12305.0], [13.3, 12305.0], [13.4, 12305.0], [13.5, 12305.0], [13.6, 12305.0], [13.7, 12305.0], [13.8, 12305.0], [13.9, 12305.0], [14.0, 13313.0], [14.1, 13313.0], [14.2, 13313.0], [14.3, 13313.0], [14.4, 13313.0], [14.5, 13313.0], [14.6, 13313.0], [14.7, 13313.0], [14.8, 13313.0], [14.9, 13313.0], [15.0, 13539.0], [15.1, 13539.0], [15.2, 13539.0], [15.3, 13539.0], [15.4, 13539.0], [15.5, 13539.0], [15.6, 13539.0], [15.7, 13539.0], [15.8, 13539.0], [15.9, 13539.0], [16.0, 13690.0], [16.1, 13690.0], [16.2, 13690.0], [16.3, 13690.0], [16.4, 13690.0], [16.5, 13690.0], [16.6, 13690.0], [16.7, 13690.0], [16.8, 13690.0], [16.9, 13690.0], [17.0, 14360.0], [17.1, 14360.0], [17.2, 14360.0], [17.3, 14360.0], [17.4, 14360.0], [17.5, 14360.0], [17.6, 14360.0], [17.7, 14360.0], [17.8, 14360.0], [17.9, 14360.0], [18.0, 14752.0], [18.1, 14752.0], [18.2, 14752.0], [18.3, 14752.0], [18.4, 14752.0], [18.5, 14752.0], [18.6, 14752.0], [18.7, 14752.0], [18.8, 14752.0], [18.9, 14752.0], [19.0, 14828.0], [19.1, 14828.0], [19.2, 14828.0], [19.3, 14828.0], [19.4, 14828.0], [19.5, 14828.0], [19.6, 14828.0], [19.7, 14828.0], [19.8, 14828.0], [19.9, 14828.0], [20.0, 15146.0], [20.1, 15146.0], [20.2, 15146.0], [20.3, 15146.0], [20.4, 15146.0], [20.5, 15146.0], [20.6, 15146.0], [20.7, 15146.0], [20.8, 15146.0], [20.9, 15146.0], [21.0, 15528.0], [21.1, 15528.0], [21.2, 15528.0], [21.3, 15528.0], [21.4, 15528.0], [21.5, 15528.0], [21.6, 15528.0], [21.7, 15528.0], [21.8, 15528.0], [21.9, 15528.0], [22.0, 17524.0], [22.1, 17524.0], [22.2, 17524.0], [22.3, 17524.0], [22.4, 17524.0], [22.5, 17524.0], [22.6, 17524.0], [22.7, 17524.0], [22.8, 17524.0], [22.9, 17524.0], [23.0, 18405.0], [23.1, 18405.0], [23.2, 18405.0], [23.3, 18405.0], [23.4, 18405.0], [23.5, 18405.0], [23.6, 18405.0], [23.7, 18405.0], [23.8, 18405.0], [23.9, 18405.0], [24.0, 20056.0], [24.1, 20056.0], [24.2, 20056.0], [24.3, 20056.0], [24.4, 20056.0], [24.5, 20056.0], [24.6, 20056.0], [24.7, 20056.0], [24.8, 20056.0], [24.9, 20056.0], [25.0, 21117.0], [25.1, 21117.0], [25.2, 21117.0], [25.3, 21117.0], [25.4, 21117.0], [25.5, 21117.0], [25.6, 21117.0], [25.7, 21117.0], [25.8, 21117.0], [25.9, 21117.0], [26.0, 21294.0], [26.1, 21294.0], [26.2, 21294.0], [26.3, 21294.0], [26.4, 21294.0], [26.5, 21294.0], [26.6, 21294.0], [26.7, 21294.0], [26.8, 21294.0], [26.9, 21294.0], [27.0, 21644.0], [27.1, 21644.0], [27.2, 21644.0], [27.3, 21644.0], [27.4, 21644.0], [27.5, 21644.0], [27.6, 21644.0], [27.7, 21644.0], [27.8, 21644.0], [27.9, 21644.0], [28.0, 21820.0], [28.1, 21820.0], [28.2, 21820.0], [28.3, 21820.0], [28.4, 21820.0], [28.5, 21820.0], [28.6, 21820.0], [28.7, 21820.0], [28.8, 21820.0], [28.9, 21820.0], [29.0, 24069.0], [29.1, 24069.0], [29.2, 24069.0], [29.3, 24069.0], [29.4, 24069.0], [29.5, 24069.0], [29.6, 24069.0], [29.7, 24069.0], [29.8, 24069.0], [29.9, 24069.0], [30.0, 24282.0], [30.1, 24282.0], [30.2, 24282.0], [30.3, 24282.0], [30.4, 24282.0], [30.5, 24282.0], [30.6, 24282.0], [30.7, 24282.0], [30.8, 24282.0], [30.9, 24282.0], [31.0, 25364.0], [31.1, 25364.0], [31.2, 25364.0], [31.3, 25364.0], [31.4, 25364.0], [31.5, 25364.0], [31.6, 25364.0], [31.7, 25364.0], [31.8, 25364.0], [31.9, 25364.0], [32.0, 25830.0], [32.1, 25830.0], [32.2, 25830.0], [32.3, 25830.0], [32.4, 25830.0], [32.5, 25830.0], [32.6, 25830.0], [32.7, 25830.0], [32.8, 25830.0], [32.9, 25830.0], [33.0, 26112.0], [33.1, 26112.0], [33.2, 26112.0], [33.3, 26112.0], [33.4, 26112.0], [33.5, 26112.0], [33.6, 26112.0], [33.7, 26112.0], [33.8, 26112.0], [33.9, 26112.0], [34.0, 26432.0], [34.1, 26432.0], [34.2, 26432.0], [34.3, 26432.0], [34.4, 26432.0], [34.5, 26432.0], [34.6, 26432.0], [34.7, 26432.0], [34.8, 26432.0], [34.9, 26432.0], [35.0, 27680.0], [35.1, 27680.0], [35.2, 27680.0], [35.3, 27680.0], [35.4, 27680.0], [35.5, 27680.0], [35.6, 27680.0], [35.7, 27680.0], [35.8, 27680.0], [35.9, 27680.0], [36.0, 27741.0], [36.1, 27741.0], [36.2, 27741.0], [36.3, 27741.0], [36.4, 27741.0], [36.5, 27741.0], [36.6, 27741.0], [36.7, 27741.0], [36.8, 27741.0], [36.9, 27741.0], [37.0, 28208.0], [37.1, 28208.0], [37.2, 28208.0], [37.3, 28208.0], [37.4, 28208.0], [37.5, 28208.0], [37.6, 28208.0], [37.7, 28208.0], [37.8, 28208.0], [37.9, 28208.0], [38.0, 29893.0], [38.1, 29893.0], [38.2, 29893.0], [38.3, 29893.0], [38.4, 29893.0], [38.5, 29893.0], [38.6, 29893.0], [38.7, 29893.0], [38.8, 29893.0], [38.9, 29893.0], [39.0, 31834.0], [39.1, 31834.0], [39.2, 31834.0], [39.3, 31834.0], [39.4, 31834.0], [39.5, 31834.0], [39.6, 31834.0], [39.7, 31834.0], [39.8, 31834.0], [39.9, 31834.0], [40.0, 32288.0], [40.1, 32288.0], [40.2, 32288.0], [40.3, 32288.0], [40.4, 32288.0], [40.5, 32288.0], [40.6, 32288.0], [40.7, 32288.0], [40.8, 32288.0], [40.9, 32288.0], [41.0, 32301.0], [41.1, 32301.0], [41.2, 32301.0], [41.3, 32301.0], [41.4, 32301.0], [41.5, 32301.0], [41.6, 32301.0], [41.7, 32301.0], [41.8, 32301.0], [41.9, 32301.0], [42.0, 33214.0], [42.1, 33214.0], [42.2, 33214.0], [42.3, 33214.0], [42.4, 33214.0], [42.5, 33214.0], [42.6, 33214.0], [42.7, 33214.0], [42.8, 33214.0], [42.9, 33214.0], [43.0, 33324.0], [43.1, 33324.0], [43.2, 33324.0], [43.3, 33324.0], [43.4, 33324.0], [43.5, 33324.0], [43.6, 33324.0], [43.7, 33324.0], [43.8, 33324.0], [43.9, 33324.0], [44.0, 33765.0], [44.1, 33765.0], [44.2, 33765.0], [44.3, 33765.0], [44.4, 33765.0], [44.5, 33765.0], [44.6, 33765.0], [44.7, 33765.0], [44.8, 33765.0], [44.9, 33765.0], [45.0, 34282.0], [45.1, 34282.0], [45.2, 34282.0], [45.3, 34282.0], [45.4, 34282.0], [45.5, 34282.0], [45.6, 34282.0], [45.7, 34282.0], [45.8, 34282.0], [45.9, 34282.0], [46.0, 36573.0], [46.1, 36573.0], [46.2, 36573.0], [46.3, 36573.0], [46.4, 36573.0], [46.5, 36573.0], [46.6, 36573.0], [46.7, 36573.0], [46.8, 36573.0], [46.9, 36573.0], [47.0, 37369.0], [47.1, 37369.0], [47.2, 37369.0], [47.3, 37369.0], [47.4, 37369.0], [47.5, 37369.0], [47.6, 37369.0], [47.7, 37369.0], [47.8, 37369.0], [47.9, 37369.0], [48.0, 38473.0], [48.1, 38473.0], [48.2, 38473.0], [48.3, 38473.0], [48.4, 38473.0], [48.5, 38473.0], [48.6, 38473.0], [48.7, 38473.0], [48.8, 38473.0], [48.9, 38473.0], [49.0, 38694.0], [49.1, 38694.0], [49.2, 38694.0], [49.3, 38694.0], [49.4, 38694.0], [49.5, 38694.0], [49.6, 38694.0], [49.7, 38694.0], [49.8, 38694.0], [49.9, 38694.0], [50.0, 39446.0], [50.1, 39446.0], [50.2, 39446.0], [50.3, 39446.0], [50.4, 39446.0], [50.5, 39446.0], [50.6, 39446.0], [50.7, 39446.0], [50.8, 39446.0], [50.9, 39446.0], [51.0, 40715.0], [51.1, 40715.0], [51.2, 40715.0], [51.3, 40715.0], [51.4, 40715.0], [51.5, 40715.0], [51.6, 40715.0], [51.7, 40715.0], [51.8, 40715.0], [51.9, 40715.0], [52.0, 41097.0], [52.1, 41097.0], [52.2, 41097.0], [52.3, 41097.0], [52.4, 41097.0], [52.5, 41097.0], [52.6, 41097.0], [52.7, 41097.0], [52.8, 41097.0], [52.9, 41097.0], [53.0, 41490.0], [53.1, 41490.0], [53.2, 41490.0], [53.3, 41490.0], [53.4, 41490.0], [53.5, 41490.0], [53.6, 41490.0], [53.7, 41490.0], [53.8, 41490.0], [53.9, 41490.0], [54.0, 43164.0], [54.1, 43164.0], [54.2, 43164.0], [54.3, 43164.0], [54.4, 43164.0], [54.5, 43164.0], [54.6, 43164.0], [54.7, 43164.0], [54.8, 43164.0], [54.9, 43164.0], [55.0, 43178.0], [55.1, 43178.0], [55.2, 43178.0], [55.3, 43178.0], [55.4, 43178.0], [55.5, 43178.0], [55.6, 43178.0], [55.7, 43178.0], [55.8, 43178.0], [55.9, 43178.0], [56.0, 43694.0], [56.1, 43694.0], [56.2, 43694.0], [56.3, 43694.0], [56.4, 43694.0], [56.5, 43694.0], [56.6, 43694.0], [56.7, 43694.0], [56.8, 43694.0], [56.9, 43694.0], [57.0, 44363.0], [57.1, 44363.0], [57.2, 44363.0], [57.3, 44363.0], [57.4, 44363.0], [57.5, 44363.0], [57.6, 44363.0], [57.7, 44363.0], [57.8, 44363.0], [57.9, 44363.0], [58.0, 44750.0], [58.1, 44750.0], [58.2, 44750.0], [58.3, 44750.0], [58.4, 44750.0], [58.5, 44750.0], [58.6, 44750.0], [58.7, 44750.0], [58.8, 44750.0], [58.9, 44750.0], [59.0, 46246.0], [59.1, 46246.0], [59.2, 46246.0], [59.3, 46246.0], [59.4, 46246.0], [59.5, 46246.0], [59.6, 46246.0], [59.7, 46246.0], [59.8, 46246.0], [59.9, 46246.0], [60.0, 46608.0], [60.1, 46608.0], [60.2, 46608.0], [60.3, 46608.0], [60.4, 46608.0], [60.5, 46608.0], [60.6, 46608.0], [60.7, 46608.0], [60.8, 46608.0], [60.9, 46608.0], [61.0, 46879.0], [61.1, 46879.0], [61.2, 46879.0], [61.3, 46879.0], [61.4, 46879.0], [61.5, 46879.0], [61.6, 46879.0], [61.7, 46879.0], [61.8, 46879.0], [61.9, 46879.0], [62.0, 47549.0], [62.1, 47549.0], [62.2, 47549.0], [62.3, 47549.0], [62.4, 47549.0], [62.5, 47549.0], [62.6, 47549.0], [62.7, 47549.0], [62.8, 47549.0], [62.9, 47549.0], [63.0, 48201.0], [63.1, 48201.0], [63.2, 48201.0], [63.3, 48201.0], [63.4, 48201.0], [63.5, 48201.0], [63.6, 48201.0], [63.7, 48201.0], [63.8, 48201.0], [63.9, 48201.0], [64.0, 48697.0], [64.1, 48697.0], [64.2, 48697.0], [64.3, 48697.0], [64.4, 48697.0], [64.5, 48697.0], [64.6, 48697.0], [64.7, 48697.0], [64.8, 48697.0], [64.9, 48697.0], [65.0, 49100.0], [65.1, 49100.0], [65.2, 49100.0], [65.3, 49100.0], [65.4, 49100.0], [65.5, 49100.0], [65.6, 49100.0], [65.7, 49100.0], [65.8, 49100.0], [65.9, 49100.0], [66.0, 49340.0], [66.1, 49340.0], [66.2, 49340.0], [66.3, 49340.0], [66.4, 49340.0], [66.5, 49340.0], [66.6, 49340.0], [66.7, 49340.0], [66.8, 49340.0], [66.9, 49340.0], [67.0, 52397.0], [67.1, 52397.0], [67.2, 52397.0], [67.3, 52397.0], [67.4, 52397.0], [67.5, 52397.0], [67.6, 52397.0], [67.7, 52397.0], [67.8, 52397.0], [67.9, 52397.0], [68.0, 52790.0], [68.1, 52790.0], [68.2, 52790.0], [68.3, 52790.0], [68.4, 52790.0], [68.5, 52790.0], [68.6, 52790.0], [68.7, 52790.0], [68.8, 52790.0], [68.9, 52790.0], [69.0, 53171.0], [69.1, 53171.0], [69.2, 53171.0], [69.3, 53171.0], [69.4, 53171.0], [69.5, 53171.0], [69.6, 53171.0], [69.7, 53171.0], [69.8, 53171.0], [69.9, 53171.0], [70.0, 54227.0], [70.1, 54227.0], [70.2, 54227.0], [70.3, 54227.0], [70.4, 54227.0], [70.5, 54227.0], [70.6, 54227.0], [70.7, 54227.0], [70.8, 54227.0], [70.9, 54227.0], [71.0, 54525.0], [71.1, 54525.0], [71.2, 54525.0], [71.3, 54525.0], [71.4, 54525.0], [71.5, 54525.0], [71.6, 54525.0], [71.7, 54525.0], [71.8, 54525.0], [71.9, 54525.0], [72.0, 55442.0], [72.1, 55442.0], [72.2, 55442.0], [72.3, 55442.0], [72.4, 55442.0], [72.5, 55442.0], [72.6, 55442.0], [72.7, 55442.0], [72.8, 55442.0], [72.9, 55442.0], [73.0, 55559.0], [73.1, 55559.0], [73.2, 55559.0], [73.3, 55559.0], [73.4, 55559.0], [73.5, 55559.0], [73.6, 55559.0], [73.7, 55559.0], [73.8, 55559.0], [73.9, 55559.0], [74.0, 56032.0], [74.1, 56032.0], [74.2, 56032.0], [74.3, 56032.0], [74.4, 56032.0], [74.5, 56032.0], [74.6, 56032.0], [74.7, 56032.0], [74.8, 56032.0], [74.9, 56032.0], [75.0, 56424.0], [75.1, 56424.0], [75.2, 56424.0], [75.3, 56424.0], [75.4, 56424.0], [75.5, 56424.0], [75.6, 56424.0], [75.7, 56424.0], [75.8, 56424.0], [75.9, 56424.0], [76.0, 56534.0], [76.1, 56534.0], [76.2, 56534.0], [76.3, 56534.0], [76.4, 56534.0], [76.5, 56534.0], [76.6, 56534.0], [76.7, 56534.0], [76.8, 56534.0], [76.9, 56534.0], [77.0, 58193.0], [77.1, 58193.0], [77.2, 58193.0], [77.3, 58193.0], [77.4, 58193.0], [77.5, 58193.0], [77.6, 58193.0], [77.7, 58193.0], [77.8, 58193.0], [77.9, 58193.0], [78.0, 59171.0], [78.1, 59171.0], [78.2, 59171.0], [78.3, 59171.0], [78.4, 59171.0], [78.5, 59171.0], [78.6, 59171.0], [78.7, 59171.0], [78.8, 59171.0], [78.9, 59171.0], [79.0, 60455.0], [79.1, 60455.0], [79.2, 60455.0], [79.3, 60455.0], [79.4, 60455.0], [79.5, 60455.0], [79.6, 60455.0], [79.7, 60455.0], [79.8, 60455.0], [79.9, 60455.0], [80.0, 61040.0], [80.1, 61040.0], [80.2, 61040.0], [80.3, 61040.0], [80.4, 61040.0], [80.5, 61040.0], [80.6, 61040.0], [80.7, 61040.0], [80.8, 61040.0], [80.9, 61040.0], [81.0, 61833.0], [81.1, 61833.0], [81.2, 61833.0], [81.3, 61833.0], [81.4, 61833.0], [81.5, 61833.0], [81.6, 61833.0], [81.7, 61833.0], [81.8, 61833.0], [81.9, 61833.0], [82.0, 62327.0], [82.1, 62327.0], [82.2, 62327.0], [82.3, 62327.0], [82.4, 62327.0], [82.5, 62327.0], [82.6, 62327.0], [82.7, 62327.0], [82.8, 62327.0], [82.9, 62327.0], [83.0, 62928.0], [83.1, 62928.0], [83.2, 62928.0], [83.3, 62928.0], [83.4, 62928.0], [83.5, 62928.0], [83.6, 62928.0], [83.7, 62928.0], [83.8, 62928.0], [83.9, 62928.0], [84.0, 62977.0], [84.1, 62977.0], [84.2, 62977.0], [84.3, 62977.0], [84.4, 62977.0], [84.5, 62977.0], [84.6, 62977.0], [84.7, 62977.0], [84.8, 62977.0], [84.9, 62977.0], [85.0, 62995.0], [85.1, 62995.0], [85.2, 62995.0], [85.3, 62995.0], [85.4, 62995.0], [85.5, 62995.0], [85.6, 62995.0], [85.7, 62995.0], [85.8, 62995.0], [85.9, 62995.0], [86.0, 64171.0], [86.1, 64171.0], [86.2, 64171.0], [86.3, 64171.0], [86.4, 64171.0], [86.5, 64171.0], [86.6, 64171.0], [86.7, 64171.0], [86.8, 64171.0], [86.9, 64171.0], [87.0, 64425.0], [87.1, 64425.0], [87.2, 64425.0], [87.3, 64425.0], [87.4, 64425.0], [87.5, 64425.0], [87.6, 64425.0], [87.7, 64425.0], [87.8, 64425.0], [87.9, 64425.0], [88.0, 66082.0], [88.1, 66082.0], [88.2, 66082.0], [88.3, 66082.0], [88.4, 66082.0], [88.5, 66082.0], [88.6, 66082.0], [88.7, 66082.0], [88.8, 66082.0], [88.9, 66082.0], [89.0, 66120.0], [89.1, 66120.0], [89.2, 66120.0], [89.3, 66120.0], [89.4, 66120.0], [89.5, 66120.0], [89.6, 66120.0], [89.7, 66120.0], [89.8, 66120.0], [89.9, 66120.0], [90.0, 68727.0], [90.1, 68727.0], [90.2, 68727.0], [90.3, 68727.0], [90.4, 68727.0], [90.5, 68727.0], [90.6, 68727.0], [90.7, 68727.0], [90.8, 68727.0], [90.9, 68727.0], [91.0, 69017.0], [91.1, 69017.0], [91.2, 69017.0], [91.3, 69017.0], [91.4, 69017.0], [91.5, 69017.0], [91.6, 69017.0], [91.7, 69017.0], [91.8, 69017.0], [91.9, 69017.0], [92.0, 69214.0], [92.1, 69214.0], [92.2, 69214.0], [92.3, 69214.0], [92.4, 69214.0], [92.5, 69214.0], [92.6, 69214.0], [92.7, 69214.0], [92.8, 69214.0], [92.9, 69214.0], [93.0, 69241.0], [93.1, 69241.0], [93.2, 69241.0], [93.3, 69241.0], [93.4, 69241.0], [93.5, 69241.0], [93.6, 69241.0], [93.7, 69241.0], [93.8, 69241.0], [93.9, 69241.0], [94.0, 69456.0], [94.1, 69456.0], [94.2, 69456.0], [94.3, 69456.0], [94.4, 69456.0], [94.5, 69456.0], [94.6, 69456.0], [94.7, 69456.0], [94.8, 69456.0], [94.9, 69456.0], [95.0, 70169.0], [95.1, 70169.0], [95.2, 70169.0], [95.3, 70169.0], [95.4, 70169.0], [95.5, 70169.0], [95.6, 70169.0], [95.7, 70169.0], [95.8, 70169.0], [95.9, 70169.0], [96.0, 70814.0], [96.1, 70814.0], [96.2, 70814.0], [96.3, 70814.0], [96.4, 70814.0], [96.5, 70814.0], [96.6, 70814.0], [96.7, 70814.0], [96.8, 70814.0], [96.9, 70814.0], [97.0, 72618.0], [97.1, 72618.0], [97.2, 72618.0], [97.3, 72618.0], [97.4, 72618.0], [97.5, 72618.0], [97.6, 72618.0], [97.7, 72618.0], [97.8, 72618.0], [97.9, 72618.0], [98.0, 75908.0], [98.1, 75908.0], [98.2, 75908.0], [98.3, 75908.0], [98.4, 75908.0], [98.5, 75908.0], [98.6, 75908.0], [98.7, 75908.0], [98.8, 75908.0], [98.9, 75908.0], [99.0, 76106.0], [99.1, 76106.0], [99.2, 76106.0], [99.3, 76106.0], [99.4, 76106.0], [99.5, 76106.0], [99.6, 76106.0], [99.7, 76106.0], [99.8, 76106.0], [99.9, 76106.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[0.0, 18734.0], [0.1, 18734.0], [0.2, 18734.0], [0.3, 18734.0], [0.4, 18734.0], [0.5, 18734.0], [0.6, 18734.0], [0.7, 18734.0], [0.8, 18734.0], [0.9, 18734.0], [1.0, 20064.0], [1.1, 20064.0], [1.2, 20064.0], [1.3, 20064.0], [1.4, 20064.0], [1.5, 20064.0], [1.6, 20064.0], [1.7, 20064.0], [1.8, 20064.0], [1.9, 20064.0], [2.0, 20284.0], [2.1, 20284.0], [2.2, 20284.0], [2.3, 20284.0], [2.4, 20284.0], [2.5, 20284.0], [2.6, 20284.0], [2.7, 20284.0], [2.8, 20284.0], [2.9, 20284.0], [3.0, 27755.0], [3.1, 27755.0], [3.2, 27755.0], [3.3, 27755.0], [3.4, 27755.0], [3.5, 27755.0], [3.6, 27755.0], [3.7, 27755.0], [3.8, 27755.0], [3.9, 27755.0], [4.0, 30727.0], [4.1, 30727.0], [4.2, 30727.0], [4.3, 30727.0], [4.4, 30727.0], [4.5, 30727.0], [4.6, 30727.0], [4.7, 30727.0], [4.8, 30727.0], [4.9, 30727.0], [5.0, 33503.0], [5.1, 33503.0], [5.2, 33503.0], [5.3, 33503.0], [5.4, 33503.0], [5.5, 33503.0], [5.6, 33503.0], [5.7, 33503.0], [5.8, 33503.0], [5.9, 33503.0], [6.0, 37030.0], [6.1, 37030.0], [6.2, 37030.0], [6.3, 37030.0], [6.4, 37030.0], [6.5, 37030.0], [6.6, 37030.0], [6.7, 37030.0], [6.8, 37030.0], [6.9, 37030.0], [7.0, 40283.0], [7.1, 40283.0], [7.2, 40283.0], [7.3, 40283.0], [7.4, 40283.0], [7.5, 40283.0], [7.6, 40283.0], [7.7, 40283.0], [7.8, 40283.0], [7.9, 40283.0], [8.0, 49322.0], [8.1, 49322.0], [8.2, 49322.0], [8.3, 49322.0], [8.4, 49322.0], [8.5, 49322.0], [8.6, 49322.0], [8.7, 49322.0], [8.8, 49322.0], [8.9, 49322.0], [9.0, 50023.0], [9.1, 50023.0], [9.2, 50023.0], [9.3, 50023.0], [9.4, 50023.0], [9.5, 50023.0], [9.6, 50023.0], [9.7, 50023.0], [9.8, 50023.0], [9.9, 50023.0], [10.0, 58814.0], [10.1, 58814.0], [10.2, 58814.0], [10.3, 58814.0], [10.4, 58814.0], [10.5, 58814.0], [10.6, 58814.0], [10.7, 58814.0], [10.8, 58814.0], [10.9, 58814.0], [11.0, 64470.0], [11.1, 64470.0], [11.2, 64470.0], [11.3, 64470.0], [11.4, 64470.0], [11.5, 64470.0], [11.6, 64470.0], [11.7, 64470.0], [11.8, 64470.0], [11.9, 64470.0], [12.0, 71073.0], [12.1, 71073.0], [12.2, 71073.0], [12.3, 71073.0], [12.4, 71073.0], [12.5, 71073.0], [12.6, 71073.0], [12.7, 71073.0], [12.8, 71073.0], [12.9, 71073.0], [13.0, 72473.0], [13.1, 72473.0], [13.2, 72473.0], [13.3, 72473.0], [13.4, 72473.0], [13.5, 72473.0], [13.6, 72473.0], [13.7, 72473.0], [13.8, 72473.0], [13.9, 72473.0], [14.0, 75459.0], [14.1, 75459.0], [14.2, 75459.0], [14.3, 75459.0], [14.4, 75459.0], [14.5, 75459.0], [14.6, 75459.0], [14.7, 75459.0], [14.8, 75459.0], [14.9, 75459.0], [15.0, 76382.0], [15.1, 76382.0], [15.2, 76382.0], [15.3, 76382.0], [15.4, 76382.0], [15.5, 76382.0], [15.6, 76382.0], [15.7, 76382.0], [15.8, 76382.0], [15.9, 76382.0], [16.0, 76553.0], [16.1, 76553.0], [16.2, 76553.0], [16.3, 76553.0], [16.4, 76553.0], [16.5, 76553.0], [16.6, 76553.0], [16.7, 76553.0], [16.8, 76553.0], [16.9, 76553.0], [17.0, 76946.0], [17.1, 76946.0], [17.2, 76946.0], [17.3, 76946.0], [17.4, 76946.0], [17.5, 76946.0], [17.6, 76946.0], [17.7, 76946.0], [17.8, 76946.0], [17.9, 76946.0], [18.0, 77456.0], [18.1, 77456.0], [18.2, 77456.0], [18.3, 77456.0], [18.4, 77456.0], [18.5, 77456.0], [18.6, 77456.0], [18.7, 77456.0], [18.8, 77456.0], [18.9, 77456.0], [19.0, 77477.0], [19.1, 77477.0], [19.2, 77477.0], [19.3, 77477.0], [19.4, 77477.0], [19.5, 77477.0], [19.6, 77477.0], [19.7, 77477.0], [19.8, 77477.0], [19.9, 77477.0], [20.0, 77977.0], [20.1, 77977.0], [20.2, 77977.0], [20.3, 77977.0], [20.4, 77977.0], [20.5, 77977.0], [20.6, 77977.0], [20.7, 77977.0], [20.8, 77977.0], [20.9, 77977.0], [21.0, 78536.0], [21.1, 78536.0], [21.2, 78536.0], [21.3, 78536.0], [21.4, 78536.0], [21.5, 78536.0], [21.6, 78536.0], [21.7, 78536.0], [21.8, 78536.0], [21.9, 78536.0], [22.0, 80311.0], [22.1, 80311.0], [22.2, 80311.0], [22.3, 80311.0], [22.4, 80311.0], [22.5, 80311.0], [22.6, 80311.0], [22.7, 80311.0], [22.8, 80311.0], [22.9, 80311.0], [23.0, 80649.0], [23.1, 80649.0], [23.2, 80649.0], [23.3, 80649.0], [23.4, 80649.0], [23.5, 80649.0], [23.6, 80649.0], [23.7, 80649.0], [23.8, 80649.0], [23.9, 80649.0], [24.0, 81555.0], [24.1, 81555.0], [24.2, 81555.0], [24.3, 81555.0], [24.4, 81555.0], [24.5, 81555.0], [24.6, 81555.0], [24.7, 81555.0], [24.8, 81555.0], [24.9, 81555.0], [25.0, 81571.0], [25.1, 81571.0], [25.2, 81571.0], [25.3, 81571.0], [25.4, 81571.0], [25.5, 81571.0], [25.6, 81571.0], [25.7, 81571.0], [25.8, 81571.0], [25.9, 81571.0], [26.0, 81966.0], [26.1, 81966.0], [26.2, 81966.0], [26.3, 81966.0], [26.4, 81966.0], [26.5, 81966.0], [26.6, 81966.0], [26.7, 81966.0], [26.8, 81966.0], [26.9, 81966.0], [27.0, 82113.0], [27.1, 82113.0], [27.2, 82113.0], [27.3, 82113.0], [27.4, 82113.0], [27.5, 82113.0], [27.6, 82113.0], [27.7, 82113.0], [27.8, 82113.0], [27.9, 82113.0], [28.0, 82415.0], [28.1, 82415.0], [28.2, 82415.0], [28.3, 82415.0], [28.4, 82415.0], [28.5, 82415.0], [28.6, 82415.0], [28.7, 82415.0], [28.8, 82415.0], [28.9, 82415.0], [29.0, 84048.0], [29.1, 84048.0], [29.2, 84048.0], [29.3, 84048.0], [29.4, 84048.0], [29.5, 84048.0], [29.6, 84048.0], [29.7, 84048.0], [29.8, 84048.0], [29.9, 84048.0], [30.0, 84091.0], [30.1, 84091.0], [30.2, 84091.0], [30.3, 84091.0], [30.4, 84091.0], [30.5, 84091.0], [30.6, 84091.0], [30.7, 84091.0], [30.8, 84091.0], [30.9, 84091.0], [31.0, 84813.0], [31.1, 84813.0], [31.2, 84813.0], [31.3, 84813.0], [31.4, 84813.0], [31.5, 84813.0], [31.6, 84813.0], [31.7, 84813.0], [31.8, 84813.0], [31.9, 84813.0], [32.0, 86522.0], [32.1, 86522.0], [32.2, 86522.0], [32.3, 86522.0], [32.4, 86522.0], [32.5, 86522.0], [32.6, 86522.0], [32.7, 86522.0], [32.8, 86522.0], [32.9, 86522.0], [33.0, 86689.0], [33.1, 86689.0], [33.2, 86689.0], [33.3, 86689.0], [33.4, 86689.0], [33.5, 86689.0], [33.6, 86689.0], [33.7, 86689.0], [33.8, 86689.0], [33.9, 86689.0], [34.0, 88148.0], [34.1, 88148.0], [34.2, 88148.0], [34.3, 88148.0], [34.4, 88148.0], [34.5, 88148.0], [34.6, 88148.0], [34.7, 88148.0], [34.8, 88148.0], [34.9, 88148.0], [35.0, 88553.0], [35.1, 88553.0], [35.2, 88553.0], [35.3, 88553.0], [35.4, 88553.0], [35.5, 88553.0], [35.6, 88553.0], [35.7, 88553.0], [35.8, 88553.0], [35.9, 88553.0], [36.0, 88944.0], [36.1, 88944.0], [36.2, 88944.0], [36.3, 88944.0], [36.4, 88944.0], [36.5, 88944.0], [36.6, 88944.0], [36.7, 88944.0], [36.8, 88944.0], [36.9, 88944.0], [37.0, 89623.0], [37.1, 89623.0], [37.2, 89623.0], [37.3, 89623.0], [37.4, 89623.0], [37.5, 89623.0], [37.6, 89623.0], [37.7, 89623.0], [37.8, 89623.0], [37.9, 89623.0], [38.0, 89725.0], [38.1, 89725.0], [38.2, 89725.0], [38.3, 89725.0], [38.4, 89725.0], [38.5, 89725.0], [38.6, 89725.0], [38.7, 89725.0], [38.8, 89725.0], [38.9, 89725.0], [39.0, 89857.0], [39.1, 89857.0], [39.2, 89857.0], [39.3, 89857.0], [39.4, 89857.0], [39.5, 89857.0], [39.6, 89857.0], [39.7, 89857.0], [39.8, 89857.0], [39.9, 89857.0], [40.0, 89941.0], [40.1, 89941.0], [40.2, 89941.0], [40.3, 89941.0], [40.4, 89941.0], [40.5, 89941.0], [40.6, 89941.0], [40.7, 89941.0], [40.8, 89941.0], [40.9, 89941.0], [41.0, 90556.0], [41.1, 90556.0], [41.2, 90556.0], [41.3, 90556.0], [41.4, 90556.0], [41.5, 90556.0], [41.6, 90556.0], [41.7, 90556.0], [41.8, 90556.0], [41.9, 90556.0], [42.0, 92592.0], [42.1, 92592.0], [42.2, 92592.0], [42.3, 92592.0], [42.4, 92592.0], [42.5, 92592.0], [42.6, 92592.0], [42.7, 92592.0], [42.8, 92592.0], [42.9, 92592.0], [43.0, 92844.0], [43.1, 92844.0], [43.2, 92844.0], [43.3, 92844.0], [43.4, 92844.0], [43.5, 92844.0], [43.6, 92844.0], [43.7, 92844.0], [43.8, 92844.0], [43.9, 92844.0], [44.0, 93574.0], [44.1, 93574.0], [44.2, 93574.0], [44.3, 93574.0], [44.4, 93574.0], [44.5, 93574.0], [44.6, 93574.0], [44.7, 93574.0], [44.8, 93574.0], [44.9, 93574.0], [45.0, 95302.0], [45.1, 95302.0], [45.2, 95302.0], [45.3, 95302.0], [45.4, 95302.0], [45.5, 95302.0], [45.6, 95302.0], [45.7, 95302.0], [45.8, 95302.0], [45.9, 95302.0], [46.0, 95531.0], [46.1, 95531.0], [46.2, 95531.0], [46.3, 95531.0], [46.4, 95531.0], [46.5, 95531.0], [46.6, 95531.0], [46.7, 95531.0], [46.8, 95531.0], [46.9, 95531.0], [47.0, 95794.0], [47.1, 95794.0], [47.2, 95794.0], [47.3, 95794.0], [47.4, 95794.0], [47.5, 95794.0], [47.6, 95794.0], [47.7, 95794.0], [47.8, 95794.0], [47.9, 95794.0], [48.0, 95985.0], [48.1, 95985.0], [48.2, 95985.0], [48.3, 95985.0], [48.4, 95985.0], [48.5, 95985.0], [48.6, 95985.0], [48.7, 95985.0], [48.8, 95985.0], [48.9, 95985.0], [49.0, 96156.0], [49.1, 96156.0], [49.2, 96156.0], [49.3, 96156.0], [49.4, 96156.0], [49.5, 96156.0], [49.6, 96156.0], [49.7, 96156.0], [49.8, 96156.0], [49.9, 96156.0], [50.0, 96261.0], [50.1, 96261.0], [50.2, 96261.0], [50.3, 96261.0], [50.4, 96261.0], [50.5, 96261.0], [50.6, 96261.0], [50.7, 96261.0], [50.8, 96261.0], [50.9, 96261.0], [51.0, 96434.0], [51.1, 96434.0], [51.2, 96434.0], [51.3, 96434.0], [51.4, 96434.0], [51.5, 96434.0], [51.6, 96434.0], [51.7, 96434.0], [51.8, 96434.0], [51.9, 96434.0], [52.0, 97712.0], [52.1, 97712.0], [52.2, 97712.0], [52.3, 97712.0], [52.4, 97712.0], [52.5, 97712.0], [52.6, 97712.0], [52.7, 97712.0], [52.8, 97712.0], [52.9, 97712.0], [53.0, 97755.0], [53.1, 97755.0], [53.2, 97755.0], [53.3, 97755.0], [53.4, 97755.0], [53.5, 97755.0], [53.6, 97755.0], [53.7, 97755.0], [53.8, 97755.0], [53.9, 97755.0], [54.0, 99994.0], [54.1, 99994.0], [54.2, 99994.0], [54.3, 99994.0], [54.4, 99994.0], [54.5, 99994.0], [54.6, 99994.0], [54.7, 99994.0], [54.8, 99994.0], [54.9, 99994.0], [55.0, 101308.0], [55.1, 101308.0], [55.2, 101308.0], [55.3, 101308.0], [55.4, 101308.0], [55.5, 101308.0], [55.6, 101308.0], [55.7, 101308.0], [55.8, 101308.0], [55.9, 101308.0], [56.0, 101969.0], [56.1, 101969.0], [56.2, 101969.0], [56.3, 101969.0], [56.4, 101969.0], [56.5, 101969.0], [56.6, 101969.0], [56.7, 101969.0], [56.8, 101969.0], [56.9, 101969.0], [57.0, 101983.0], [57.1, 101983.0], [57.2, 101983.0], [57.3, 101983.0], [57.4, 101983.0], [57.5, 101983.0], [57.6, 101983.0], [57.7, 101983.0], [57.8, 101983.0], [57.9, 101983.0], [58.0, 102580.0], [58.1, 102580.0], [58.2, 102580.0], [58.3, 102580.0], [58.4, 102580.0], [58.5, 102580.0], [58.6, 102580.0], [58.7, 102580.0], [58.8, 102580.0], [58.9, 102580.0], [59.0, 102739.0], [59.1, 102739.0], [59.2, 102739.0], [59.3, 102739.0], [59.4, 102739.0], [59.5, 102739.0], [59.6, 102739.0], [59.7, 102739.0], [59.8, 102739.0], [59.9, 102739.0], [60.0, 102894.0], [60.1, 102894.0], [60.2, 102894.0], [60.3, 102894.0], [60.4, 102894.0], [60.5, 102894.0], [60.6, 102894.0], [60.7, 102894.0], [60.8, 102894.0], [60.9, 102894.0], [61.0, 103115.0], [61.1, 103115.0], [61.2, 103115.0], [61.3, 103115.0], [61.4, 103115.0], [61.5, 103115.0], [61.6, 103115.0], [61.7, 103115.0], [61.8, 103115.0], [61.9, 103115.0], [62.0, 104023.0], [62.1, 104023.0], [62.2, 104023.0], [62.3, 104023.0], [62.4, 104023.0], [62.5, 104023.0], [62.6, 104023.0], [62.7, 104023.0], [62.8, 104023.0], [62.9, 104023.0], [63.0, 104491.0], [63.1, 104491.0], [63.2, 104491.0], [63.3, 104491.0], [63.4, 104491.0], [63.5, 104491.0], [63.6, 104491.0], [63.7, 104491.0], [63.8, 104491.0], [63.9, 104491.0], [64.0, 105978.0], [64.1, 105978.0], [64.2, 105978.0], [64.3, 105978.0], [64.4, 105978.0], [64.5, 105978.0], [64.6, 105978.0], [64.7, 105978.0], [64.8, 105978.0], [64.9, 105978.0], [65.0, 107407.0], [65.1, 107407.0], [65.2, 107407.0], [65.3, 107407.0], [65.4, 107407.0], [65.5, 107407.0], [65.6, 107407.0], [65.7, 107407.0], [65.8, 107407.0], [65.9, 107407.0], [66.0, 108566.0], [66.1, 108566.0], [66.2, 108566.0], [66.3, 108566.0], [66.4, 108566.0], [66.5, 108566.0], [66.6, 108566.0], [66.7, 108566.0], [66.8, 108566.0], [66.9, 108566.0], [67.0, 108833.0], [67.1, 108833.0], [67.2, 108833.0], [67.3, 108833.0], [67.4, 108833.0], [67.5, 108833.0], [67.6, 108833.0], [67.7, 108833.0], [67.8, 108833.0], [67.9, 108833.0], [68.0, 109061.0], [68.1, 109061.0], [68.2, 109061.0], [68.3, 109061.0], [68.4, 109061.0], [68.5, 109061.0], [68.6, 109061.0], [68.7, 109061.0], [68.8, 109061.0], [68.9, 109061.0], [69.0, 109410.0], [69.1, 109410.0], [69.2, 109410.0], [69.3, 109410.0], [69.4, 109410.0], [69.5, 109410.0], [69.6, 109410.0], [69.7, 109410.0], [69.8, 109410.0], [69.9, 109410.0], [70.0, 109860.0], [70.1, 109860.0], [70.2, 109860.0], [70.3, 109860.0], [70.4, 109860.0], [70.5, 109860.0], [70.6, 109860.0], [70.7, 109860.0], [70.8, 109860.0], [70.9, 109860.0], [71.0, 110290.0], [71.1, 110290.0], [71.2, 110290.0], [71.3, 110290.0], [71.4, 110290.0], [71.5, 110290.0], [71.6, 110290.0], [71.7, 110290.0], [71.8, 110290.0], [71.9, 110290.0], [72.0, 110631.0], [72.1, 110631.0], [72.2, 110631.0], [72.3, 110631.0], [72.4, 110631.0], [72.5, 110631.0], [72.6, 110631.0], [72.7, 110631.0], [72.8, 110631.0], [72.9, 110631.0], [73.0, 110836.0], [73.1, 110836.0], [73.2, 110836.0], [73.3, 110836.0], [73.4, 110836.0], [73.5, 110836.0], [73.6, 110836.0], [73.7, 110836.0], [73.8, 110836.0], [73.9, 110836.0], [74.0, 111488.0], [74.1, 111488.0], [74.2, 111488.0], [74.3, 111488.0], [74.4, 111488.0], [74.5, 111488.0], [74.6, 111488.0], [74.7, 111488.0], [74.8, 111488.0], [74.9, 111488.0], [75.0, 113175.0], [75.1, 113175.0], [75.2, 113175.0], [75.3, 113175.0], [75.4, 113175.0], [75.5, 113175.0], [75.6, 113175.0], [75.7, 113175.0], [75.8, 113175.0], [75.9, 113175.0], [76.0, 113188.0], [76.1, 113188.0], [76.2, 113188.0], [76.3, 113188.0], [76.4, 113188.0], [76.5, 113188.0], [76.6, 113188.0], [76.7, 113188.0], [76.8, 113188.0], [76.9, 113188.0], [77.0, 113896.0], [77.1, 113896.0], [77.2, 113896.0], [77.3, 113896.0], [77.4, 113896.0], [77.5, 113896.0], [77.6, 113896.0], [77.7, 113896.0], [77.8, 113896.0], [77.9, 113896.0], [78.0, 114406.0], [78.1, 114406.0], [78.2, 114406.0], [78.3, 114406.0], [78.4, 114406.0], [78.5, 114406.0], [78.6, 114406.0], [78.7, 114406.0], [78.8, 114406.0], [78.9, 114406.0], [79.0, 115796.0], [79.1, 115796.0], [79.2, 115796.0], [79.3, 115796.0], [79.4, 115796.0], [79.5, 115796.0], [79.6, 115796.0], [79.7, 115796.0], [79.8, 115796.0], [79.9, 115796.0], [80.0, 116293.0], [80.1, 116293.0], [80.2, 116293.0], [80.3, 116293.0], [80.4, 116293.0], [80.5, 116293.0], [80.6, 116293.0], [80.7, 116293.0], [80.8, 116293.0], [80.9, 116293.0], [81.0, 116328.0], [81.1, 116328.0], [81.2, 116328.0], [81.3, 116328.0], [81.4, 116328.0], [81.5, 116328.0], [81.6, 116328.0], [81.7, 116328.0], [81.8, 116328.0], [81.9, 116328.0], [82.0, 116734.0], [82.1, 116734.0], [82.2, 116734.0], [82.3, 116734.0], [82.4, 116734.0], [82.5, 116734.0], [82.6, 116734.0], [82.7, 116734.0], [82.8, 116734.0], [82.9, 116734.0], [83.0, 116854.0], [83.1, 116854.0], [83.2, 116854.0], [83.3, 116854.0], [83.4, 116854.0], [83.5, 116854.0], [83.6, 116854.0], [83.7, 116854.0], [83.8, 116854.0], [83.9, 116854.0], [84.0, 117606.0], [84.1, 117606.0], [84.2, 117606.0], [84.3, 117606.0], [84.4, 117606.0], [84.5, 117606.0], [84.6, 117606.0], [84.7, 117606.0], [84.8, 117606.0], [84.9, 117606.0], [85.0, 119062.0], [85.1, 119062.0], [85.2, 119062.0], [85.3, 119062.0], [85.4, 119062.0], [85.5, 119062.0], [85.6, 119062.0], [85.7, 119062.0], [85.8, 119062.0], [85.9, 119062.0], [86.0, 119333.0], [86.1, 119333.0], [86.2, 119333.0], [86.3, 119333.0], [86.4, 119333.0], [86.5, 119333.0], [86.6, 119333.0], [86.7, 119333.0], [86.8, 119333.0], [86.9, 119333.0], [87.0, 120687.0], [87.1, 120687.0], [87.2, 120687.0], [87.3, 120687.0], [87.4, 120687.0], [87.5, 120687.0], [87.6, 120687.0], [87.7, 120687.0], [87.8, 120687.0], [87.9, 120687.0], [88.0, 122372.0], [88.1, 122372.0], [88.2, 122372.0], [88.3, 122372.0], [88.4, 122372.0], [88.5, 122372.0], [88.6, 122372.0], [88.7, 122372.0], [88.8, 122372.0], [88.9, 122372.0], [89.0, 122475.0], [89.1, 122475.0], [89.2, 122475.0], [89.3, 122475.0], [89.4, 122475.0], [89.5, 122475.0], [89.6, 122475.0], [89.7, 122475.0], [89.8, 122475.0], [89.9, 122475.0], [90.0, 122513.0], [90.1, 122513.0], [90.2, 122513.0], [90.3, 122513.0], [90.4, 122513.0], [90.5, 122513.0], [90.6, 122513.0], [90.7, 122513.0], [90.8, 122513.0], [90.9, 122513.0], [91.0, 122854.0], [91.1, 122854.0], [91.2, 122854.0], [91.3, 122854.0], [91.4, 122854.0], [91.5, 122854.0], [91.6, 122854.0], [91.7, 122854.0], [91.8, 122854.0], [91.9, 122854.0], [92.0, 123037.0], [92.1, 123037.0], [92.2, 123037.0], [92.3, 123037.0], [92.4, 123037.0], [92.5, 123037.0], [92.6, 123037.0], [92.7, 123037.0], [92.8, 123037.0], [92.9, 123037.0], [93.0, 123042.0], [93.1, 123042.0], [93.2, 123042.0], [93.3, 123042.0], [93.4, 123042.0], [93.5, 123042.0], [93.6, 123042.0], [93.7, 123042.0], [93.8, 123042.0], [93.9, 123042.0], [94.0, 123066.0], [94.1, 123066.0], [94.2, 123066.0], [94.3, 123066.0], [94.4, 123066.0], [94.5, 123066.0], [94.6, 123066.0], [94.7, 123066.0], [94.8, 123066.0], [94.9, 123066.0], [95.0, 124087.0], [95.1, 124087.0], [95.2, 124087.0], [95.3, 124087.0], [95.4, 124087.0], [95.5, 124087.0], [95.6, 124087.0], [95.7, 124087.0], [95.8, 124087.0], [95.9, 124087.0], [96.0, 124847.0], [96.1, 124847.0], [96.2, 124847.0], [96.3, 124847.0], [96.4, 124847.0], [96.5, 124847.0], [96.6, 124847.0], [96.7, 124847.0], [96.8, 124847.0], [96.9, 124847.0], [97.0, 125282.0], [97.1, 125282.0], [97.2, 125282.0], [97.3, 125282.0], [97.4, 125282.0], [97.5, 125282.0], [97.6, 125282.0], [97.7, 125282.0], [97.8, 125282.0], [97.9, 125282.0], [98.0, 125496.0], [98.1, 125496.0], [98.2, 125496.0], [98.3, 125496.0], [98.4, 125496.0], [98.5, 125496.0], [98.6, 125496.0], [98.7, 125496.0], [98.8, 125496.0], [98.9, 125496.0], [99.0, 125582.0], [99.1, 125582.0], [99.2, 125582.0], [99.3, 125582.0], [99.4, 125582.0], [99.5, 125582.0], [99.6, 125582.0], [99.7, 125582.0], [99.8, 125582.0], [99.9, 125582.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[0.0, 6986.0], [0.1, 6986.0], [0.2, 6986.0], [0.3, 6986.0], [0.4, 6986.0], [0.5, 6986.0], [0.6, 6986.0], [0.7, 6986.0], [0.8, 6986.0], [0.9, 6986.0], [1.0, 12478.0], [1.1, 12478.0], [1.2, 12478.0], [1.3, 12478.0], [1.4, 12478.0], [1.5, 12478.0], [1.6, 12478.0], [1.7, 12478.0], [1.8, 12478.0], [1.9, 12478.0], [2.0, 12790.0], [2.1, 12790.0], [2.2, 12790.0], [2.3, 12790.0], [2.4, 12790.0], [2.5, 12790.0], [2.6, 12790.0], [2.7, 12790.0], [2.8, 12790.0], [2.9, 12790.0], [3.0, 13038.0], [3.1, 13038.0], [3.2, 13038.0], [3.3, 13038.0], [3.4, 13038.0], [3.5, 13038.0], [3.6, 13038.0], [3.7, 13038.0], [3.8, 13038.0], [3.9, 13038.0], [4.0, 14507.0], [4.1, 14507.0], [4.2, 14507.0], [4.3, 14507.0], [4.4, 14507.0], [4.5, 14507.0], [4.6, 14507.0], [4.7, 14507.0], [4.8, 14507.0], [4.9, 14507.0], [5.0, 15176.0], [5.1, 15176.0], [5.2, 15176.0], [5.3, 15176.0], [5.4, 15176.0], [5.5, 15176.0], [5.6, 15176.0], [5.7, 15176.0], [5.8, 15176.0], [5.9, 15176.0], [6.0, 15464.0], [6.1, 15464.0], [6.2, 15464.0], [6.3, 15464.0], [6.4, 15464.0], [6.5, 15464.0], [6.6, 15464.0], [6.7, 15464.0], [6.8, 15464.0], [6.9, 15464.0], [7.0, 15498.0], [7.1, 15498.0], [7.2, 15498.0], [7.3, 15498.0], [7.4, 15498.0], [7.5, 15498.0], [7.6, 15498.0], [7.7, 15498.0], [7.8, 15498.0], [7.9, 15498.0], [8.0, 15613.0], [8.1, 15613.0], [8.2, 15613.0], [8.3, 15613.0], [8.4, 15613.0], [8.5, 15613.0], [8.6, 15613.0], [8.7, 15613.0], [8.8, 15613.0], [8.9, 15613.0], [9.0, 15930.0], [9.1, 15930.0], [9.2, 15930.0], [9.3, 15930.0], [9.4, 15930.0], [9.5, 15930.0], [9.6, 15930.0], [9.7, 15930.0], [9.8, 15930.0], [9.9, 15930.0], [10.0, 15945.0], [10.1, 15945.0], [10.2, 15945.0], [10.3, 15945.0], [10.4, 15945.0], [10.5, 15945.0], [10.6, 15945.0], [10.7, 15945.0], [10.8, 15945.0], [10.9, 15945.0], [11.0, 16009.0], [11.1, 16009.0], [11.2, 16009.0], [11.3, 16009.0], [11.4, 16009.0], [11.5, 16009.0], [11.6, 16009.0], [11.7, 16009.0], [11.8, 16009.0], [11.9, 16009.0], [12.0, 16015.0], [12.1, 16015.0], [12.2, 16015.0], [12.3, 16015.0], [12.4, 16015.0], [12.5, 16015.0], [12.6, 16015.0], [12.7, 16015.0], [12.8, 16015.0], [12.9, 16015.0], [13.0, 16031.0], [13.1, 16031.0], [13.2, 16031.0], [13.3, 16031.0], [13.4, 16031.0], [13.5, 16031.0], [13.6, 16031.0], [13.7, 16031.0], [13.8, 16031.0], [13.9, 16031.0], [14.0, 16159.0], [14.1, 16159.0], [14.2, 16159.0], [14.3, 16159.0], [14.4, 16159.0], [14.5, 16159.0], [14.6, 16159.0], [14.7, 16159.0], [14.8, 16159.0], [14.9, 16159.0], [15.0, 16875.0], [15.1, 16875.0], [15.2, 16875.0], [15.3, 16875.0], [15.4, 16875.0], [15.5, 16875.0], [15.6, 16875.0], [15.7, 16875.0], [15.8, 16875.0], [15.9, 16875.0], [16.0, 16996.0], [16.1, 16996.0], [16.2, 16996.0], [16.3, 16996.0], [16.4, 16996.0], [16.5, 16996.0], [16.6, 16996.0], [16.7, 16996.0], [16.8, 16996.0], [16.9, 16996.0], [17.0, 17063.0], [17.1, 17063.0], [17.2, 17063.0], [17.3, 17063.0], [17.4, 17063.0], [17.5, 17063.0], [17.6, 17063.0], [17.7, 17063.0], [17.8, 17063.0], [17.9, 17063.0], [18.0, 17236.0], [18.1, 17236.0], [18.2, 17236.0], [18.3, 17236.0], [18.4, 17236.0], [18.5, 17236.0], [18.6, 17236.0], [18.7, 17236.0], [18.8, 17236.0], [18.9, 17236.0], [19.0, 17379.0], [19.1, 17379.0], [19.2, 17379.0], [19.3, 17379.0], [19.4, 17379.0], [19.5, 17379.0], [19.6, 17379.0], [19.7, 17379.0], [19.8, 17379.0], [19.9, 17379.0], [20.0, 17385.0], [20.1, 17385.0], [20.2, 17385.0], [20.3, 17385.0], [20.4, 17385.0], [20.5, 17385.0], [20.6, 17385.0], [20.7, 17385.0], [20.8, 17385.0], [20.9, 17385.0], [21.0, 17420.0], [21.1, 17420.0], [21.2, 17420.0], [21.3, 17420.0], [21.4, 17420.0], [21.5, 17420.0], [21.6, 17420.0], [21.7, 17420.0], [21.8, 17420.0], [21.9, 17420.0], [22.0, 17471.0], [22.1, 17471.0], [22.2, 17471.0], [22.3, 17471.0], [22.4, 17471.0], [22.5, 17471.0], [22.6, 17471.0], [22.7, 17471.0], [22.8, 17471.0], [22.9, 17471.0], [23.0, 17472.0], [23.1, 17472.0], [23.2, 17472.0], [23.3, 17472.0], [23.4, 17472.0], [23.5, 17472.0], [23.6, 17472.0], [23.7, 17472.0], [23.8, 17472.0], [23.9, 17472.0], [24.0, 17503.0], [24.1, 17503.0], [24.2, 17503.0], [24.3, 17503.0], [24.4, 17503.0], [24.5, 17503.0], [24.6, 17503.0], [24.7, 17503.0], [24.8, 17503.0], [24.9, 17503.0], [25.0, 17506.0], [25.1, 17506.0], [25.2, 17506.0], [25.3, 17506.0], [25.4, 17506.0], [25.5, 17506.0], [25.6, 17506.0], [25.7, 17506.0], [25.8, 17506.0], [25.9, 17506.0], [26.0, 17512.0], [26.1, 17512.0], [26.2, 17512.0], [26.3, 17512.0], [26.4, 17512.0], [26.5, 17512.0], [26.6, 17512.0], [26.7, 17512.0], [26.8, 17512.0], [26.9, 17512.0], [27.0, 17543.0], [27.1, 17543.0], [27.2, 17543.0], [27.3, 17543.0], [27.4, 17543.0], [27.5, 17543.0], [27.6, 17543.0], [27.7, 17543.0], [27.8, 17543.0], [27.9, 17543.0], [28.0, 17566.0], [28.1, 17566.0], [28.2, 17566.0], [28.3, 17566.0], [28.4, 17566.0], [28.5, 17566.0], [28.6, 17566.0], [28.7, 17566.0], [28.8, 17566.0], [28.9, 17566.0], [29.0, 17568.0], [29.1, 17568.0], [29.2, 17568.0], [29.3, 17568.0], [29.4, 17568.0], [29.5, 17568.0], [29.6, 17568.0], [29.7, 17568.0], [29.8, 17568.0], [29.9, 17568.0], [30.0, 17582.0], [30.1, 17582.0], [30.2, 17582.0], [30.3, 17582.0], [30.4, 17582.0], [30.5, 17582.0], [30.6, 17582.0], [30.7, 17582.0], [30.8, 17582.0], [30.9, 17582.0], [31.0, 17591.0], [31.1, 17591.0], [31.2, 17591.0], [31.3, 17591.0], [31.4, 17591.0], [31.5, 17591.0], [31.6, 17591.0], [31.7, 17591.0], [31.8, 17591.0], [31.9, 17591.0], [32.0, 17596.0], [32.1, 17596.0], [32.2, 17596.0], [32.3, 17596.0], [32.4, 17596.0], [32.5, 17596.0], [32.6, 17596.0], [32.7, 17596.0], [32.8, 17596.0], [32.9, 17596.0], [33.0, 17599.0], [33.1, 17599.0], [33.2, 17599.0], [33.3, 17599.0], [33.4, 17599.0], [33.5, 17599.0], [33.6, 17599.0], [33.7, 17599.0], [33.8, 17599.0], [33.9, 17599.0], [34.0, 17610.0], [34.1, 17610.0], [34.2, 17610.0], [34.3, 17610.0], [34.4, 17610.0], [34.5, 17610.0], [34.6, 17610.0], [34.7, 17610.0], [34.8, 17610.0], [34.9, 17610.0], [35.0, 17615.0], [35.1, 17615.0], [35.2, 17615.0], [35.3, 17615.0], [35.4, 17615.0], [35.5, 17615.0], [35.6, 17615.0], [35.7, 17615.0], [35.8, 17615.0], [35.9, 17615.0], [36.0, 17622.0], [36.1, 17622.0], [36.2, 17622.0], [36.3, 17622.0], [36.4, 17622.0], [36.5, 17622.0], [36.6, 17622.0], [36.7, 17622.0], [36.8, 17622.0], [36.9, 17622.0], [37.0, 17626.0], [37.1, 17626.0], [37.2, 17626.0], [37.3, 17626.0], [37.4, 17626.0], [37.5, 17626.0], [37.6, 17626.0], [37.7, 17626.0], [37.8, 17626.0], [37.9, 17626.0], [38.0, 17633.0], [38.1, 17633.0], [38.2, 17633.0], [38.3, 17633.0], [38.4, 17633.0], [38.5, 17633.0], [38.6, 17633.0], [38.7, 17633.0], [38.8, 17633.0], [38.9, 17633.0], [39.0, 17643.0], [39.1, 17643.0], [39.2, 17643.0], [39.3, 17643.0], [39.4, 17643.0], [39.5, 17643.0], [39.6, 17643.0], [39.7, 17643.0], [39.8, 17643.0], [39.9, 17643.0], [40.0, 17649.0], [40.1, 17649.0], [40.2, 17649.0], [40.3, 17649.0], [40.4, 17649.0], [40.5, 17649.0], [40.6, 17649.0], [40.7, 17649.0], [40.8, 17649.0], [40.9, 17649.0], [41.0, 17681.0], [41.1, 17681.0], [41.2, 17681.0], [41.3, 17681.0], [41.4, 17681.0], [41.5, 17681.0], [41.6, 17681.0], [41.7, 17681.0], [41.8, 17681.0], [41.9, 17681.0], [42.0, 17712.0], [42.1, 17712.0], [42.2, 17712.0], [42.3, 17712.0], [42.4, 17712.0], [42.5, 17712.0], [42.6, 17712.0], [42.7, 17712.0], [42.8, 17712.0], [42.9, 17712.0], [43.0, 17717.0], [43.1, 17717.0], [43.2, 17717.0], [43.3, 17717.0], [43.4, 17717.0], [43.5, 17717.0], [43.6, 17717.0], [43.7, 17717.0], [43.8, 17717.0], [43.9, 17717.0], [44.0, 17735.0], [44.1, 17735.0], [44.2, 17735.0], [44.3, 17735.0], [44.4, 17735.0], [44.5, 17735.0], [44.6, 17735.0], [44.7, 17735.0], [44.8, 17735.0], [44.9, 17735.0], [45.0, 17760.0], [45.1, 17760.0], [45.2, 17760.0], [45.3, 17760.0], [45.4, 17760.0], [45.5, 17760.0], [45.6, 17760.0], [45.7, 17760.0], [45.8, 17760.0], [45.9, 17760.0], [46.0, 17760.0], [46.1, 17760.0], [46.2, 17760.0], [46.3, 17760.0], [46.4, 17760.0], [46.5, 17760.0], [46.6, 17760.0], [46.7, 17760.0], [46.8, 17760.0], [46.9, 17760.0], [47.0, 17765.0], [47.1, 17765.0], [47.2, 17765.0], [47.3, 17765.0], [47.4, 17765.0], [47.5, 17765.0], [47.6, 17765.0], [47.7, 17765.0], [47.8, 17765.0], [47.9, 17765.0], [48.0, 17769.0], [48.1, 17769.0], [48.2, 17769.0], [48.3, 17769.0], [48.4, 17769.0], [48.5, 17769.0], [48.6, 17769.0], [48.7, 17769.0], [48.8, 17769.0], [48.9, 17769.0], [49.0, 17792.0], [49.1, 17792.0], [49.2, 17792.0], [49.3, 17792.0], [49.4, 17792.0], [49.5, 17792.0], [49.6, 17792.0], [49.7, 17792.0], [49.8, 17792.0], [49.9, 17792.0], [50.0, 17797.0], [50.1, 17797.0], [50.2, 17797.0], [50.3, 17797.0], [50.4, 17797.0], [50.5, 17797.0], [50.6, 17797.0], [50.7, 17797.0], [50.8, 17797.0], [50.9, 17797.0], [51.0, 17803.0], [51.1, 17803.0], [51.2, 17803.0], [51.3, 17803.0], [51.4, 17803.0], [51.5, 17803.0], [51.6, 17803.0], [51.7, 17803.0], [51.8, 17803.0], [51.9, 17803.0], [52.0, 17805.0], [52.1, 17805.0], [52.2, 17805.0], [52.3, 17805.0], [52.4, 17805.0], [52.5, 17805.0], [52.6, 17805.0], [52.7, 17805.0], [52.8, 17805.0], [52.9, 17805.0], [53.0, 17810.0], [53.1, 17810.0], [53.2, 17810.0], [53.3, 17810.0], [53.4, 17810.0], [53.5, 17810.0], [53.6, 17810.0], [53.7, 17810.0], [53.8, 17810.0], [53.9, 17810.0], [54.0, 17815.0], [54.1, 17815.0], [54.2, 17815.0], [54.3, 17815.0], [54.4, 17815.0], [54.5, 17815.0], [54.6, 17815.0], [54.7, 17815.0], [54.8, 17815.0], [54.9, 17815.0], [55.0, 17817.0], [55.1, 17817.0], [55.2, 17817.0], [55.3, 17817.0], [55.4, 17817.0], [55.5, 17817.0], [55.6, 17817.0], [55.7, 17817.0], [55.8, 17817.0], [55.9, 17817.0], [56.0, 17830.0], [56.1, 17830.0], [56.2, 17830.0], [56.3, 17830.0], [56.4, 17830.0], [56.5, 17830.0], [56.6, 17830.0], [56.7, 17830.0], [56.8, 17830.0], [56.9, 17830.0], [57.0, 17830.0], [57.1, 17830.0], [57.2, 17830.0], [57.3, 17830.0], [57.4, 17830.0], [57.5, 17830.0], [57.6, 17830.0], [57.7, 17830.0], [57.8, 17830.0], [57.9, 17830.0], [58.0, 17844.0], [58.1, 17844.0], [58.2, 17844.0], [58.3, 17844.0], [58.4, 17844.0], [58.5, 17844.0], [58.6, 17844.0], [58.7, 17844.0], [58.8, 17844.0], [58.9, 17844.0], [59.0, 17845.0], [59.1, 17845.0], [59.2, 17845.0], [59.3, 17845.0], [59.4, 17845.0], [59.5, 17845.0], [59.6, 17845.0], [59.7, 17845.0], [59.8, 17845.0], [59.9, 17845.0], [60.0, 17845.0], [60.1, 17845.0], [60.2, 17845.0], [60.3, 17845.0], [60.4, 17845.0], [60.5, 17845.0], [60.6, 17845.0], [60.7, 17845.0], [60.8, 17845.0], [60.9, 17845.0], [61.0, 17850.0], [61.1, 17850.0], [61.2, 17850.0], [61.3, 17850.0], [61.4, 17850.0], [61.5, 17850.0], [61.6, 17850.0], [61.7, 17850.0], [61.8, 17850.0], [61.9, 17850.0], [62.0, 17862.0], [62.1, 17862.0], [62.2, 17862.0], [62.3, 17862.0], [62.4, 17862.0], [62.5, 17862.0], [62.6, 17862.0], [62.7, 17862.0], [62.8, 17862.0], [62.9, 17862.0], [63.0, 17864.0], [63.1, 17864.0], [63.2, 17864.0], [63.3, 17864.0], [63.4, 17864.0], [63.5, 17864.0], [63.6, 17864.0], [63.7, 17864.0], [63.8, 17864.0], [63.9, 17864.0], [64.0, 17872.0], [64.1, 17872.0], [64.2, 17872.0], [64.3, 17872.0], [64.4, 17872.0], [64.5, 17872.0], [64.6, 17872.0], [64.7, 17872.0], [64.8, 17872.0], [64.9, 17872.0], [65.0, 17878.0], [65.1, 17878.0], [65.2, 17878.0], [65.3, 17878.0], [65.4, 17878.0], [65.5, 17878.0], [65.6, 17878.0], [65.7, 17878.0], [65.8, 17878.0], [65.9, 17878.0], [66.0, 17879.0], [66.1, 17879.0], [66.2, 17879.0], [66.3, 17879.0], [66.4, 17879.0], [66.5, 17879.0], [66.6, 17879.0], [66.7, 17879.0], [66.8, 17879.0], [66.9, 17879.0], [67.0, 17880.0], [67.1, 17880.0], [67.2, 17880.0], [67.3, 17880.0], [67.4, 17880.0], [67.5, 17880.0], [67.6, 17880.0], [67.7, 17880.0], [67.8, 17880.0], [67.9, 17880.0], [68.0, 17899.0], [68.1, 17899.0], [68.2, 17899.0], [68.3, 17899.0], [68.4, 17899.0], [68.5, 17899.0], [68.6, 17899.0], [68.7, 17899.0], [68.8, 17899.0], [68.9, 17899.0], [69.0, 17903.0], [69.1, 17903.0], [69.2, 17903.0], [69.3, 17903.0], [69.4, 17903.0], [69.5, 17903.0], [69.6, 17903.0], [69.7, 17903.0], [69.8, 17903.0], [69.9, 17903.0], [70.0, 17905.0], [70.1, 17905.0], [70.2, 17905.0], [70.3, 17905.0], [70.4, 17905.0], [70.5, 17905.0], [70.6, 17905.0], [70.7, 17905.0], [70.8, 17905.0], [70.9, 17905.0], [71.0, 17906.0], [71.1, 17906.0], [71.2, 17906.0], [71.3, 17906.0], [71.4, 17906.0], [71.5, 17906.0], [71.6, 17906.0], [71.7, 17906.0], [71.8, 17906.0], [71.9, 17906.0], [72.0, 17908.0], [72.1, 17908.0], [72.2, 17908.0], [72.3, 17908.0], [72.4, 17908.0], [72.5, 17908.0], [72.6, 17908.0], [72.7, 17908.0], [72.8, 17908.0], [72.9, 17908.0], [73.0, 17921.0], [73.1, 17921.0], [73.2, 17921.0], [73.3, 17921.0], [73.4, 17921.0], [73.5, 17921.0], [73.6, 17921.0], [73.7, 17921.0], [73.8, 17921.0], [73.9, 17921.0], [74.0, 17931.0], [74.1, 17931.0], [74.2, 17931.0], [74.3, 17931.0], [74.4, 17931.0], [74.5, 17931.0], [74.6, 17931.0], [74.7, 17931.0], [74.8, 17931.0], [74.9, 17931.0], [75.0, 17941.0], [75.1, 17941.0], [75.2, 17941.0], [75.3, 17941.0], [75.4, 17941.0], [75.5, 17941.0], [75.6, 17941.0], [75.7, 17941.0], [75.8, 17941.0], [75.9, 17941.0], [76.0, 17955.0], [76.1, 17955.0], [76.2, 17955.0], [76.3, 17955.0], [76.4, 17955.0], [76.5, 17955.0], [76.6, 17955.0], [76.7, 17955.0], [76.8, 17955.0], [76.9, 17955.0], [77.0, 17956.0], [77.1, 17956.0], [77.2, 17956.0], [77.3, 17956.0], [77.4, 17956.0], [77.5, 17956.0], [77.6, 17956.0], [77.7, 17956.0], [77.8, 17956.0], [77.9, 17956.0], [78.0, 17959.0], [78.1, 17959.0], [78.2, 17959.0], [78.3, 17959.0], [78.4, 17959.0], [78.5, 17959.0], [78.6, 17959.0], [78.7, 17959.0], [78.8, 17959.0], [78.9, 17959.0], [79.0, 17959.0], [79.1, 17959.0], [79.2, 17959.0], [79.3, 17959.0], [79.4, 17959.0], [79.5, 17959.0], [79.6, 17959.0], [79.7, 17959.0], [79.8, 17959.0], [79.9, 17959.0], [80.0, 17965.0], [80.1, 17965.0], [80.2, 17965.0], [80.3, 17965.0], [80.4, 17965.0], [80.5, 17965.0], [80.6, 17965.0], [80.7, 17965.0], [80.8, 17965.0], [80.9, 17965.0], [81.0, 17974.0], [81.1, 17974.0], [81.2, 17974.0], [81.3, 17974.0], [81.4, 17974.0], [81.5, 17974.0], [81.6, 17974.0], [81.7, 17974.0], [81.8, 17974.0], [81.9, 17974.0], [82.0, 17984.0], [82.1, 17984.0], [82.2, 17984.0], [82.3, 17984.0], [82.4, 17984.0], [82.5, 17984.0], [82.6, 17984.0], [82.7, 17984.0], [82.8, 17984.0], [82.9, 17984.0], [83.0, 18007.0], [83.1, 18007.0], [83.2, 18007.0], [83.3, 18007.0], [83.4, 18007.0], [83.5, 18007.0], [83.6, 18007.0], [83.7, 18007.0], [83.8, 18007.0], [83.9, 18007.0], [84.0, 18028.0], [84.1, 18028.0], [84.2, 18028.0], [84.3, 18028.0], [84.4, 18028.0], [84.5, 18028.0], [84.6, 18028.0], [84.7, 18028.0], [84.8, 18028.0], [84.9, 18028.0], [85.0, 18041.0], [85.1, 18041.0], [85.2, 18041.0], [85.3, 18041.0], [85.4, 18041.0], [85.5, 18041.0], [85.6, 18041.0], [85.7, 18041.0], [85.8, 18041.0], [85.9, 18041.0], [86.0, 18105.0], [86.1, 18105.0], [86.2, 18105.0], [86.3, 18105.0], [86.4, 18105.0], [86.5, 18105.0], [86.6, 18105.0], [86.7, 18105.0], [86.8, 18105.0], [86.9, 18105.0], [87.0, 18142.0], [87.1, 18142.0], [87.2, 18142.0], [87.3, 18142.0], [87.4, 18142.0], [87.5, 18142.0], [87.6, 18142.0], [87.7, 18142.0], [87.8, 18142.0], [87.9, 18142.0], [88.0, 18227.0], [88.1, 18227.0], [88.2, 18227.0], [88.3, 18227.0], [88.4, 18227.0], [88.5, 18227.0], [88.6, 18227.0], [88.7, 18227.0], [88.8, 18227.0], [88.9, 18227.0], [89.0, 18278.0], [89.1, 18278.0], [89.2, 18278.0], [89.3, 18278.0], [89.4, 18278.0], [89.5, 18278.0], [89.6, 18278.0], [89.7, 18278.0], [89.8, 18278.0], [89.9, 18278.0], [90.0, 18317.0], [90.1, 18317.0], [90.2, 18317.0], [90.3, 18317.0], [90.4, 18317.0], [90.5, 18317.0], [90.6, 18317.0], [90.7, 18317.0], [90.8, 18317.0], [90.9, 18317.0], [91.0, 18352.0], [91.1, 18352.0], [91.2, 18352.0], [91.3, 18352.0], [91.4, 18352.0], [91.5, 18352.0], [91.6, 18352.0], [91.7, 18352.0], [91.8, 18352.0], [91.9, 18352.0], [92.0, 18399.0], [92.1, 18399.0], [92.2, 18399.0], [92.3, 18399.0], [92.4, 18399.0], [92.5, 18399.0], [92.6, 18399.0], [92.7, 18399.0], [92.8, 18399.0], [92.9, 18399.0], [93.0, 18644.0], [93.1, 18644.0], [93.2, 18644.0], [93.3, 18644.0], [93.4, 18644.0], [93.5, 18644.0], [93.6, 18644.0], [93.7, 18644.0], [93.8, 18644.0], [93.9, 18644.0], [94.0, 18657.0], [94.1, 18657.0], [94.2, 18657.0], [94.3, 18657.0], [94.4, 18657.0], [94.5, 18657.0], [94.6, 18657.0], [94.7, 18657.0], [94.8, 18657.0], [94.9, 18657.0], [95.0, 18660.0], [95.1, 18660.0], [95.2, 18660.0], [95.3, 18660.0], [95.4, 18660.0], [95.5, 18660.0], [95.6, 18660.0], [95.7, 18660.0], [95.8, 18660.0], [95.9, 18660.0], [96.0, 18731.0], [96.1, 18731.0], [96.2, 18731.0], [96.3, 18731.0], [96.4, 18731.0], [96.5, 18731.0], [96.6, 18731.0], [96.7, 18731.0], [96.8, 18731.0], [96.9, 18731.0], [97.0, 18761.0], [97.1, 18761.0], [97.2, 18761.0], [97.3, 18761.0], [97.4, 18761.0], [97.5, 18761.0], [97.6, 18761.0], [97.7, 18761.0], [97.8, 18761.0], [97.9, 18761.0], [98.0, 18810.0], [98.1, 18810.0], [98.2, 18810.0], [98.3, 18810.0], [98.4, 18810.0], [98.5, 18810.0], [98.6, 18810.0], [98.7, 18810.0], [98.8, 18810.0], [98.9, 18810.0], [99.0, 19012.0], [99.1, 19012.0], [99.2, 19012.0], [99.3, 19012.0], [99.4, 19012.0], [99.5, 19012.0], [99.6, 19012.0], [99.7, 19012.0], [99.8, 19012.0], [99.9, 19012.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6200.0, "maxY": 18.0, "series": [{"data": [[66100.0, 1.0], [68700.0, 1.0], [70100.0, 1.0], [75900.0, 1.0], [76100.0, 1.0], [6200.0, 3.0], [6500.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7900.0, 1.0], [8000.0, 3.0], [9500.0, 1.0], [10500.0, 1.0], [10800.0, 1.0], [12300.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [13600.0, 1.0], [14300.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [17500.0, 1.0], [18400.0, 1.0], [20000.0, 1.0], [21100.0, 1.0], [21200.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [24000.0, 1.0], [24200.0, 1.0], [25300.0, 1.0], [25800.0, 1.0], [26100.0, 1.0], [26400.0, 1.0], [27600.0, 1.0], [27700.0, 1.0], [28200.0, 1.0], [29800.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [32300.0, 1.0], [33200.0, 1.0], [33300.0, 1.0], [33700.0, 1.0], [34200.0, 1.0], [36500.0, 1.0], [37300.0, 1.0], [38400.0, 1.0], [38600.0, 1.0], [39400.0, 1.0], [40700.0, 1.0], [41000.0, 1.0], [41400.0, 1.0], [43100.0, 2.0], [43600.0, 1.0], [44300.0, 1.0], [44700.0, 1.0], [46200.0, 1.0], [46600.0, 1.0], [46800.0, 1.0], [47500.0, 1.0], [48200.0, 1.0], [48600.0, 1.0], [49100.0, 1.0], [49300.0, 1.0], [52300.0, 1.0], [52700.0, 1.0], [53100.0, 1.0], [54200.0, 1.0], [54500.0, 1.0], [55400.0, 1.0], [55500.0, 1.0], [56000.0, 1.0], [56400.0, 1.0], [56500.0, 1.0], [58100.0, 1.0], [59100.0, 1.0], [60400.0, 1.0], [61000.0, 1.0], [61800.0, 1.0], [62300.0, 1.0], [62900.0, 3.0], [64100.0, 1.0], [64400.0, 1.0], [66000.0, 1.0], [69000.0, 1.0], [69200.0, 2.0], [69400.0, 1.0], [70800.0, 1.0], [72600.0, 1.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[76300.0, 1.0], [76500.0, 1.0], [76900.0, 1.0], [77900.0, 1.0], [78500.0, 1.0], [80300.0, 1.0], [81500.0, 2.0], [81900.0, 1.0], [82100.0, 1.0], [89700.0, 1.0], [86500.0, 1.0], [88100.0, 1.0], [88500.0, 1.0], [88900.0, 1.0], [89900.0, 1.0], [90500.0, 1.0], [92500.0, 1.0], [93500.0, 1.0], [95300.0, 1.0], [95500.0, 1.0], [95700.0, 1.0], [95900.0, 1.0], [96100.0, 1.0], [97700.0, 2.0], [99900.0, 1.0], [101300.0, 1.0], [101900.0, 2.0], [102500.0, 1.0], [102700.0, 1.0], [103100.0, 1.0], [105900.0, 1.0], [108500.0, 1.0], [113100.0, 2.0], [115700.0, 1.0], [116300.0, 1.0], [116700.0, 1.0], [119300.0, 1.0], [122300.0, 1.0], [122500.0, 1.0], [125500.0, 1.0], [18700.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [27700.0, 1.0], [30700.0, 1.0], [33500.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [49300.0, 1.0], [50000.0, 1.0], [58800.0, 1.0], [64400.0, 1.0], [71000.0, 1.0], [72400.0, 1.0], [75400.0, 1.0], [77400.0, 2.0], [80600.0, 1.0], [82400.0, 1.0], [84000.0, 2.0], [84800.0, 1.0], [86600.0, 1.0], [89600.0, 1.0], [89800.0, 1.0], [92800.0, 1.0], [96200.0, 1.0], [96400.0, 1.0], [102800.0, 1.0], [104000.0, 1.0], [104400.0, 1.0], [107400.0, 1.0], [108800.0, 1.0], [109000.0, 1.0], [109400.0, 1.0], [109800.0, 1.0], [110200.0, 1.0], [110600.0, 1.0], [110800.0, 1.0], [111400.0, 1.0], [113800.0, 1.0], [114400.0, 1.0], [116200.0, 1.0], [116800.0, 1.0], [117600.0, 1.0], [119000.0, 1.0], [120600.0, 1.0], [122400.0, 1.0], [122800.0, 1.0], [123000.0, 3.0], [124000.0, 1.0], [124800.0, 1.0], [125200.0, 1.0], [125400.0, 1.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[12400.0, 1.0], [12700.0, 1.0], [13000.0, 1.0], [14500.0, 1.0], [15100.0, 1.0], [15400.0, 2.0], [15600.0, 1.0], [15900.0, 2.0], [16000.0, 3.0], [16100.0, 1.0], [16800.0, 1.0], [16900.0, 1.0], [17000.0, 1.0], [17200.0, 1.0], [17300.0, 2.0], [17400.0, 3.0], [17500.0, 10.0], [17600.0, 8.0], [17700.0, 9.0], [17800.0, 18.0], [17900.0, 14.0], [18000.0, 3.0], [18100.0, 2.0], [18200.0, 2.0], [18300.0, 3.0], [18600.0, 3.0], [18700.0, 2.0], [18800.0, 1.0], [19000.0, 1.0], [6900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 125500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.66836186E12, "maxY": 95.0, "series": [{"data": [[1.66836186E12, 61.012658227848085], [1.66836192E12, 11.0]], "isOverall": false, "label": "client-to-application", "isController": false}, {"data": [[1.66836186E12, 95.0], [1.66836192E12, 51.5], [1.66836198E12, 7.0]], "isOverall": false, "label": "client-to-gateway-non-caching", "isController": false}, {"data": [[1.66836186E12, 51.660000000000004]], "isOverall": false, "label": "Client requested api gateway (cached)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836198E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6242.0, "minX": 1.0, "maxY": 125582.0, "series": [{"data": [[87.0, 75908.0], [86.0, 76106.0], [89.0, 72618.0], [95.0, 69241.0], [94.0, 69456.0], [93.0, 70169.0], [92.0, 70814.0], [99.0, 66120.0], [98.0, 68727.0], [97.0, 69017.0], [96.0, 69214.0], [103.0, 64171.0], [102.0, 64425.0], [100.0, 66082.0], [107.0, 62327.0], [106.0, 62977.0], [105.0, 62928.0], [104.0, 62995.0], [111.0, 59171.0], [110.0, 60455.0], [109.0, 61040.0], [108.0, 61833.0], [115.0, 56424.0], [114.0, 56534.0], [113.0, 58193.0], [119.0, 54525.0], [118.0, 55442.0], [117.0, 55559.0], [116.0, 56032.0], [123.0, 52397.0], [122.0, 52790.0], [121.0, 53171.0], [120.0, 54227.0], [127.0, 49100.0], [126.0, 49340.0], [135.0, 44363.0], [134.0, 44750.0], [133.0, 46246.0], [132.0, 46608.0], [131.0, 46879.0], [130.0, 47549.0], [129.0, 48201.0], [128.0, 48697.0], [143.0, 39446.0], [141.0, 40715.0], [140.0, 41097.0], [139.0, 41490.0], [138.0, 43164.0], [137.0, 43178.0], [136.0, 43694.0], [150.0, 33765.0], [149.0, 34282.0], [148.0, 36573.0], [146.0, 37369.0], [145.0, 38473.0], [144.0, 38694.0], [159.0, 28208.0], [158.0, 29893.0], [156.0, 31834.0], [155.0, 32288.0], [154.0, 32301.0], [153.0, 33214.0], [152.0, 33324.0], [167.0, 24282.0], [166.0, 25364.0], [165.0, 25830.0], [164.0, 26112.0], [163.0, 26432.0], [162.0, 27680.0], [161.0, 27741.0], [175.0, 20056.0], [172.0, 21117.0], [171.0, 21294.0], [170.0, 21644.0], [169.0, 21820.0], [168.0, 24069.0], [184.0, 18405.0], [254.0, 17524.0], [271.0, 15528.0], [287.0, 10833.0], [286.0, 12305.0], [282.0, 13313.0], [281.0, 13539.0], [280.0, 13690.0], [279.0, 14360.0], [277.0, 14752.0], [276.0, 14828.0], [275.0, 15146.0], [300.0, 6242.0], [299.0, 6271.5], [297.0, 6582.0], [296.0, 6920.0], [294.0, 7166.0], [293.0, 7957.0], [292.0, 8021.0], [291.0, 8065.0], [290.0, 8082.0], [289.0, 9530.0], [288.0, 10586.0]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[166.70000000000005, 38551.81]], "isOverall": false, "label": "Client requested application-Aggregated", "isController": false}, {"data": [[2.0, 125496.0], [3.0, 125282.0], [4.0, 124847.0], [5.0, 124087.0], [6.0, 123066.0], [7.0, 123042.0], [8.0, 123037.0], [9.0, 122854.0], [10.0, 122513.0], [11.0, 122475.0], [12.0, 122372.0], [13.0, 120687.0], [14.0, 119333.0], [15.0, 119062.0], [16.0, 117606.0], [17.0, 116854.0], [18.0, 116734.0], [19.0, 116328.0], [20.0, 116293.0], [21.0, 115796.0], [22.0, 114406.0], [23.0, 113896.0], [24.0, 113175.0], [25.0, 113188.0], [26.0, 111488.0], [27.0, 110836.0], [28.0, 110631.0], [29.0, 110290.0], [30.0, 109860.0], [31.0, 109410.0], [33.0, 108833.0], [32.0, 109061.0], [35.0, 107407.0], [34.0, 108566.0], [37.0, 104491.0], [36.0, 105978.0], [39.0, 103115.0], [38.0, 104023.0], [41.0, 102739.0], [40.0, 102894.0], [43.0, 101983.0], [42.0, 102580.0], [45.0, 101308.0], [44.0, 101969.0], [47.0, 97712.0], [46.0, 99994.0], [49.0, 96434.0], [48.0, 97755.0], [51.0, 96156.0], [50.0, 96261.0], [53.0, 95794.0], [52.0, 95985.0], [55.0, 95302.0], [54.0, 95531.0], [57.0, 92844.0], [56.0, 93574.0], [59.0, 90556.0], [58.0, 92592.0], [61.0, 89857.0], [60.0, 89941.0], [63.0, 89623.0], [62.0, 89725.0], [67.0, 86689.0], [66.0, 88148.0], [65.0, 88553.0], [64.0, 88944.0], [71.0, 84048.0], [70.0, 84091.0], [69.0, 84813.0], [68.0, 86522.0], [75.0, 81571.0], [74.0, 81966.0], [73.0, 82113.0], [72.0, 82415.0], [79.0, 78536.0], [78.0, 80311.0], [77.0, 80649.0], [76.0, 81555.0], [83.0, 76946.0], [82.0, 77456.0], [81.0, 77477.0], [80.0, 77977.0], [85.0, 76382.0], [84.0, 76553.0], [91.0, 71073.0], [90.0, 72473.0], [88.0, 75459.0], [101.0, 64470.0], [112.0, 58814.0], [125.0, 49322.0], [124.0, 50023.0], [142.0, 40283.0], [151.0, 33503.0], [147.0, 37030.0], [157.0, 30727.0], [160.0, 27755.0], [175.0, 20064.0], [173.0, 20284.0], [179.0, 18734.0], [1.0, 125582.0]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[56.70000000000001, 92948.38000000003]], "isOverall": false, "label": "Client requested api gateway (non-cached)-Aggregated", "isController": false}, {"data": [[183.0, 18657.0], [182.0, 18660.0], [181.0, 18644.0], [180.0, 18731.0], [178.0, 18761.0], [177.0, 18810.0], [176.0, 19012.0], [191.0, 18105.0], [190.0, 18142.0], [189.0, 18227.0], [188.0, 18278.0], [187.0, 18317.0], [186.0, 18352.0], [185.0, 18399.0], [197.0, 17956.0], [194.0, 18007.0], [193.0, 18028.0], [192.0, 18041.0], [206.0, 17959.0], [205.0, 17931.0], [203.0, 17984.0], [202.0, 17974.0], [201.0, 17955.0], [215.0, 17905.0], [214.0, 17882.5], [213.0, 17872.0], [211.0, 17867.333333333332], [210.0, 17921.0], [209.0, 17929.666666666664], [223.0, 17805.0], [222.0, 17872.0], [221.0, 17830.0], [220.0, 17844.0], [219.0, 17845.0], [218.0, 17850.0], [216.0, 17830.0], [231.0, 17765.0], [230.0, 17760.0], [229.0, 17769.0], [228.0, 17804.5], [227.0, 17712.0], [226.0, 17803.0], [225.0, 17810.0], [238.0, 17643.0], [237.0, 17649.0], [236.0, 17699.0], [234.0, 17735.0], [233.0, 17760.0], [232.0, 17806.0], [247.0, 17566.0], [246.0, 17568.0], [245.0, 17627.5], [244.0, 17626.0], [243.0, 17593.5], [241.0, 17615.0], [240.0, 17610.0], [255.0, 17472.0], [253.0, 17504.5], [252.0, 17543.0], [250.0, 17512.0], [249.0, 17582.0], [248.0, 17599.0], [269.0, 15930.0], [270.0, 15613.0], [268.0, 15945.0], [259.0, 17379.0], [258.0, 17402.5], [256.0, 17471.0], [267.0, 16009.0], [266.0, 16023.0], [264.0, 16159.0], [263.0, 16875.0], [262.0, 16996.0], [261.0, 17063.0], [260.0, 17236.0], [285.0, 12478.0], [284.0, 12790.0], [283.0, 13038.0], [278.0, 14507.0], [274.0, 15176.0], [273.0, 15464.0], [272.0, 15498.0], [295.0, 6986.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[229.26999999999995, 17349.539999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 27.733333333333334, "minX": 1.66836186E12, "maxY": 3.5859771483333334E7, "series": [{"data": [[1.66836186E12, 3.5859771483333334E7], [1.66836192E12, 1.8326619216666665E7], [1.66836198E12, 2456355.5833333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66836186E12, 512.0], [1.66836192E12, 206.93333333333334], [1.66836198E12, 27.733333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836198E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17349.539999999997, "minX": 1.66836186E12, "maxY": 123487.69230769231, "series": [{"data": [[1.66836186E12, 30994.40506329114], [1.66836192E12, 66982.04761904762]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836186E12, 35139.90909090909], [1.66836192E12, 96091.56578947371], [1.66836198E12, 123487.69230769231]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.66836186E12, 17349.539999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836198E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1817.1, "minX": 1.66836186E12, "maxY": 121639.84615384614, "series": [{"data": [[1.66836186E12, 28353.835443037977], [1.66836192E12, 64190.04761904761]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836186E12, 32139.272727272728], [1.66836192E12, 93636.06578947367], [1.66836198E12, 121639.84615384614]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.66836186E12, 1817.1]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836198E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 62.72727272727273, "minX": 1.66836186E12, "maxY": 91.76923076923077, "series": [{"data": [[1.66836186E12, 80.07594936708861], [1.66836192E12, 88.42857142857142]], "isOverall": false, "label": "Client requested application", "isController": false}, {"data": [[1.66836186E12, 62.72727272727273], [1.66836192E12, 87.05263157894736], [1.66836198E12, 91.76923076923077]], "isOverall": false, "label": "Client requested api gateway (non-cached)", "isController": false}, {"data": [[1.66836186E12, 84.53999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836198E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6242.0, "minX": 1.66836186E12, "maxY": 125582.0, "series": [{"data": [[1.66836186E12, 59171.0], [1.66836192E12, 119333.0], [1.66836198E12, 125582.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66836186E12, 48135.8], [1.66836192E12, 113998.0], [1.66836198E12, 125547.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66836186E12, 58846.130000000005], [1.66836192E12, 119333.0], [1.66836198E12, 125582.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66836186E12, 54361.1], [1.66836192E12, 116746.0], [1.66836198E12, 125582.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66836186E12, 6242.0], [1.66836192E12, 60455.0], [1.66836198E12, 120687.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66836186E12, 17907.0], [1.66836192E12, 89725.0], [1.66836198E12, 123042.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836198E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 17063.0, "minX": 1.0, "maxY": 122945.5, "series": [{"data": [[4.0, 49211.0], [1.0, 84813.0], [2.0, 63376.0], [73.0, 17817.0], [5.0, 17063.0], [10.0, 17279.0], [3.0, 55559.0], [6.0, 122945.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 73.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2001.0, "minX": 1.0, "maxY": 120922.0, "series": [{"data": [[4.0, 46761.5], [1.0, 81290.0], [2.0, 60791.0], [73.0, 2069.0], [5.0, 11717.0], [10.0, 2001.0], [3.0, 53350.0], [6.0, 120922.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 73.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.6683618E12, "maxY": 5.0, "series": [{"data": [[1.6683618E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6683618E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.66836186E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.66836186E12, 3.1666666666666665], [1.66836192E12, 1.6166666666666667], [1.66836198E12, 0.21666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66836198E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.66836186E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66836186E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.66836186E12, 0.18333333333333332], [1.66836192E12, 1.2666666666666666], [1.66836198E12, 0.21666666666666667]], "isOverall": false, "label": "Client requested api gateway (non-cached)-success", "isController": false}, {"data": [[1.66836186E12, 1.3166666666666667], [1.66836192E12, 0.35]], "isOverall": false, "label": "Client requested application-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836198E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.66836186E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.66836186E12, 3.1666666666666665], [1.66836192E12, 1.6166666666666667], [1.66836198E12, 0.21666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66836198E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

