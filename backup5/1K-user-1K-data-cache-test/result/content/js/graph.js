/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 1633.0, "series": [{"data": [[0.0, 3.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 5.0], [3.1, 7.0], [3.2, 7.0], [3.3, 10.0], [3.4, 13.0], [3.5, 16.0], [3.6, 20.0], [3.7, 23.0], [3.8, 27.0], [3.9, 30.0], [4.0, 34.0], [4.1, 37.0], [4.2, 42.0], [4.3, 46.0], [4.4, 51.0], [4.5, 57.0], [4.6, 63.0], [4.7, 68.0], [4.8, 72.0], [4.9, 79.0], [5.0, 85.0], [5.1, 90.0], [5.2, 96.0], [5.3, 103.0], [5.4, 107.0], [5.5, 112.0], [5.6, 117.0], [5.7, 122.0], [5.8, 128.0], [5.9, 132.0], [6.0, 139.0], [6.1, 144.0], [6.2, 151.0], [6.3, 155.0], [6.4, 160.0], [6.5, 167.0], [6.6, 171.0], [6.7, 176.0], [6.8, 180.0], [6.9, 183.0], [7.0, 186.0], [7.1, 189.0], [7.2, 192.0], [7.3, 196.0], [7.4, 199.0], [7.5, 202.0], [7.6, 205.0], [7.7, 209.0], [7.8, 213.0], [7.9, 216.0], [8.0, 219.0], [8.1, 223.0], [8.2, 226.0], [8.3, 229.0], [8.4, 231.0], [8.5, 234.0], [8.6, 237.0], [8.7, 239.0], [8.8, 242.0], [8.9, 244.0], [9.0, 247.0], [9.1, 249.0], [9.2, 252.0], [9.3, 256.0], [9.4, 259.0], [9.5, 262.0], [9.6, 267.0], [9.7, 269.0], [9.8, 272.0], [9.9, 276.0], [10.0, 279.0], [10.1, 283.0], [10.2, 287.0], [10.3, 292.0], [10.4, 295.0], [10.5, 298.0], [10.6, 301.0], [10.7, 304.0], [10.8, 307.0], [10.9, 310.0], [11.0, 313.0], [11.1, 318.0], [11.2, 321.0], [11.3, 326.0], [11.4, 329.0], [11.5, 333.0], [11.6, 335.0], [11.7, 338.0], [11.8, 340.0], [11.9, 343.0], [12.0, 347.0], [12.1, 349.0], [12.2, 352.0], [12.3, 355.0], [12.4, 358.0], [12.5, 361.0], [12.6, 364.0], [12.7, 366.0], [12.8, 368.0], [12.9, 370.0], [13.0, 373.0], [13.1, 377.0], [13.2, 379.0], [13.3, 383.0], [13.4, 386.0], [13.5, 389.0], [13.6, 392.0], [13.7, 394.0], [13.8, 397.0], [13.9, 400.0], [14.0, 402.0], [14.1, 404.0], [14.2, 406.0], [14.3, 409.0], [14.4, 412.0], [14.5, 414.0], [14.6, 415.0], [14.7, 416.0], [14.8, 418.0], [14.9, 420.0], [15.0, 422.0], [15.1, 424.0], [15.2, 426.0], [15.3, 427.0], [15.4, 429.0], [15.5, 430.0], [15.6, 432.0], [15.7, 434.0], [15.8, 435.0], [15.9, 436.0], [16.0, 438.0], [16.1, 440.0], [16.2, 441.0], [16.3, 443.0], [16.4, 444.0], [16.5, 446.0], [16.6, 448.0], [16.7, 450.0], [16.8, 451.0], [16.9, 452.0], [17.0, 454.0], [17.1, 455.0], [17.2, 458.0], [17.3, 459.0], [17.4, 461.0], [17.5, 463.0], [17.6, 464.0], [17.7, 467.0], [17.8, 468.0], [17.9, 469.0], [18.0, 471.0], [18.1, 472.0], [18.2, 474.0], [18.3, 475.0], [18.4, 476.0], [18.5, 478.0], [18.6, 479.0], [18.7, 481.0], [18.8, 482.0], [18.9, 483.0], [19.0, 485.0], [19.1, 486.0], [19.2, 487.0], [19.3, 488.0], [19.4, 490.0], [19.5, 491.0], [19.6, 492.0], [19.7, 493.0], [19.8, 494.0], [19.9, 495.0], [20.0, 496.0], [20.1, 497.0], [20.2, 498.0], [20.3, 500.0], [20.4, 501.0], [20.5, 501.0], [20.6, 503.0], [20.7, 503.0], [20.8, 504.0], [20.9, 505.0], [21.0, 506.0], [21.1, 507.0], [21.2, 508.0], [21.3, 508.0], [21.4, 510.0], [21.5, 511.0], [21.6, 511.0], [21.7, 512.0], [21.8, 512.0], [21.9, 513.0], [22.0, 514.0], [22.1, 515.0], [22.2, 516.0], [22.3, 516.0], [22.4, 517.0], [22.5, 518.0], [22.6, 519.0], [22.7, 519.0], [22.8, 520.0], [22.9, 520.0], [23.0, 521.0], [23.1, 521.0], [23.2, 522.0], [23.3, 523.0], [23.4, 523.0], [23.5, 524.0], [23.6, 524.0], [23.7, 525.0], [23.8, 525.0], [23.9, 526.0], [24.0, 527.0], [24.1, 527.0], [24.2, 528.0], [24.3, 528.0], [24.4, 529.0], [24.5, 530.0], [24.6, 530.0], [24.7, 531.0], [24.8, 532.0], [24.9, 532.0], [25.0, 533.0], [25.1, 533.0], [25.2, 534.0], [25.3, 535.0], [25.4, 536.0], [25.5, 536.0], [25.6, 536.0], [25.7, 537.0], [25.8, 538.0], [25.9, 539.0], [26.0, 539.0], [26.1, 540.0], [26.2, 540.0], [26.3, 541.0], [26.4, 542.0], [26.5, 542.0], [26.6, 543.0], [26.7, 544.0], [26.8, 544.0], [26.9, 545.0], [27.0, 545.0], [27.1, 546.0], [27.2, 547.0], [27.3, 547.0], [27.4, 548.0], [27.5, 548.0], [27.6, 549.0], [27.7, 549.0], [27.8, 550.0], [27.9, 550.0], [28.0, 551.0], [28.1, 552.0], [28.2, 552.0], [28.3, 553.0], [28.4, 553.0], [28.5, 554.0], [28.6, 555.0], [28.7, 555.0], [28.8, 556.0], [28.9, 556.0], [29.0, 557.0], [29.1, 557.0], [29.2, 558.0], [29.3, 558.0], [29.4, 559.0], [29.5, 559.0], [29.6, 560.0], [29.7, 560.0], [29.8, 560.0], [29.9, 561.0], [30.0, 561.0], [30.1, 562.0], [30.2, 562.0], [30.3, 563.0], [30.4, 563.0], [30.5, 564.0], [30.6, 564.0], [30.7, 565.0], [30.8, 565.0], [30.9, 566.0], [31.0, 566.0], [31.1, 567.0], [31.2, 567.0], [31.3, 568.0], [31.4, 568.0], [31.5, 568.0], [31.6, 569.0], [31.7, 569.0], [31.8, 570.0], [31.9, 570.0], [32.0, 571.0], [32.1, 571.0], [32.2, 572.0], [32.3, 572.0], [32.4, 572.0], [32.5, 573.0], [32.6, 573.0], [32.7, 574.0], [32.8, 575.0], [32.9, 575.0], [33.0, 576.0], [33.1, 576.0], [33.2, 577.0], [33.3, 578.0], [33.4, 578.0], [33.5, 579.0], [33.6, 579.0], [33.7, 580.0], [33.8, 580.0], [33.9, 580.0], [34.0, 581.0], [34.1, 581.0], [34.2, 582.0], [34.3, 583.0], [34.4, 583.0], [34.5, 584.0], [34.6, 584.0], [34.7, 584.0], [34.8, 584.0], [34.9, 585.0], [35.0, 585.0], [35.1, 586.0], [35.2, 586.0], [35.3, 587.0], [35.4, 587.0], [35.5, 588.0], [35.6, 588.0], [35.7, 589.0], [35.8, 589.0], [35.9, 590.0], [36.0, 591.0], [36.1, 591.0], [36.2, 591.0], [36.3, 592.0], [36.4, 592.0], [36.5, 592.0], [36.6, 592.0], [36.7, 593.0], [36.8, 594.0], [36.9, 594.0], [37.0, 595.0], [37.1, 595.0], [37.2, 595.0], [37.3, 596.0], [37.4, 596.0], [37.5, 596.0], [37.6, 597.0], [37.7, 597.0], [37.8, 598.0], [37.9, 599.0], [38.0, 599.0], [38.1, 599.0], [38.2, 600.0], [38.3, 600.0], [38.4, 600.0], [38.5, 601.0], [38.6, 602.0], [38.7, 602.0], [38.8, 603.0], [38.9, 603.0], [39.0, 603.0], [39.1, 604.0], [39.2, 604.0], [39.3, 604.0], [39.4, 605.0], [39.5, 605.0], [39.6, 606.0], [39.7, 606.0], [39.8, 607.0], [39.9, 607.0], [40.0, 608.0], [40.1, 608.0], [40.2, 609.0], [40.3, 609.0], [40.4, 610.0], [40.5, 610.0], [40.6, 611.0], [40.7, 611.0], [40.8, 612.0], [40.9, 612.0], [41.0, 613.0], [41.1, 613.0], [41.2, 613.0], [41.3, 614.0], [41.4, 615.0], [41.5, 615.0], [41.6, 615.0], [41.7, 616.0], [41.8, 616.0], [41.9, 617.0], [42.0, 617.0], [42.1, 618.0], [42.2, 618.0], [42.3, 619.0], [42.4, 620.0], [42.5, 620.0], [42.6, 620.0], [42.7, 621.0], [42.8, 622.0], [42.9, 622.0], [43.0, 623.0], [43.1, 623.0], [43.2, 624.0], [43.3, 624.0], [43.4, 625.0], [43.5, 626.0], [43.6, 626.0], [43.7, 627.0], [43.8, 627.0], [43.9, 628.0], [44.0, 628.0], [44.1, 628.0], [44.2, 629.0], [44.3, 629.0], [44.4, 630.0], [44.5, 630.0], [44.6, 631.0], [44.7, 631.0], [44.8, 632.0], [44.9, 632.0], [45.0, 632.0], [45.1, 633.0], [45.2, 634.0], [45.3, 634.0], [45.4, 635.0], [45.5, 636.0], [45.6, 636.0], [45.7, 636.0], [45.8, 637.0], [45.9, 637.0], [46.0, 638.0], [46.1, 639.0], [46.2, 639.0], [46.3, 640.0], [46.4, 640.0], [46.5, 641.0], [46.6, 641.0], [46.7, 642.0], [46.8, 643.0], [46.9, 643.0], [47.0, 644.0], [47.1, 644.0], [47.2, 645.0], [47.3, 646.0], [47.4, 646.0], [47.5, 647.0], [47.6, 648.0], [47.7, 648.0], [47.8, 649.0], [47.9, 650.0], [48.0, 651.0], [48.1, 651.0], [48.2, 652.0], [48.3, 653.0], [48.4, 653.0], [48.5, 654.0], [48.6, 655.0], [48.7, 656.0], [48.8, 656.0], [48.9, 657.0], [49.0, 657.0], [49.1, 658.0], [49.2, 659.0], [49.3, 660.0], [49.4, 660.0], [49.5, 661.0], [49.6, 661.0], [49.7, 662.0], [49.8, 663.0], [49.9, 664.0], [50.0, 664.0], [50.1, 665.0], [50.2, 666.0], [50.3, 667.0], [50.4, 667.0], [50.5, 668.0], [50.6, 669.0], [50.7, 669.0], [50.8, 670.0], [50.9, 671.0], [51.0, 672.0], [51.1, 672.0], [51.2, 673.0], [51.3, 674.0], [51.4, 675.0], [51.5, 676.0], [51.6, 676.0], [51.7, 677.0], [51.8, 678.0], [51.9, 679.0], [52.0, 679.0], [52.1, 680.0], [52.2, 681.0], [52.3, 682.0], [52.4, 682.0], [52.5, 683.0], [52.6, 684.0], [52.7, 685.0], [52.8, 686.0], [52.9, 687.0], [53.0, 687.0], [53.1, 688.0], [53.2, 688.0], [53.3, 689.0], [53.4, 690.0], [53.5, 691.0], [53.6, 691.0], [53.7, 692.0], [53.8, 692.0], [53.9, 693.0], [54.0, 694.0], [54.1, 695.0], [54.2, 695.0], [54.3, 696.0], [54.4, 696.0], [54.5, 697.0], [54.6, 698.0], [54.7, 699.0], [54.8, 700.0], [54.9, 700.0], [55.0, 701.0], [55.1, 702.0], [55.2, 703.0], [55.3, 703.0], [55.4, 704.0], [55.5, 704.0], [55.6, 705.0], [55.7, 705.0], [55.8, 706.0], [55.9, 707.0], [56.0, 708.0], [56.1, 708.0], [56.2, 709.0], [56.3, 710.0], [56.4, 711.0], [56.5, 711.0], [56.6, 712.0], [56.7, 712.0], [56.8, 713.0], [56.9, 714.0], [57.0, 714.0], [57.1, 715.0], [57.2, 716.0], [57.3, 716.0], [57.4, 717.0], [57.5, 718.0], [57.6, 718.0], [57.7, 719.0], [57.8, 720.0], [57.9, 720.0], [58.0, 721.0], [58.1, 722.0], [58.2, 723.0], [58.3, 724.0], [58.4, 724.0], [58.5, 725.0], [58.6, 726.0], [58.7, 727.0], [58.8, 728.0], [58.9, 729.0], [59.0, 730.0], [59.1, 731.0], [59.2, 731.0], [59.3, 732.0], [59.4, 732.0], [59.5, 734.0], [59.6, 735.0], [59.7, 736.0], [59.8, 737.0], [59.9, 737.0], [60.0, 738.0], [60.1, 739.0], [60.2, 740.0], [60.3, 740.0], [60.4, 741.0], [60.5, 742.0], [60.6, 743.0], [60.7, 744.0], [60.8, 744.0], [60.9, 745.0], [61.0, 747.0], [61.1, 747.0], [61.2, 748.0], [61.3, 749.0], [61.4, 750.0], [61.5, 751.0], [61.6, 751.0], [61.7, 752.0], [61.8, 752.0], [61.9, 753.0], [62.0, 754.0], [62.1, 755.0], [62.2, 756.0], [62.3, 757.0], [62.4, 758.0], [62.5, 759.0], [62.6, 760.0], [62.7, 760.0], [62.8, 762.0], [62.9, 763.0], [63.0, 764.0], [63.1, 764.0], [63.2, 765.0], [63.3, 766.0], [63.4, 767.0], [63.5, 768.0], [63.6, 768.0], [63.7, 769.0], [63.8, 770.0], [63.9, 771.0], [64.0, 772.0], [64.1, 773.0], [64.2, 774.0], [64.3, 775.0], [64.4, 776.0], [64.5, 776.0], [64.6, 777.0], [64.7, 778.0], [64.8, 779.0], [64.9, 780.0], [65.0, 780.0], [65.1, 780.0], [65.2, 781.0], [65.3, 781.0], [65.4, 782.0], [65.5, 783.0], [65.6, 783.0], [65.7, 784.0], [65.8, 784.0], [65.9, 785.0], [66.0, 786.0], [66.1, 786.0], [66.2, 787.0], [66.3, 788.0], [66.4, 788.0], [66.5, 788.0], [66.6, 789.0], [66.7, 789.0], [66.8, 791.0], [66.9, 791.0], [67.0, 791.0], [67.1, 792.0], [67.2, 792.0], [67.3, 793.0], [67.4, 794.0], [67.5, 795.0], [67.6, 796.0], [67.7, 796.0], [67.8, 796.0], [67.9, 797.0], [68.0, 798.0], [68.1, 799.0], [68.2, 800.0], [68.3, 800.0], [68.4, 801.0], [68.5, 801.0], [68.6, 802.0], [68.7, 803.0], [68.8, 803.0], [68.9, 804.0], [69.0, 805.0], [69.1, 806.0], [69.2, 807.0], [69.3, 807.0], [69.4, 808.0], [69.5, 809.0], [69.6, 809.0], [69.7, 810.0], [69.8, 811.0], [69.9, 812.0], [70.0, 813.0], [70.1, 814.0], [70.2, 815.0], [70.3, 816.0], [70.4, 816.0], [70.5, 817.0], [70.6, 818.0], [70.7, 818.0], [70.8, 819.0], [70.9, 820.0], [71.0, 821.0], [71.1, 822.0], [71.2, 823.0], [71.3, 824.0], [71.4, 824.0], [71.5, 825.0], [71.6, 826.0], [71.7, 828.0], [71.8, 828.0], [71.9, 829.0], [72.0, 830.0], [72.1, 831.0], [72.2, 832.0], [72.3, 833.0], [72.4, 835.0], [72.5, 835.0], [72.6, 836.0], [72.7, 836.0], [72.8, 837.0], [72.9, 838.0], [73.0, 839.0], [73.1, 840.0], [73.2, 840.0], [73.3, 841.0], [73.4, 842.0], [73.5, 843.0], [73.6, 843.0], [73.7, 844.0], [73.8, 845.0], [73.9, 845.0], [74.0, 846.0], [74.1, 847.0], [74.2, 848.0], [74.3, 849.0], [74.4, 850.0], [74.5, 851.0], [74.6, 852.0], [74.7, 852.0], [74.8, 853.0], [74.9, 855.0], [75.0, 855.0], [75.1, 856.0], [75.2, 857.0], [75.3, 858.0], [75.4, 859.0], [75.5, 860.0], [75.6, 860.0], [75.7, 861.0], [75.8, 862.0], [75.9, 864.0], [76.0, 864.0], [76.1, 865.0], [76.2, 866.0], [76.3, 867.0], [76.4, 868.0], [76.5, 868.0], [76.6, 869.0], [76.7, 870.0], [76.8, 871.0], [76.9, 872.0], [77.0, 873.0], [77.1, 874.0], [77.2, 875.0], [77.3, 875.0], [77.4, 876.0], [77.5, 876.0], [77.6, 878.0], [77.7, 879.0], [77.8, 879.0], [77.9, 880.0], [78.0, 881.0], [78.1, 882.0], [78.2, 883.0], [78.3, 884.0], [78.4, 884.0], [78.5, 885.0], [78.6, 886.0], [78.7, 887.0], [78.8, 887.0], [78.9, 888.0], [79.0, 889.0], [79.1, 890.0], [79.2, 891.0], [79.3, 891.0], [79.4, 892.0], [79.5, 892.0], [79.6, 893.0], [79.7, 895.0], [79.8, 896.0], [79.9, 896.0], [80.0, 898.0], [80.1, 899.0], [80.2, 900.0], [80.3, 900.0], [80.4, 901.0], [80.5, 903.0], [80.6, 904.0], [80.7, 905.0], [80.8, 906.0], [80.9, 907.0], [81.0, 908.0], [81.1, 909.0], [81.2, 910.0], [81.3, 911.0], [81.4, 912.0], [81.5, 914.0], [81.6, 915.0], [81.7, 916.0], [81.8, 917.0], [81.9, 918.0], [82.0, 919.0], [82.1, 920.0], [82.2, 922.0], [82.3, 923.0], [82.4, 924.0], [82.5, 925.0], [82.6, 927.0], [82.7, 928.0], [82.8, 928.0], [82.9, 930.0], [83.0, 931.0], [83.1, 932.0], [83.2, 933.0], [83.3, 934.0], [83.4, 935.0], [83.5, 936.0], [83.6, 936.0], [83.7, 938.0], [83.8, 939.0], [83.9, 940.0], [84.0, 941.0], [84.1, 942.0], [84.2, 943.0], [84.3, 944.0], [84.4, 945.0], [84.5, 946.0], [84.6, 947.0], [84.7, 948.0], [84.8, 949.0], [84.9, 950.0], [85.0, 951.0], [85.1, 952.0], [85.2, 953.0], [85.3, 955.0], [85.4, 956.0], [85.5, 957.0], [85.6, 958.0], [85.7, 959.0], [85.8, 960.0], [85.9, 962.0], [86.0, 963.0], [86.1, 964.0], [86.2, 966.0], [86.3, 967.0], [86.4, 968.0], [86.5, 969.0], [86.6, 971.0], [86.7, 972.0], [86.8, 973.0], [86.9, 974.0], [87.0, 975.0], [87.1, 976.0], [87.2, 977.0], [87.3, 979.0], [87.4, 980.0], [87.5, 981.0], [87.6, 983.0], [87.7, 984.0], [87.8, 985.0], [87.9, 987.0], [88.0, 988.0], [88.1, 989.0], [88.2, 991.0], [88.3, 992.0], [88.4, 993.0], [88.5, 994.0], [88.6, 995.0], [88.7, 996.0], [88.8, 998.0], [88.9, 999.0], [89.0, 1000.0], [89.1, 1002.0], [89.2, 1003.0], [89.3, 1004.0], [89.4, 1006.0], [89.5, 1007.0], [89.6, 1009.0], [89.7, 1011.0], [89.8, 1012.0], [89.9, 1013.0], [90.0, 1015.0], [90.1, 1017.0], [90.2, 1019.0], [90.3, 1020.0], [90.4, 1023.0], [90.5, 1025.0], [90.6, 1028.0], [90.7, 1029.0], [90.8, 1031.0], [90.9, 1032.0], [91.0, 1035.0], [91.1, 1036.0], [91.2, 1038.0], [91.3, 1040.0], [91.4, 1042.0], [91.5, 1043.0], [91.6, 1044.0], [91.7, 1045.0], [91.8, 1047.0], [91.9, 1048.0], [92.0, 1050.0], [92.1, 1051.0], [92.2, 1052.0], [92.3, 1054.0], [92.4, 1056.0], [92.5, 1057.0], [92.6, 1059.0], [92.7, 1060.0], [92.8, 1061.0], [92.9, 1062.0], [93.0, 1064.0], [93.1, 1065.0], [93.2, 1066.0], [93.3, 1067.0], [93.4, 1068.0], [93.5, 1070.0], [93.6, 1071.0], [93.7, 1072.0], [93.8, 1074.0], [93.9, 1076.0], [94.0, 1076.0], [94.1, 1077.0], [94.2, 1079.0], [94.3, 1080.0], [94.4, 1083.0], [94.5, 1084.0], [94.6, 1084.0], [94.7, 1086.0], [94.8, 1088.0], [94.9, 1090.0], [95.0, 1092.0], [95.1, 1095.0], [95.2, 1096.0], [95.3, 1098.0], [95.4, 1100.0], [95.5, 1102.0], [95.6, 1105.0], [95.7, 1106.0], [95.8, 1108.0], [95.9, 1110.0], [96.0, 1113.0], [96.1, 1115.0], [96.2, 1117.0], [96.3, 1120.0], [96.4, 1122.0], [96.5, 1124.0], [96.6, 1127.0], [96.7, 1129.0], [96.8, 1131.0], [96.9, 1133.0], [97.0, 1135.0], [97.1, 1138.0], [97.2, 1141.0], [97.3, 1144.0], [97.4, 1148.0], [97.5, 1150.0], [97.6, 1153.0], [97.7, 1156.0], [97.8, 1159.0], [97.9, 1160.0], [98.0, 1163.0], [98.1, 1167.0], [98.2, 1169.0], [98.3, 1175.0], [98.4, 1182.0], [98.5, 1187.0], [98.6, 1192.0], [98.7, 1198.0], [98.8, 1205.0], [98.9, 1222.0], [99.0, 1239.0], [99.1, 1247.0], [99.2, 1258.0], [99.3, 1270.0], [99.4, 1282.0], [99.5, 1297.0], [99.6, 1321.0], [99.7, 1347.0], [99.8, 1388.0], [99.9, 1461.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 5353.0, "series": [{"data": [[0.0, 1581.0], [600.0, 4984.0], [700.0, 4034.0], [200.0, 944.0], [800.0, 3600.0], [900.0, 2628.0], [1000.0, 1930.0], [1100.0, 1000.0], [300.0, 989.0], [1200.0, 239.0], [1300.0, 94.0], [1400.0, 31.0], [1500.0, 17.0], [400.0, 1926.0], [100.0, 645.0], [1600.0, 5.0], [500.0, 5353.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 23772.0, "series": [{"data": [[0.0, 4439.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 23772.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1768.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 962.5570333333335, "minX": 1.6722264E12, "maxY": 962.5570333333335, "series": [{"data": [[1.6722264E12, 962.5570333333335]], "isOverall": false, "label": "client-to-gateway-caching (POST)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722264E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 2.0, "maxY": 1020.0, "series": [{"data": [[2.0, 3.0], [3.0, 3.0], [6.0, 3.0], [7.0, 3.6666666666666665], [8.0, 3.0], [10.0, 3.0], [11.0, 3.0], [13.0, 5.0], [19.0, 3.0], [20.0, 3.0], [21.0, 3.0], [22.0, 21.0], [23.0, 3.0], [24.0, 5.0], [25.0, 3.0], [26.0, 3.0], [27.0, 3.0], [28.0, 4.0], [29.0, 3.0], [30.0, 3.0], [31.0, 6.5], [32.0, 3.0], [34.0, 3.5], [37.0, 12.0], [36.0, 3.5], [38.0, 3.0], [41.0, 11.0], [40.0, 3.4], [43.0, 3.0], [42.0, 11.0], [45.0, 33.0], [44.0, 4.0], [47.0, 20.0], [46.0, 3.0], [49.0, 5.0], [48.0, 9.0], [51.0, 12.0], [50.0, 23.0], [53.0, 42.0], [52.0, 12.0], [55.0, 3.0], [54.0, 37.0], [57.0, 3.0], [56.0, 13.0], [59.0, 3.0], [58.0, 3.0], [60.0, 3.0], [63.0, 10.5], [62.0, 11.0], [66.0, 3.0], [64.0, 6.25], [70.0, 3.0], [69.0, 3.5], [75.0, 3.0], [79.0, 3.0], [78.0, 3.5], [76.0, 6.0], [83.0, 3.0], [82.0, 3.0], [81.0, 3.0], [86.0, 3.0], [85.0, 3.0], [84.0, 4.0], [90.0, 6.0], [88.0, 6.0], [94.0, 3.3333333333333335], [99.0, 37.0], [102.0, 31.5], [103.0, 4.0], [101.0, 3.5], [106.0, 58.0], [105.0, 3.5], [104.0, 3.0], [111.0, 3.0], [108.0, 3.0], [115.0, 6.0], [112.0, 3.5], [119.0, 10.0], [118.0, 5.0], [117.0, 3.0], [116.0, 9.0], [127.0, 3.0], [126.0, 3.25], [135.0, 3.5], [134.0, 3.0], [130.0, 3.0], [129.0, 4.0], [143.0, 3.3333333333333335], [138.0, 3.0], [137.0, 12.666666666666668], [150.0, 96.0], [149.0, 3.0], [148.0, 3.0], [147.0, 9.0], [146.0, 4.0], [145.0, 112.0], [144.0, 69.0], [157.0, 14.0], [155.0, 8.0], [154.0, 3.5], [166.0, 3.3333333333333335], [165.0, 10.0], [162.0, 3.0], [161.0, 3.0], [160.0, 3.0], [174.0, 50.66666666666667], [171.0, 4.5], [170.0, 3.0], [169.0, 7.0], [183.0, 20.0], [182.0, 3.0], [181.0, 3.0], [180.0, 6.0], [191.0, 14.0], [190.0, 5.75], [189.0, 10.0], [184.0, 3.0], [198.0, 3.0], [195.0, 3.0], [194.0, 4.0], [193.0, 10.5], [197.0, 3.0], [207.0, 4.166666666666667], [205.0, 3.0], [201.0, 3.0], [210.0, 3.3333333333333335], [218.0, 3.0], [221.0, 3.0], [232.0, 3.0], [234.0, 3.0], [236.0, 3.0], [237.0, 3.5], [239.0, 4.666666666666667], [241.0, 4.0], [247.0, 4.0], [249.0, 3.0], [250.0, 16.0], [251.0, 26.0], [254.0, 3.5], [258.0, 3.0], [259.0, 31.0], [262.0, 22.0], [267.0, 3.0], [268.0, 12.0], [270.0, 20.0], [286.0, 57.71428571428571], [280.0, 381.5], [281.0, 186.0], [282.0, 186.0], [285.0, 10.4], [284.0, 3.5], [279.0, 3.0], [273.0, 12.0], [274.0, 31.0], [278.0, 8.0], [277.0, 24.555555555555557], [289.0, 198.0], [292.0, 108.0], [293.0, 291.7142857142857], [295.0, 210.5], [288.0, 3.0], [296.0, 208.5], [297.0, 3.0], [294.0, 212.5], [300.0, 426.0], [303.0, 3.0], [299.0, 3.0], [298.0, 3.0], [305.0, 372.3333333333333], [304.0, 291.0], [319.0, 443.5], [317.0, 4.0], [315.0, 20.0], [311.0, 6.0], [310.0, 3.0], [308.0, 3.0], [307.0, 3.3333333333333335], [321.0, 452.0], [322.0, 421.75], [323.0, 362.0], [335.0, 16.0], [334.0, 4.384615384615385], [348.0, 416.0], [337.0, 264.5], [336.0, 8.0], [338.0, 485.0], [339.0, 462.0], [341.0, 446.25], [342.0, 3.0], [343.0, 20.666666666666668], [344.0, 478.5], [346.0, 500.0], [345.0, 3.0], [350.0, 105.75], [351.0, 3.5], [359.0, 429.42857142857144], [355.0, 244.5], [354.0, 33.0], [353.0, 15.0], [356.0, 523.0], [357.0, 500.4545454545455], [358.0, 508.46153846153845], [362.0, 415.0], [363.0, 406.0], [364.0, 528.1428571428571], [366.0, 233.8571428571429], [367.0, 4.0], [360.0, 44.5], [365.0, 471.72222222222223], [368.0, 178.2], [382.0, 3.0], [378.0, 7.0], [377.0, 43.0], [376.0, 12.0], [375.0, 11.0], [374.0, 3.0], [369.0, 3.0], [387.0, 3.0], [395.0, 4.0], [394.0, 18.0], [393.0, 32.0], [390.0, 5.5], [389.0, 4.0], [386.0, 14.166666666666666], [385.0, 3.0], [384.0, 3.0], [414.0, 3.0], [413.0, 3.0], [429.0, 6.333333333333333], [426.0, 3.0], [425.0, 10.25], [419.0, 16.5], [418.0, 3.0], [447.0, 3.0], [446.0, 45.5], [445.0, 4.0], [444.0, 3.0], [443.0, 4.0], [441.0, 3.0], [436.0, 3.0], [435.0, 5.5], [457.0, 364.6666666666667], [451.0, 349.5], [458.0, 506.5], [459.0, 545.0], [460.0, 623.0], [463.0, 521.4117647058823], [461.0, 69.0], [450.0, 3.0], [448.0, 3.3333333333333335], [465.0, 532.3333333333334], [464.0, 356.3461538461538], [471.0, 329.5], [470.0, 10.0], [466.0, 453.6666666666667], [467.0, 449.8], [468.0, 242.66666666666669], [469.0, 521.2631578947369], [474.0, 498.0], [475.0, 557.7096774193548], [476.0, 537.0], [487.0, 461.0], [484.0, 473.9], [485.0, 502.9583333333334], [486.0, 526.25], [488.0, 460.6842105263157], [489.0, 611.0], [490.0, 468.0], [491.0, 481.8235294117647], [495.0, 430.3636363636364], [494.0, 126.0], [493.0, 34.0], [492.0, 19.0], [499.0, 489.16666666666663], [503.0, 468.0], [504.0, 517.0], [508.0, 488.55555555555554], [511.0, 558.0], [505.0, 47.0], [501.0, 3.0], [497.0, 4.0], [517.0, 498.5], [516.0, 550.0], [514.0, 44.0], [519.0, 474.29411764705884], [518.0, 52.0], [537.0, 47.77777777777777], [538.0, 58.0], [539.0, 51.0], [536.0, 41.0], [540.0, 353.5], [541.0, 340.4], [542.0, 72.5], [523.0, 409.0], [521.0, 22.666666666666664], [520.0, 27.0], [525.0, 495.0], [527.0, 440.2], [526.0, 54.0], [528.0, 427.09090909090907], [530.0, 462.6666666666667], [529.0, 3.5], [535.0, 231.70000000000005], [549.0, 340.8181818181818], [553.0, 414.6666666666667], [552.0, 72.0], [554.0, 411.5], [556.0, 285.22222222222223], [575.0, 4.0], [566.0, 76.0], [567.0, 21.0], [574.0, 3.0], [571.0, 27.444444444444443], [545.0, 13.0], [570.0, 43.0], [551.0, 46.0], [568.0, 50.0], [569.0, 95.42857142857143], [604.0, 28.0], [607.0, 3.0], [597.0, 17.0], [606.0, 3.0], [605.0, 15.0], [603.0, 20.333333333333336], [602.0, 4.0], [601.0, 3.0], [600.0, 6.0], [591.0, 13.0], [577.0, 9.0], [576.0, 18.666666666666668], [581.0, 20.5], [580.0, 30.0], [583.0, 24.0], [582.0, 3.0], [588.0, 257.0], [587.0, 14.0], [599.0, 397.0], [598.0, 187.0], [615.0, 7.0], [623.0, 3.0], [622.0, 3.0], [624.0, 96.33333333333333], [637.0, 181.42857142857142], [635.0, 103.0], [636.0, 91.33333333333334], [632.0, 213.18518518518516], [634.0, 246.33333333333334], [625.0, 3.0], [626.0, 3.0], [627.0, 131.16666666666666], [628.0, 85.75000000000001], [629.0, 105.33333333333334], [630.0, 310.0], [620.0, 3.0], [619.0, 3.0], [618.0, 3.5], [617.0, 3.0], [613.0, 3.0], [611.0, 4.0], [610.0, 4.0], [608.0, 35.5], [668.0, 242.0], [671.0, 27.0], [656.0, 169.0], [658.0, 3.0], [657.0, 206.5], [660.0, 105.5], [659.0, 274.0], [670.0, 16.0], [669.0, 454.0], [667.0, 178.0], [666.0, 669.0], [665.0, 247.0], [664.0, 287.0], [655.0, 99.5], [643.0, 224.0], [644.0, 225.16666666666669], [646.0, 191.5], [647.0, 139.75], [654.0, 87.5], [653.0, 63.0], [651.0, 7.5], [648.0, 103.66666666666666], [649.0, 225.58333333333334], [650.0, 275.8], [663.0, 3.0], [662.0, 3.0], [697.0, 191.0], [702.0, 30.333333333333336], [703.0, 107.0], [689.0, 318.0], [691.0, 3.0], [690.0, 14.5], [701.0, 5.0], [700.0, 23.0], [699.0, 9.0], [686.0, 3.0], [684.0, 337.0], [672.0, 48.0], [675.0, 9.0], [674.0, 19.0], [677.0, 12.0], [676.0, 9.5], [679.0, 6.5], [678.0, 18.333333333333332], [682.0, 3.0], [681.0, 12.0], [680.0, 3.0], [695.0, 12.0], [694.0, 103.74999999999999], [693.0, 3.0], [692.0, 27.0], [707.0, 3.0], [729.0, 179.25], [718.0, 308.25], [716.0, 218.71428571428572], [715.0, 3.0], [714.0, 265.0], [713.0, 99.13333333333334], [712.0, 79.4], [717.0, 3.0], [719.0, 314.8], [704.0, 207.0], [706.0, 167.0], [705.0, 22.333333333333336], [708.0, 23.5], [711.0, 3.0], [710.0, 306.0], [720.0, 249.0], [723.0, 220.0], [722.0, 76.6], [724.0, 372.0], [725.0, 353.8], [731.0, 174.5], [732.0, 282.3333333333333], [733.0, 131.0], [760.0, 295.5], [764.0, 330.16666666666663], [742.0, 336.25], [741.0, 551.0], [740.0, 3.0], [739.0, 3.0], [738.0, 160.0], [737.0, 135.0], [736.0, 46.33333333333333], [751.0, 286.5], [750.0, 491.0], [749.0, 386.5], [748.0, 99.64705882352938], [747.0, 238.5], [746.0, 444.0], [745.0, 3.0], [744.0, 353.0], [767.0, 549.0], [752.0, 626.0], [754.0, 548.0], [753.0, 198.75], [759.0, 163.5], [755.0, 443.0], [766.0, 413.4], [765.0, 439.0], [763.0, 146.0], [762.0, 531.5], [761.0, 400.2], [775.0, 353.0], [773.0, 454.0], [770.0, 579.0], [769.0, 15.0], [768.0, 417.5], [772.0, 745.0], [771.0, 649.0], [783.0, 433.0], [781.0, 335.0], [779.0, 378.0], [774.0, 361.5], [777.0, 422.5], [776.0, 351.0], [778.0, 501.3333333333333], [792.0, 655.0], [794.0, 411.3333333333333], [793.0, 542.0], [795.0, 459.75], [798.0, 167.0], [784.0, 639.0], [786.0, 703.0], [785.0, 298.0], [789.0, 416.75], [787.0, 587.5], [791.0, 428.0], [790.0, 708.0], [797.0, 524.0], [796.0, 359.5], [806.0, 732.0], [808.0, 290.5], [809.0, 325.3333333333333], [810.0, 503.33333333333337], [812.0, 266.4], [815.0, 369.3333333333333], [803.0, 307.5], [801.0, 316.6], [805.0, 343.0], [804.0, 719.0], [814.0, 354.125], [827.0, 574.515384615385], [826.0, 3.0], [825.0, 138.66666666666669], [824.0, 102.0], [807.0, 237.5], [828.0, 377.22222222222223], [829.0, 707.7], [831.0, 272.5], [816.0, 504.6666666666667], [820.0, 3.0], [819.0, 196.75], [823.0, 324.6666666666667], [822.0, 3.0], [830.0, 341.5], [836.0, 673.3333333333334], [860.0, 427.1428571428571], [833.0, 640.6666666666666], [832.0, 286.3333333333333], [835.0, 281.25000000000006], [834.0, 546.6666666666666], [837.0, 561.1666666666667], [839.0, 3.0], [857.0, 458.0], [856.0, 770.6], [859.0, 717.0], [858.0, 1020.0], [844.0, 690.0344827586207], [843.0, 612.8333333333334], [842.0, 534.25], [841.0, 443.375], [840.0, 3.0], [846.0, 312.5], [847.0, 549.3333333333334], [848.0, 644.3333333333333], [852.0, 471.3725490196078], [851.0, 618.0], [850.0, 20.0], [849.0, 339.3333333333333], [853.0, 3.0], [854.0, 644.4782608695652], [855.0, 682.5], [863.0, 486.45454545454544], [862.0, 548.655172413793], [861.0, 452.1041433370665], [888.0, 391.0], [893.0, 551.7058823529412], [880.0, 745.4444444444446], [879.0, 599.75], [865.0, 606.6], [864.0, 557.3333333333334], [867.0, 362.5], [866.0, 376.43749999999994], [869.0, 3.0], [868.0, 748.25], [871.0, 214.2], [870.0, 552.6], [878.0, 644.3333333333334], [877.0, 399.0], [876.0, 269.0], [875.0, 301.2], [874.0, 492.1428571428571], [873.0, 745.25], [872.0, 326.5], [889.0, 446.33333333333326], [882.0, 627.8], [881.0, 598.8333333333334], [883.0, 510.05555555555554], [884.0, 627.3214285714283], [886.0, 6.0], [885.0, 262.0], [890.0, 550.25], [891.0, 514.3333333333333], [892.0, 206.33333333333331], [894.0, 627.5333333333332], [895.0, 376.8], [922.0, 634.4615384615385], [927.0, 645.3157894736842], [897.0, 571.3076923076924], [896.0, 360.0], [899.0, 319.5], [898.0, 466.0], [901.0, 751.3333333333334], [900.0, 404.53846153846155], [910.0, 644.1470588235294], [908.0, 35.0], [907.0, 399.375], [906.0, 3.0], [905.0, 466.33333333333337], [904.0, 9.0], [902.0, 622.9166666666666], [912.0, 705.9999999999999], [913.0, 631.3333333333334], [914.0, 669.6428571428571], [916.0, 675.2142857142858], [915.0, 673.5500000000001], [917.0, 655.2619047619049], [919.0, 743.0], [918.0, 631.4545454545454], [921.0, 561.0], [920.0, 636.2812499999998], [903.0, 14.666666666666668], [923.0, 657.0], [926.0, 654.2], [925.0, 663.0909090909091], [956.0, 637.125], [934.0, 618.2352941176471], [928.0, 626.1500000000002], [933.0, 642.7599999999999], [932.0, 620.1666666666667], [931.0, 635.8333333333334], [930.0, 677.1666666666667], [929.0, 751.0], [943.0, 651.8888888888889], [935.0, 623.923076923077], [953.0, 619.4444444444442], [952.0, 637.3333333333334], [955.0, 638.2], [954.0, 650.5], [941.0, 684.1666666666667], [940.0, 665.5], [939.0, 655.8888888888888], [938.0, 619.15], [937.0, 562.0], [936.0, 603.2777777777778], [942.0, 661.7916666666666], [949.0, 648.6153846153846], [951.0, 640.0666666666667], [950.0, 642.0], [958.0, 618.3124999999998], [959.0, 653.8571428571429], [944.0, 618.0], [946.0, 675.7027027027026], [945.0, 700.3333333333334], [948.0, 689.0769230769231], [947.0, 689.5806451612905], [957.0, 649.7272727272727], [989.0, 649.5384615384614], [984.0, 635.0833333333333], [960.0, 630.5555555555555], [965.0, 682.6500000000002], [964.0, 604.5416666666666], [963.0, 629.4999999999999], [962.0, 654.4736842105264], [961.0, 631.6000000000001], [966.0, 889.3333333333333], [974.0, 624.2592592592592], [973.0, 518.0], [972.0, 670.5172413793103], [971.0, 682.2333333333332], [970.0, 811.4761904761905], [969.0, 704.3698630136985], [968.0, 740.1999999999999], [975.0, 674.5882352941175], [977.0, 644.875], [976.0, 721.0967741935483], [979.0, 652.8064516129033], [978.0, 569.0], [981.0, 635.6250000000001], [980.0, 684.4615384615385], [983.0, 598.8333333333334], [982.0, 663.7272727272726], [985.0, 638.9166666666666], [986.0, 648.25], [988.0, 659.8301886792453], [987.0, 677.4666666666667], [991.0, 692.8695652173911], [990.0, 674.1176470588236], [1000.0, 707.0448506354157], [999.0, 729.0135135135134], [998.0, 756.6923076923076], [997.0, 786.3124999999998], [996.0, 781.5428571428573], [995.0, 700.6944444444449], [993.0, 738.0674157303373], [992.0, 683.3469387755102]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[962.5570333333335, 667.0250666666727]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 99984.26666666666, "minX": 1.6722264E12, "maxY": 234796.13333333333, "series": [{"data": [[1.6722264E12, 99984.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6722264E12, 234796.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722264E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 667.0250666666727, "minX": 1.6722264E12, "maxY": 667.0250666666727, "series": [{"data": [[1.6722264E12, 667.0250666666727]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722264E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 660.7154000000011, "minX": 1.6722264E12, "maxY": 660.7154000000011, "series": [{"data": [[1.6722264E12, 660.7154000000011]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722264E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 45.14130000000016, "minX": 1.6722264E12, "maxY": 45.14130000000016, "series": [{"data": [[1.6722264E12, 45.14130000000016]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722264E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.6722264E12, "maxY": 1633.0, "series": [{"data": [[1.6722264E12, 1633.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6722264E12, 1038.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6722264E12, 1196.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6722264E12, 1100.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6722264E12, 19.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6722264E12, 684.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722264E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 5.0, "maxY": 1002.0, "series": [{"data": [[2217.0, 372.0], [652.0, 500.0], [698.0, 703.0], [1137.0, 875.0], [1102.0, 876.0], [1211.0, 832.0], [1184.0, 848.0], [1194.0, 820.0], [1243.0, 1002.0], [1251.0, 756.0], [1244.0, 860.0], [1240.0, 654.0], [5.0, 40.0], [1446.0, 696.0], [1423.0, 613.0], [1529.0, 587.0], [1504.0, 672.0], [1549.0, 834.0], [1707.0, 566.0], [1828.0, 493.0], [1835.0, 752.0], [2021.0, 526.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1423.0, 28.5], [780.0, 5.0], [1835.0, 4.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2217.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 1001.0, "series": [{"data": [[2217.0, 372.0], [652.0, 499.5], [698.0, 703.0], [1137.0, 875.0], [1102.0, 876.0], [1211.0, 832.0], [1184.0, 847.5], [1194.0, 819.0], [1243.0, 1001.0], [1251.0, 756.0], [1244.0, 860.0], [1240.0, 653.5], [5.0, 40.0], [1446.0, 695.0], [1423.0, 613.0], [1529.0, 586.0], [1504.0, 671.0], [1549.0, 834.0], [1707.0, 566.0], [1828.0, 493.0], [1835.0, 737.0], [2021.0, 526.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1423.0, 0.0], [780.0, 0.0], [1835.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2217.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 500.0, "minX": 1.6722264E12, "maxY": 500.0, "series": [{"data": [[1.6722264E12, 500.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722264E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 29.466666666666665, "minX": 1.6722264E12, "maxY": 470.53333333333336, "series": [{"data": [[1.6722264E12, 470.53333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6722264E12, 29.466666666666665]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722264E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 29.466666666666665, "minX": 1.6722264E12, "maxY": 470.53333333333336, "series": [{"data": [[1.6722264E12, 470.53333333333336]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.6722264E12, 29.466666666666665]], "isOverall": false, "label": "Microservice-based client with caching-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722264E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 29.466666666666665, "minX": 1.6722264E12, "maxY": 470.53333333333336, "series": [{"data": [[1.6722264E12, 470.53333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6722264E12, 29.466666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722264E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

