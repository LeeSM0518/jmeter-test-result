/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1169.0, "series": [{"data": [[0.0, 8.0], [0.1, 9.0], [0.2, 11.0], [0.3, 11.0], [0.4, 11.0], [0.5, 12.0], [0.6, 14.0], [0.7, 15.0], [0.8, 16.0], [0.9, 17.0], [1.0, 19.0], [1.1, 21.0], [1.2, 24.0], [1.3, 24.0], [1.4, 25.0], [1.5, 28.0], [1.6, 30.0], [1.7, 30.0], [1.8, 31.0], [1.9, 31.0], [2.0, 31.0], [2.1, 35.0], [2.2, 35.0], [2.3, 35.0], [2.4, 36.0], [2.5, 36.0], [2.6, 36.0], [2.7, 36.0], [2.8, 37.0], [2.9, 37.0], [3.0, 37.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 39.0], [3.5, 39.0], [3.6, 40.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 40.0], [4.1, 40.0], [4.2, 41.0], [4.3, 41.0], [4.4, 42.0], [4.5, 42.0], [4.6, 43.0], [4.7, 43.0], [4.8, 43.0], [4.9, 44.0], [5.0, 44.0], [5.1, 44.0], [5.2, 44.0], [5.3, 44.0], [5.4, 44.0], [5.5, 45.0], [5.6, 46.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 48.0], [6.3, 48.0], [6.4, 48.0], [6.5, 49.0], [6.6, 49.0], [6.7, 49.0], [6.8, 49.0], [6.9, 49.0], [7.0, 50.0], [7.1, 50.0], [7.2, 50.0], [7.3, 50.0], [7.4, 51.0], [7.5, 51.0], [7.6, 51.0], [7.7, 51.0], [7.8, 51.0], [7.9, 52.0], [8.0, 52.0], [8.1, 52.0], [8.2, 53.0], [8.3, 53.0], [8.4, 53.0], [8.5, 53.0], [8.6, 54.0], [8.7, 54.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 55.0], [9.2, 55.0], [9.3, 56.0], [9.4, 56.0], [9.5, 57.0], [9.6, 57.0], [9.7, 57.0], [9.8, 57.0], [9.9, 58.0], [10.0, 58.0], [10.1, 58.0], [10.2, 58.0], [10.3, 59.0], [10.4, 59.0], [10.5, 59.0], [10.6, 60.0], [10.7, 60.0], [10.8, 61.0], [10.9, 61.0], [11.0, 61.0], [11.1, 61.0], [11.2, 61.0], [11.3, 61.0], [11.4, 62.0], [11.5, 62.0], [11.6, 62.0], [11.7, 63.0], [11.8, 63.0], [11.9, 63.0], [12.0, 63.0], [12.1, 63.0], [12.2, 64.0], [12.3, 64.0], [12.4, 64.0], [12.5, 64.0], [12.6, 64.0], [12.7, 65.0], [12.8, 65.0], [12.9, 66.0], [13.0, 67.0], [13.1, 67.0], [13.2, 67.0], [13.3, 67.0], [13.4, 69.0], [13.5, 69.0], [13.6, 69.0], [13.7, 69.0], [13.8, 70.0], [13.9, 70.0], [14.0, 70.0], [14.1, 70.0], [14.2, 71.0], [14.3, 71.0], [14.4, 71.0], [14.5, 71.0], [14.6, 73.0], [14.7, 73.0], [14.8, 73.0], [14.9, 73.0], [15.0, 73.0], [15.1, 74.0], [15.2, 74.0], [15.3, 75.0], [15.4, 75.0], [15.5, 75.0], [15.6, 75.0], [15.7, 76.0], [15.8, 76.0], [15.9, 77.0], [16.0, 78.0], [16.1, 78.0], [16.2, 79.0], [16.3, 79.0], [16.4, 80.0], [16.5, 80.0], [16.6, 80.0], [16.7, 80.0], [16.8, 81.0], [16.9, 81.0], [17.0, 81.0], [17.1, 81.0], [17.2, 81.0], [17.3, 82.0], [17.4, 82.0], [17.5, 83.0], [17.6, 83.0], [17.7, 85.0], [17.8, 85.0], [17.9, 85.0], [18.0, 86.0], [18.1, 86.0], [18.2, 86.0], [18.3, 87.0], [18.4, 87.0], [18.5, 87.0], [18.6, 87.0], [18.7, 87.0], [18.8, 88.0], [18.9, 88.0], [19.0, 88.0], [19.1, 88.0], [19.2, 89.0], [19.3, 89.0], [19.4, 89.0], [19.5, 90.0], [19.6, 90.0], [19.7, 90.0], [19.8, 90.0], [19.9, 90.0], [20.0, 91.0], [20.1, 91.0], [20.2, 91.0], [20.3, 92.0], [20.4, 92.0], [20.5, 92.0], [20.6, 93.0], [20.7, 93.0], [20.8, 93.0], [20.9, 93.0], [21.0, 93.0], [21.1, 94.0], [21.2, 94.0], [21.3, 95.0], [21.4, 96.0], [21.5, 96.0], [21.6, 98.0], [21.7, 98.0], [21.8, 98.0], [21.9, 98.0], [22.0, 99.0], [22.1, 99.0], [22.2, 99.0], [22.3, 99.0], [22.4, 99.0], [22.5, 100.0], [22.6, 100.0], [22.7, 100.0], [22.8, 100.0], [22.9, 101.0], [23.0, 101.0], [23.1, 101.0], [23.2, 101.0], [23.3, 102.0], [23.4, 104.0], [23.5, 104.0], [23.6, 104.0], [23.7, 105.0], [23.8, 106.0], [23.9, 107.0], [24.0, 107.0], [24.1, 108.0], [24.2, 108.0], [24.3, 108.0], [24.4, 108.0], [24.5, 108.0], [24.6, 108.0], [24.7, 109.0], [24.8, 110.0], [24.9, 110.0], [25.0, 110.0], [25.1, 110.0], [25.2, 110.0], [25.3, 110.0], [25.4, 110.0], [25.5, 111.0], [25.6, 111.0], [25.7, 111.0], [25.8, 112.0], [25.9, 112.0], [26.0, 112.0], [26.1, 114.0], [26.2, 114.0], [26.3, 114.0], [26.4, 115.0], [26.5, 115.0], [26.6, 115.0], [26.7, 115.0], [26.8, 116.0], [26.9, 116.0], [27.0, 116.0], [27.1, 117.0], [27.2, 117.0], [27.3, 117.0], [27.4, 117.0], [27.5, 118.0], [27.6, 118.0], [27.7, 118.0], [27.8, 119.0], [27.9, 119.0], [28.0, 119.0], [28.1, 120.0], [28.2, 120.0], [28.3, 120.0], [28.4, 120.0], [28.5, 121.0], [28.6, 121.0], [28.7, 121.0], [28.8, 121.0], [28.9, 121.0], [29.0, 122.0], [29.1, 122.0], [29.2, 122.0], [29.3, 123.0], [29.4, 123.0], [29.5, 123.0], [29.6, 124.0], [29.7, 124.0], [29.8, 125.0], [29.9, 125.0], [30.0, 125.0], [30.1, 126.0], [30.2, 126.0], [30.3, 127.0], [30.4, 127.0], [30.5, 127.0], [30.6, 127.0], [30.7, 127.0], [30.8, 127.0], [30.9, 128.0], [31.0, 128.0], [31.1, 128.0], [31.2, 128.0], [31.3, 128.0], [31.4, 128.0], [31.5, 129.0], [31.6, 130.0], [31.7, 131.0], [31.8, 131.0], [31.9, 131.0], [32.0, 131.0], [32.1, 131.0], [32.2, 131.0], [32.3, 131.0], [32.4, 132.0], [32.5, 132.0], [32.6, 133.0], [32.7, 133.0], [32.8, 133.0], [32.9, 134.0], [33.0, 134.0], [33.1, 135.0], [33.2, 135.0], [33.3, 136.0], [33.4, 136.0], [33.5, 136.0], [33.6, 136.0], [33.7, 136.0], [33.8, 136.0], [33.9, 136.0], [34.0, 136.0], [34.1, 137.0], [34.2, 138.0], [34.3, 139.0], [34.4, 139.0], [34.5, 140.0], [34.6, 140.0], [34.7, 141.0], [34.8, 142.0], [34.9, 143.0], [35.0, 143.0], [35.1, 144.0], [35.2, 144.0], [35.3, 144.0], [35.4, 144.0], [35.5, 145.0], [35.6, 145.0], [35.7, 146.0], [35.8, 146.0], [35.9, 146.0], [36.0, 147.0], [36.1, 147.0], [36.2, 147.0], [36.3, 147.0], [36.4, 148.0], [36.5, 150.0], [36.6, 150.0], [36.7, 152.0], [36.8, 152.0], [36.9, 152.0], [37.0, 153.0], [37.1, 153.0], [37.2, 153.0], [37.3, 154.0], [37.4, 154.0], [37.5, 155.0], [37.6, 155.0], [37.7, 156.0], [37.8, 157.0], [37.9, 157.0], [38.0, 157.0], [38.1, 157.0], [38.2, 157.0], [38.3, 157.0], [38.4, 157.0], [38.5, 157.0], [38.6, 158.0], [38.7, 158.0], [38.8, 159.0], [38.9, 159.0], [39.0, 160.0], [39.1, 161.0], [39.2, 162.0], [39.3, 162.0], [39.4, 162.0], [39.5, 163.0], [39.6, 163.0], [39.7, 164.0], [39.8, 164.0], [39.9, 164.0], [40.0, 164.0], [40.1, 165.0], [40.2, 165.0], [40.3, 165.0], [40.4, 165.0], [40.5, 166.0], [40.6, 166.0], [40.7, 167.0], [40.8, 167.0], [40.9, 167.0], [41.0, 167.0], [41.1, 168.0], [41.2, 168.0], [41.3, 168.0], [41.4, 168.0], [41.5, 168.0], [41.6, 169.0], [41.7, 169.0], [41.8, 169.0], [41.9, 169.0], [42.0, 171.0], [42.1, 171.0], [42.2, 171.0], [42.3, 171.0], [42.4, 171.0], [42.5, 172.0], [42.6, 172.0], [42.7, 172.0], [42.8, 173.0], [42.9, 173.0], [43.0, 173.0], [43.1, 174.0], [43.2, 174.0], [43.3, 174.0], [43.4, 175.0], [43.5, 175.0], [43.6, 175.0], [43.7, 176.0], [43.8, 176.0], [43.9, 177.0], [44.0, 177.0], [44.1, 178.0], [44.2, 178.0], [44.3, 178.0], [44.4, 179.0], [44.5, 180.0], [44.6, 181.0], [44.7, 181.0], [44.8, 182.0], [44.9, 182.0], [45.0, 182.0], [45.1, 183.0], [45.2, 183.0], [45.3, 184.0], [45.4, 184.0], [45.5, 184.0], [45.6, 185.0], [45.7, 186.0], [45.8, 187.0], [45.9, 187.0], [46.0, 187.0], [46.1, 187.0], [46.2, 188.0], [46.3, 189.0], [46.4, 191.0], [46.5, 193.0], [46.6, 193.0], [46.7, 194.0], [46.8, 194.0], [46.9, 195.0], [47.0, 195.0], [47.1, 195.0], [47.2, 196.0], [47.3, 196.0], [47.4, 196.0], [47.5, 197.0], [47.6, 198.0], [47.7, 199.0], [47.8, 199.0], [47.9, 199.0], [48.0, 200.0], [48.1, 201.0], [48.2, 203.0], [48.3, 204.0], [48.4, 205.0], [48.5, 206.0], [48.6, 206.0], [48.7, 206.0], [48.8, 207.0], [48.9, 207.0], [49.0, 207.0], [49.1, 208.0], [49.2, 210.0], [49.3, 211.0], [49.4, 211.0], [49.5, 211.0], [49.6, 212.0], [49.7, 213.0], [49.8, 213.0], [49.9, 213.0], [50.0, 213.0], [50.1, 213.0], [50.2, 216.0], [50.3, 217.0], [50.4, 217.0], [50.5, 217.0], [50.6, 217.0], [50.7, 218.0], [50.8, 221.0], [50.9, 221.0], [51.0, 221.0], [51.1, 222.0], [51.2, 222.0], [51.3, 223.0], [51.4, 223.0], [51.5, 224.0], [51.6, 225.0], [51.7, 225.0], [51.8, 226.0], [51.9, 226.0], [52.0, 228.0], [52.1, 228.0], [52.2, 230.0], [52.3, 231.0], [52.4, 231.0], [52.5, 232.0], [52.6, 232.0], [52.7, 232.0], [52.8, 233.0], [52.9, 234.0], [53.0, 235.0], [53.1, 238.0], [53.2, 238.0], [53.3, 240.0], [53.4, 240.0], [53.5, 240.0], [53.6, 241.0], [53.7, 242.0], [53.8, 243.0], [53.9, 246.0], [54.0, 247.0], [54.1, 247.0], [54.2, 247.0], [54.3, 249.0], [54.4, 250.0], [54.5, 250.0], [54.6, 250.0], [54.7, 251.0], [54.8, 251.0], [54.9, 253.0], [55.0, 255.0], [55.1, 255.0], [55.2, 255.0], [55.3, 256.0], [55.4, 256.0], [55.5, 257.0], [55.6, 257.0], [55.7, 258.0], [55.8, 259.0], [55.9, 261.0], [56.0, 262.0], [56.1, 262.0], [56.2, 263.0], [56.3, 263.0], [56.4, 263.0], [56.5, 264.0], [56.6, 264.0], [56.7, 265.0], [56.8, 265.0], [56.9, 265.0], [57.0, 266.0], [57.1, 267.0], [57.2, 268.0], [57.3, 269.0], [57.4, 270.0], [57.5, 270.0], [57.6, 270.0], [57.7, 272.0], [57.8, 275.0], [57.9, 276.0], [58.0, 276.0], [58.1, 277.0], [58.2, 278.0], [58.3, 278.0], [58.4, 279.0], [58.5, 279.0], [58.6, 280.0], [58.7, 280.0], [58.8, 280.0], [58.9, 281.0], [59.0, 282.0], [59.1, 282.0], [59.2, 282.0], [59.3, 282.0], [59.4, 283.0], [59.5, 283.0], [59.6, 284.0], [59.7, 284.0], [59.8, 284.0], [59.9, 285.0], [60.0, 285.0], [60.1, 286.0], [60.2, 286.0], [60.3, 286.0], [60.4, 287.0], [60.5, 287.0], [60.6, 287.0], [60.7, 288.0], [60.8, 288.0], [60.9, 289.0], [61.0, 289.0], [61.1, 290.0], [61.2, 290.0], [61.3, 293.0], [61.4, 294.0], [61.5, 294.0], [61.6, 294.0], [61.7, 294.0], [61.8, 295.0], [61.9, 296.0], [62.0, 296.0], [62.1, 297.0], [62.2, 297.0], [62.3, 298.0], [62.4, 299.0], [62.5, 299.0], [62.6, 300.0], [62.7, 301.0], [62.8, 301.0], [62.9, 302.0], [63.0, 303.0], [63.1, 304.0], [63.2, 304.0], [63.3, 305.0], [63.4, 305.0], [63.5, 305.0], [63.6, 306.0], [63.7, 306.0], [63.8, 306.0], [63.9, 306.0], [64.0, 307.0], [64.1, 307.0], [64.2, 307.0], [64.3, 307.0], [64.4, 309.0], [64.5, 309.0], [64.6, 309.0], [64.7, 310.0], [64.8, 310.0], [64.9, 314.0], [65.0, 314.0], [65.1, 315.0], [65.2, 320.0], [65.3, 321.0], [65.4, 322.0], [65.5, 324.0], [65.6, 325.0], [65.7, 325.0], [65.8, 326.0], [65.9, 326.0], [66.0, 327.0], [66.1, 328.0], [66.2, 333.0], [66.3, 336.0], [66.4, 340.0], [66.5, 340.0], [66.6, 340.0], [66.7, 353.0], [66.8, 356.0], [66.9, 360.0], [67.0, 360.0], [67.1, 363.0], [67.2, 364.0], [67.3, 367.0], [67.4, 367.0], [67.5, 368.0], [67.6, 369.0], [67.7, 371.0], [67.8, 371.0], [67.9, 373.0], [68.0, 374.0], [68.1, 374.0], [68.2, 376.0], [68.3, 379.0], [68.4, 381.0], [68.5, 384.0], [68.6, 386.0], [68.7, 386.0], [68.8, 386.0], [68.9, 391.0], [69.0, 393.0], [69.1, 403.0], [69.2, 404.0], [69.3, 405.0], [69.4, 406.0], [69.5, 408.0], [69.6, 408.0], [69.7, 408.0], [69.8, 410.0], [69.9, 415.0], [70.0, 415.0], [70.1, 416.0], [70.2, 416.0], [70.3, 416.0], [70.4, 419.0], [70.5, 420.0], [70.6, 421.0], [70.7, 423.0], [70.8, 424.0], [70.9, 424.0], [71.0, 428.0], [71.1, 429.0], [71.2, 431.0], [71.3, 437.0], [71.4, 441.0], [71.5, 443.0], [71.6, 443.0], [71.7, 443.0], [71.8, 444.0], [71.9, 446.0], [72.0, 448.0], [72.1, 455.0], [72.2, 458.0], [72.3, 458.0], [72.4, 460.0], [72.5, 460.0], [72.6, 462.0], [72.7, 462.0], [72.8, 464.0], [72.9, 464.0], [73.0, 466.0], [73.1, 466.0], [73.2, 466.0], [73.3, 468.0], [73.4, 471.0], [73.5, 472.0], [73.6, 475.0], [73.7, 475.0], [73.8, 475.0], [73.9, 476.0], [74.0, 481.0], [74.1, 482.0], [74.2, 482.0], [74.3, 483.0], [74.4, 483.0], [74.5, 483.0], [74.6, 484.0], [74.7, 484.0], [74.8, 484.0], [74.9, 485.0], [75.0, 486.0], [75.1, 486.0], [75.2, 487.0], [75.3, 487.0], [75.4, 487.0], [75.5, 488.0], [75.6, 489.0], [75.7, 489.0], [75.8, 490.0], [75.9, 492.0], [76.0, 493.0], [76.1, 493.0], [76.2, 494.0], [76.3, 496.0], [76.4, 497.0], [76.5, 498.0], [76.6, 498.0], [76.7, 499.0], [76.8, 499.0], [76.9, 501.0], [77.0, 502.0], [77.1, 504.0], [77.2, 504.0], [77.3, 504.0], [77.4, 506.0], [77.5, 507.0], [77.6, 507.0], [77.7, 509.0], [77.8, 510.0], [77.9, 512.0], [78.0, 512.0], [78.1, 513.0], [78.2, 513.0], [78.3, 514.0], [78.4, 514.0], [78.5, 515.0], [78.6, 516.0], [78.7, 517.0], [78.8, 517.0], [78.9, 517.0], [79.0, 520.0], [79.1, 520.0], [79.2, 520.0], [79.3, 521.0], [79.4, 521.0], [79.5, 522.0], [79.6, 522.0], [79.7, 522.0], [79.8, 523.0], [79.9, 523.0], [80.0, 523.0], [80.1, 523.0], [80.2, 524.0], [80.3, 526.0], [80.4, 527.0], [80.5, 527.0], [80.6, 528.0], [80.7, 528.0], [80.8, 530.0], [80.9, 531.0], [81.0, 531.0], [81.1, 532.0], [81.2, 532.0], [81.3, 533.0], [81.4, 533.0], [81.5, 533.0], [81.6, 534.0], [81.7, 536.0], [81.8, 536.0], [81.9, 538.0], [82.0, 538.0], [82.1, 539.0], [82.2, 539.0], [82.3, 541.0], [82.4, 542.0], [82.5, 542.0], [82.6, 542.0], [82.7, 545.0], [82.8, 545.0], [82.9, 546.0], [83.0, 548.0], [83.1, 549.0], [83.2, 550.0], [83.3, 551.0], [83.4, 553.0], [83.5, 555.0], [83.6, 555.0], [83.7, 556.0], [83.8, 556.0], [83.9, 556.0], [84.0, 557.0], [84.1, 557.0], [84.2, 559.0], [84.3, 560.0], [84.4, 561.0], [84.5, 562.0], [84.6, 564.0], [84.7, 568.0], [84.8, 569.0], [84.9, 569.0], [85.0, 571.0], [85.1, 573.0], [85.2, 575.0], [85.3, 575.0], [85.4, 581.0], [85.5, 581.0], [85.6, 581.0], [85.7, 582.0], [85.8, 586.0], [85.9, 586.0], [86.0, 592.0], [86.1, 592.0], [86.2, 592.0], [86.3, 594.0], [86.4, 596.0], [86.5, 597.0], [86.6, 599.0], [86.7, 599.0], [86.8, 602.0], [86.9, 604.0], [87.0, 607.0], [87.1, 611.0], [87.2, 612.0], [87.3, 616.0], [87.4, 617.0], [87.5, 619.0], [87.6, 620.0], [87.7, 620.0], [87.8, 630.0], [87.9, 633.0], [88.0, 633.0], [88.1, 649.0], [88.2, 654.0], [88.3, 663.0], [88.4, 665.0], [88.5, 668.0], [88.6, 673.0], [88.7, 674.0], [88.8, 674.0], [88.9, 675.0], [89.0, 676.0], [89.1, 676.0], [89.2, 677.0], [89.3, 680.0], [89.4, 680.0], [89.5, 684.0], [89.6, 685.0], [89.7, 687.0], [89.8, 690.0], [89.9, 693.0], [90.0, 693.0], [90.1, 694.0], [90.2, 694.0], [90.3, 694.0], [90.4, 696.0], [90.5, 696.0], [90.6, 697.0], [90.7, 697.0], [90.8, 701.0], [90.9, 703.0], [91.0, 704.0], [91.1, 706.0], [91.2, 706.0], [91.3, 706.0], [91.4, 707.0], [91.5, 708.0], [91.6, 711.0], [91.7, 712.0], [91.8, 713.0], [91.9, 713.0], [92.0, 715.0], [92.1, 716.0], [92.2, 716.0], [92.3, 717.0], [92.4, 718.0], [92.5, 720.0], [92.6, 720.0], [92.7, 722.0], [92.8, 723.0], [92.9, 723.0], [93.0, 725.0], [93.1, 728.0], [93.2, 733.0], [93.3, 745.0], [93.4, 749.0], [93.5, 760.0], [93.6, 763.0], [93.7, 769.0], [93.8, 770.0], [93.9, 794.0], [94.0, 802.0], [94.1, 803.0], [94.2, 804.0], [94.3, 819.0], [94.4, 820.0], [94.5, 820.0], [94.6, 833.0], [94.7, 839.0], [94.8, 842.0], [94.9, 845.0], [95.0, 845.0], [95.1, 846.0], [95.2, 848.0], [95.3, 849.0], [95.4, 849.0], [95.5, 849.0], [95.6, 879.0], [95.7, 881.0], [95.8, 886.0], [95.9, 893.0], [96.0, 896.0], [96.1, 902.0], [96.2, 902.0], [96.3, 903.0], [96.4, 903.0], [96.5, 908.0], [96.6, 909.0], [96.7, 910.0], [96.8, 910.0], [96.9, 911.0], [97.0, 919.0], [97.1, 924.0], [97.2, 945.0], [97.3, 991.0], [97.4, 996.0], [97.5, 1001.0], [97.6, 1003.0], [97.7, 1008.0], [97.8, 1012.0], [97.9, 1014.0], [98.0, 1023.0], [98.1, 1025.0], [98.2, 1028.0], [98.3, 1030.0], [98.4, 1032.0], [98.5, 1039.0], [98.6, 1040.0], [98.7, 1043.0], [98.8, 1045.0], [98.9, 1045.0], [99.0, 1050.0], [99.1, 1052.0], [99.2, 1053.0], [99.3, 1056.0], [99.4, 1058.0], [99.5, 1058.0], [99.6, 1068.0], [99.7, 1071.0], [99.8, 1089.0], [99.9, 1093.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 4.0], [6.4, 5.0], [6.5, 6.0], [6.6, 6.0], [6.7, 7.0], [6.8, 7.0], [6.9, 8.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 14.0], [7.9, 14.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 15.0], [8.6, 15.0], [8.7, 16.0], [8.8, 16.0], [8.9, 16.0], [9.0, 16.0], [9.1, 17.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 21.0], [10.0, 21.0], [10.1, 21.0], [10.2, 21.0], [10.3, 21.0], [10.4, 21.0], [10.5, 21.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 24.0], [12.0, 24.0], [12.1, 24.0], [12.2, 24.0], [12.3, 25.0], [12.4, 25.0], [12.5, 25.0], [12.6, 26.0], [12.7, 26.0], [12.8, 26.0], [12.9, 27.0], [13.0, 27.0], [13.1, 27.0], [13.2, 27.0], [13.3, 27.0], [13.4, 27.0], [13.5, 28.0], [13.6, 28.0], [13.7, 28.0], [13.8, 28.0], [13.9, 28.0], [14.0, 28.0], [14.1, 28.0], [14.2, 29.0], [14.3, 29.0], [14.4, 29.0], [14.5, 29.0], [14.6, 29.0], [14.7, 29.0], [14.8, 29.0], [14.9, 30.0], [15.0, 30.0], [15.1, 30.0], [15.2, 30.0], [15.3, 30.0], [15.4, 30.0], [15.5, 30.0], [15.6, 30.0], [15.7, 30.0], [15.8, 31.0], [15.9, 31.0], [16.0, 31.0], [16.1, 31.0], [16.2, 31.0], [16.3, 31.0], [16.4, 32.0], [16.5, 33.0], [16.6, 33.0], [16.7, 34.0], [16.8, 34.0], [16.9, 34.0], [17.0, 34.0], [17.1, 34.0], [17.2, 35.0], [17.3, 35.0], [17.4, 35.0], [17.5, 35.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 36.0], [18.0, 36.0], [18.1, 36.0], [18.2, 36.0], [18.3, 36.0], [18.4, 36.0], [18.5, 37.0], [18.6, 37.0], [18.7, 37.0], [18.8, 37.0], [18.9, 37.0], [19.0, 37.0], [19.1, 37.0], [19.2, 38.0], [19.3, 38.0], [19.4, 38.0], [19.5, 38.0], [19.6, 38.0], [19.7, 39.0], [19.8, 39.0], [19.9, 39.0], [20.0, 40.0], [20.1, 40.0], [20.2, 40.0], [20.3, 41.0], [20.4, 41.0], [20.5, 41.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 44.0], [22.3, 44.0], [22.4, 44.0], [22.5, 44.0], [22.6, 44.0], [22.7, 45.0], [22.8, 45.0], [22.9, 45.0], [23.0, 45.0], [23.1, 45.0], [23.2, 45.0], [23.3, 45.0], [23.4, 45.0], [23.5, 46.0], [23.6, 46.0], [23.7, 46.0], [23.8, 46.0], [23.9, 46.0], [24.0, 46.0], [24.1, 46.0], [24.2, 46.0], [24.3, 46.0], [24.4, 46.0], [24.5, 46.0], [24.6, 46.0], [24.7, 47.0], [24.8, 47.0], [24.9, 47.0], [25.0, 48.0], [25.1, 48.0], [25.2, 48.0], [25.3, 48.0], [25.4, 48.0], [25.5, 49.0], [25.6, 49.0], [25.7, 49.0], [25.8, 49.0], [25.9, 49.0], [26.0, 50.0], [26.1, 50.0], [26.2, 50.0], [26.3, 50.0], [26.4, 50.0], [26.5, 50.0], [26.6, 50.0], [26.7, 50.0], [26.8, 50.0], [26.9, 51.0], [27.0, 51.0], [27.1, 51.0], [27.2, 51.0], [27.3, 51.0], [27.4, 51.0], [27.5, 51.0], [27.6, 51.0], [27.7, 51.0], [27.8, 51.0], [27.9, 52.0], [28.0, 52.0], [28.1, 52.0], [28.2, 52.0], [28.3, 52.0], [28.4, 52.0], [28.5, 52.0], [28.6, 52.0], [28.7, 52.0], [28.8, 52.0], [28.9, 52.0], [29.0, 52.0], [29.1, 52.0], [29.2, 52.0], [29.3, 52.0], [29.4, 52.0], [29.5, 53.0], [29.6, 53.0], [29.7, 53.0], [29.8, 53.0], [29.9, 53.0], [30.0, 53.0], [30.1, 53.0], [30.2, 53.0], [30.3, 53.0], [30.4, 53.0], [30.5, 53.0], [30.6, 53.0], [30.7, 53.0], [30.8, 53.0], [30.9, 54.0], [31.0, 54.0], [31.1, 54.0], [31.2, 54.0], [31.3, 54.0], [31.4, 54.0], [31.5, 54.0], [31.6, 54.0], [31.7, 54.0], [31.8, 54.0], [31.9, 54.0], [32.0, 54.0], [32.1, 55.0], [32.2, 55.0], [32.3, 55.0], [32.4, 55.0], [32.5, 55.0], [32.6, 55.0], [32.7, 55.0], [32.8, 55.0], [32.9, 56.0], [33.0, 56.0], [33.1, 56.0], [33.2, 56.0], [33.3, 56.0], [33.4, 56.0], [33.5, 56.0], [33.6, 56.0], [33.7, 56.0], [33.8, 56.0], [33.9, 56.0], [34.0, 57.0], [34.1, 57.0], [34.2, 57.0], [34.3, 57.0], [34.4, 57.0], [34.5, 57.0], [34.6, 57.0], [34.7, 57.0], [34.8, 57.0], [34.9, 57.0], [35.0, 57.0], [35.1, 57.0], [35.2, 57.0], [35.3, 57.0], [35.4, 57.0], [35.5, 58.0], [35.6, 58.0], [35.7, 58.0], [35.8, 58.0], [35.9, 58.0], [36.0, 58.0], [36.1, 58.0], [36.2, 58.0], [36.3, 58.0], [36.4, 58.0], [36.5, 58.0], [36.6, 58.0], [36.7, 58.0], [36.8, 58.0], [36.9, 58.0], [37.0, 58.0], [37.1, 58.0], [37.2, 58.0], [37.3, 58.0], [37.4, 58.0], [37.5, 59.0], [37.6, 59.0], [37.7, 59.0], [37.8, 59.0], [37.9, 59.0], [38.0, 59.0], [38.1, 59.0], [38.2, 59.0], [38.3, 59.0], [38.4, 59.0], [38.5, 59.0], [38.6, 59.0], [38.7, 59.0], [38.8, 59.0], [38.9, 59.0], [39.0, 60.0], [39.1, 60.0], [39.2, 60.0], [39.3, 60.0], [39.4, 60.0], [39.5, 60.0], [39.6, 60.0], [39.7, 60.0], [39.8, 60.0], [39.9, 60.0], [40.0, 60.0], [40.1, 60.0], [40.2, 60.0], [40.3, 60.0], [40.4, 60.0], [40.5, 60.0], [40.6, 60.0], [40.7, 60.0], [40.8, 60.0], [40.9, 61.0], [41.0, 61.0], [41.1, 61.0], [41.2, 61.0], [41.3, 61.0], [41.4, 61.0], [41.5, 61.0], [41.6, 61.0], [41.7, 61.0], [41.8, 61.0], [41.9, 61.0], [42.0, 61.0], [42.1, 61.0], [42.2, 61.0], [42.3, 61.0], [42.4, 61.0], [42.5, 61.0], [42.6, 61.0], [42.7, 61.0], [42.8, 61.0], [42.9, 62.0], [43.0, 62.0], [43.1, 62.0], [43.2, 62.0], [43.3, 62.0], [43.4, 62.0], [43.5, 62.0], [43.6, 62.0], [43.7, 62.0], [43.8, 62.0], [43.9, 62.0], [44.0, 62.0], [44.1, 62.0], [44.2, 62.0], [44.3, 62.0], [44.4, 62.0], [44.5, 62.0], [44.6, 63.0], [44.7, 63.0], [44.8, 63.0], [44.9, 63.0], [45.0, 63.0], [45.1, 63.0], [45.2, 63.0], [45.3, 63.0], [45.4, 63.0], [45.5, 63.0], [45.6, 63.0], [45.7, 63.0], [45.8, 63.0], [45.9, 63.0], [46.0, 63.0], [46.1, 63.0], [46.2, 63.0], [46.3, 64.0], [46.4, 64.0], [46.5, 64.0], [46.6, 64.0], [46.7, 64.0], [46.8, 64.0], [46.9, 64.0], [47.0, 64.0], [47.1, 64.0], [47.2, 64.0], [47.3, 64.0], [47.4, 64.0], [47.5, 64.0], [47.6, 64.0], [47.7, 64.0], [47.8, 65.0], [47.9, 65.0], [48.0, 65.0], [48.1, 65.0], [48.2, 65.0], [48.3, 65.0], [48.4, 65.0], [48.5, 65.0], [48.6, 65.0], [48.7, 65.0], [48.8, 65.0], [48.9, 65.0], [49.0, 65.0], [49.1, 65.0], [49.2, 65.0], [49.3, 65.0], [49.4, 66.0], [49.5, 66.0], [49.6, 66.0], [49.7, 66.0], [49.8, 66.0], [49.9, 66.0], [50.0, 66.0], [50.1, 66.0], [50.2, 66.0], [50.3, 66.0], [50.4, 66.0], [50.5, 66.0], [50.6, 66.0], [50.7, 66.0], [50.8, 67.0], [50.9, 67.0], [51.0, 67.0], [51.1, 67.0], [51.2, 67.0], [51.3, 67.0], [51.4, 67.0], [51.5, 67.0], [51.6, 67.0], [51.7, 67.0], [51.8, 67.0], [51.9, 67.0], [52.0, 67.0], [52.1, 68.0], [52.2, 68.0], [52.3, 68.0], [52.4, 68.0], [52.5, 68.0], [52.6, 68.0], [52.7, 68.0], [52.8, 68.0], [52.9, 68.0], [53.0, 68.0], [53.1, 68.0], [53.2, 68.0], [53.3, 68.0], [53.4, 68.0], [53.5, 68.0], [53.6, 69.0], [53.7, 69.0], [53.8, 69.0], [53.9, 69.0], [54.0, 69.0], [54.1, 69.0], [54.2, 69.0], [54.3, 69.0], [54.4, 69.0], [54.5, 69.0], [54.6, 69.0], [54.7, 69.0], [54.8, 69.0], [54.9, 69.0], [55.0, 69.0], [55.1, 69.0], [55.2, 69.0], [55.3, 70.0], [55.4, 70.0], [55.5, 70.0], [55.6, 70.0], [55.7, 70.0], [55.8, 70.0], [55.9, 70.0], [56.0, 70.0], [56.1, 70.0], [56.2, 70.0], [56.3, 70.0], [56.4, 70.0], [56.5, 71.0], [56.6, 71.0], [56.7, 71.0], [56.8, 71.0], [56.9, 71.0], [57.0, 71.0], [57.1, 71.0], [57.2, 71.0], [57.3, 72.0], [57.4, 72.0], [57.5, 72.0], [57.6, 72.0], [57.7, 72.0], [57.8, 72.0], [57.9, 73.0], [58.0, 73.0], [58.1, 73.0], [58.2, 73.0], [58.3, 73.0], [58.4, 73.0], [58.5, 73.0], [58.6, 73.0], [58.7, 73.0], [58.8, 73.0], [58.9, 73.0], [59.0, 73.0], [59.1, 73.0], [59.2, 73.0], [59.3, 73.0], [59.4, 73.0], [59.5, 73.0], [59.6, 73.0], [59.7, 74.0], [59.8, 74.0], [59.9, 74.0], [60.0, 74.0], [60.1, 74.0], [60.2, 74.0], [60.3, 74.0], [60.4, 74.0], [60.5, 75.0], [60.6, 75.0], [60.7, 75.0], [60.8, 75.0], [60.9, 75.0], [61.0, 75.0], [61.1, 75.0], [61.2, 75.0], [61.3, 75.0], [61.4, 75.0], [61.5, 75.0], [61.6, 75.0], [61.7, 76.0], [61.8, 76.0], [61.9, 76.0], [62.0, 76.0], [62.1, 76.0], [62.2, 76.0], [62.3, 76.0], [62.4, 76.0], [62.5, 76.0], [62.6, 77.0], [62.7, 77.0], [62.8, 77.0], [62.9, 77.0], [63.0, 77.0], [63.1, 77.0], [63.2, 77.0], [63.3, 77.0], [63.4, 77.0], [63.5, 77.0], [63.6, 77.0], [63.7, 77.0], [63.8, 77.0], [63.9, 77.0], [64.0, 77.0], [64.1, 78.0], [64.2, 78.0], [64.3, 78.0], [64.4, 78.0], [64.5, 78.0], [64.6, 78.0], [64.7, 78.0], [64.8, 78.0], [64.9, 78.0], [65.0, 78.0], [65.1, 78.0], [65.2, 78.0], [65.3, 78.0], [65.4, 78.0], [65.5, 79.0], [65.6, 79.0], [65.7, 79.0], [65.8, 79.0], [65.9, 79.0], [66.0, 79.0], [66.1, 79.0], [66.2, 80.0], [66.3, 80.0], [66.4, 80.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 80.0], [67.2, 81.0], [67.3, 81.0], [67.4, 81.0], [67.5, 81.0], [67.6, 81.0], [67.7, 81.0], [67.8, 81.0], [67.9, 82.0], [68.0, 82.0], [68.1, 82.0], [68.2, 82.0], [68.3, 82.0], [68.4, 83.0], [68.5, 83.0], [68.6, 83.0], [68.7, 83.0], [68.8, 83.0], [68.9, 83.0], [69.0, 83.0], [69.1, 83.0], [69.2, 83.0], [69.3, 83.0], [69.4, 83.0], [69.5, 83.0], [69.6, 83.0], [69.7, 83.0], [69.8, 83.0], [69.9, 84.0], [70.0, 84.0], [70.1, 84.0], [70.2, 84.0], [70.3, 84.0], [70.4, 84.0], [70.5, 84.0], [70.6, 84.0], [70.7, 84.0], [70.8, 85.0], [70.9, 85.0], [71.0, 85.0], [71.1, 85.0], [71.2, 85.0], [71.3, 85.0], [71.4, 85.0], [71.5, 85.0], [71.6, 86.0], [71.7, 86.0], [71.8, 86.0], [71.9, 86.0], [72.0, 86.0], [72.1, 86.0], [72.2, 86.0], [72.3, 87.0], [72.4, 87.0], [72.5, 87.0], [72.6, 87.0], [72.7, 87.0], [72.8, 87.0], [72.9, 87.0], [73.0, 87.0], [73.1, 88.0], [73.2, 88.0], [73.3, 88.0], [73.4, 88.0], [73.5, 88.0], [73.6, 88.0], [73.7, 89.0], [73.8, 89.0], [73.9, 89.0], [74.0, 89.0], [74.1, 89.0], [74.2, 90.0], [74.3, 90.0], [74.4, 90.0], [74.5, 90.0], [74.6, 90.0], [74.7, 90.0], [74.8, 91.0], [74.9, 91.0], [75.0, 91.0], [75.1, 91.0], [75.2, 91.0], [75.3, 91.0], [75.4, 91.0], [75.5, 91.0], [75.6, 91.0], [75.7, 91.0], [75.8, 92.0], [75.9, 92.0], [76.0, 92.0], [76.1, 92.0], [76.2, 92.0], [76.3, 92.0], [76.4, 92.0], [76.5, 92.0], [76.6, 92.0], [76.7, 92.0], [76.8, 93.0], [76.9, 93.0], [77.0, 93.0], [77.1, 93.0], [77.2, 93.0], [77.3, 93.0], [77.4, 94.0], [77.5, 94.0], [77.6, 94.0], [77.7, 94.0], [77.8, 94.0], [77.9, 94.0], [78.0, 94.0], [78.1, 95.0], [78.2, 95.0], [78.3, 95.0], [78.4, 95.0], [78.5, 95.0], [78.6, 95.0], [78.7, 95.0], [78.8, 95.0], [78.9, 95.0], [79.0, 96.0], [79.1, 96.0], [79.2, 96.0], [79.3, 96.0], [79.4, 96.0], [79.5, 96.0], [79.6, 96.0], [79.7, 96.0], [79.8, 96.0], [79.9, 96.0], [80.0, 97.0], [80.1, 97.0], [80.2, 97.0], [80.3, 97.0], [80.4, 97.0], [80.5, 97.0], [80.6, 97.0], [80.7, 98.0], [80.8, 98.0], [80.9, 98.0], [81.0, 99.0], [81.1, 99.0], [81.2, 99.0], [81.3, 99.0], [81.4, 99.0], [81.5, 99.0], [81.6, 100.0], [81.7, 100.0], [81.8, 100.0], [81.9, 100.0], [82.0, 100.0], [82.1, 100.0], [82.2, 101.0], [82.3, 101.0], [82.4, 101.0], [82.5, 101.0], [82.6, 101.0], [82.7, 102.0], [82.8, 102.0], [82.9, 102.0], [83.0, 102.0], [83.1, 102.0], [83.2, 103.0], [83.3, 103.0], [83.4, 103.0], [83.5, 103.0], [83.6, 103.0], [83.7, 104.0], [83.8, 104.0], [83.9, 104.0], [84.0, 104.0], [84.1, 104.0], [84.2, 105.0], [84.3, 105.0], [84.4, 105.0], [84.5, 105.0], [84.6, 105.0], [84.7, 105.0], [84.8, 105.0], [84.9, 106.0], [85.0, 106.0], [85.1, 107.0], [85.2, 107.0], [85.3, 107.0], [85.4, 107.0], [85.5, 107.0], [85.6, 107.0], [85.7, 108.0], [85.8, 108.0], [85.9, 109.0], [86.0, 109.0], [86.1, 109.0], [86.2, 109.0], [86.3, 109.0], [86.4, 109.0], [86.5, 110.0], [86.6, 110.0], [86.7, 110.0], [86.8, 110.0], [86.9, 111.0], [87.0, 111.0], [87.1, 111.0], [87.2, 111.0], [87.3, 111.0], [87.4, 111.0], [87.5, 112.0], [87.6, 112.0], [87.7, 112.0], [87.8, 112.0], [87.9, 113.0], [88.0, 113.0], [88.1, 114.0], [88.2, 114.0], [88.3, 114.0], [88.4, 114.0], [88.5, 115.0], [88.6, 115.0], [88.7, 115.0], [88.8, 115.0], [88.9, 115.0], [89.0, 115.0], [89.1, 115.0], [89.2, 116.0], [89.3, 116.0], [89.4, 117.0], [89.5, 117.0], [89.6, 117.0], [89.7, 117.0], [89.8, 117.0], [89.9, 118.0], [90.0, 118.0], [90.1, 118.0], [90.2, 118.0], [90.3, 118.0], [90.4, 118.0], [90.5, 118.0], [90.6, 118.0], [90.7, 119.0], [90.8, 119.0], [90.9, 120.0], [91.0, 120.0], [91.1, 120.0], [91.2, 120.0], [91.3, 121.0], [91.4, 122.0], [91.5, 122.0], [91.6, 122.0], [91.7, 122.0], [91.8, 123.0], [91.9, 124.0], [92.0, 124.0], [92.1, 124.0], [92.2, 124.0], [92.3, 124.0], [92.4, 125.0], [92.5, 125.0], [92.6, 125.0], [92.7, 126.0], [92.8, 126.0], [92.9, 127.0], [93.0, 127.0], [93.1, 127.0], [93.2, 128.0], [93.3, 128.0], [93.4, 130.0], [93.5, 130.0], [93.6, 130.0], [93.7, 131.0], [93.8, 131.0], [93.9, 133.0], [94.0, 135.0], [94.1, 137.0], [94.2, 137.0], [94.3, 137.0], [94.4, 138.0], [94.5, 138.0], [94.6, 138.0], [94.7, 138.0], [94.8, 139.0], [94.9, 139.0], [95.0, 139.0], [95.1, 139.0], [95.2, 139.0], [95.3, 139.0], [95.4, 140.0], [95.5, 140.0], [95.6, 140.0], [95.7, 140.0], [95.8, 141.0], [95.9, 141.0], [96.0, 141.0], [96.1, 141.0], [96.2, 141.0], [96.3, 142.0], [96.4, 143.0], [96.5, 143.0], [96.6, 143.0], [96.7, 144.0], [96.8, 145.0], [96.9, 145.0], [97.0, 146.0], [97.1, 146.0], [97.2, 146.0], [97.3, 147.0], [97.4, 148.0], [97.5, 148.0], [97.6, 149.0], [97.7, 149.0], [97.8, 149.0], [97.9, 150.0], [98.0, 152.0], [98.1, 153.0], [98.2, 153.0], [98.3, 154.0], [98.4, 155.0], [98.5, 155.0], [98.6, 155.0], [98.7, 156.0], [98.8, 157.0], [98.9, 158.0], [99.0, 159.0], [99.1, 163.0], [99.2, 163.0], [99.3, 164.0], [99.4, 166.0], [99.5, 168.0], [99.6, 169.0], [99.7, 170.0], [99.8, 171.0], [99.9, 329.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 30.0], [0.1, 30.0], [0.2, 30.0], [0.3, 31.0], [0.4, 31.0], [0.5, 34.0], [0.6, 34.0], [0.7, 35.0], [0.8, 35.0], [0.9, 36.0], [1.0, 37.0], [1.1, 37.0], [1.2, 38.0], [1.3, 38.0], [1.4, 38.0], [1.5, 38.0], [1.6, 38.0], [1.7, 39.0], [1.8, 39.0], [1.9, 39.0], [2.0, 39.0], [2.1, 40.0], [2.2, 40.0], [2.3, 40.0], [2.4, 40.0], [2.5, 40.0], [2.6, 40.0], [2.7, 40.0], [2.8, 41.0], [2.9, 41.0], [3.0, 41.0], [3.1, 42.0], [3.2, 42.0], [3.3, 42.0], [3.4, 42.0], [3.5, 42.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 44.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 46.0], [4.6, 46.0], [4.7, 46.0], [4.8, 47.0], [4.9, 47.0], [5.0, 48.0], [5.1, 48.0], [5.2, 48.0], [5.3, 48.0], [5.4, 49.0], [5.5, 49.0], [5.6, 50.0], [5.7, 50.0], [5.8, 50.0], [5.9, 51.0], [6.0, 52.0], [6.1, 53.0], [6.2, 53.0], [6.3, 54.0], [6.4, 54.0], [6.5, 55.0], [6.6, 56.0], [6.7, 56.0], [6.8, 57.0], [6.9, 57.0], [7.0, 57.0], [7.1, 57.0], [7.2, 58.0], [7.3, 58.0], [7.4, 59.0], [7.5, 59.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 60.0], [8.2, 60.0], [8.3, 60.0], [8.4, 60.0], [8.5, 60.0], [8.6, 61.0], [8.7, 61.0], [8.8, 61.0], [8.9, 61.0], [9.0, 61.0], [9.1, 61.0], [9.2, 61.0], [9.3, 61.0], [9.4, 61.0], [9.5, 62.0], [9.6, 62.0], [9.7, 62.0], [9.8, 62.0], [9.9, 63.0], [10.0, 63.0], [10.1, 65.0], [10.2, 66.0], [10.3, 67.0], [10.4, 68.0], [10.5, 68.0], [10.6, 70.0], [10.7, 71.0], [10.8, 71.0], [10.9, 75.0], [11.0, 76.0], [11.1, 76.0], [11.2, 77.0], [11.3, 77.0], [11.4, 77.0], [11.5, 78.0], [11.6, 78.0], [11.7, 78.0], [11.8, 78.0], [11.9, 78.0], [12.0, 78.0], [12.1, 78.0], [12.2, 79.0], [12.3, 81.0], [12.4, 83.0], [12.5, 83.0], [12.6, 83.0], [12.7, 83.0], [12.8, 86.0], [12.9, 86.0], [13.0, 88.0], [13.1, 88.0], [13.2, 88.0], [13.3, 90.0], [13.4, 90.0], [13.5, 91.0], [13.6, 91.0], [13.7, 91.0], [13.8, 91.0], [13.9, 92.0], [14.0, 92.0], [14.1, 92.0], [14.2, 92.0], [14.3, 92.0], [14.4, 93.0], [14.5, 93.0], [14.6, 93.0], [14.7, 93.0], [14.8, 93.0], [14.9, 93.0], [15.0, 94.0], [15.1, 94.0], [15.2, 94.0], [15.3, 94.0], [15.4, 94.0], [15.5, 94.0], [15.6, 95.0], [15.7, 95.0], [15.8, 95.0], [15.9, 95.0], [16.0, 96.0], [16.1, 97.0], [16.2, 98.0], [16.3, 99.0], [16.4, 99.0], [16.5, 99.0], [16.6, 99.0], [16.7, 100.0], [16.8, 101.0], [16.9, 101.0], [17.0, 101.0], [17.1, 101.0], [17.2, 102.0], [17.3, 102.0], [17.4, 102.0], [17.5, 103.0], [17.6, 103.0], [17.7, 103.0], [17.8, 103.0], [17.9, 104.0], [18.0, 105.0], [18.1, 105.0], [18.2, 106.0], [18.3, 106.0], [18.4, 107.0], [18.5, 108.0], [18.6, 109.0], [18.7, 109.0], [18.8, 110.0], [18.9, 110.0], [19.0, 110.0], [19.1, 111.0], [19.2, 115.0], [19.3, 116.0], [19.4, 116.0], [19.5, 117.0], [19.6, 118.0], [19.7, 118.0], [19.8, 118.0], [19.9, 118.0], [20.0, 119.0], [20.1, 119.0], [20.2, 119.0], [20.3, 119.0], [20.4, 119.0], [20.5, 119.0], [20.6, 120.0], [20.7, 120.0], [20.8, 121.0], [20.9, 121.0], [21.0, 122.0], [21.1, 122.0], [21.2, 122.0], [21.3, 122.0], [21.4, 123.0], [21.5, 123.0], [21.6, 123.0], [21.7, 123.0], [21.8, 124.0], [21.9, 124.0], [22.0, 124.0], [22.1, 125.0], [22.2, 125.0], [22.3, 125.0], [22.4, 126.0], [22.5, 126.0], [22.6, 126.0], [22.7, 126.0], [22.8, 127.0], [22.9, 127.0], [23.0, 127.0], [23.1, 127.0], [23.2, 128.0], [23.3, 128.0], [23.4, 128.0], [23.5, 128.0], [23.6, 128.0], [23.7, 128.0], [23.8, 130.0], [23.9, 130.0], [24.0, 130.0], [24.1, 130.0], [24.2, 131.0], [24.3, 131.0], [24.4, 131.0], [24.5, 131.0], [24.6, 131.0], [24.7, 132.0], [24.8, 132.0], [24.9, 132.0], [25.0, 132.0], [25.1, 133.0], [25.2, 133.0], [25.3, 133.0], [25.4, 133.0], [25.5, 133.0], [25.6, 133.0], [25.7, 133.0], [25.8, 133.0], [25.9, 134.0], [26.0, 134.0], [26.1, 134.0], [26.2, 134.0], [26.3, 134.0], [26.4, 134.0], [26.5, 134.0], [26.6, 135.0], [26.7, 135.0], [26.8, 136.0], [26.9, 136.0], [27.0, 136.0], [27.1, 137.0], [27.2, 137.0], [27.3, 137.0], [27.4, 137.0], [27.5, 137.0], [27.6, 137.0], [27.7, 137.0], [27.8, 137.0], [27.9, 137.0], [28.0, 138.0], [28.1, 138.0], [28.2, 138.0], [28.3, 138.0], [28.4, 138.0], [28.5, 138.0], [28.6, 138.0], [28.7, 139.0], [28.8, 139.0], [28.9, 139.0], [29.0, 139.0], [29.1, 139.0], [29.2, 139.0], [29.3, 140.0], [29.4, 140.0], [29.5, 140.0], [29.6, 141.0], [29.7, 141.0], [29.8, 141.0], [29.9, 141.0], [30.0, 142.0], [30.1, 142.0], [30.2, 143.0], [30.3, 144.0], [30.4, 145.0], [30.5, 147.0], [30.6, 147.0], [30.7, 148.0], [30.8, 150.0], [30.9, 151.0], [31.0, 153.0], [31.1, 153.0], [31.2, 153.0], [31.3, 153.0], [31.4, 153.0], [31.5, 153.0], [31.6, 154.0], [31.7, 154.0], [31.8, 155.0], [31.9, 155.0], [32.0, 157.0], [32.1, 157.0], [32.2, 158.0], [32.3, 158.0], [32.4, 160.0], [32.5, 160.0], [32.6, 161.0], [32.7, 162.0], [32.8, 162.0], [32.9, 164.0], [33.0, 164.0], [33.1, 165.0], [33.2, 166.0], [33.3, 166.0], [33.4, 167.0], [33.5, 167.0], [33.6, 172.0], [33.7, 172.0], [33.8, 173.0], [33.9, 174.0], [34.0, 176.0], [34.1, 177.0], [34.2, 179.0], [34.3, 180.0], [34.4, 181.0], [34.5, 183.0], [34.6, 183.0], [34.7, 183.0], [34.8, 184.0], [34.9, 185.0], [35.0, 187.0], [35.1, 189.0], [35.2, 190.0], [35.3, 194.0], [35.4, 194.0], [35.5, 196.0], [35.6, 197.0], [35.7, 197.0], [35.8, 198.0], [35.9, 199.0], [36.0, 199.0], [36.1, 200.0], [36.2, 200.0], [36.3, 200.0], [36.4, 200.0], [36.5, 202.0], [36.6, 209.0], [36.7, 209.0], [36.8, 209.0], [36.9, 209.0], [37.0, 210.0], [37.1, 210.0], [37.2, 211.0], [37.3, 211.0], [37.4, 214.0], [37.5, 216.0], [37.6, 216.0], [37.7, 216.0], [37.8, 216.0], [37.9, 216.0], [38.0, 217.0], [38.1, 217.0], [38.2, 217.0], [38.3, 218.0], [38.4, 218.0], [38.5, 218.0], [38.6, 218.0], [38.7, 219.0], [38.8, 219.0], [38.9, 219.0], [39.0, 219.0], [39.1, 220.0], [39.2, 220.0], [39.3, 220.0], [39.4, 221.0], [39.5, 221.0], [39.6, 221.0], [39.7, 222.0], [39.8, 222.0], [39.9, 222.0], [40.0, 222.0], [40.1, 223.0], [40.2, 223.0], [40.3, 223.0], [40.4, 223.0], [40.5, 223.0], [40.6, 225.0], [40.7, 225.0], [40.8, 225.0], [40.9, 225.0], [41.0, 226.0], [41.1, 226.0], [41.2, 226.0], [41.3, 226.0], [41.4, 227.0], [41.5, 227.0], [41.6, 227.0], [41.7, 227.0], [41.8, 227.0], [41.9, 228.0], [42.0, 228.0], [42.1, 228.0], [42.2, 228.0], [42.3, 228.0], [42.4, 228.0], [42.5, 229.0], [42.6, 229.0], [42.7, 229.0], [42.8, 229.0], [42.9, 230.0], [43.0, 230.0], [43.1, 230.0], [43.2, 230.0], [43.3, 230.0], [43.4, 230.0], [43.5, 230.0], [43.6, 231.0], [43.7, 231.0], [43.8, 231.0], [43.9, 231.0], [44.0, 231.0], [44.1, 231.0], [44.2, 231.0], [44.3, 232.0], [44.4, 232.0], [44.5, 232.0], [44.6, 232.0], [44.7, 233.0], [44.8, 233.0], [44.9, 233.0], [45.0, 233.0], [45.1, 234.0], [45.2, 234.0], [45.3, 236.0], [45.4, 236.0], [45.5, 236.0], [45.6, 236.0], [45.7, 237.0], [45.8, 238.0], [45.9, 238.0], [46.0, 238.0], [46.1, 239.0], [46.2, 239.0], [46.3, 241.0], [46.4, 241.0], [46.5, 242.0], [46.6, 242.0], [46.7, 242.0], [46.8, 243.0], [46.9, 243.0], [47.0, 243.0], [47.1, 243.0], [47.2, 244.0], [47.3, 244.0], [47.4, 244.0], [47.5, 246.0], [47.6, 246.0], [47.7, 247.0], [47.8, 247.0], [47.9, 248.0], [48.0, 248.0], [48.1, 248.0], [48.2, 248.0], [48.3, 249.0], [48.4, 249.0], [48.5, 249.0], [48.6, 249.0], [48.7, 250.0], [48.8, 250.0], [48.9, 251.0], [49.0, 251.0], [49.1, 251.0], [49.2, 251.0], [49.3, 252.0], [49.4, 252.0], [49.5, 252.0], [49.6, 252.0], [49.7, 252.0], [49.8, 253.0], [49.9, 254.0], [50.0, 254.0], [50.1, 255.0], [50.2, 256.0], [50.3, 257.0], [50.4, 257.0], [50.5, 257.0], [50.6, 257.0], [50.7, 258.0], [50.8, 258.0], [50.9, 258.0], [51.0, 258.0], [51.1, 259.0], [51.2, 259.0], [51.3, 259.0], [51.4, 260.0], [51.5, 260.0], [51.6, 261.0], [51.7, 261.0], [51.8, 261.0], [51.9, 261.0], [52.0, 262.0], [52.1, 262.0], [52.2, 262.0], [52.3, 262.0], [52.4, 263.0], [52.5, 264.0], [52.6, 264.0], [52.7, 264.0], [52.8, 264.0], [52.9, 264.0], [53.0, 265.0], [53.1, 265.0], [53.2, 266.0], [53.3, 266.0], [53.4, 267.0], [53.5, 268.0], [53.6, 268.0], [53.7, 270.0], [53.8, 270.0], [53.9, 271.0], [54.0, 272.0], [54.1, 273.0], [54.2, 273.0], [54.3, 273.0], [54.4, 274.0], [54.5, 274.0], [54.6, 275.0], [54.7, 275.0], [54.8, 277.0], [54.9, 277.0], [55.0, 279.0], [55.1, 279.0], [55.2, 279.0], [55.3, 279.0], [55.4, 280.0], [55.5, 281.0], [55.6, 283.0], [55.7, 284.0], [55.8, 285.0], [55.9, 286.0], [56.0, 286.0], [56.1, 286.0], [56.2, 287.0], [56.3, 287.0], [56.4, 288.0], [56.5, 288.0], [56.6, 290.0], [56.7, 290.0], [56.8, 291.0], [56.9, 291.0], [57.0, 291.0], [57.1, 292.0], [57.2, 294.0], [57.3, 295.0], [57.4, 295.0], [57.5, 296.0], [57.6, 296.0], [57.7, 296.0], [57.8, 296.0], [57.9, 297.0], [58.0, 297.0], [58.1, 297.0], [58.2, 297.0], [58.3, 298.0], [58.4, 299.0], [58.5, 299.0], [58.6, 300.0], [58.7, 300.0], [58.8, 301.0], [58.9, 301.0], [59.0, 301.0], [59.1, 301.0], [59.2, 302.0], [59.3, 303.0], [59.4, 303.0], [59.5, 304.0], [59.6, 304.0], [59.7, 304.0], [59.8, 305.0], [59.9, 305.0], [60.0, 306.0], [60.1, 307.0], [60.2, 307.0], [60.3, 307.0], [60.4, 307.0], [60.5, 307.0], [60.6, 307.0], [60.7, 307.0], [60.8, 309.0], [60.9, 309.0], [61.0, 309.0], [61.1, 310.0], [61.2, 310.0], [61.3, 310.0], [61.4, 310.0], [61.5, 310.0], [61.6, 310.0], [61.7, 310.0], [61.8, 311.0], [61.9, 312.0], [62.0, 312.0], [62.1, 313.0], [62.2, 313.0], [62.3, 313.0], [62.4, 316.0], [62.5, 316.0], [62.6, 317.0], [62.7, 319.0], [62.8, 319.0], [62.9, 319.0], [63.0, 319.0], [63.1, 319.0], [63.2, 320.0], [63.3, 321.0], [63.4, 322.0], [63.5, 324.0], [63.6, 324.0], [63.7, 325.0], [63.8, 326.0], [63.9, 327.0], [64.0, 330.0], [64.1, 330.0], [64.2, 331.0], [64.3, 333.0], [64.4, 335.0], [64.5, 335.0], [64.6, 335.0], [64.7, 335.0], [64.8, 338.0], [64.9, 338.0], [65.0, 339.0], [65.1, 340.0], [65.2, 341.0], [65.3, 342.0], [65.4, 342.0], [65.5, 343.0], [65.6, 343.0], [65.7, 344.0], [65.8, 346.0], [65.9, 346.0], [66.0, 347.0], [66.1, 347.0], [66.2, 347.0], [66.3, 348.0], [66.4, 351.0], [66.5, 351.0], [66.6, 352.0], [66.7, 354.0], [66.8, 355.0], [66.9, 356.0], [67.0, 356.0], [67.1, 357.0], [67.2, 357.0], [67.3, 358.0], [67.4, 358.0], [67.5, 359.0], [67.6, 359.0], [67.7, 360.0], [67.8, 360.0], [67.9, 360.0], [68.0, 361.0], [68.1, 361.0], [68.2, 361.0], [68.3, 363.0], [68.4, 363.0], [68.5, 363.0], [68.6, 363.0], [68.7, 365.0], [68.8, 365.0], [68.9, 367.0], [69.0, 368.0], [69.1, 368.0], [69.2, 368.0], [69.3, 370.0], [69.4, 370.0], [69.5, 371.0], [69.6, 372.0], [69.7, 373.0], [69.8, 373.0], [69.9, 374.0], [70.0, 375.0], [70.1, 376.0], [70.2, 378.0], [70.3, 379.0], [70.4, 380.0], [70.5, 380.0], [70.6, 384.0], [70.7, 384.0], [70.8, 385.0], [70.9, 386.0], [71.0, 386.0], [71.1, 387.0], [71.2, 387.0], [71.3, 391.0], [71.4, 391.0], [71.5, 395.0], [71.6, 396.0], [71.7, 399.0], [71.8, 402.0], [71.9, 403.0], [72.0, 404.0], [72.1, 405.0], [72.2, 405.0], [72.3, 405.0], [72.4, 408.0], [72.5, 410.0], [72.6, 410.0], [72.7, 411.0], [72.8, 412.0], [72.9, 412.0], [73.0, 412.0], [73.1, 412.0], [73.2, 412.0], [73.3, 413.0], [73.4, 414.0], [73.5, 415.0], [73.6, 416.0], [73.7, 417.0], [73.8, 418.0], [73.9, 418.0], [74.0, 419.0], [74.1, 419.0], [74.2, 421.0], [74.3, 421.0], [74.4, 421.0], [74.5, 422.0], [74.6, 422.0], [74.7, 422.0], [74.8, 423.0], [74.9, 423.0], [75.0, 423.0], [75.1, 423.0], [75.2, 423.0], [75.3, 424.0], [75.4, 424.0], [75.5, 424.0], [75.6, 425.0], [75.7, 426.0], [75.8, 426.0], [75.9, 426.0], [76.0, 427.0], [76.1, 427.0], [76.2, 427.0], [76.3, 428.0], [76.4, 428.0], [76.5, 429.0], [76.6, 429.0], [76.7, 429.0], [76.8, 430.0], [76.9, 431.0], [77.0, 431.0], [77.1, 432.0], [77.2, 432.0], [77.3, 432.0], [77.4, 432.0], [77.5, 433.0], [77.6, 433.0], [77.7, 433.0], [77.8, 433.0], [77.9, 434.0], [78.0, 434.0], [78.1, 434.0], [78.2, 435.0], [78.3, 435.0], [78.4, 435.0], [78.5, 435.0], [78.6, 435.0], [78.7, 435.0], [78.8, 436.0], [78.9, 436.0], [79.0, 436.0], [79.1, 436.0], [79.2, 437.0], [79.3, 437.0], [79.4, 438.0], [79.5, 438.0], [79.6, 438.0], [79.7, 439.0], [79.8, 440.0], [79.9, 440.0], [80.0, 440.0], [80.1, 441.0], [80.2, 441.0], [80.3, 441.0], [80.4, 442.0], [80.5, 442.0], [80.6, 443.0], [80.7, 443.0], [80.8, 443.0], [80.9, 444.0], [81.0, 445.0], [81.1, 448.0], [81.2, 449.0], [81.3, 449.0], [81.4, 449.0], [81.5, 450.0], [81.6, 450.0], [81.7, 451.0], [81.8, 452.0], [81.9, 452.0], [82.0, 453.0], [82.1, 454.0], [82.2, 456.0], [82.3, 458.0], [82.4, 458.0], [82.5, 459.0], [82.6, 460.0], [82.7, 460.0], [82.8, 460.0], [82.9, 460.0], [83.0, 461.0], [83.1, 463.0], [83.2, 464.0], [83.3, 464.0], [83.4, 465.0], [83.5, 474.0], [83.6, 482.0], [83.7, 491.0], [83.8, 503.0], [83.9, 515.0], [84.0, 520.0], [84.1, 539.0], [84.2, 569.0], [84.3, 570.0], [84.4, 573.0], [84.5, 574.0], [84.6, 575.0], [84.7, 575.0], [84.8, 576.0], [84.9, 577.0], [85.0, 578.0], [85.1, 578.0], [85.2, 579.0], [85.3, 580.0], [85.4, 580.0], [85.5, 580.0], [85.6, 581.0], [85.7, 582.0], [85.8, 582.0], [85.9, 582.0], [86.0, 582.0], [86.1, 582.0], [86.2, 582.0], [86.3, 583.0], [86.4, 583.0], [86.5, 585.0], [86.6, 585.0], [86.7, 587.0], [86.8, 587.0], [86.9, 588.0], [87.0, 588.0], [87.1, 588.0], [87.2, 589.0], [87.3, 591.0], [87.4, 591.0], [87.5, 592.0], [87.6, 593.0], [87.7, 594.0], [87.8, 595.0], [87.9, 595.0], [88.0, 606.0], [88.1, 607.0], [88.2, 608.0], [88.3, 609.0], [88.4, 610.0], [88.5, 615.0], [88.6, 616.0], [88.7, 623.0], [88.8, 625.0], [88.9, 625.0], [89.0, 628.0], [89.1, 630.0], [89.2, 635.0], [89.3, 637.0], [89.4, 638.0], [89.5, 640.0], [89.6, 642.0], [89.7, 644.0], [89.8, 645.0], [89.9, 645.0], [90.0, 649.0], [90.1, 650.0], [90.2, 652.0], [90.3, 654.0], [90.4, 655.0], [90.5, 656.0], [90.6, 656.0], [90.7, 657.0], [90.8, 657.0], [90.9, 659.0], [91.0, 661.0], [91.1, 661.0], [91.2, 661.0], [91.3, 662.0], [91.4, 662.0], [91.5, 662.0], [91.6, 662.0], [91.7, 664.0], [91.8, 666.0], [91.9, 670.0], [92.0, 670.0], [92.1, 671.0], [92.2, 672.0], [92.3, 673.0], [92.4, 673.0], [92.5, 674.0], [92.6, 675.0], [92.7, 679.0], [92.8, 685.0], [92.9, 686.0], [93.0, 690.0], [93.1, 690.0], [93.2, 693.0], [93.3, 694.0], [93.4, 700.0], [93.5, 703.0], [93.6, 719.0], [93.7, 774.0], [93.8, 789.0], [93.9, 794.0], [94.0, 850.0], [94.1, 851.0], [94.2, 855.0], [94.3, 862.0], [94.4, 863.0], [94.5, 867.0], [94.6, 871.0], [94.7, 874.0], [94.8, 874.0], [94.9, 877.0], [95.0, 878.0], [95.1, 878.0], [95.2, 879.0], [95.3, 879.0], [95.4, 882.0], [95.5, 882.0], [95.6, 885.0], [95.7, 887.0], [95.8, 891.0], [95.9, 891.0], [96.0, 892.0], [96.1, 892.0], [96.2, 893.0], [96.3, 895.0], [96.4, 896.0], [96.5, 897.0], [96.6, 900.0], [96.7, 901.0], [96.8, 902.0], [96.9, 903.0], [97.0, 903.0], [97.1, 904.0], [97.2, 905.0], [97.3, 905.0], [97.4, 914.0], [97.5, 915.0], [97.6, 922.0], [97.7, 927.0], [97.8, 927.0], [97.9, 930.0], [98.0, 933.0], [98.1, 935.0], [98.2, 935.0], [98.3, 937.0], [98.4, 941.0], [98.5, 943.0], [98.6, 1064.0], [98.7, 1069.0], [98.8, 1071.0], [98.9, 1073.0], [99.0, 1073.0], [99.1, 1075.0], [99.2, 1100.0], [99.3, 1147.0], [99.4, 1150.0], [99.5, 1157.0], [99.6, 1160.0], [99.7, 1161.0], [99.8, 1161.0], [99.9, 1169.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 816.0, "series": [{"data": [[0.0, 225.0], [300.0, 66.0], [600.0, 40.0], [700.0, 32.0], [100.0, 254.0], [200.0, 146.0], [400.0, 78.0], [800.0, 21.0], [900.0, 14.0], [500.0, 99.0], [1000.0, 25.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[0.0, 816.0], [300.0, 1.0], [100.0, 183.0]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[0.0, 167.0], [1100.0, 8.0], [300.0, 132.0], [600.0, 54.0], [700.0, 6.0], [100.0, 193.0], [200.0, 225.0], [400.0, 121.0], [800.0, 26.0], [900.0, 20.0], [500.0, 42.0], [1000.0, 6.0]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 393.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2607.0, "series": [{"data": [[0.0, 2607.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 393.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 67.29699999999997, "minX": 1.66892328E12, "maxY": 212.89899999999997, "series": [{"data": [[1.66892328E12, 212.89899999999997]], "isOverall": false, "label": "client-to-gateway-non-caching (GET)", "isController": false}, {"data": [[1.66892328E12, 192.27499999999995]], "isOverall": false, "label": "client-to-application (GET)", "isController": false}, {"data": [[1.66892328E12, 67.29699999999997]], "isOverall": false, "label": "client-to-gateway-caching (GET)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66892328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.75, "minX": 1.0, "maxY": 1169.0, "series": [{"data": [[2.0, 990.5], [3.0, 919.0], [4.0, 568.0], [5.0, 903.0], [7.0, 890.0], [8.0, 9.0], [9.0, 329.0], [10.0, 192.66666666666666], [11.0, 720.0], [12.0, 244.33333333333334], [13.0, 733.0], [14.0, 193.5], [15.0, 366.0], [16.0, 1052.0], [17.0, 562.0], [18.0, 371.5], [19.0, 25.333333333333332], [21.0, 298.5], [22.0, 327.6666666666667], [23.0, 297.0], [24.0, 39.75], [25.0, 518.25], [26.0, 172.25], [27.0, 214.4], [28.0, 560.0], [29.0, 1056.0], [30.0, 569.0], [31.0, 707.0], [33.0, 1058.0], [32.0, 924.0], [35.0, 723.0], [34.0, 725.0], [37.0, 716.0], [36.0, 712.0], [39.0, 542.0], [38.0, 1045.0], [40.0, 471.5], [41.0, 165.25], [43.0, 241.0], [42.0, 374.5], [45.0, 193.6], [44.0, 115.57142857142857], [47.0, 264.66666666666663], [46.0, 224.0], [49.0, 177.125], [48.0, 484.0], [51.0, 52.833333333333336], [50.0, 297.75], [53.0, 297.0], [52.0, 545.25], [55.0, 150.28571428571428], [54.0, 1039.0], [57.0, 706.0], [56.0, 1025.0], [59.0, 1028.0], [58.0, 1030.0], [60.0, 696.0], [63.0, 545.0], [62.0, 627.0], [65.0, 63.25], [66.0, 67.88888888888889], [64.0, 271.0], [67.0, 295.71428571428567], [68.0, 135.63636363636363], [71.0, 78.76923076923076], [70.0, 341.25], [69.0, 80.0], [72.0, 277.8571428571429], [74.0, 225.66666666666666], [75.0, 80.25], [73.0, 693.0], [79.0, 536.0], [77.0, 881.0], [76.0, 813.0], [83.0, 768.0], [81.0, 536.0], [80.0, 534.0], [86.0, 98.5], [85.0, 88.0], [87.0, 461.25], [84.0, 614.5], [90.0, 250.5], [89.0, 570.5], [88.0, 229.66666666666666], [91.0, 571.5], [92.0, 228.0], [95.0, 694.0], [94.0, 896.0], [93.0, 531.0], [99.0, 520.0], [98.0, 790.0], [96.0, 696.0], [103.0, 613.5], [101.0, 1012.0], [100.0, 517.0], [107.0, 491.5], [106.0, 495.0], [105.0, 274.66666666666663], [104.0, 231.66666666666666], [111.0, 89.0], [110.0, 194.85714285714286], [108.0, 115.66666666666667], [109.0, 349.3333333333333], [115.0, 92.0], [114.0, 308.5], [113.0, 102.0], [116.0, 440.6], [118.0, 280.8], [121.0, 418.1666666666667], [120.0, 232.14285714285717], [123.0, 521.0], [124.0, 350.75], [125.0, 283.0], [126.0, 675.0], [131.0, 303.0], [132.0, 448.25], [135.0, 502.0], [128.0, 487.0], [141.0, 43.0], [140.0, 413.0], [143.0, 504.0], [142.0, 675.0], [138.0, 677.0], [137.0, 526.0], [145.0, 249.0], [144.0, 57.0], [151.0, 482.0], [150.0, 499.0], [149.0, 583.5], [147.0, 512.0], [146.0, 501.0], [159.0, 118.0], [158.0, 302.5], [157.0, 453.0], [156.0, 339.5], [155.0, 467.5], [153.0, 677.0], [165.0, 397.25], [163.0, 376.25], [162.0, 450.0], [167.0, 490.0], [166.0, 839.0], [160.0, 667.0], [175.0, 493.0], [174.0, 479.0], [172.0, 658.5], [170.0, 945.0], [169.0, 493.0], [168.0, 492.0], [177.0, 359.0], [176.0, 353.5], [181.0, 483.0], [180.0, 144.0], [183.0, 476.0], [182.0, 484.0], [179.0, 475.0], [178.0, 676.0], [190.0, 326.0], [189.0, 328.0], [187.0, 665.0], [186.0, 472.0], [185.0, 673.0], [184.0, 820.0], [195.0, 240.6], [194.0, 111.0], [197.0, 298.5], [196.0, 143.0], [193.0, 235.5], [198.0, 458.0], [192.0, 424.0], [206.0, 794.0], [205.0, 304.0], [203.0, 414.6666666666667], [200.0, 363.6666666666667], [215.0, 380.0], [213.0, 298.0], [212.0, 307.5], [210.0, 297.0], [209.0, 300.5], [208.0, 314.0], [223.0, 391.66666666666663], [222.0, 125.66666666666667], [221.0, 554.5], [219.0, 475.0], [218.0, 654.0], [217.0, 553.5], [230.0, 172.8], [228.0, 253.33333333333334], [227.0, 152.0], [226.0, 216.0], [224.0, 73.0], [225.0, 268.0], [231.0, 232.0], [229.0, 161.0], [235.0, 193.0], [233.0, 255.33333333333334], [239.0, 169.0], [238.0, 231.5], [237.0, 232.0], [236.0, 237.0], [234.0, 299.0], [247.0, 175.0], [246.0, 248.0], [245.0, 205.66666666666666], [244.0, 167.0], [242.0, 313.75], [240.0, 267.6666666666667], [243.0, 286.0], [249.0, 212.25], [251.0, 146.0], [255.0, 176.66666666666666], [254.0, 524.5], [252.0, 282.0], [250.0, 286.0], [248.0, 528.5], [258.0, 142.625], [256.0, 196.5], [260.0, 173.25], [259.0, 163.0], [257.0, 169.66666666666669], [262.0, 245.5], [263.0, 216.14285714285714], [261.0, 340.5], [268.0, 155.0], [267.0, 180.57142857142858], [266.0, 210.5], [265.0, 256.0], [264.0, 212.0], [271.0, 114.66666666666666], [270.0, 400.8], [273.0, 345.57142857142856], [274.0, 207.66666666666669], [272.0, 212.0], [280.0, 138.33333333333334], [283.0, 228.0], [282.0, 206.0], [284.0, 213.0], [287.0, 235.0], [286.0, 184.0], [285.0, 408.75], [278.0, 200.0], [277.0, 232.6], [276.0, 102.33333333333333], [279.0, 159.4], [275.0, 370.0], [288.0, 189.5], [290.0, 116.0], [292.0, 202.71428571428572], [293.0, 270.0], [291.0, 214.5], [301.0, 120.0], [300.0, 115.0], [303.0, 185.0], [302.0, 220.25], [289.0, 212.0], [299.0, 306.0], [298.0, 212.00000000000003], [295.0, 253.0], [294.0, 439.5], [305.0, 166.0], [310.0, 278.3], [311.0, 280.5], [309.0, 286.6], [308.0, 165.33333333333334], [307.0, 203.5], [304.0, 421.0], [306.0, 152.5], [318.0, 164.0], [319.0, 436.3333333333333], [313.0, 279.2], [312.0, 333.0], [315.0, 269.5], [314.0, 242.0], [317.0, 496.5], [316.0, 239.25], [322.0, 225.2], [320.0, 260.0], [324.0, 272.6], [325.0, 408.0], [321.0, 189.14285714285714], [323.0, 222.33333333333331], [332.0, 290.3333333333333], [328.0, 233.66666666666669], [335.0, 371.0], [334.0, 432.0], [331.0, 348.6666666666667], [330.0, 414.5], [329.0, 146.0], [327.0, 292.75], [326.0, 460.5], [333.0, 176.0], [337.0, 457.0], [340.0, 292.5], [342.0, 595.5], [339.0, 140.0], [336.0, 230.5], [346.0, 326.3333333333333], [344.0, 293.0], [343.0, 523.5], [351.0, 583.5], [349.0, 223.66666666666666], [360.0, 517.5], [364.0, 214.71428571428572], [355.0, 582.0], [352.0, 416.0], [362.0, 272.4], [365.0, 275.5], [363.0, 243.33333333333331], [361.0, 279.0], [367.0, 184.0], [366.0, 274.4], [359.0, 420.0], [358.0, 402.0], [357.0, 581.0], [381.0, 437.5], [371.0, 162.0], [370.0, 287.5], [380.0, 388.0], [379.0, 325.0], [378.0, 410.0], [377.0, 308.0], [376.0, 159.0], [375.0, 273.75], [372.0, 312.5], [383.0, 368.85714285714283], [382.0, 367.0], [397.0, 310.3333333333333], [388.0, 359.1], [389.0, 199.0], [391.0, 291.0], [390.0, 246.33333333333334], [385.0, 525.5], [384.0, 403.1666666666667], [398.0, 224.75], [399.0, 536.0], [396.0, 504.0], [386.0, 542.0], [395.0, 194.75], [394.0, 371.0], [393.0, 173.0], [392.0, 177.0], [413.0, 310.0], [402.0, 362.0], [401.0, 241.0], [400.0, 363.5], [403.0, 299.0], [405.0, 273.0], [404.0, 216.0], [406.0, 522.5], [407.0, 199.0], [411.0, 187.0], [415.0, 272.4], [410.0, 189.0], [409.0, 371.0], [421.0, 379.0], [420.0, 186.0], [419.0, 353.5], [417.0, 194.0]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[212.89899999999997, 305.71600000000007]], "isOverall": false, "label": "Microservice-based client-Aggregated", "isController": false}, {"data": [[2.0, 3.0], [3.0, 3.6249999999999996], [4.0, 6.583333333333334], [5.0, 3.368421052631579], [6.0, 10.0], [7.0, 2.75], [8.0, 12.0], [9.0, 21.0], [10.0, 19.25], [11.0, 27.0], [12.0, 33.0], [13.0, 22.6], [14.0, 27.0], [15.0, 21.0], [16.0, 22.875], [17.0, 22.4], [18.0, 23.833333333333332], [19.0, 26.0], [20.0, 39.6], [21.0, 33.5], [22.0, 24.666666666666668], [23.0, 20.333333333333332], [24.0, 29.666666666666668], [25.0, 24.333333333333332], [26.0, 32.5], [27.0, 33.0], [28.0, 35.333333333333336], [29.0, 26.0], [30.0, 22.0], [31.0, 24.0], [33.0, 31.5], [34.0, 27.0], [35.0, 37.0], [37.0, 55.81818181818182], [36.0, 28.4], [39.0, 52.75], [38.0, 52.6], [41.0, 48.2], [40.0, 57.5], [43.0, 43.25], [42.0, 61.4], [45.0, 49.77777777777778], [44.0, 59.307692307692314], [46.0, 59.400000000000006], [47.0, 90.8], [49.0, 65.86666666666666], [48.0, 69.25], [51.0, 58.15384615384615], [50.0, 71.58333333333333], [53.0, 61.53846153846154], [52.0, 58.722222222222214], [55.0, 71.19047619047619], [54.0, 65.57894736842105], [57.0, 67.13636363636364], [56.0, 58.0], [59.0, 68.06666666666668], [58.0, 71.0], [61.0, 62.294117647058826], [60.0, 69.49999999999999], [63.0, 68.47619047619048], [62.0, 67.23529411764706], [67.0, 68.11764705882354], [66.0, 67.36842105263156], [65.0, 67.22222222222223], [64.0, 73.37499999999999], [71.0, 74.64285714285714], [70.0, 80.3125], [69.0, 68.94999999999999], [68.0, 75.05555555555556], [75.0, 78.47058823529412], [74.0, 71.55555555555554], [73.0, 67.89473684210527], [72.0, 74.70588235294117], [77.0, 78.58333333333334], [76.0, 80.5], [78.0, 71.35294117647061], [79.0, 96.0], [83.0, 85.5], [82.0, 107.0], [81.0, 95.85714285714286], [80.0, 97.6], [86.0, 78.33333333333333], [87.0, 103.0], [85.0, 123.5], [84.0, 135.66666666666666], [88.0, 70.6], [91.0, 43.333333333333336], [90.0, 47.5], [89.0, 65.89999999999999], [92.0, 82.0], [95.0, 71.0], [94.0, 155.0], [93.0, 132.66666666666666], [102.0, 97.0], [100.0, 94.0], [106.0, 110.50000000000001], [104.0, 87.0], [107.0, 101.0], [110.0, 103.5], [109.0, 117.0], [111.0, 92.0], [108.0, 107.0], [115.0, 92.5], [113.0, 105.4], [112.0, 109.5], [114.0, 144.0], [118.0, 96.0], [117.0, 96.2], [119.0, 118.0], [116.0, 91.0], [123.0, 93.5], [120.0, 103.5], [122.0, 138.0], [121.0, 115.0], [127.0, 111.66666666666666], [125.0, 134.83333333333334], [124.0, 109.0], [126.0, 150.0], [135.0, 110.5], [133.0, 116.8], [131.0, 105.0], [129.0, 110.33333333333333], [128.0, 117.5], [130.0, 104.0], [132.0, 81.0], [143.0, 113.0], [141.0, 117.0], [140.0, 109.0], [139.0, 114.66666666666667], [137.0, 117.0], [142.0, 141.0], [149.0, 122.0], [148.0, 111.8], [147.0, 88.71428571428571], [144.0, 126.0], [151.0, 112.0], [150.0, 122.25], [146.0, 112.0], [145.0, 163.0], [159.0, 130.66666666666666], [158.0, 111.0], [157.0, 139.6], [156.0, 113.0], [155.0, 138.0], [154.0, 125.4], [153.0, 127.5], [152.0, 126.25], [160.0, 140.0], [163.0, 146.0], [162.0, 137.0], [161.0, 130.0], [1.0, 10.75]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[67.29699999999997, 68.84700000000007]], "isOverall": false, "label": "Microservice-based client with caching-Aggregated", "isController": false}, {"data": [[3.0, 460.3333333333333], [4.0, 941.0], [7.0, 943.0], [8.0, 618.6666666666666], [9.0, 933.0], [10.0, 1169.0], [12.0, 464.0], [13.0, 461.0], [14.0, 463.0], [16.0, 935.0], [17.0, 694.0], [18.0, 460.0], [20.0, 536.0], [24.0, 513.75], [26.0, 452.0], [27.0, 686.0], [29.0, 685.0], [30.0, 850.0], [31.0, 1161.0], [33.0, 456.0], [35.0, 451.0], [34.0, 449.0], [38.0, 449.5], [40.0, 1007.3333333333334], [43.0, 1150.0], [42.0, 447.0], [44.0, 1160.0], [46.0, 440.0], [48.0, 558.5], [50.0, 765.6666666666666], [53.0, 436.0], [52.0, 443.0], [54.0, 436.0], [58.0, 675.5], [60.0, 553.5], [67.0, 671.0], [66.0, 662.0], [64.0, 561.5], [70.0, 434.3333333333333], [74.0, 515.3333333333334], [73.0, 914.0], [79.0, 427.0], [78.0, 665.5], [76.0, 670.0], [82.0, 903.0], [80.0, 552.5], [87.0, 905.0], [86.0, 669.5], [84.0, 745.6666666666666], [90.0, 747.0], [94.0, 546.5], [92.0, 554.0], [98.0, 664.0], [96.0, 668.0], [103.0, 292.4], [102.0, 132.0], [100.0, 665.6666666666666], [107.0, 326.5], [106.0, 246.5], [105.0, 452.5], [104.0, 382.71428571428567], [110.0, 343.66666666666663], [108.0, 54.0], [111.0, 432.0], [113.0, 230.0], [112.0, 247.0], [114.0, 662.3333333333334], [117.0, 505.0], [123.0, 336.0], [122.0, 311.0], [121.0, 486.0], [120.0, 509.0], [124.0, 297.1428571428571], [127.0, 266.8181818181818], [126.0, 277.45454545454544], [125.0, 199.66666666666666], [128.0, 184.42857142857144], [133.0, 272.2], [130.0, 485.8], [134.0, 326.75], [132.0, 385.0], [135.0, 231.0], [142.0, 209.36363636363637], [137.0, 425.8], [136.0, 370.6666666666667], [143.0, 259.4444444444444], [141.0, 275.7], [139.0, 274.6666666666667], [140.0, 371.3636363636364], [146.0, 292.6666666666667], [144.0, 340.1818181818182], [151.0, 210.0], [150.0, 452.8], [147.0, 581.3333333333334], [154.0, 447.75], [153.0, 193.0], [152.0, 379.8571428571429], [159.0, 164.66666666666666], [156.0, 261.0], [157.0, 127.0], [155.0, 318.5], [158.0, 649.0], [167.0, 491.75], [164.0, 646.5], [162.0, 642.0], [161.0, 419.0], [160.0, 650.0], [175.0, 169.8125], [174.0, 376.0], [173.0, 179.625], [172.0, 184.55555555555557], [171.0, 395.2], [169.0, 223.0], [168.0, 37.0], [170.0, 418.6666666666667], [176.0, 187.0303030303031], [177.0, 220.86666666666667], [178.0, 173.0], [179.0, 203.6], [183.0, 103.55555555555554], [182.0, 242.0], [181.0, 48.0], [180.0, 570.4], [187.0, 262.85714285714283], [191.0, 168.42857142857144], [188.0, 229.75], [184.0, 354.44444444444446], [185.0, 248.5], [190.0, 442.6], [189.0, 212.0], [186.0, 181.33333333333334], [196.0, 153.0], [197.0, 170.75], [194.0, 315.0], [192.0, 254.5], [202.0, 372.6666666666667], [201.0, 429.0], [200.0, 290.25], [207.0, 400.66666666666663], [204.0, 477.6666666666667], [203.0, 628.0], [212.0, 268.0], [214.0, 634.0], [213.0, 391.0], [210.0, 542.6666666666666], [222.0, 268.0], [221.0, 288.2], [220.0, 286.125], [219.0, 464.3333333333333], [217.0, 289.2857142857143], [218.0, 266.0], [216.0, 261.5], [224.0, 340.2], [228.0, 176.8181818181818], [226.0, 393.5], [225.0, 140.4], [230.0, 163.79999999999998], [227.0, 134.0], [229.0, 222.83333333333331], [231.0, 218.5], [232.0, 201.5], [239.0, 153.5], [237.0, 127.99999999999999], [238.0, 179.5], [236.0, 182.5], [235.0, 578.5], [234.0, 497.5], [240.0, 243.1818181818182], [242.0, 309.3333333333333], [244.0, 157.16666666666666], [241.0, 317.0], [246.0, 222.57142857142856], [243.0, 354.6666666666667], [245.0, 62.0], [247.0, 221.83333333333334], [248.0, 227.91666666666666], [249.0, 231.25], [250.0, 183.0], [252.0, 214.8], [251.0, 78.5], [255.0, 432.3333333333333], [253.0, 293.6666666666667], [256.0, 252.33333333333331], [258.0, 331.14285714285717], [259.0, 233.33333333333331], [269.0, 247.0], [271.0, 292.5], [270.0, 330.0], [257.0, 280.85714285714283], [261.0, 273.25], [260.0, 199.25], [265.0, 267.83333333333337], [267.0, 171.75], [266.0, 327.0], [264.0, 92.0], [263.0, 310.0], [262.0, 240.99999999999997], [274.0, 302.53846153846155], [273.0, 198.33333333333334], [272.0, 176.66666666666669], [280.0, 251.76923076923077], [277.0, 262.1111111111111], [276.0, 205.73333333333332], [281.0, 213.89999999999998], [283.0, 352.8333333333333], [282.0, 315.0], [279.0, 371.5625], [278.0, 333.20000000000005], [275.0, 244.18181818181816], [284.0, 201.75], [285.0, 311.83333333333337], [286.0, 178.0], [287.0, 287.0], [288.0, 125.0], [289.0, 159.99999999999997], [293.0, 414.0], [291.0, 360.85714285714283], [292.0, 433.3333333333333], [290.0, 284.8333333333333], [294.0, 253.0], [297.0, 294.8571428571429], [295.0, 246.5]], "isOverall": false, "label": "Monolithic-based client", "isController": false}, {"data": [[192.27300000000022, 311.1619999999998]], "isOverall": false, "label": "Monolithic-based client-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 421.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7416.666666666667, "minX": 1.66892328E12, "maxY": 572926.2333333333, "series": [{"data": [[1.66892328E12, 572926.2333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66892328E12, 7416.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66892328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 68.84700000000007, "minX": 1.66892328E12, "maxY": 311.1619999999998, "series": [{"data": [[1.66892328E12, 305.71600000000007]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66892328E12, 68.84700000000007]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66892328E12, 311.1619999999998]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66892328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 68.13200000000005, "minX": 1.66892328E12, "maxY": 309.9880000000002, "series": [{"data": [[1.66892328E12, 300.5959999999999]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66892328E12, 68.13200000000005]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66892328E12, 309.9880000000002]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66892328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.423000000000001, "minX": 1.66892328E12, "maxY": 16.297000000000015, "series": [{"data": [[1.66892328E12, 7.6450000000000085]], "isOverall": false, "label": "Microservice-based client", "isController": false}, {"data": [[1.66892328E12, 5.423000000000001]], "isOverall": false, "label": "Microservice-based client with caching", "isController": false}, {"data": [[1.66892328E12, 16.297000000000015]], "isOverall": false, "label": "Monolithic-based client", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66892328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.66892328E12, "maxY": 1169.0, "series": [{"data": [[1.66892328E12, 1169.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66892328E12, 575.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66892328E12, 1031.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66892328E12, 706.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66892328E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66892328E12, 131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66892328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 364.0, "maxY": 335.0, "series": [{"data": [[568.0, 84.0], [637.0, 132.0], [641.0, 335.0], [364.0, 223.0], [790.0, 75.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 790.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 364.0, "maxY": 335.0, "series": [{"data": [[568.0, 83.5], [637.0, 128.0], [641.0, 335.0], [364.0, 223.0], [790.0, 75.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 790.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66892328E12, "maxY": 50.0, "series": [{"data": [[1.66892328E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66892328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66892328E12, "maxY": 50.0, "series": [{"data": [[1.66892328E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66892328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66892328E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66892328E12, 16.666666666666668]], "isOverall": false, "label": "Monolithic-based client-success", "isController": false}, {"data": [[1.66892328E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client with caching-success", "isController": false}, {"data": [[1.66892328E12, 16.666666666666668]], "isOverall": false, "label": "Microservice-based client-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66892328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66892328E12, "maxY": 50.0, "series": [{"data": [[1.66892328E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66892328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

